
GraphicsDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003654  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037ec  080037ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080037ec  080037ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037ec  080037ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000070  08003868  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08003868  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4fd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000239f  00000000  00000000  0002f596  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  00031938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  00032820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ac6b  00000000  00000000  000335f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b921  00000000  00000000  0004e25b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dab7  00000000  00000000  00059b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004350  00000000  00000000  000e76b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003748 	.word	0x08003748

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003748 	.word	0x08003748

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <cpp_main>:

MatrixDriver matrix(64, 32, MatrixDriver::ScanType::SCAN_16, &htim3);

char buffer[1024];

extern "C" int cpp_main(void) {
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b087      	sub	sp, #28
 8000160:	af02      	add	r7, sp, #8

	uint32_t start = HAL_GetTick();
 8000162:	f000 fee5 	bl	8000f30 <HAL_GetTick>
 8000166:	6078      	str	r0, [r7, #4]

	//Setup some default colors for the matrix
	for (int row = 0; row < 32; row++) {
 8000168:	2300      	movs	r3, #0
 800016a:	60fb      	str	r3, [r7, #12]
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	2b1f      	cmp	r3, #31
 8000170:	dc4a      	bgt.n	8000208 <cpp_main+0xac>
		GPIOB->ODR = (uint32_t) (0x1 << row);
 8000172:	2201      	movs	r2, #1
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	409a      	lsls	r2, r3
 8000178:	4b32      	ldr	r3, [pc, #200]	; (8000244 <cpp_main+0xe8>)
 800017a:	60da      	str	r2, [r3, #12]
		for (int col = 0; col < 64; col++) {
 800017c:	2300      	movs	r3, #0
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	2b3f      	cmp	r3, #63	; 0x3f
 8000184:	dc3c      	bgt.n	8000200 <cpp_main+0xa4>
			matrix.SetPixel(col, row, (row + col) % 2 ? 255 : 0,
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	b2dc      	uxtb	r4, r3
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	b2dd      	uxtb	r5, r3
 800018e:	68fa      	ldr	r2, [r7, #12]
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	4413      	add	r3, r2
 8000194:	f003 0301 	and.w	r3, r3, #1
 8000198:	2b00      	cmp	r3, #0
 800019a:	d001      	beq.n	80001a0 <cpp_main+0x44>
 800019c:	26ff      	movs	r6, #255	; 0xff
 800019e:	e000      	b.n	80001a2 <cpp_main+0x46>
 80001a0:	2600      	movs	r6, #0
					(row + col) % 3 ? 255 : 0, (row + col) % 5 ? 255 : 0);
 80001a2:	68fa      	ldr	r2, [r7, #12]
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	18d1      	adds	r1, r2, r3
 80001a8:	4b27      	ldr	r3, [pc, #156]	; (8000248 <cpp_main+0xec>)
 80001aa:	fb83 3201 	smull	r3, r2, r3, r1
 80001ae:	17cb      	asrs	r3, r1, #31
 80001b0:	1ad2      	subs	r2, r2, r3
 80001b2:	4613      	mov	r3, r2
 80001b4:	005b      	lsls	r3, r3, #1
 80001b6:	4413      	add	r3, r2
 80001b8:	1aca      	subs	r2, r1, r3
			matrix.SetPixel(col, row, (row + col) % 2 ? 255 : 0,
 80001ba:	2a00      	cmp	r2, #0
 80001bc:	d001      	beq.n	80001c2 <cpp_main+0x66>
 80001be:	20ff      	movs	r0, #255	; 0xff
 80001c0:	e000      	b.n	80001c4 <cpp_main+0x68>
 80001c2:	2000      	movs	r0, #0
					(row + col) % 3 ? 255 : 0, (row + col) % 5 ? 255 : 0);
 80001c4:	68fa      	ldr	r2, [r7, #12]
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	18d1      	adds	r1, r2, r3
 80001ca:	4b20      	ldr	r3, [pc, #128]	; (800024c <cpp_main+0xf0>)
 80001cc:	fb83 2301 	smull	r2, r3, r3, r1
 80001d0:	105a      	asrs	r2, r3, #1
 80001d2:	17cb      	asrs	r3, r1, #31
 80001d4:	1ad2      	subs	r2, r2, r3
 80001d6:	4613      	mov	r3, r2
 80001d8:	009b      	lsls	r3, r3, #2
 80001da:	4413      	add	r3, r2
 80001dc:	1aca      	subs	r2, r1, r3
			matrix.SetPixel(col, row, (row + col) % 2 ? 255 : 0,
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d001      	beq.n	80001e6 <cpp_main+0x8a>
 80001e2:	23ff      	movs	r3, #255	; 0xff
 80001e4:	e000      	b.n	80001e8 <cpp_main+0x8c>
 80001e6:	2300      	movs	r3, #0
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	9000      	str	r0, [sp, #0]
 80001ec:	4633      	mov	r3, r6
 80001ee:	462a      	mov	r2, r5
 80001f0:	4621      	mov	r1, r4
 80001f2:	4817      	ldr	r0, [pc, #92]	; (8000250 <cpp_main+0xf4>)
 80001f4:	f000 fb4d 	bl	8000892 <_ZN12MatrixDriver8SetPixelEhhhhh>
		for (int col = 0; col < 64; col++) {
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60bb      	str	r3, [r7, #8]
 80001fe:	e7bf      	b.n	8000180 <cpp_main+0x24>
	for (int row = 0; row < 32; row++) {
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	3301      	adds	r3, #1
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	e7b1      	b.n	800016c <cpp_main+0x10>
		}
	}

	uint32_t duration = HAL_GetTick() - start;
 8000208:	f000 fe92 	bl	8000f30 <HAL_GetTick>
 800020c:	4602      	mov	r2, r0
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	1ad3      	subs	r3, r2, r3
 8000212:	603b      	str	r3, [r7, #0]

	sprintf(buffer, "Setup Duration: %lu\n", duration);
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	490f      	ldr	r1, [pc, #60]	; (8000254 <cpp_main+0xf8>)
 8000218:	480f      	ldr	r0, [pc, #60]	; (8000258 <cpp_main+0xfc>)
 800021a:	f002 ff39 	bl	8003090 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 500);
 800021e:	480e      	ldr	r0, [pc, #56]	; (8000258 <cpp_main+0xfc>)
 8000220:	f7ff ff94 	bl	800014c <strlen>
 8000224:	4603      	mov	r3, r0
 8000226:	b29a      	uxth	r2, r3
 8000228:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800022c:	490a      	ldr	r1, [pc, #40]	; (8000258 <cpp_main+0xfc>)
 800022e:	480b      	ldr	r0, [pc, #44]	; (800025c <cpp_main+0x100>)
 8000230:	f002 fc6b 	bl	8002b0a <HAL_UART_Transmit>

	matrix.SwapBuffer();
 8000234:	4806      	ldr	r0, [pc, #24]	; (8000250 <cpp_main+0xf4>)
 8000236:	f000 fc02 	bl	8000a3e <_ZN12MatrixDriver10SwapBufferEv>

	matrix.open();
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <cpp_main+0xf4>)
 800023c:	f000 fafa 	bl	8000834 <_ZN12MatrixDriver4openEv>

	while (1) {
 8000240:	e7fe      	b.n	8000240 <cpp_main+0xe4>
 8000242:	bf00      	nop
 8000244:	40010c00 	.word	0x40010c00
 8000248:	55555556 	.word	0x55555556
 800024c:	66666667 	.word	0x66666667
 8000250:	2000008c 	.word	0x2000008c
 8000254:	08003760 	.word	0x08003760
 8000258:	200000a4 	.word	0x200000a4
 800025c:	20000544 	.word	0x20000544

08000260 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af02      	add	r7, sp, #8
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d10c      	bne.n	800028a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000276:	4293      	cmp	r3, r2
 8000278:	d107      	bne.n	800028a <_Z41__static_initialization_and_destruction_0ii+0x2a>
MatrixDriver matrix(64, 32, MatrixDriver::ScanType::SCAN_16, &htim3);
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2300      	movs	r3, #0
 8000280:	2220      	movs	r2, #32
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000286:	f000 fa09 	bl	800069c <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	200004fc 	.word	0x200004fc
 8000298:	2000008c 	.word	0x2000008c

0800029c <_GLOBAL__sub_I_matrix>:
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
 80002a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002a4:	2001      	movs	r0, #1
 80002a6:	f7ff ffdb 	bl	8000260 <_Z41__static_initialization_and_destruction_0ii>
 80002aa:	bd80      	pop	{r7, pc}

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fde6 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f80d 	bl	80002d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f956 	bl	8000568 <MX_GPIO_Init>
  MX_DMA_Init();
 80002bc:	f000 f918 	bl	80004f0 <MX_DMA_Init>
  MX_SPI1_Init();
 80002c0:	f000 f842 	bl	8000348 <MX_SPI1_Init>
  MX_TIM3_Init();
 80002c4:	f000 f876 	bl	80003b4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80002c8:	f000 f8e8 	bl	800049c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 80002cc:	f7ff ff46 	bl	800015c <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <main+0x24>

080002d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b090      	sub	sp, #64	; 0x40
 80002d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d8:	f107 0318 	add.w	r3, r7, #24
 80002dc:	2228      	movs	r2, #40	; 0x28
 80002de:	2100      	movs	r1, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 fdd3 	bl	8002e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f4:	2302      	movs	r3, #2
 80002f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2310      	movs	r3, #16
 80002fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000300:	2300      	movs	r3, #0
 8000302:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0318 	add.w	r3, r7, #24
 8000308:	4618      	mov	r0, r3
 800030a:	f001 f8f5 	bl	80014f8 <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000314:	f000 f968 	bl	80005e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031c:	2300      	movs	r3, #0
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2100      	movs	r1, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f001 fb61 	bl	80019f8 <HAL_RCC_ClockConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033c:	f000 f954 	bl	80005e8 <Error_Handler>
  }
}
 8000340:	bf00      	nop
 8000342:	3740      	adds	r7, #64	; 0x40
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <MX_SPI1_Init+0x64>)
 800034e:	4a18      	ldr	r2, [pc, #96]	; (80003b0 <MX_SPI1_Init+0x68>)
 8000350:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000352:	4b16      	ldr	r3, [pc, #88]	; (80003ac <MX_SPI1_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_SPI1_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <MX_SPI1_Init+0x64>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_SPI1_Init+0x64>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <MX_SPI1_Init+0x64>)
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_SPI1_Init+0x64>)
 8000372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000376:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_SPI1_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <MX_SPI1_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_SPI1_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_SPI1_Init+0x64>)
 800038c:	2200      	movs	r2, #0
 800038e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_SPI1_Init+0x64>)
 8000392:	220a      	movs	r2, #10
 8000394:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_SPI1_Init+0x64>)
 8000398:	f001 fcca 	bl	8001d30 <HAL_SPI_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80003a2:	f000 f921 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000584 	.word	0x20000584
 80003b0:	40013000 	.word	0x40013000

080003b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08e      	sub	sp, #56	; 0x38
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c8:	f107 0320 	add.w	r3, r7, #32
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]
 80003e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003e4:	4b2b      	ldr	r3, [pc, #172]	; (8000494 <MX_TIM3_Init+0xe0>)
 80003e6:	4a2c      	ldr	r2, [pc, #176]	; (8000498 <MX_TIM3_Init+0xe4>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003ea:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <MX_TIM3_Init+0xe0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b28      	ldr	r3, [pc, #160]	; (8000494 <MX_TIM3_Init+0xe0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 80003f6:	4b27      	ldr	r3, [pc, #156]	; (8000494 <MX_TIM3_Init+0xe0>)
 80003f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fe:	4b25      	ldr	r3, [pc, #148]	; (8000494 <MX_TIM3_Init+0xe0>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b23      	ldr	r3, [pc, #140]	; (8000494 <MX_TIM3_Init+0xe0>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800040a:	4822      	ldr	r0, [pc, #136]	; (8000494 <MX_TIM3_Init+0xe0>)
 800040c:	f001 fd14 	bl	8001e38 <HAL_TIM_Base_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000416:	f000 f8e7 	bl	80005e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000424:	4619      	mov	r1, r3
 8000426:	481b      	ldr	r0, [pc, #108]	; (8000494 <MX_TIM3_Init+0xe0>)
 8000428:	f001 ff60 	bl	80022ec <HAL_TIM_ConfigClockSource>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000432:	f000 f8d9 	bl	80005e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000436:	4817      	ldr	r0, [pc, #92]	; (8000494 <MX_TIM3_Init+0xe0>)
 8000438:	f001 fda0 	bl	8001f7c <HAL_TIM_OC_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000442:	f000 f8d1 	bl	80005e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000446:	2300      	movs	r3, #0
 8000448:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044a:	2300      	movs	r3, #0
 800044c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800044e:	f107 0320 	add.w	r3, r7, #32
 8000452:	4619      	mov	r1, r3
 8000454:	480f      	ldr	r0, [pc, #60]	; (8000494 <MX_TIM3_Init+0xe0>)
 8000456:	f002 fa9b 	bl	8002990 <HAL_TIMEx_MasterConfigSynchronization>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000460:	f000 f8c2 	bl	80005e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000464:	2310      	movs	r3, #16
 8000466:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 256;
 8000468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800046c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	220c      	movs	r2, #12
 800047a:	4619      	mov	r1, r3
 800047c:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_TIM3_Init+0xe0>)
 800047e:	f001 fedd 	bl	800223c <HAL_TIM_OC_ConfigChannel>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000488:	f000 f8ae 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800048c:	bf00      	nop
 800048e:	3738      	adds	r7, #56	; 0x38
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	200004fc 	.word	0x200004fc
 8000498:	40000400 	.word	0x40000400

0800049c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <MX_USART1_UART_Init+0x50>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004d4:	f002 facc 	bl	8002a70 <HAL_UART_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004de:	f000 f883 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000544 	.word	0x20000544
 80004ec:	40013800 	.word	0x40013800

080004f0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel3
  */
static void MX_DMA_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <MX_DMA_Init+0x6c>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a18      	ldr	r2, [pc, #96]	; (800055c <MX_DMA_Init+0x6c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_DMA_Init+0x6c>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel3 on DMA1_Channel3 */
  hdma_memtomem_dma1_channel3.Instance = DMA1_Channel3;
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_DMA_Init+0x70>)
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <MX_DMA_Init+0x74>)
 8000512:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MX_DMA_Init+0x70>)
 8000516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800051a:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel3.Init.PeriphInc = DMA_PINC_ENABLE;
 800051c:	4b10      	ldr	r3, [pc, #64]	; (8000560 <MX_DMA_Init+0x70>)
 800051e:	2240      	movs	r2, #64	; 0x40
 8000520:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel3.Init.MemInc = DMA_MINC_DISABLE;
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_DMA_Init+0x70>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <MX_DMA_Init+0x70>)
 800052a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_DMA_Init+0x70>)
 8000532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000536:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel3.Init.Mode = DMA_NORMAL;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_DMA_Init+0x70>)
 800053a:	2200      	movs	r2, #0
 800053c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel3.Init.Priority = DMA_PRIORITY_LOW;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_DMA_Init+0x70>)
 8000540:	2200      	movs	r2, #0
 8000542:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel3) != HAL_OK)
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <MX_DMA_Init+0x70>)
 8000546:	f000 fe0b 	bl	8001160 <HAL_DMA_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_DMA_Init+0x64>
  {
    Error_Handler( );
 8000550:	f000 f84a 	bl	80005e8 <Error_Handler>
  }

}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	200004b8 	.word	0x200004b8
 8000564:	40020030 	.word	0x40020030

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0308 	add.w	r3, r7, #8
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_GPIO_Init+0x78>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <MX_GPIO_Init+0x78>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <MX_GPIO_Init+0x78>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_GPIO_Init+0x78>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <MX_GPIO_Init+0x78>)
 800059a:	f043 0308 	orr.w	r3, r3, #8
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_GPIO_Init+0x78>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0308 	and.w	r3, r3, #8
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_B1_Pin
 80005ac:	2200      	movs	r2, #0
 80005ae:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80005b2:	480c      	ldr	r0, [pc, #48]	; (80005e4 <MX_GPIO_Init+0x7c>)
 80005b4:	f000 ff88 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B0_Pin Matrix_B1_Pin
                           Matrix_CLK_Pin Matrix_LAT_Pin Matrix_OE_Pin Matrix_A_Pin
                           Matrix_B_Pin Matrix_C_Pin Matrix_D_Pin Matrix_E_Pin
                           Matrix_R1_Pin Matrix_G1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_B1_Pin
 80005b8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80005bc:	60bb      	str	r3, [r7, #8]
                          |Matrix_CLK_Pin|Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_A_Pin
                          |Matrix_B_Pin|Matrix_C_Pin|Matrix_D_Pin|Matrix_E_Pin
                          |Matrix_R1_Pin|Matrix_G1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2302      	movs	r3, #2
 80005c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	4619      	mov	r1, r3
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <MX_GPIO_Init+0x7c>)
 80005d2:	f000 fe1f 	bl	8001214 <HAL_GPIO_Init>

}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <HAL_TIM_OC_DelayElapsedCallback>:

static MatrixDriver *instance;

extern UART_HandleTypeDef huart1;

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) "TX\n", 3, 10);
 80005fc:	230a      	movs	r3, #10
 80005fe:	2203      	movs	r2, #3
 8000600:	4906      	ldr	r1, [pc, #24]	; (800061c <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8000604:	f002 fa81 	bl	8002b0a <HAL_UART_Transmit>

	//This will trigger DMA eventually
	instance->SendPlanePixel();
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fa29 	bl	8000a64 <_ZN12MatrixDriver14SendPlanePixelEv>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	08003778 	.word	0x08003778
 8000620:	20000544 	.word	0x20000544
 8000624:	200004a4 	.word	0x200004a4

08000628 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	//This will trigger clock pulse
	HAL_UART_Transmit(&huart1, (uint8_t *) "CLK\n", 4, 10);
 8000630:	230a      	movs	r3, #10
 8000632:	2204      	movs	r2, #4
 8000634:	4906      	ldr	r1, [pc, #24]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000638:	f002 fa67 	bl	8002b0a <HAL_UART_Transmit>

	instance->Clock();
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fa43 	bl	8000acc <_ZN12MatrixDriver5ClockEv>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	0800377c 	.word	0x0800377c
 8000654:	20000544 	.word	0x20000544
 8000658:	200004a4 	.word	0x200004a4

0800065c <_Z12BufferOffsethhhhh>:

uint16_t BufferOffset(uint8_t x, uint8_t y, uint8_t plane, uint8_t width, uint8_t planes) {
 800065c:	b490      	push	{r4, r7}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4604      	mov	r4, r0
 8000664:	4608      	mov	r0, r1
 8000666:	4611      	mov	r1, r2
 8000668:	461a      	mov	r2, r3
 800066a:	4623      	mov	r3, r4
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	4603      	mov	r3, r0
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	460b      	mov	r3, r1
 8000674:	717b      	strb	r3, [r7, #5]
 8000676:	4613      	mov	r3, r2
 8000678:	713b      	strb	r3, [r7, #4]
	//TODO: Take plane into account for offset
	return (y * width) + x;
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	b29b      	uxth	r3, r3
 800067e:	793a      	ldrb	r2, [r7, #4]
 8000680:	b292      	uxth	r2, r2
 8000682:	fb02 f303 	mul.w	r3, r2, r3
 8000686:	b29a      	uxth	r2, r3
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	b29b      	uxth	r3, r3
 800068c:	4413      	add	r3, r2
 800068e:	b29b      	uxth	r3, r3
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bc90      	pop	{r4, r7}
 8000698:	4770      	bx	lr
	...

0800069c <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef>:

MatrixDriver::MatrixDriver(uint8_t width, uint8_t height, ScanType scanType,
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b087      	sub	sp, #28
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	4608      	mov	r0, r1
 80006a6:	4611      	mov	r1, r2
 80006a8:	461a      	mov	r2, r3
 80006aa:	4603      	mov	r3, r0
 80006ac:	70fb      	strb	r3, [r7, #3]
 80006ae:	460b      	mov	r3, r1
 80006b0:	70bb      	strb	r3, [r7, #2]
 80006b2:	4613      	mov	r3, r2
 80006b4:	707b      	strb	r3, [r7, #1]
		TIM_HandleTypeDef *htim) {
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	829a      	strh	r2, [r3, #20]
	this->htim = htim;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6a3a      	ldr	r2, [r7, #32]
 80006c0:	601a      	str	r2, [r3, #0]

	this->width = width;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	78fa      	ldrb	r2, [r7, #3]
 80006c6:	711a      	strb	r2, [r3, #4]
	this->height = height;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	78ba      	ldrb	r2, [r7, #2]
 80006cc:	715a      	strb	r2, [r3, #5]
	this->scanType = scanType;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	787a      	ldrb	r2, [r7, #1]
 80006d2:	721a      	strb	r2, [r3, #8]
	this->elementPerPlanePixel = 1;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2201      	movs	r2, #1
 80006d8:	719a      	strb	r2, [r3, #6]
	this->planes = 1;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2201      	movs	r2, #1
 80006de:	71da      	strb	r2, [r3, #7]

	this->bufferSize = (width * (height / 2) * elementPerPlanePixel * planes);
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	78ba      	ldrb	r2, [r7, #2]
 80006e6:	0852      	lsrs	r2, r2, #1
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	b292      	uxth	r2, r2
 80006ec:	fb02 f303 	mul.w	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	7992      	ldrb	r2, [r2, #6]
 80006f6:	b292      	uxth	r2, r2
 80006f8:	fb02 f303 	mul.w	r3, r2, r3
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	79d2      	ldrb	r2, [r2, #7]
 8000702:	b292      	uxth	r2, r2
 8000704:	fb02 f303 	mul.w	r3, r2, r3
 8000708:	b29a      	uxth	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	815a      	strh	r2, [r3, #10]

	this->sendBufferA = true;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2201      	movs	r2, #1
 8000712:	725a      	strb	r2, [r3, #9]
	this->bufferA = new uint16_t[bufferSize];
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	895b      	ldrh	r3, [r3, #10]
 8000718:	4a44      	ldr	r2, [pc, #272]	; (800082c <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x190>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d801      	bhi.n	8000722 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x86>
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	e001      	b.n	8000726 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x8a>
 8000722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fb5a 	bl	8002de0 <_Znaj>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	60da      	str	r2, [r3, #12]
	this->bufferB = new uint16_t[bufferSize];
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	895b      	ldrh	r3, [r3, #10]
 8000738:	4a3c      	ldr	r2, [pc, #240]	; (800082c <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x190>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d801      	bhi.n	8000742 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xa6>
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	e001      	b.n	8000746 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xaa>
 8000742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fb4a 	bl	8002de0 <_Znaj>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	611a      	str	r2, [r3, #16]

	for (uint8_t x = 0; x < width; x++) {
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	7bfa      	ldrb	r2, [r7, #15]
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	429a      	cmp	r2, r3
 800075e:	d25d      	bcs.n	800081c <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x180>
		for (uint8_t y = 0; y < height / 2; y++) {
 8000760:	2300      	movs	r3, #0
 8000762:	73bb      	strb	r3, [r7, #14]
 8000764:	78bb      	ldrb	r3, [r7, #2]
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	7bba      	ldrb	r2, [r7, #14]
 800076c:	429a      	cmp	r2, r3
 800076e:	d251      	bcs.n	8000814 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x178>
			uint8_t previousRow = y == 0 ? (height / 2) - 1 : y;
 8000770:	7bbb      	ldrb	r3, [r7, #14]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d105      	bne.n	8000782 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xe6>
 8000776:	78bb      	ldrb	r3, [r7, #2]
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	b2db      	uxtb	r3, r3
 800077c:	3b01      	subs	r3, #1
 800077e:	b2db      	uxtb	r3, r3
 8000780:	e000      	b.n	8000784 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xe8>
 8000782:	7bbb      	ldrb	r3, [r7, #14]
 8000784:	733b      	strb	r3, [r7, #12]

			uint16_t rowLines =
					previousRow % 2 ? 0x0001 << A_SHIFT :
 8000786:	7b3b      	ldrb	r3, [r7, #12]
 8000788:	f003 0301 	and.w	r3, r3, #1
			uint16_t rowLines =
 800078c:	2b00      	cmp	r3, #0
 800078e:	d116      	bne.n	80007be <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x122>
					0 | previousRow % 4 ? 0x0001 << B_SHIFT :
 8000790:	7b3b      	ldrb	r3, [r7, #12]
 8000792:	f003 0303 	and.w	r3, r3, #3
			uint16_t rowLines =
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10f      	bne.n	80007ba <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x11e>
					0 | previousRow % 8 ? 0x0001 << C_SHIFT :
 800079a:	7b3b      	ldrb	r3, [r7, #12]
 800079c:	f003 0307 	and.w	r3, r3, #7
			uint16_t rowLines =
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x11a>
					0 | previousRow % 16 ? 0x0001 << D_SHIFT : 0;
 80007a4:	7b3b      	ldrb	r3, [r7, #12]
 80007a6:	f003 030f 	and.w	r3, r3, #15
			uint16_t rowLines =
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x116>
 80007ae:	2340      	movs	r3, #64	; 0x40
 80007b0:	e006      	b.n	80007c0 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x124>
 80007b2:	2300      	movs	r3, #0
 80007b4:	e004      	b.n	80007c0 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x124>
 80007b6:	2320      	movs	r3, #32
 80007b8:	e002      	b.n	80007c0 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x124>
 80007ba:	2310      	movs	r3, #16
 80007bc:	e000      	b.n	80007c0 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x124>
 80007be:	2308      	movs	r3, #8
 80007c0:	817b      	strh	r3, [r7, #10]

			for (uint8_t plane = 0; plane < planes; plane++) {
 80007c2:	2300      	movs	r3, #0
 80007c4:	737b      	strb	r3, [r7, #13]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	79db      	ldrb	r3, [r3, #7]
 80007ca:	7b7a      	ldrb	r2, [r7, #13]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d21d      	bcs.n	800080c <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x170>
				uint16_t offset = BufferOffset(x, y, plane, width, planes);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	79db      	ldrb	r3, [r3, #7]
 80007d4:	78fc      	ldrb	r4, [r7, #3]
 80007d6:	7b7a      	ldrb	r2, [r7, #13]
 80007d8:	7bb9      	ldrb	r1, [r7, #14]
 80007da:	7bf8      	ldrb	r0, [r7, #15]
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	4623      	mov	r3, r4
 80007e0:	f7ff ff3c 	bl	800065c <_Z12BufferOffsethhhhh>
 80007e4:	4603      	mov	r3, r0
 80007e6:	813b      	strh	r3, [r7, #8]

				bufferA[offset] = rowLines;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	893b      	ldrh	r3, [r7, #8]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	897a      	ldrh	r2, [r7, #10]
 80007f4:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = rowLines;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	691a      	ldr	r2, [r3, #16]
 80007fa:	893b      	ldrh	r3, [r7, #8]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	4413      	add	r3, r2
 8000800:	897a      	ldrh	r2, [r7, #10]
 8000802:	801a      	strh	r2, [r3, #0]
			for (uint8_t plane = 0; plane < planes; plane++) {
 8000804:	7b7b      	ldrb	r3, [r7, #13]
 8000806:	3301      	adds	r3, #1
 8000808:	737b      	strb	r3, [r7, #13]
 800080a:	e7dc      	b.n	80007c6 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x12a>
		for (uint8_t y = 0; y < height / 2; y++) {
 800080c:	7bbb      	ldrb	r3, [r7, #14]
 800080e:	3301      	adds	r3, #1
 8000810:	73bb      	strb	r3, [r7, #14]
 8000812:	e7a7      	b.n	8000764 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xc8>
	for (uint8_t x = 0; x < width; x++) {
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	3301      	adds	r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]
 800081a:	e79d      	b.n	8000758 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xbc>
			}
		}
	}

	instance = this;
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x194>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
}
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4618      	mov	r0, r3
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	3ffffffc 	.word	0x3ffffffc
 8000830:	200004a4 	.word	0x200004a4

08000834 <_ZN12MatrixDriver4openEv>:

void MatrixDriver::open() {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f042 0210 	orr.w	r2, r2, #16
 800084e:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(htim);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fb3f 	bl	8001ed8 <HAL_TIM_Base_Start_IT>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <_ZN12MatrixDriver9PlaneBitsEh>:

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 8000862:	b480      	push	{r7}
 8000864:	b085      	sub	sp, #20
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	460b      	mov	r3, r1
 800086c:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0x00;
 800086e:	2300      	movs	r3, #0
 8000870:	73fb      	strb	r3, [r7, #15]
//	if (value > 31) {
//		result |= 0x02;
//		value -= 31;
//	}

	if (value > 1) {
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d906      	bls.n	8000886 <_ZN12MatrixDriver9PlaneBitsEh+0x24>
		result |= 0x01;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
		value -= 1;
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	3b01      	subs	r3, #1
 8000884:	70fb      	strb	r3, [r7, #3]
	}

	return result;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <_ZN12MatrixDriver8SetPixelEhhhhh>:

void MatrixDriver::SetPixel(uint8_t x, uint8_t y, uint8_t r, uint8_t g,
		uint8_t b) {
 8000892:	b590      	push	{r4, r7, lr}
 8000894:	b08d      	sub	sp, #52	; 0x34
 8000896:	af02      	add	r7, sp, #8
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	4608      	mov	r0, r1
 800089c:	4611      	mov	r1, r2
 800089e:	461a      	mov	r2, r3
 80008a0:	4603      	mov	r3, r0
 80008a2:	70fb      	strb	r3, [r7, #3]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70bb      	strb	r3, [r7, #2]
 80008a8:	4613      	mov	r3, r2
 80008aa:	707b      	strb	r3, [r7, #1]
	uint8_t rShift, gShift, bShift;

	//Set data into the buffer we aren't sending at the moment
	uint16_t *buffer = sendBufferA ? bufferB : bufferA;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7a5b      	ldrb	r3, [r3, #9]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <_ZN12MatrixDriver8SetPixelEhhhhh+0x28>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	e001      	b.n	80008be <_ZN12MatrixDriver8SetPixelEhhhhh+0x2c>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	61bb      	str	r3, [r7, #24]

	if (y < this->height / 2) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	78ba      	ldrb	r2, [r7, #2]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d209      	bcs.n	80008e2 <_ZN12MatrixDriver8SetPixelEhhhhh+0x50>
		rShift = R0_SHIFT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		gShift = G0_SHIFT;
 80008d4:	2301      	movs	r3, #1
 80008d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bShift = B0_SHIFT;
 80008da:	2302      	movs	r3, #2
 80008dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80008e0:	e008      	b.n	80008f4 <_ZN12MatrixDriver8SetPixelEhhhhh+0x62>
	} else {
		rShift = R1_SHIFT;
 80008e2:	2308      	movs	r3, #8
 80008e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		gShift = G1_SHIFT;
 80008e8:	2309      	movs	r3, #9
 80008ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bShift = B1_SHIFT;
 80008ee:	230a      	movs	r3, #10
 80008f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	uint16_t pixelMask = (0x01 << rShift) | (0x01 << gShift) | (0x01 << bShift);
 80008f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008f8:	2201      	movs	r2, #1
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	b21a      	sxth	r2, r3
 8000900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000904:	2101      	movs	r1, #1
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	b21b      	sxth	r3, r3
 800090c:	4313      	orrs	r3, r2
 800090e:	b21a      	sxth	r2, r3
 8000910:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000914:	2101      	movs	r1, #1
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21b      	sxth	r3, r3
 8000920:	82fb      	strh	r3, [r7, #22]
	uint8_t rPlanes = PlaneBits(r);
 8000922:	787b      	ldrb	r3, [r7, #1]
 8000924:	4619      	mov	r1, r3
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ff9b 	bl	8000862 <_ZN12MatrixDriver9PlaneBitsEh>
 800092c:	4603      	mov	r3, r0
 800092e:	757b      	strb	r3, [r7, #21]
	uint8_t gPlanes = PlaneBits(g);
 8000930:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000934:	4619      	mov	r1, r3
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff ff93 	bl	8000862 <_ZN12MatrixDriver9PlaneBitsEh>
 800093c:	4603      	mov	r3, r0
 800093e:	753b      	strb	r3, [r7, #20]
	uint8_t bPlanes = PlaneBits(b);
 8000940:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000944:	4619      	mov	r1, r3
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ff8b 	bl	8000862 <_ZN12MatrixDriver9PlaneBitsEh>
 800094c:	4603      	mov	r3, r0
 800094e:	74fb      	strb	r3, [r7, #19]

	for (int plane = 0; plane < planes; plane++) {
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	79db      	ldrb	r3, [r3, #7]
 8000958:	461a      	mov	r2, r3
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	4293      	cmp	r3, r2
 800095e:	da6a      	bge.n	8000a36 <_ZN12MatrixDriver8SetPixelEhhhhh+0x1a4>
		uint16_t planePixelBits = (
				(rPlanes & 0x01 << plane) ? 0x01 << rShift : 0)
 8000960:	7d7a      	ldrb	r2, [r7, #21]
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	fa42 f303 	asr.w	r3, r2, r3
 8000968:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & 0x01 << plane) ? 0x01 << gShift : 0)
 800096c:	2b00      	cmp	r3, #0
 800096e:	d006      	beq.n	800097e <_ZN12MatrixDriver8SetPixelEhhhhh+0xec>
				(rPlanes & 0x01 << plane) ? 0x01 << rShift : 0)
 8000970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000974:	2201      	movs	r2, #1
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
				| ((gPlanes & 0x01 << plane) ? 0x01 << gShift : 0)
 800097a:	b21a      	sxth	r2, r3
 800097c:	e000      	b.n	8000980 <_ZN12MatrixDriver8SetPixelEhhhhh+0xee>
 800097e:	2200      	movs	r2, #0
 8000980:	7d39      	ldrb	r1, [r7, #20]
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	fa41 f303 	asr.w	r3, r1, r3
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <_ZN12MatrixDriver8SetPixelEhhhhh+0x10c>
 8000990:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	b21b      	sxth	r3, r3
 800099c:	e000      	b.n	80009a0 <_ZN12MatrixDriver8SetPixelEhhhhh+0x10e>
 800099e:	2300      	movs	r3, #0
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b21a      	sxth	r2, r3
				| ((bPlanes & 0x01 << plane) ? 0x01 << bShift : 0);
 80009a4:	7cf9      	ldrb	r1, [r7, #19]
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	fa41 f303 	asr.w	r3, r1, r3
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d006      	beq.n	80009c2 <_ZN12MatrixDriver8SetPixelEhhhhh+0x130>
 80009b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009b8:	2101      	movs	r1, #1
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	b21b      	sxth	r3, r3
 80009c0:	e000      	b.n	80009c4 <_ZN12MatrixDriver8SetPixelEhhhhh+0x132>
 80009c2:	2300      	movs	r3, #0
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = (
 80009c8:	823b      	strh	r3, [r7, #16]

		uint16_t offset = BufferOffset(x, y, plane, width, planes);
 80009ca:	6a3b      	ldr	r3, [r7, #32]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	791c      	ldrb	r4, [r3, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	79db      	ldrb	r3, [r3, #7]
 80009d6:	78b9      	ldrb	r1, [r7, #2]
 80009d8:	78f8      	ldrb	r0, [r7, #3]
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	4623      	mov	r3, r4
 80009de:	f7ff fe3d 	bl	800065c <_Z12BufferOffsethhhhh>
 80009e2:	4603      	mov	r3, r0
 80009e4:	81fb      	strh	r3, [r7, #14]

		for (int element = 0; element < elementPerPlanePixel; element++) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	799b      	ldrb	r3, [r3, #6]
 80009ee:	461a      	mov	r2, r3
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	4293      	cmp	r3, r2
 80009f4:	da1b      	bge.n	8000a2e <_ZN12MatrixDriver8SetPixelEhhhhh+0x19c>
			buffer[offset + element] = (buffer[offset] & ~pixelMask)
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	4413      	add	r3, r2
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a06:	43db      	mvns	r3, r3
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	b21a      	sxth	r2, r3
					| planePixelBits;
 8000a0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b219      	sxth	r1, r3
			buffer[offset + element] = (buffer[offset] & ~pixelMask)
 8000a16:	89fa      	ldrh	r2, [r7, #14]
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4413      	add	r3, r2
					| planePixelBits;
 8000a22:	b28a      	uxth	r2, r1
			buffer[offset + element] = (buffer[offset] & ~pixelMask)
 8000a24:	801a      	strh	r2, [r3, #0]
		for (int element = 0; element < elementPerPlanePixel; element++) {
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	e7dd      	b.n	80009ea <_ZN12MatrixDriver8SetPixelEhhhhh+0x158>
	for (int plane = 0; plane < planes; plane++) {
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	3301      	adds	r3, #1
 8000a32:	623b      	str	r3, [r7, #32]
 8000a34:	e78e      	b.n	8000954 <_ZN12MatrixDriver8SetPixelEhhhhh+0xc2>
		}
	}
}
 8000a36:	bf00      	nop
 8000a38:	372c      	adds	r7, #44	; 0x2c
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd90      	pop	{r4, r7, pc}

08000a3e <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	sendBufferA = !sendBufferA;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7a5b      	ldrb	r3, [r3, #9]
 8000a4a:	f083 0301 	eor.w	r3, r3, #1
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	725a      	strb	r2, [r3, #9]

	nextOffset = 0;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	829a      	strh	r2, [r3, #20]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <_ZN12MatrixDriver14SendPlanePixelEv>:

void MatrixDriver::SendPlanePixel() {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint16_t *buffer = sendBufferA ? bufferA : bufferB;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7a5b      	ldrb	r3, [r3, #9]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <_ZN12MatrixDriver14SendPlanePixelEv+0x16>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	e001      	b.n	8000a7e <_ZN12MatrixDriver14SendPlanePixelEv+0x1a>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	60fb      	str	r3, [r7, #12]

	if((nextOffset % (width * planes)) == 0) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	8a9b      	ldrh	r3, [r3, #20]
 8000a84:	461a      	mov	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	791b      	ldrb	r3, [r3, #4]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	79db      	ldrb	r3, [r3, #7]
 8000a90:	fb03 f301 	mul.w	r3, r3, r1
 8000a94:	fb92 f1f3 	sdiv	r1, r2, r3
 8000a98:	fb03 f301 	mul.w	r3, r3, r1
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <_ZN12MatrixDriver14SendPlanePixelEv+0x44>
		//Latch the previous row
		Latch();
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 f822 	bl	8000aec <_ZN12MatrixDriver5LatchEv>
	}

	GPIOB->ODR = (uint32_t) buffer[nextOffset++];
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	8a9b      	ldrh	r3, [r3, #20]
 8000aac:	1c5a      	adds	r2, r3, #1
 8000aae:	b291      	uxth	r1, r2
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	8291      	strh	r1, [r2, #20]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	4413      	add	r3, r2
 8000aba:	881a      	ldrh	r2, [r3, #0]
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <_ZN12MatrixDriver14SendPlanePixelEv+0x64>)
 8000abe:	60da      	str	r2, [r3, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <_ZN12MatrixDriver5ClockEv>:

void MatrixDriver::Clock() {
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	GPIOB->BSRR = (0x0001 << CLK_SHIFT);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <_ZN12MatrixDriver5ClockEv+0x1c>)
 8000ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ada:	611a      	str	r2, [r3, #16]
	//Clock will be cleared on next output
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40010c00 	.word	0x40010c00

08000aec <_ZN12MatrixDriver5LatchEv>:

void MatrixDriver::Latch() {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) "LAT\n", 4, 10);
 8000af4:	230a      	movs	r3, #10
 8000af6:	2204      	movs	r2, #4
 8000af8:	490b      	ldr	r1, [pc, #44]	; (8000b28 <_ZN12MatrixDriver5LatchEv+0x3c>)
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <_ZN12MatrixDriver5LatchEv+0x40>)
 8000afc:	f002 f805 	bl	8002b0a <HAL_UART_Transmit>

	//Disable output
	GPIOB->BSRR = (0x0001 << OE_SHIFT);
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <_ZN12MatrixDriver5LatchEv+0x44>)
 8000b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b06:	611a      	str	r2, [r3, #16]
	//Latch output
	GPIOB->BSRR = (0x0001 << LAT_SHIFT);
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <_ZN12MatrixDriver5LatchEv+0x44>)
 8000b0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b0e:	611a      	str	r2, [r3, #16]
	//Reset Latch
	GPIOB->BSRR = (0x0001 << (LAT_SHIFT + 16));
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <_ZN12MatrixDriver5LatchEv+0x44>)
 8000b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b16:	611a      	str	r2, [r3, #16]
	//Reset ~OE
	GPIOB->BSRR = (0x0001 << (OE_SHIFT + 16));
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <_ZN12MatrixDriver5LatchEv+0x44>)
 8000b1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b1e:	611a      	str	r2, [r3, #16]
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	08003784 	.word	0x08003784
 8000b2c:	20000544 	.word	0x20000544
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6193      	str	r3, [r2, #24]
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	61d3      	str	r3, [r2, #28]
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_MspInit+0x60>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_MspInit+0x60>)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010000 	.word	0x40010000

08000b98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <HAL_SPI_MspInit+0x88>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d12f      	bne.n	8000c18 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000be8:	23a0      	movs	r3, #160	; 0xa0
 8000bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <HAL_SPI_MspInit+0x90>)
 8000bfc:	f000 fb0a 	bl	8001214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c00:	2340      	movs	r3, #64	; 0x40
 8000c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_SPI_MspInit+0x90>)
 8000c14:	f000 fafe 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40013000 	.word	0x40013000
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010800 	.word	0x40010800

08000c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_TIM_Base_MspInit+0x44>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d113      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_TIM_Base_MspInit+0x48>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <HAL_TIM_Base_MspInit+0x48>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_TIM_Base_MspInit+0x48>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	201d      	movs	r0, #29
 8000c5c:	f000 fa49 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c60:	201d      	movs	r0, #29
 8000c62:	f000 fa62 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40000400 	.word	0x40000400
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d131      	bne.n	8000cfc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480b      	ldr	r0, [pc, #44]	; (8000d0c <HAL_UART_MspInit+0x94>)
 8000cde:	f000 fa99 	bl	8001214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_UART_MspInit+0x94>)
 8000cf8:	f000 fa8c 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40013800 	.word	0x40013800
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <HardFault_Handler+0x4>

08000d22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <MemManage_Handler+0x4>

08000d28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <BusFault_Handler+0x4>

08000d2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <UsageFault_Handler+0x4>

08000d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f8d6 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM3_IRQHandler+0x10>)
 8000d6a:	f001 f95f 	bl	800202c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200004fc 	.word	0x200004fc

08000d78 <_getpid>:
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <_kill>:
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
 8000d90:	f002 f84a 	bl	8002e28 <__errno>
 8000d94:	4602      	mov	r2, r0
 8000d96:	2316      	movs	r3, #22
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_exit>:
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffe7 	bl	8000d86 <_kill>
 8000db8:	e7fe      	b.n	8000db8 <_exit+0x12>
	...

08000dbc <_sbrk>:
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
 8000dec:	f002 f81c 	bl	8002e28 <__errno>
 8000df0:	4602      	mov	r2, r0
 8000df2:	230c      	movs	r3, #12
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20005000 	.word	0x20005000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	200004a8 	.word	0x200004a8
 8000e24:	200005e8 	.word	0x200005e8

08000e28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <Reset_Handler>:
 8000e34:	2100      	movs	r1, #0
 8000e36:	e003      	b.n	8000e40 <LoopCopyDataInit>

08000e38 <CopyDataInit>:
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <LoopFillZerobss+0x14>)
 8000e3a:	585b      	ldr	r3, [r3, r1]
 8000e3c:	5043      	str	r3, [r0, r1]
 8000e3e:	3104      	adds	r1, #4

08000e40 <LoopCopyDataInit>:
 8000e40:	480a      	ldr	r0, [pc, #40]	; (8000e6c <LoopFillZerobss+0x18>)
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <LoopFillZerobss+0x1c>)
 8000e44:	1842      	adds	r2, r0, r1
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d3f6      	bcc.n	8000e38 <CopyDataInit>
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopFillZerobss+0x20>)
 8000e4c:	e002      	b.n	8000e54 <LoopFillZerobss>

08000e4e <FillZerobss>:
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f842 3b04 	str.w	r3, [r2], #4

08000e54 <LoopFillZerobss>:
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <LoopFillZerobss+0x24>)
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d3f9      	bcc.n	8000e4e <FillZerobss>
 8000e5a:	f7ff ffe5 	bl	8000e28 <SystemInit>
 8000e5e:	f001 ffe9 	bl	8002e34 <__libc_init_array>
 8000e62:	f7ff fa23 	bl	80002ac <main>
 8000e66:	4770      	bx	lr
 8000e68:	080037f8 	.word	0x080037f8
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000070 	.word	0x20000070
 8000e74:	20000070 	.word	0x20000070
 8000e78:	200005e4 	.word	0x200005e4

08000e7c <ADC1_2_IRQHandler>:
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_Init+0x28>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_Init+0x28>)
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f923 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fe4a 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f93b 	bl	8001146 <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee8:	f000 f903 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x1c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x20>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <HAL_IncTick+0x20>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	200005dc 	.word	0x200005dc

08000f30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <HAL_GetTick+0x10>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	200005dc 	.word	0x200005dc

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4906      	ldr	r1, [pc, #24]	; (8000fdc <__NVIC_EnableIRQ+0x34>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010bc:	f7ff ff90 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff2d 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff42 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff90 	bl	8001034 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5f 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff35 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e043      	b.n	80011fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HAL_DMA_Init+0xa8>)
 800117e:	4413      	add	r3, r2
 8001180:	4a22      	ldr	r2, [pc, #136]	; (800120c <HAL_DMA_Init+0xac>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	009a      	lsls	r2, r3, #2
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <HAL_DMA_Init+0xb0>)
 8001192:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2202      	movs	r2, #2
 8001198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	bffdfff8 	.word	0xbffdfff8
 800120c:	cccccccd 	.word	0xcccccccd
 8001210:	40020000 	.word	0x40020000

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b08b      	sub	sp, #44	; 0x2c
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	e127      	b.n	8001478 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001228:	2201      	movs	r2, #1
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 8116 	bne.w	8001472 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b12      	cmp	r3, #18
 800124c:	d034      	beq.n	80012b8 <HAL_GPIO_Init+0xa4>
 800124e:	2b12      	cmp	r3, #18
 8001250:	d80d      	bhi.n	800126e <HAL_GPIO_Init+0x5a>
 8001252:	2b02      	cmp	r3, #2
 8001254:	d02b      	beq.n	80012ae <HAL_GPIO_Init+0x9a>
 8001256:	2b02      	cmp	r3, #2
 8001258:	d804      	bhi.n	8001264 <HAL_GPIO_Init+0x50>
 800125a:	2b00      	cmp	r3, #0
 800125c:	d031      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
 800125e:	2b01      	cmp	r3, #1
 8001260:	d01c      	beq.n	800129c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001262:	e048      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001264:	2b03      	cmp	r3, #3
 8001266:	d043      	beq.n	80012f0 <HAL_GPIO_Init+0xdc>
 8001268:	2b11      	cmp	r3, #17
 800126a:	d01b      	beq.n	80012a4 <HAL_GPIO_Init+0x90>
          break;
 800126c:	e043      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800126e:	4a89      	ldr	r2, [pc, #548]	; (8001494 <HAL_GPIO_Init+0x280>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d026      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
 8001274:	4a87      	ldr	r2, [pc, #540]	; (8001494 <HAL_GPIO_Init+0x280>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d806      	bhi.n	8001288 <HAL_GPIO_Init+0x74>
 800127a:	4a87      	ldr	r2, [pc, #540]	; (8001498 <HAL_GPIO_Init+0x284>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d020      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
 8001280:	4a86      	ldr	r2, [pc, #536]	; (800149c <HAL_GPIO_Init+0x288>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d01d      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
          break;
 8001286:	e036      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001288:	4a85      	ldr	r2, [pc, #532]	; (80014a0 <HAL_GPIO_Init+0x28c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d019      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
 800128e:	4a85      	ldr	r2, [pc, #532]	; (80014a4 <HAL_GPIO_Init+0x290>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d016      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
 8001294:	4a84      	ldr	r2, [pc, #528]	; (80014a8 <HAL_GPIO_Init+0x294>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
          break;
 800129a:	e02c      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	623b      	str	r3, [r7, #32]
          break;
 80012a2:	e028      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	3304      	adds	r3, #4
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e023      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	3308      	adds	r3, #8
 80012b4:	623b      	str	r3, [r7, #32]
          break;
 80012b6:	e01e      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	330c      	adds	r3, #12
 80012be:	623b      	str	r3, [r7, #32]
          break;
 80012c0:	e019      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ca:	2304      	movs	r3, #4
 80012cc:	623b      	str	r3, [r7, #32]
          break;
 80012ce:	e012      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d105      	bne.n	80012e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d8:	2308      	movs	r3, #8
 80012da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	611a      	str	r2, [r3, #16]
          break;
 80012e2:	e008      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e4:	2308      	movs	r3, #8
 80012e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	615a      	str	r2, [r3, #20]
          break;
 80012ee:	e002      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
          break;
 80012f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2bff      	cmp	r3, #255	; 0xff
 80012fa:	d801      	bhi.n	8001300 <HAL_GPIO_Init+0xec>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	e001      	b.n	8001304 <HAL_GPIO_Init+0xf0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3304      	adds	r3, #4
 8001304:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2bff      	cmp	r3, #255	; 0xff
 800130a:	d802      	bhi.n	8001312 <HAL_GPIO_Init+0xfe>
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	e002      	b.n	8001318 <HAL_GPIO_Init+0x104>
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	3b08      	subs	r3, #8
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	210f      	movs	r1, #15
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	401a      	ands	r2, r3
 800132a:	6a39      	ldr	r1, [r7, #32]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	431a      	orrs	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 8096 	beq.w	8001472 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001346:	4b59      	ldr	r3, [pc, #356]	; (80014ac <HAL_GPIO_Init+0x298>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a58      	ldr	r2, [pc, #352]	; (80014ac <HAL_GPIO_Init+0x298>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b56      	ldr	r3, [pc, #344]	; (80014ac <HAL_GPIO_Init+0x298>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800135e:	4a54      	ldr	r2, [pc, #336]	; (80014b0 <HAL_GPIO_Init+0x29c>)
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4013      	ands	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x2a0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x19e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x2a4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x19a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a49      	ldr	r2, [pc, #292]	; (80014bc <HAL_GPIO_Init+0x2a8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x196>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a48      	ldr	r2, [pc, #288]	; (80014c0 <HAL_GPIO_Init+0x2ac>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x192>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x1a0>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x1a0>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x1a0>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x1a0>
 80013b2:	2300      	movs	r3, #0
 80013b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013c4:	493a      	ldr	r1, [pc, #232]	; (80014b0 <HAL_GPIO_Init+0x29c>)
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013de:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4938      	ldr	r1, [pc, #224]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
 80013ea:	e006      	b.n	80013fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ec:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4933      	ldr	r1, [pc, #204]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	492e      	ldr	r1, [pc, #184]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
 8001412:	e006      	b.n	8001422 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	43db      	mvns	r3, r3
 800141c:	4929      	ldr	r1, [pc, #164]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 800141e:	4013      	ands	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	4924      	ldr	r1, [pc, #144]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	608b      	str	r3, [r1, #8]
 800143a:	e006      	b.n	800144a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	43db      	mvns	r3, r3
 8001444:	491f      	ldr	r1, [pc, #124]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001446:	4013      	ands	r3, r2
 8001448:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	491a      	ldr	r1, [pc, #104]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	60cb      	str	r3, [r1, #12]
 8001462:	e006      	b.n	8001472 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	43db      	mvns	r3, r3
 800146c:	4915      	ldr	r1, [pc, #84]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 800146e:	4013      	ands	r3, r2
 8001470:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	3301      	adds	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	fa22 f303 	lsr.w	r3, r2, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	f47f aed0 	bne.w	8001228 <HAL_GPIO_Init+0x14>
  }
}
 8001488:	bf00      	nop
 800148a:	372c      	adds	r7, #44	; 0x2c
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	10210000 	.word	0x10210000
 8001498:	10110000 	.word	0x10110000
 800149c:	10120000 	.word	0x10120000
 80014a0:	10310000 	.word	0x10310000
 80014a4:	10320000 	.word	0x10320000
 80014a8:	10220000 	.word	0x10220000
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010000 	.word	0x40010000
 80014b4:	40010800 	.word	0x40010800
 80014b8:	40010c00 	.word	0x40010c00
 80014bc:	40011000 	.word	0x40011000
 80014c0:	40011400 	.word	0x40011400
 80014c4:	40010400 	.word	0x40010400

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	611a      	str	r2, [r3, #16]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e26c      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8087 	beq.w	8001626 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001518:	4b92      	ldr	r3, [pc, #584]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b04      	cmp	r3, #4
 8001522:	d00c      	beq.n	800153e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001524:	4b8f      	ldr	r3, [pc, #572]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b08      	cmp	r3, #8
 800152e:	d112      	bne.n	8001556 <HAL_RCC_OscConfig+0x5e>
 8001530:	4b8c      	ldr	r3, [pc, #560]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153c:	d10b      	bne.n	8001556 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153e:	4b89      	ldr	r3, [pc, #548]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d06c      	beq.n	8001624 <HAL_RCC_OscConfig+0x12c>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d168      	bne.n	8001624 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e246      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x76>
 8001560:	4b80      	ldr	r3, [pc, #512]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a7f      	ldr	r2, [pc, #508]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e02e      	b.n	80015cc <HAL_RCC_OscConfig+0xd4>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x98>
 8001576:	4b7b      	ldr	r3, [pc, #492]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a7a      	ldr	r2, [pc, #488]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 800157c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b78      	ldr	r3, [pc, #480]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a77      	ldr	r2, [pc, #476]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0xd4>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0xbc>
 800159a:	4b72      	ldr	r3, [pc, #456]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a71      	ldr	r2, [pc, #452]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6e      	ldr	r2, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0xd4>
 80015b4:	4b6b      	ldr	r3, [pc, #428]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a6a      	ldr	r2, [pc, #424]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b68      	ldr	r3, [pc, #416]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a67      	ldr	r2, [pc, #412]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fcac 	bl	8000f30 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fca8 	bl	8000f30 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e1fa      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0xe4>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc98 	bl	8000f30 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fc94 	bl	8000f30 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e1e6      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x10c>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d063      	beq.n	80016fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001632:	4b4c      	ldr	r3, [pc, #304]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800163e:	4b49      	ldr	r3, [pc, #292]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b08      	cmp	r3, #8
 8001648:	d11c      	bne.n	8001684 <HAL_RCC_OscConfig+0x18c>
 800164a:	4b46      	ldr	r3, [pc, #280]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d116      	bne.n	8001684 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001656:	4b43      	ldr	r3, [pc, #268]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_RCC_OscConfig+0x176>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d001      	beq.n	800166e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e1ba      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4939      	ldr	r1, [pc, #228]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	e03a      	b.n	80016fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168c:	4b36      	ldr	r3, [pc, #216]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff fc4d 	bl	8000f30 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff fc49 	bl	8000f30 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e19b      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4927      	ldr	r1, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e015      	b.n	80016fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fc2c 	bl	8000f30 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fc28 	bl	8000f30 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e17a      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d03a      	beq.n	800177c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d019      	beq.n	8001742 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_RCC_OscConfig+0x274>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff fc0c 	bl	8000f30 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff fc08 	bl	8000f30 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e15a      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_RCC_OscConfig+0x26c>)
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800173a:	2001      	movs	r0, #1
 800173c:	f000 fada 	bl	8001cf4 <RCC_Delay>
 8001740:	e01c      	b.n	800177c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_RCC_OscConfig+0x274>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001748:	f7ff fbf2 	bl	8000f30 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174e:	e00f      	b.n	8001770 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001750:	f7ff fbee 	bl	8000f30 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d908      	bls.n	8001770 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e140      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	42420000 	.word	0x42420000
 800176c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001770:	4b9e      	ldr	r3, [pc, #632]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1e9      	bne.n	8001750 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80a6 	beq.w	80018d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178e:	4b97      	ldr	r3, [pc, #604]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10d      	bne.n	80017b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	4b94      	ldr	r3, [pc, #592]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a93      	ldr	r2, [pc, #588]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	61d3      	str	r3, [r2, #28]
 80017a6:	4b91      	ldr	r3, [pc, #580]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b2:	2301      	movs	r3, #1
 80017b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b6:	4b8e      	ldr	r3, [pc, #568]	; (80019f0 <HAL_RCC_OscConfig+0x4f8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d118      	bne.n	80017f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c2:	4b8b      	ldr	r3, [pc, #556]	; (80019f0 <HAL_RCC_OscConfig+0x4f8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a8a      	ldr	r2, [pc, #552]	; (80019f0 <HAL_RCC_OscConfig+0x4f8>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fbaf 	bl	8000f30 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d6:	f7ff fbab 	bl	8000f30 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b64      	cmp	r3, #100	; 0x64
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0fd      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	4b81      	ldr	r3, [pc, #516]	; (80019f0 <HAL_RCC_OscConfig+0x4f8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x312>
 80017fc:	4b7b      	ldr	r3, [pc, #492]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4a7a      	ldr	r2, [pc, #488]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6213      	str	r3, [r2, #32]
 8001808:	e02d      	b.n	8001866 <HAL_RCC_OscConfig+0x36e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x334>
 8001812:	4b76      	ldr	r3, [pc, #472]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a75      	ldr	r2, [pc, #468]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6213      	str	r3, [r2, #32]
 800181e:	4b73      	ldr	r3, [pc, #460]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a72      	ldr	r2, [pc, #456]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	e01c      	b.n	8001866 <HAL_RCC_OscConfig+0x36e>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d10c      	bne.n	800184e <HAL_RCC_OscConfig+0x356>
 8001834:	4b6d      	ldr	r3, [pc, #436]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4a6c      	ldr	r2, [pc, #432]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	6213      	str	r3, [r2, #32]
 8001840:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a69      	ldr	r2, [pc, #420]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	e00b      	b.n	8001866 <HAL_RCC_OscConfig+0x36e>
 800184e:	4b67      	ldr	r3, [pc, #412]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a66      	ldr	r2, [pc, #408]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	4b64      	ldr	r3, [pc, #400]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a63      	ldr	r2, [pc, #396]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d015      	beq.n	800189a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186e:	f7ff fb5f 	bl	8000f30 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001874:	e00a      	b.n	800188c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001876:	f7ff fb5b 	bl	8000f30 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f241 3288 	movw	r2, #5000	; 0x1388
 8001884:	4293      	cmp	r3, r2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e0ab      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188c:	4b57      	ldr	r3, [pc, #348]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0ee      	beq.n	8001876 <HAL_RCC_OscConfig+0x37e>
 8001898:	e014      	b.n	80018c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff fb49 	bl	8000f30 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff fb45 	bl	8000f30 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e095      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b8:	4b4c      	ldr	r3, [pc, #304]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1ee      	bne.n	80018a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d105      	bne.n	80018d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ca:	4b48      	ldr	r3, [pc, #288]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4a47      	ldr	r2, [pc, #284]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8081 	beq.w	80019e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e0:	4b42      	ldr	r3, [pc, #264]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d061      	beq.n	80019b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d146      	bne.n	8001982 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <HAL_RCC_OscConfig+0x4fc>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb19 	bl	8000f30 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001902:	f7ff fb15 	bl	8000f30 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e067      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001914:	4b35      	ldr	r3, [pc, #212]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001928:	d108      	bne.n	800193c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800192a:	4b30      	ldr	r3, [pc, #192]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	492d      	ldr	r1, [pc, #180]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a19      	ldr	r1, [r3, #32]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	430b      	orrs	r3, r1
 800194e:	4927      	ldr	r1, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x4fc>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fae9 	bl	8000f30 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff fae5 	bl	8000f30 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e037      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x46a>
 8001980:	e02f      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <HAL_RCC_OscConfig+0x4fc>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff fad2 	bl	8000f30 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff face 	bl	8000f30 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e020      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x498>
 80019ae:	e018      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e013      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_RCC_OscConfig+0x4f4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40007000 	.word	0x40007000
 80019f4:	42420060 	.word	0x42420060

080019f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0d0      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d910      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b67      	ldr	r3, [pc, #412]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 0207 	bic.w	r2, r3, #7
 8001a22:	4965      	ldr	r1, [pc, #404]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0b8      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a54:	4b59      	ldr	r3, [pc, #356]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4a58      	ldr	r2, [pc, #352]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a6c:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4a52      	ldr	r2, [pc, #328]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4b50      	ldr	r3, [pc, #320]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	494d      	ldr	r1, [pc, #308]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d040      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d115      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e07f      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab6:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e073      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06b      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4936      	ldr	r1, [pc, #216]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae8:	f7ff fa22 	bl	8000f30 <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff fa1e 	bl	8000f30 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e053      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 020c 	and.w	r2, r3, #12
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1eb      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d210      	bcs.n	8001b48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 0207 	bic.w	r2, r3, #7
 8001b2e:	4922      	ldr	r1, [pc, #136]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e032      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4916      	ldr	r1, [pc, #88]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d009      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	490e      	ldr	r1, [pc, #56]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b86:	f000 f821 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
 8001b9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f980 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40022000 	.word	0x40022000
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	080037a0 	.word	0x080037a0
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bcc:	b490      	push	{r4, r7}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bd4:	1d3c      	adds	r4, r7, #4
 8001bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bf6:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d002      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x40>
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d003      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0x46>
 8001c0a:	e02d      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c0e:	623b      	str	r3, [r7, #32]
      break;
 8001c10:	e02d      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	0c9b      	lsrs	r3, r3, #18
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c1e:	4413      	add	r3, r2
 8001c20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d013      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	0c5b      	lsrs	r3, r3, #17
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c3e:	4413      	add	r3, r2
 8001c40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c4a:	fb02 f203 	mul.w	r2, r2, r3
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
 8001c56:	e004      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	623b      	str	r3, [r7, #32]
      break;
 8001c66:	e002      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c6a:	623b      	str	r3, [r7, #32]
      break;
 8001c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc90      	pop	{r4, r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	0800378c 	.word	0x0800378c
 8001c80:	0800379c 	.word	0x0800379c
 8001c84:	40021000 	.word	0x40021000
 8001c88:	007a1200 	.word	0x007a1200
 8001c8c:	003d0900 	.word	0x003d0900

08001c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c94:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ca8:	f7ff fff2 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cac:	4601      	mov	r1, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	080037b0 	.word	0x080037b0

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd0:	f7ff ffde 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cd4:	4601      	mov	r1, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0adb      	lsrs	r3, r3, #11
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4a03      	ldr	r2, [pc, #12]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	080037b0 	.word	0x080037b0

08001cf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <RCC_Delay+0x34>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <RCC_Delay+0x38>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	0a5b      	lsrs	r3, r3, #9
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d10:	bf00      	nop
  }
  while (Delay --);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	60fa      	str	r2, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f9      	bne.n	8001d10 <RCC_Delay+0x1c>
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	10624dd3 	.word	0x10624dd3

08001d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e076      	b.n	8001e30 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d108      	bne.n	8001d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d52:	d009      	beq.n	8001d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
 8001d5a:	e005      	b.n	8001d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe ff08 	bl	8000b98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dec:	ea42 0103 	orr.w	r1, r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	0c1a      	lsrs	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f002 0204 	and.w	r2, r2, #4
 8001e0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e041      	b.n	8001ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fee4 	bl	8000c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4610      	mov	r0, r2
 8001e78:	f000 fb0a 	bl	8002490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d001      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e03a      	b.n	8001f66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <HAL_TIM_Base_Start_IT+0x98>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00e      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x58>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1a:	d009      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x58>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x58>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d111      	bne.n	8001f54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d010      	beq.n	8001f64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f52:	e007      	b.n	8001f64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	40012c00 	.word	0x40012c00
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40000800 	.word	0x40000800

08001f7c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e041      	b.n	8002012 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f839 	bl	800201a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4610      	mov	r0, r2
 8001fbc:	f000 fa68 	bl	8002490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b02      	cmp	r3, #2
 8002040:	d122      	bne.n	8002088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b02      	cmp	r3, #2
 800204e:	d11b      	bne.n	8002088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0202 	mvn.w	r2, #2
 8002058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f9f3 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fabc 	bl	80005f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f9f5 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b04      	cmp	r3, #4
 8002094:	d122      	bne.n	80020dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d11b      	bne.n	80020dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0204 	mvn.w	r2, #4
 80020ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2202      	movs	r2, #2
 80020b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f9c9 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 80020c8:	e005      	b.n	80020d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fa92 	bl	80005f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f9cb 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d122      	bne.n	8002130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d11b      	bne.n	8002130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0208 	mvn.w	r2, #8
 8002100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2204      	movs	r2, #4
 8002106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f99f 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 800211c:	e005      	b.n	800212a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fa68 	bl	80005f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f9a1 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b10      	cmp	r3, #16
 800213c:	d122      	bne.n	8002184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b10      	cmp	r3, #16
 800214a:	d11b      	bne.n	8002184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0210 	mvn.w	r2, #16
 8002154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2208      	movs	r2, #8
 800215a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f975 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 8002170:	e005      	b.n	800217e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe fa3e 	bl	80005f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f977 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d10e      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d107      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0201 	mvn.w	r2, #1
 80021a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe fa3c 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ba:	2b80      	cmp	r3, #128	; 0x80
 80021bc:	d10e      	bne.n	80021dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	2b80      	cmp	r3, #128	; 0x80
 80021ca:	d107      	bne.n	80021dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fc41 	bl	8002a5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d10e      	bne.n	8002208 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f4:	2b40      	cmp	r3, #64	; 0x40
 80021f6:	d107      	bne.n	8002208 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f93b 	bl	800247e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b20      	cmp	r3, #32
 8002214:	d10e      	bne.n	8002234 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b20      	cmp	r3, #32
 8002222:	d107      	bne.n	8002234 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0220 	mvn.w	r2, #32
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fc0c 	bl	8002a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_TIM_OC_ConfigChannel+0x1a>
 8002252:	2302      	movs	r3, #2
 8002254:	e046      	b.n	80022e4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0c      	cmp	r3, #12
 8002262:	d839      	bhi.n	80022d8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002264:	a201      	add	r2, pc, #4	; (adr r2, 800226c <HAL_TIM_OC_ConfigChannel+0x30>)
 8002266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226a:	bf00      	nop
 800226c:	080022a1 	.word	0x080022a1
 8002270:	080022d9 	.word	0x080022d9
 8002274:	080022d9 	.word	0x080022d9
 8002278:	080022d9 	.word	0x080022d9
 800227c:	080022af 	.word	0x080022af
 8002280:	080022d9 	.word	0x080022d9
 8002284:	080022d9 	.word	0x080022d9
 8002288:	080022d9 	.word	0x080022d9
 800228c:	080022bd 	.word	0x080022bd
 8002290:	080022d9 	.word	0x080022d9
 8002294:	080022d9 	.word	0x080022d9
 8002298:	080022d9 	.word	0x080022d9
 800229c:	080022cb 	.word	0x080022cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f954 	bl	8002554 <TIM_OC1_SetConfig>
      break;
 80022ac:	e015      	b.n	80022da <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f9b3 	bl	8002620 <TIM_OC2_SetConfig>
      break;
 80022ba:	e00e      	b.n	80022da <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fa16 	bl	80026f4 <TIM_OC3_SetConfig>
      break;
 80022c8:	e007      	b.n	80022da <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fa79 	bl	80027c8 <TIM_OC4_SetConfig>
      break;
 80022d6:	e000      	b.n	80022da <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80022d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_TIM_ConfigClockSource+0x18>
 8002300:	2302      	movs	r3, #2
 8002302:	e0a6      	b.n	8002452 <HAL_TIM_ConfigClockSource+0x166>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002322:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800232a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d067      	beq.n	800240c <HAL_TIM_ConfigClockSource+0x120>
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d80b      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x6c>
 8002340:	2b10      	cmp	r3, #16
 8002342:	d073      	beq.n	800242c <HAL_TIM_ConfigClockSource+0x140>
 8002344:	2b10      	cmp	r3, #16
 8002346:	d802      	bhi.n	800234e <HAL_TIM_ConfigClockSource+0x62>
 8002348:	2b00      	cmp	r3, #0
 800234a:	d06f      	beq.n	800242c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800234c:	e078      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800234e:	2b20      	cmp	r3, #32
 8002350:	d06c      	beq.n	800242c <HAL_TIM_ConfigClockSource+0x140>
 8002352:	2b30      	cmp	r3, #48	; 0x30
 8002354:	d06a      	beq.n	800242c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002356:	e073      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002358:	2b70      	cmp	r3, #112	; 0x70
 800235a:	d00d      	beq.n	8002378 <HAL_TIM_ConfigClockSource+0x8c>
 800235c:	2b70      	cmp	r3, #112	; 0x70
 800235e:	d804      	bhi.n	800236a <HAL_TIM_ConfigClockSource+0x7e>
 8002360:	2b50      	cmp	r3, #80	; 0x50
 8002362:	d033      	beq.n	80023cc <HAL_TIM_ConfigClockSource+0xe0>
 8002364:	2b60      	cmp	r3, #96	; 0x60
 8002366:	d041      	beq.n	80023ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002368:	e06a      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800236a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236e:	d066      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x152>
 8002370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002374:	d017      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002376:	e063      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6899      	ldr	r1, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f000 fae3 	bl	8002952 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800239a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	609a      	str	r2, [r3, #8]
      break;
 80023a4:	e04c      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6899      	ldr	r1, [r3, #8]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f000 facc 	bl	8002952 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023c8:	609a      	str	r2, [r3, #8]
      break;
 80023ca:	e039      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	461a      	mov	r2, r3
 80023da:	f000 fa43 	bl	8002864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2150      	movs	r1, #80	; 0x50
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fa9a 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 80023ea:	e029      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	461a      	mov	r2, r3
 80023fa:	f000 fa61 	bl	80028c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2160      	movs	r1, #96	; 0x60
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fa8a 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 800240a:	e019      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	461a      	mov	r2, r3
 800241a:	f000 fa23 	bl	8002864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2140      	movs	r1, #64	; 0x40
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fa7a 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 800242a:	e009      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f000 fa71 	bl	800291e <TIM_ITRx_SetConfig>
        break;
 800243c:	e000      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800243e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a29      	ldr	r2, [pc, #164]	; (8002548 <TIM_Base_SetConfig+0xb8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00b      	beq.n	80024c0 <TIM_Base_SetConfig+0x30>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ae:	d007      	beq.n	80024c0 <TIM_Base_SetConfig+0x30>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a26      	ldr	r2, [pc, #152]	; (800254c <TIM_Base_SetConfig+0xbc>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d003      	beq.n	80024c0 <TIM_Base_SetConfig+0x30>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a25      	ldr	r2, [pc, #148]	; (8002550 <TIM_Base_SetConfig+0xc0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d108      	bne.n	80024d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <TIM_Base_SetConfig+0xb8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00b      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e0:	d007      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <TIM_Base_SetConfig+0xbc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a18      	ldr	r2, [pc, #96]	; (8002550 <TIM_Base_SetConfig+0xc0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d108      	bne.n	8002504 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a07      	ldr	r2, [pc, #28]	; (8002548 <TIM_Base_SetConfig+0xb8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d103      	bne.n	8002538 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	615a      	str	r2, [r3, #20]
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40000400 	.word	0x40000400
 8002550:	40000800 	.word	0x40000800

08002554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f023 0201 	bic.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f023 0302 	bic.w	r3, r3, #2
 800259c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <TIM_OC1_SetConfig+0xc8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10c      	bne.n	80025ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0308 	bic.w	r3, r3, #8
 80025b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a13      	ldr	r2, [pc, #76]	; (800261c <TIM_OC1_SetConfig+0xc8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	621a      	str	r2, [r3, #32]
}
 8002610:	bf00      	nop
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40012c00 	.word	0x40012c00

08002620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	f023 0210 	bic.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800264e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0320 	bic.w	r3, r3, #32
 800266a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <TIM_OC2_SetConfig+0xd0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d10d      	bne.n	800269c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800269a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <TIM_OC2_SetConfig+0xd0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d113      	bne.n	80026cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	40012c00 	.word	0x40012c00

080026f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800273c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <TIM_OC3_SetConfig+0xd0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10d      	bne.n	800276e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800276c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <TIM_OC3_SetConfig+0xd0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d113      	bne.n	800279e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800277c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	621a      	str	r2, [r3, #32]
}
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40012c00 	.word	0x40012c00

080027c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	031b      	lsls	r3, r3, #12
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <TIM_OC4_SetConfig+0x98>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d109      	bne.n	800283c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800282e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	621a      	str	r2, [r3, #32]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40012c00 	.word	0x40012c00

08002864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f023 0201 	bic.w	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800288e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f023 030a 	bic.w	r3, r3, #10
 80028a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 0210 	bic.w	r2, r3, #16
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	031b      	lsls	r3, r3, #12
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	621a      	str	r2, [r3, #32]
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	f043 0307 	orr.w	r3, r3, #7
 8002940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	609a      	str	r2, [r3, #8]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800296c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	021a      	lsls	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4313      	orrs	r3, r2
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	609a      	str	r2, [r3, #8]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e046      	b.n	8002a36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00e      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f4:	d009      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10c      	bne.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	40012c00 	.word	0x40012c00
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800

08002a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e03f      	b.n	8002b02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe f8ee 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	; 0x24
 8002aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f905 	bl	8002cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b08a      	sub	sp, #40	; 0x28
 8002b0e:	af02      	add	r7, sp, #8
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d17c      	bne.n	8002c24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_UART_Transmit+0x2c>
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e075      	b.n	8002c26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_UART_Transmit+0x3e>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e06e      	b.n	8002c26 <HAL_UART_Transmit+0x11c>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2221      	movs	r2, #33	; 0x21
 8002b5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002b5e:	f7fe f9e7 	bl	8000f30 <HAL_GetTick>
 8002b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	88fa      	ldrh	r2, [r7, #6]
 8002b68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	88fa      	ldrh	r2, [r7, #6]
 8002b6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b78:	d108      	bne.n	8002b8c <HAL_UART_Transmit+0x82>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	e003      	b.n	8002b94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002b9c:	e02a      	b.n	8002bf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f840 	bl	8002c2e <UART_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e036      	b.n	8002c26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	e007      	b.n	8002be6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	781a      	ldrb	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	3301      	adds	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1cf      	bne.n	8002b9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2200      	movs	r2, #0
 8002c06:	2140      	movs	r1, #64	; 0x40
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f810 	bl	8002c2e <UART_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e006      	b.n	8002c26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e000      	b.n	8002c26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
  }
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c3e:	e02c      	b.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c46:	d028      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c4e:	f7fe f96f 	bl	8000f30 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d21d      	bcs.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c6c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e00f      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d0c3      	beq.n	8002c40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002cfe:	f023 030c 	bic.w	r3, r3, #12
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a2c      	ldr	r2, [pc, #176]	; (8002dd8 <UART_SetConfig+0x114>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d103      	bne.n	8002d34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d2c:	f7fe ffce 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	e002      	b.n	8002d3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d34:	f7fe ffb6 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002d38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	009a      	lsls	r2, r3, #2
 8002d44:	441a      	add	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <UART_SetConfig+0x118>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	0119      	lsls	r1, r3, #4
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	009a      	lsls	r2, r3, #2
 8002d64:	441a      	add	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <UART_SetConfig+0x118>)
 8002d72:	fba3 0302 	umull	r0, r3, r3, r2
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2064      	movs	r0, #100	; 0x64
 8002d7a:	fb00 f303 	mul.w	r3, r0, r3
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	3332      	adds	r3, #50	; 0x32
 8002d84:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <UART_SetConfig+0x118>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d90:	4419      	add	r1, r3
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009a      	lsls	r2, r3, #2
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <UART_SetConfig+0x118>)
 8002daa:	fba3 0302 	umull	r0, r3, r3, r2
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2064      	movs	r0, #100	; 0x64
 8002db2:	fb00 f303 	mul.w	r3, r0, r3
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	3332      	adds	r3, #50	; 0x32
 8002dbc:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <UART_SetConfig+0x118>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	f003 020f 	and.w	r2, r3, #15
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	440a      	add	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40013800 	.word	0x40013800
 8002ddc:	51eb851f 	.word	0x51eb851f

08002de0 <_Znaj>:
 8002de0:	f000 b800 	b.w	8002de4 <_Znwj>

08002de4 <_Znwj>:
 8002de4:	b510      	push	{r4, lr}
 8002de6:	2800      	cmp	r0, #0
 8002de8:	bf14      	ite	ne
 8002dea:	4604      	movne	r4, r0
 8002dec:	2401      	moveq	r4, #1
 8002dee:	4620      	mov	r0, r4
 8002df0:	f000 f844 	bl	8002e7c <malloc>
 8002df4:	b930      	cbnz	r0, 8002e04 <_Znwj+0x20>
 8002df6:	f000 f807 	bl	8002e08 <_ZSt15get_new_handlerv>
 8002dfa:	b908      	cbnz	r0, 8002e00 <_Znwj+0x1c>
 8002dfc:	f000 f80c 	bl	8002e18 <abort>
 8002e00:	4780      	blx	r0
 8002e02:	e7f4      	b.n	8002dee <_Znwj+0xa>
 8002e04:	bd10      	pop	{r4, pc}
	...

08002e08 <_ZSt15get_new_handlerv>:
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <_ZSt15get_new_handlerv+0xc>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	f3bf 8f5b 	dmb	ish
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	200004ac 	.word	0x200004ac

08002e18 <abort>:
 8002e18:	b508      	push	{r3, lr}
 8002e1a:	2006      	movs	r0, #6
 8002e1c:	f000 f91c 	bl	8003058 <raise>
 8002e20:	2001      	movs	r0, #1
 8002e22:	f7fd ffc0 	bl	8000da6 <_exit>
	...

08002e28 <__errno>:
 8002e28:	4b01      	ldr	r3, [pc, #4]	; (8002e30 <__errno+0x8>)
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	2000000c 	.word	0x2000000c

08002e34 <__libc_init_array>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	2500      	movs	r5, #0
 8002e38:	4e0c      	ldr	r6, [pc, #48]	; (8002e6c <__libc_init_array+0x38>)
 8002e3a:	4c0d      	ldr	r4, [pc, #52]	; (8002e70 <__libc_init_array+0x3c>)
 8002e3c:	1ba4      	subs	r4, r4, r6
 8002e3e:	10a4      	asrs	r4, r4, #2
 8002e40:	42a5      	cmp	r5, r4
 8002e42:	d109      	bne.n	8002e58 <__libc_init_array+0x24>
 8002e44:	f000 fc80 	bl	8003748 <_init>
 8002e48:	2500      	movs	r5, #0
 8002e4a:	4e0a      	ldr	r6, [pc, #40]	; (8002e74 <__libc_init_array+0x40>)
 8002e4c:	4c0a      	ldr	r4, [pc, #40]	; (8002e78 <__libc_init_array+0x44>)
 8002e4e:	1ba4      	subs	r4, r4, r6
 8002e50:	10a4      	asrs	r4, r4, #2
 8002e52:	42a5      	cmp	r5, r4
 8002e54:	d105      	bne.n	8002e62 <__libc_init_array+0x2e>
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
 8002e58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e5c:	4798      	blx	r3
 8002e5e:	3501      	adds	r5, #1
 8002e60:	e7ee      	b.n	8002e40 <__libc_init_array+0xc>
 8002e62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e66:	4798      	blx	r3
 8002e68:	3501      	adds	r5, #1
 8002e6a:	e7f2      	b.n	8002e52 <__libc_init_array+0x1e>
 8002e6c:	080037ec 	.word	0x080037ec
 8002e70:	080037ec 	.word	0x080037ec
 8002e74:	080037ec 	.word	0x080037ec
 8002e78:	080037f4 	.word	0x080037f4

08002e7c <malloc>:
 8002e7c:	4b02      	ldr	r3, [pc, #8]	; (8002e88 <malloc+0xc>)
 8002e7e:	4601      	mov	r1, r0
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	f000 b857 	b.w	8002f34 <_malloc_r>
 8002e86:	bf00      	nop
 8002e88:	2000000c 	.word	0x2000000c

08002e8c <memset>:
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4402      	add	r2, r0
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d100      	bne.n	8002e96 <memset+0xa>
 8002e94:	4770      	bx	lr
 8002e96:	f803 1b01 	strb.w	r1, [r3], #1
 8002e9a:	e7f9      	b.n	8002e90 <memset+0x4>

08002e9c <_free_r>:
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	4605      	mov	r5, r0
 8002ea0:	2900      	cmp	r1, #0
 8002ea2:	d043      	beq.n	8002f2c <_free_r+0x90>
 8002ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ea8:	1f0c      	subs	r4, r1, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bfb8      	it	lt
 8002eae:	18e4      	addlt	r4, r4, r3
 8002eb0:	f000 f90e 	bl	80030d0 <__malloc_lock>
 8002eb4:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <_free_r+0x94>)
 8002eb6:	6813      	ldr	r3, [r2, #0]
 8002eb8:	4610      	mov	r0, r2
 8002eba:	b933      	cbnz	r3, 8002eca <_free_r+0x2e>
 8002ebc:	6063      	str	r3, [r4, #4]
 8002ebe:	6014      	str	r4, [r2, #0]
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ec6:	f000 b904 	b.w	80030d2 <__malloc_unlock>
 8002eca:	42a3      	cmp	r3, r4
 8002ecc:	d90b      	bls.n	8002ee6 <_free_r+0x4a>
 8002ece:	6821      	ldr	r1, [r4, #0]
 8002ed0:	1862      	adds	r2, r4, r1
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	bf01      	itttt	eq
 8002ed6:	681a      	ldreq	r2, [r3, #0]
 8002ed8:	685b      	ldreq	r3, [r3, #4]
 8002eda:	1852      	addeq	r2, r2, r1
 8002edc:	6022      	streq	r2, [r4, #0]
 8002ede:	6063      	str	r3, [r4, #4]
 8002ee0:	6004      	str	r4, [r0, #0]
 8002ee2:	e7ed      	b.n	8002ec0 <_free_r+0x24>
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	b10a      	cbz	r2, 8002eee <_free_r+0x52>
 8002eea:	42a2      	cmp	r2, r4
 8002eec:	d9fa      	bls.n	8002ee4 <_free_r+0x48>
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	1858      	adds	r0, r3, r1
 8002ef2:	42a0      	cmp	r0, r4
 8002ef4:	d10b      	bne.n	8002f0e <_free_r+0x72>
 8002ef6:	6820      	ldr	r0, [r4, #0]
 8002ef8:	4401      	add	r1, r0
 8002efa:	1858      	adds	r0, r3, r1
 8002efc:	4282      	cmp	r2, r0
 8002efe:	6019      	str	r1, [r3, #0]
 8002f00:	d1de      	bne.n	8002ec0 <_free_r+0x24>
 8002f02:	6810      	ldr	r0, [r2, #0]
 8002f04:	6852      	ldr	r2, [r2, #4]
 8002f06:	4401      	add	r1, r0
 8002f08:	6019      	str	r1, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	e7d8      	b.n	8002ec0 <_free_r+0x24>
 8002f0e:	d902      	bls.n	8002f16 <_free_r+0x7a>
 8002f10:	230c      	movs	r3, #12
 8002f12:	602b      	str	r3, [r5, #0]
 8002f14:	e7d4      	b.n	8002ec0 <_free_r+0x24>
 8002f16:	6820      	ldr	r0, [r4, #0]
 8002f18:	1821      	adds	r1, r4, r0
 8002f1a:	428a      	cmp	r2, r1
 8002f1c:	bf01      	itttt	eq
 8002f1e:	6811      	ldreq	r1, [r2, #0]
 8002f20:	6852      	ldreq	r2, [r2, #4]
 8002f22:	1809      	addeq	r1, r1, r0
 8002f24:	6021      	streq	r1, [r4, #0]
 8002f26:	6062      	str	r2, [r4, #4]
 8002f28:	605c      	str	r4, [r3, #4]
 8002f2a:	e7c9      	b.n	8002ec0 <_free_r+0x24>
 8002f2c:	bd38      	pop	{r3, r4, r5, pc}
 8002f2e:	bf00      	nop
 8002f30:	200004b0 	.word	0x200004b0

08002f34 <_malloc_r>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	1ccd      	adds	r5, r1, #3
 8002f38:	f025 0503 	bic.w	r5, r5, #3
 8002f3c:	3508      	adds	r5, #8
 8002f3e:	2d0c      	cmp	r5, #12
 8002f40:	bf38      	it	cc
 8002f42:	250c      	movcc	r5, #12
 8002f44:	2d00      	cmp	r5, #0
 8002f46:	4606      	mov	r6, r0
 8002f48:	db01      	blt.n	8002f4e <_malloc_r+0x1a>
 8002f4a:	42a9      	cmp	r1, r5
 8002f4c:	d903      	bls.n	8002f56 <_malloc_r+0x22>
 8002f4e:	230c      	movs	r3, #12
 8002f50:	6033      	str	r3, [r6, #0]
 8002f52:	2000      	movs	r0, #0
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
 8002f56:	f000 f8bb 	bl	80030d0 <__malloc_lock>
 8002f5a:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <_malloc_r+0xac>)
 8002f5c:	6814      	ldr	r4, [r2, #0]
 8002f5e:	4621      	mov	r1, r4
 8002f60:	b991      	cbnz	r1, 8002f88 <_malloc_r+0x54>
 8002f62:	4c20      	ldr	r4, [pc, #128]	; (8002fe4 <_malloc_r+0xb0>)
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	b91b      	cbnz	r3, 8002f70 <_malloc_r+0x3c>
 8002f68:	4630      	mov	r0, r6
 8002f6a:	f000 f83d 	bl	8002fe8 <_sbrk_r>
 8002f6e:	6020      	str	r0, [r4, #0]
 8002f70:	4629      	mov	r1, r5
 8002f72:	4630      	mov	r0, r6
 8002f74:	f000 f838 	bl	8002fe8 <_sbrk_r>
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	d124      	bne.n	8002fc6 <_malloc_r+0x92>
 8002f7c:	230c      	movs	r3, #12
 8002f7e:	4630      	mov	r0, r6
 8002f80:	6033      	str	r3, [r6, #0]
 8002f82:	f000 f8a6 	bl	80030d2 <__malloc_unlock>
 8002f86:	e7e4      	b.n	8002f52 <_malloc_r+0x1e>
 8002f88:	680b      	ldr	r3, [r1, #0]
 8002f8a:	1b5b      	subs	r3, r3, r5
 8002f8c:	d418      	bmi.n	8002fc0 <_malloc_r+0x8c>
 8002f8e:	2b0b      	cmp	r3, #11
 8002f90:	d90f      	bls.n	8002fb2 <_malloc_r+0x7e>
 8002f92:	600b      	str	r3, [r1, #0]
 8002f94:	18cc      	adds	r4, r1, r3
 8002f96:	50cd      	str	r5, [r1, r3]
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f000 f89a 	bl	80030d2 <__malloc_unlock>
 8002f9e:	f104 000b 	add.w	r0, r4, #11
 8002fa2:	1d23      	adds	r3, r4, #4
 8002fa4:	f020 0007 	bic.w	r0, r0, #7
 8002fa8:	1ac3      	subs	r3, r0, r3
 8002faa:	d0d3      	beq.n	8002f54 <_malloc_r+0x20>
 8002fac:	425a      	negs	r2, r3
 8002fae:	50e2      	str	r2, [r4, r3]
 8002fb0:	e7d0      	b.n	8002f54 <_malloc_r+0x20>
 8002fb2:	684b      	ldr	r3, [r1, #4]
 8002fb4:	428c      	cmp	r4, r1
 8002fb6:	bf16      	itet	ne
 8002fb8:	6063      	strne	r3, [r4, #4]
 8002fba:	6013      	streq	r3, [r2, #0]
 8002fbc:	460c      	movne	r4, r1
 8002fbe:	e7eb      	b.n	8002f98 <_malloc_r+0x64>
 8002fc0:	460c      	mov	r4, r1
 8002fc2:	6849      	ldr	r1, [r1, #4]
 8002fc4:	e7cc      	b.n	8002f60 <_malloc_r+0x2c>
 8002fc6:	1cc4      	adds	r4, r0, #3
 8002fc8:	f024 0403 	bic.w	r4, r4, #3
 8002fcc:	42a0      	cmp	r0, r4
 8002fce:	d005      	beq.n	8002fdc <_malloc_r+0xa8>
 8002fd0:	1a21      	subs	r1, r4, r0
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	f000 f808 	bl	8002fe8 <_sbrk_r>
 8002fd8:	3001      	adds	r0, #1
 8002fda:	d0cf      	beq.n	8002f7c <_malloc_r+0x48>
 8002fdc:	6025      	str	r5, [r4, #0]
 8002fde:	e7db      	b.n	8002f98 <_malloc_r+0x64>
 8002fe0:	200004b0 	.word	0x200004b0
 8002fe4:	200004b4 	.word	0x200004b4

08002fe8 <_sbrk_r>:
 8002fe8:	b538      	push	{r3, r4, r5, lr}
 8002fea:	2300      	movs	r3, #0
 8002fec:	4c05      	ldr	r4, [pc, #20]	; (8003004 <_sbrk_r+0x1c>)
 8002fee:	4605      	mov	r5, r0
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	6023      	str	r3, [r4, #0]
 8002ff4:	f7fd fee2 	bl	8000dbc <_sbrk>
 8002ff8:	1c43      	adds	r3, r0, #1
 8002ffa:	d102      	bne.n	8003002 <_sbrk_r+0x1a>
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	b103      	cbz	r3, 8003002 <_sbrk_r+0x1a>
 8003000:	602b      	str	r3, [r5, #0]
 8003002:	bd38      	pop	{r3, r4, r5, pc}
 8003004:	200005e0 	.word	0x200005e0

08003008 <_raise_r>:
 8003008:	291f      	cmp	r1, #31
 800300a:	b538      	push	{r3, r4, r5, lr}
 800300c:	4604      	mov	r4, r0
 800300e:	460d      	mov	r5, r1
 8003010:	d904      	bls.n	800301c <_raise_r+0x14>
 8003012:	2316      	movs	r3, #22
 8003014:	6003      	str	r3, [r0, #0]
 8003016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800301a:	bd38      	pop	{r3, r4, r5, pc}
 800301c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800301e:	b112      	cbz	r2, 8003026 <_raise_r+0x1e>
 8003020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003024:	b94b      	cbnz	r3, 800303a <_raise_r+0x32>
 8003026:	4620      	mov	r0, r4
 8003028:	f000 f830 	bl	800308c <_getpid_r>
 800302c:	462a      	mov	r2, r5
 800302e:	4601      	mov	r1, r0
 8003030:	4620      	mov	r0, r4
 8003032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003036:	f000 b817 	b.w	8003068 <_kill_r>
 800303a:	2b01      	cmp	r3, #1
 800303c:	d00a      	beq.n	8003054 <_raise_r+0x4c>
 800303e:	1c59      	adds	r1, r3, #1
 8003040:	d103      	bne.n	800304a <_raise_r+0x42>
 8003042:	2316      	movs	r3, #22
 8003044:	6003      	str	r3, [r0, #0]
 8003046:	2001      	movs	r0, #1
 8003048:	e7e7      	b.n	800301a <_raise_r+0x12>
 800304a:	2400      	movs	r4, #0
 800304c:	4628      	mov	r0, r5
 800304e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003052:	4798      	blx	r3
 8003054:	2000      	movs	r0, #0
 8003056:	e7e0      	b.n	800301a <_raise_r+0x12>

08003058 <raise>:
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <raise+0xc>)
 800305a:	4601      	mov	r1, r0
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	f7ff bfd3 	b.w	8003008 <_raise_r>
 8003062:	bf00      	nop
 8003064:	2000000c 	.word	0x2000000c

08003068 <_kill_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	2300      	movs	r3, #0
 800306c:	4c06      	ldr	r4, [pc, #24]	; (8003088 <_kill_r+0x20>)
 800306e:	4605      	mov	r5, r0
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	f7fd fe86 	bl	8000d86 <_kill>
 800307a:	1c43      	adds	r3, r0, #1
 800307c:	d102      	bne.n	8003084 <_kill_r+0x1c>
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	b103      	cbz	r3, 8003084 <_kill_r+0x1c>
 8003082:	602b      	str	r3, [r5, #0]
 8003084:	bd38      	pop	{r3, r4, r5, pc}
 8003086:	bf00      	nop
 8003088:	200005e0 	.word	0x200005e0

0800308c <_getpid_r>:
 800308c:	f7fd be74 	b.w	8000d78 <_getpid>

08003090 <siprintf>:
 8003090:	b40e      	push	{r1, r2, r3}
 8003092:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003096:	b500      	push	{lr}
 8003098:	b09c      	sub	sp, #112	; 0x70
 800309a:	ab1d      	add	r3, sp, #116	; 0x74
 800309c:	9002      	str	r0, [sp, #8]
 800309e:	9006      	str	r0, [sp, #24]
 80030a0:	9107      	str	r1, [sp, #28]
 80030a2:	9104      	str	r1, [sp, #16]
 80030a4:	4808      	ldr	r0, [pc, #32]	; (80030c8 <siprintf+0x38>)
 80030a6:	4909      	ldr	r1, [pc, #36]	; (80030cc <siprintf+0x3c>)
 80030a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80030ac:	9105      	str	r1, [sp, #20]
 80030ae:	6800      	ldr	r0, [r0, #0]
 80030b0:	a902      	add	r1, sp, #8
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	f000 f868 	bl	8003188 <_svfiprintf_r>
 80030b8:	2200      	movs	r2, #0
 80030ba:	9b02      	ldr	r3, [sp, #8]
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	b01c      	add	sp, #112	; 0x70
 80030c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80030c4:	b003      	add	sp, #12
 80030c6:	4770      	bx	lr
 80030c8:	2000000c 	.word	0x2000000c
 80030cc:	ffff0208 	.word	0xffff0208

080030d0 <__malloc_lock>:
 80030d0:	4770      	bx	lr

080030d2 <__malloc_unlock>:
 80030d2:	4770      	bx	lr

080030d4 <__ssputs_r>:
 80030d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d8:	688e      	ldr	r6, [r1, #8]
 80030da:	4682      	mov	sl, r0
 80030dc:	429e      	cmp	r6, r3
 80030de:	460c      	mov	r4, r1
 80030e0:	4690      	mov	r8, r2
 80030e2:	4699      	mov	r9, r3
 80030e4:	d837      	bhi.n	8003156 <__ssputs_r+0x82>
 80030e6:	898a      	ldrh	r2, [r1, #12]
 80030e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030ec:	d031      	beq.n	8003152 <__ssputs_r+0x7e>
 80030ee:	2302      	movs	r3, #2
 80030f0:	6825      	ldr	r5, [r4, #0]
 80030f2:	6909      	ldr	r1, [r1, #16]
 80030f4:	1a6f      	subs	r7, r5, r1
 80030f6:	6965      	ldr	r5, [r4, #20]
 80030f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003100:	f109 0301 	add.w	r3, r9, #1
 8003104:	443b      	add	r3, r7
 8003106:	429d      	cmp	r5, r3
 8003108:	bf38      	it	cc
 800310a:	461d      	movcc	r5, r3
 800310c:	0553      	lsls	r3, r2, #21
 800310e:	d530      	bpl.n	8003172 <__ssputs_r+0x9e>
 8003110:	4629      	mov	r1, r5
 8003112:	f7ff ff0f 	bl	8002f34 <_malloc_r>
 8003116:	4606      	mov	r6, r0
 8003118:	b950      	cbnz	r0, 8003130 <__ssputs_r+0x5c>
 800311a:	230c      	movs	r3, #12
 800311c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003120:	f8ca 3000 	str.w	r3, [sl]
 8003124:	89a3      	ldrh	r3, [r4, #12]
 8003126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800312a:	81a3      	strh	r3, [r4, #12]
 800312c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003130:	463a      	mov	r2, r7
 8003132:	6921      	ldr	r1, [r4, #16]
 8003134:	f000 fab6 	bl	80036a4 <memcpy>
 8003138:	89a3      	ldrh	r3, [r4, #12]
 800313a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800313e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003142:	81a3      	strh	r3, [r4, #12]
 8003144:	6126      	str	r6, [r4, #16]
 8003146:	443e      	add	r6, r7
 8003148:	6026      	str	r6, [r4, #0]
 800314a:	464e      	mov	r6, r9
 800314c:	6165      	str	r5, [r4, #20]
 800314e:	1bed      	subs	r5, r5, r7
 8003150:	60a5      	str	r5, [r4, #8]
 8003152:	454e      	cmp	r6, r9
 8003154:	d900      	bls.n	8003158 <__ssputs_r+0x84>
 8003156:	464e      	mov	r6, r9
 8003158:	4632      	mov	r2, r6
 800315a:	4641      	mov	r1, r8
 800315c:	6820      	ldr	r0, [r4, #0]
 800315e:	f000 faac 	bl	80036ba <memmove>
 8003162:	68a3      	ldr	r3, [r4, #8]
 8003164:	2000      	movs	r0, #0
 8003166:	1b9b      	subs	r3, r3, r6
 8003168:	60a3      	str	r3, [r4, #8]
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	441e      	add	r6, r3
 800316e:	6026      	str	r6, [r4, #0]
 8003170:	e7dc      	b.n	800312c <__ssputs_r+0x58>
 8003172:	462a      	mov	r2, r5
 8003174:	f000 faba 	bl	80036ec <_realloc_r>
 8003178:	4606      	mov	r6, r0
 800317a:	2800      	cmp	r0, #0
 800317c:	d1e2      	bne.n	8003144 <__ssputs_r+0x70>
 800317e:	6921      	ldr	r1, [r4, #16]
 8003180:	4650      	mov	r0, sl
 8003182:	f7ff fe8b 	bl	8002e9c <_free_r>
 8003186:	e7c8      	b.n	800311a <__ssputs_r+0x46>

08003188 <_svfiprintf_r>:
 8003188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318c:	461d      	mov	r5, r3
 800318e:	898b      	ldrh	r3, [r1, #12]
 8003190:	b09d      	sub	sp, #116	; 0x74
 8003192:	061f      	lsls	r7, r3, #24
 8003194:	4680      	mov	r8, r0
 8003196:	460c      	mov	r4, r1
 8003198:	4616      	mov	r6, r2
 800319a:	d50f      	bpl.n	80031bc <_svfiprintf_r+0x34>
 800319c:	690b      	ldr	r3, [r1, #16]
 800319e:	b96b      	cbnz	r3, 80031bc <_svfiprintf_r+0x34>
 80031a0:	2140      	movs	r1, #64	; 0x40
 80031a2:	f7ff fec7 	bl	8002f34 <_malloc_r>
 80031a6:	6020      	str	r0, [r4, #0]
 80031a8:	6120      	str	r0, [r4, #16]
 80031aa:	b928      	cbnz	r0, 80031b8 <_svfiprintf_r+0x30>
 80031ac:	230c      	movs	r3, #12
 80031ae:	f8c8 3000 	str.w	r3, [r8]
 80031b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031b6:	e0c8      	b.n	800334a <_svfiprintf_r+0x1c2>
 80031b8:	2340      	movs	r3, #64	; 0x40
 80031ba:	6163      	str	r3, [r4, #20]
 80031bc:	2300      	movs	r3, #0
 80031be:	9309      	str	r3, [sp, #36]	; 0x24
 80031c0:	2320      	movs	r3, #32
 80031c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031c6:	2330      	movs	r3, #48	; 0x30
 80031c8:	f04f 0b01 	mov.w	fp, #1
 80031cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031d0:	9503      	str	r5, [sp, #12]
 80031d2:	4637      	mov	r7, r6
 80031d4:	463d      	mov	r5, r7
 80031d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80031da:	b10b      	cbz	r3, 80031e0 <_svfiprintf_r+0x58>
 80031dc:	2b25      	cmp	r3, #37	; 0x25
 80031de:	d13e      	bne.n	800325e <_svfiprintf_r+0xd6>
 80031e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80031e4:	d00b      	beq.n	80031fe <_svfiprintf_r+0x76>
 80031e6:	4653      	mov	r3, sl
 80031e8:	4632      	mov	r2, r6
 80031ea:	4621      	mov	r1, r4
 80031ec:	4640      	mov	r0, r8
 80031ee:	f7ff ff71 	bl	80030d4 <__ssputs_r>
 80031f2:	3001      	adds	r0, #1
 80031f4:	f000 80a4 	beq.w	8003340 <_svfiprintf_r+0x1b8>
 80031f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031fa:	4453      	add	r3, sl
 80031fc:	9309      	str	r3, [sp, #36]	; 0x24
 80031fe:	783b      	ldrb	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 809d 	beq.w	8003340 <_svfiprintf_r+0x1b8>
 8003206:	2300      	movs	r3, #0
 8003208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800320c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003210:	9304      	str	r3, [sp, #16]
 8003212:	9307      	str	r3, [sp, #28]
 8003214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003218:	931a      	str	r3, [sp, #104]	; 0x68
 800321a:	462f      	mov	r7, r5
 800321c:	2205      	movs	r2, #5
 800321e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003222:	4850      	ldr	r0, [pc, #320]	; (8003364 <_svfiprintf_r+0x1dc>)
 8003224:	f000 fa30 	bl	8003688 <memchr>
 8003228:	9b04      	ldr	r3, [sp, #16]
 800322a:	b9d0      	cbnz	r0, 8003262 <_svfiprintf_r+0xda>
 800322c:	06d9      	lsls	r1, r3, #27
 800322e:	bf44      	itt	mi
 8003230:	2220      	movmi	r2, #32
 8003232:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003236:	071a      	lsls	r2, r3, #28
 8003238:	bf44      	itt	mi
 800323a:	222b      	movmi	r2, #43	; 0x2b
 800323c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003240:	782a      	ldrb	r2, [r5, #0]
 8003242:	2a2a      	cmp	r2, #42	; 0x2a
 8003244:	d015      	beq.n	8003272 <_svfiprintf_r+0xea>
 8003246:	462f      	mov	r7, r5
 8003248:	2000      	movs	r0, #0
 800324a:	250a      	movs	r5, #10
 800324c:	9a07      	ldr	r2, [sp, #28]
 800324e:	4639      	mov	r1, r7
 8003250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003254:	3b30      	subs	r3, #48	; 0x30
 8003256:	2b09      	cmp	r3, #9
 8003258:	d94d      	bls.n	80032f6 <_svfiprintf_r+0x16e>
 800325a:	b1b8      	cbz	r0, 800328c <_svfiprintf_r+0x104>
 800325c:	e00f      	b.n	800327e <_svfiprintf_r+0xf6>
 800325e:	462f      	mov	r7, r5
 8003260:	e7b8      	b.n	80031d4 <_svfiprintf_r+0x4c>
 8003262:	4a40      	ldr	r2, [pc, #256]	; (8003364 <_svfiprintf_r+0x1dc>)
 8003264:	463d      	mov	r5, r7
 8003266:	1a80      	subs	r0, r0, r2
 8003268:	fa0b f000 	lsl.w	r0, fp, r0
 800326c:	4318      	orrs	r0, r3
 800326e:	9004      	str	r0, [sp, #16]
 8003270:	e7d3      	b.n	800321a <_svfiprintf_r+0x92>
 8003272:	9a03      	ldr	r2, [sp, #12]
 8003274:	1d11      	adds	r1, r2, #4
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	9103      	str	r1, [sp, #12]
 800327a:	2a00      	cmp	r2, #0
 800327c:	db01      	blt.n	8003282 <_svfiprintf_r+0xfa>
 800327e:	9207      	str	r2, [sp, #28]
 8003280:	e004      	b.n	800328c <_svfiprintf_r+0x104>
 8003282:	4252      	negs	r2, r2
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	9207      	str	r2, [sp, #28]
 800328a:	9304      	str	r3, [sp, #16]
 800328c:	783b      	ldrb	r3, [r7, #0]
 800328e:	2b2e      	cmp	r3, #46	; 0x2e
 8003290:	d10c      	bne.n	80032ac <_svfiprintf_r+0x124>
 8003292:	787b      	ldrb	r3, [r7, #1]
 8003294:	2b2a      	cmp	r3, #42	; 0x2a
 8003296:	d133      	bne.n	8003300 <_svfiprintf_r+0x178>
 8003298:	9b03      	ldr	r3, [sp, #12]
 800329a:	3702      	adds	r7, #2
 800329c:	1d1a      	adds	r2, r3, #4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	9203      	str	r2, [sp, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bfb8      	it	lt
 80032a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80032aa:	9305      	str	r3, [sp, #20]
 80032ac:	4d2e      	ldr	r5, [pc, #184]	; (8003368 <_svfiprintf_r+0x1e0>)
 80032ae:	2203      	movs	r2, #3
 80032b0:	7839      	ldrb	r1, [r7, #0]
 80032b2:	4628      	mov	r0, r5
 80032b4:	f000 f9e8 	bl	8003688 <memchr>
 80032b8:	b138      	cbz	r0, 80032ca <_svfiprintf_r+0x142>
 80032ba:	2340      	movs	r3, #64	; 0x40
 80032bc:	1b40      	subs	r0, r0, r5
 80032be:	fa03 f000 	lsl.w	r0, r3, r0
 80032c2:	9b04      	ldr	r3, [sp, #16]
 80032c4:	3701      	adds	r7, #1
 80032c6:	4303      	orrs	r3, r0
 80032c8:	9304      	str	r3, [sp, #16]
 80032ca:	7839      	ldrb	r1, [r7, #0]
 80032cc:	2206      	movs	r2, #6
 80032ce:	4827      	ldr	r0, [pc, #156]	; (800336c <_svfiprintf_r+0x1e4>)
 80032d0:	1c7e      	adds	r6, r7, #1
 80032d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032d6:	f000 f9d7 	bl	8003688 <memchr>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d038      	beq.n	8003350 <_svfiprintf_r+0x1c8>
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <_svfiprintf_r+0x1e8>)
 80032e0:	bb13      	cbnz	r3, 8003328 <_svfiprintf_r+0x1a0>
 80032e2:	9b03      	ldr	r3, [sp, #12]
 80032e4:	3307      	adds	r3, #7
 80032e6:	f023 0307 	bic.w	r3, r3, #7
 80032ea:	3308      	adds	r3, #8
 80032ec:	9303      	str	r3, [sp, #12]
 80032ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032f0:	444b      	add	r3, r9
 80032f2:	9309      	str	r3, [sp, #36]	; 0x24
 80032f4:	e76d      	b.n	80031d2 <_svfiprintf_r+0x4a>
 80032f6:	fb05 3202 	mla	r2, r5, r2, r3
 80032fa:	2001      	movs	r0, #1
 80032fc:	460f      	mov	r7, r1
 80032fe:	e7a6      	b.n	800324e <_svfiprintf_r+0xc6>
 8003300:	2300      	movs	r3, #0
 8003302:	250a      	movs	r5, #10
 8003304:	4619      	mov	r1, r3
 8003306:	3701      	adds	r7, #1
 8003308:	9305      	str	r3, [sp, #20]
 800330a:	4638      	mov	r0, r7
 800330c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003310:	3a30      	subs	r2, #48	; 0x30
 8003312:	2a09      	cmp	r2, #9
 8003314:	d903      	bls.n	800331e <_svfiprintf_r+0x196>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0c8      	beq.n	80032ac <_svfiprintf_r+0x124>
 800331a:	9105      	str	r1, [sp, #20]
 800331c:	e7c6      	b.n	80032ac <_svfiprintf_r+0x124>
 800331e:	fb05 2101 	mla	r1, r5, r1, r2
 8003322:	2301      	movs	r3, #1
 8003324:	4607      	mov	r7, r0
 8003326:	e7f0      	b.n	800330a <_svfiprintf_r+0x182>
 8003328:	ab03      	add	r3, sp, #12
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	4622      	mov	r2, r4
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <_svfiprintf_r+0x1ec>)
 8003330:	a904      	add	r1, sp, #16
 8003332:	4640      	mov	r0, r8
 8003334:	f3af 8000 	nop.w
 8003338:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800333c:	4681      	mov	r9, r0
 800333e:	d1d6      	bne.n	80032ee <_svfiprintf_r+0x166>
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	065b      	lsls	r3, r3, #25
 8003344:	f53f af35 	bmi.w	80031b2 <_svfiprintf_r+0x2a>
 8003348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800334a:	b01d      	add	sp, #116	; 0x74
 800334c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003350:	ab03      	add	r3, sp, #12
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	4622      	mov	r2, r4
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <_svfiprintf_r+0x1ec>)
 8003358:	a904      	add	r1, sp, #16
 800335a:	4640      	mov	r0, r8
 800335c:	f000 f882 	bl	8003464 <_printf_i>
 8003360:	e7ea      	b.n	8003338 <_svfiprintf_r+0x1b0>
 8003362:	bf00      	nop
 8003364:	080037b8 	.word	0x080037b8
 8003368:	080037be 	.word	0x080037be
 800336c:	080037c2 	.word	0x080037c2
 8003370:	00000000 	.word	0x00000000
 8003374:	080030d5 	.word	0x080030d5

08003378 <_printf_common>:
 8003378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800337c:	4691      	mov	r9, r2
 800337e:	461f      	mov	r7, r3
 8003380:	688a      	ldr	r2, [r1, #8]
 8003382:	690b      	ldr	r3, [r1, #16]
 8003384:	4606      	mov	r6, r0
 8003386:	4293      	cmp	r3, r2
 8003388:	bfb8      	it	lt
 800338a:	4613      	movlt	r3, r2
 800338c:	f8c9 3000 	str.w	r3, [r9]
 8003390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003394:	460c      	mov	r4, r1
 8003396:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800339a:	b112      	cbz	r2, 80033a2 <_printf_common+0x2a>
 800339c:	3301      	adds	r3, #1
 800339e:	f8c9 3000 	str.w	r3, [r9]
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	0699      	lsls	r1, r3, #26
 80033a6:	bf42      	ittt	mi
 80033a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80033ac:	3302      	addmi	r3, #2
 80033ae:	f8c9 3000 	strmi.w	r3, [r9]
 80033b2:	6825      	ldr	r5, [r4, #0]
 80033b4:	f015 0506 	ands.w	r5, r5, #6
 80033b8:	d107      	bne.n	80033ca <_printf_common+0x52>
 80033ba:	f104 0a19 	add.w	sl, r4, #25
 80033be:	68e3      	ldr	r3, [r4, #12]
 80033c0:	f8d9 2000 	ldr.w	r2, [r9]
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	42ab      	cmp	r3, r5
 80033c8:	dc29      	bgt.n	800341e <_printf_common+0xa6>
 80033ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80033ce:	6822      	ldr	r2, [r4, #0]
 80033d0:	3300      	adds	r3, #0
 80033d2:	bf18      	it	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	0692      	lsls	r2, r2, #26
 80033d8:	d42e      	bmi.n	8003438 <_printf_common+0xc0>
 80033da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033de:	4639      	mov	r1, r7
 80033e0:	4630      	mov	r0, r6
 80033e2:	47c0      	blx	r8
 80033e4:	3001      	adds	r0, #1
 80033e6:	d021      	beq.n	800342c <_printf_common+0xb4>
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	68e5      	ldr	r5, [r4, #12]
 80033ec:	f003 0306 	and.w	r3, r3, #6
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	bf18      	it	ne
 80033f4:	2500      	movne	r5, #0
 80033f6:	f8d9 2000 	ldr.w	r2, [r9]
 80033fa:	f04f 0900 	mov.w	r9, #0
 80033fe:	bf08      	it	eq
 8003400:	1aad      	subeq	r5, r5, r2
 8003402:	68a3      	ldr	r3, [r4, #8]
 8003404:	6922      	ldr	r2, [r4, #16]
 8003406:	bf08      	it	eq
 8003408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800340c:	4293      	cmp	r3, r2
 800340e:	bfc4      	itt	gt
 8003410:	1a9b      	subgt	r3, r3, r2
 8003412:	18ed      	addgt	r5, r5, r3
 8003414:	341a      	adds	r4, #26
 8003416:	454d      	cmp	r5, r9
 8003418:	d11a      	bne.n	8003450 <_printf_common+0xd8>
 800341a:	2000      	movs	r0, #0
 800341c:	e008      	b.n	8003430 <_printf_common+0xb8>
 800341e:	2301      	movs	r3, #1
 8003420:	4652      	mov	r2, sl
 8003422:	4639      	mov	r1, r7
 8003424:	4630      	mov	r0, r6
 8003426:	47c0      	blx	r8
 8003428:	3001      	adds	r0, #1
 800342a:	d103      	bne.n	8003434 <_printf_common+0xbc>
 800342c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003434:	3501      	adds	r5, #1
 8003436:	e7c2      	b.n	80033be <_printf_common+0x46>
 8003438:	2030      	movs	r0, #48	; 0x30
 800343a:	18e1      	adds	r1, r4, r3
 800343c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003446:	4422      	add	r2, r4
 8003448:	3302      	adds	r3, #2
 800344a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800344e:	e7c4      	b.n	80033da <_printf_common+0x62>
 8003450:	2301      	movs	r3, #1
 8003452:	4622      	mov	r2, r4
 8003454:	4639      	mov	r1, r7
 8003456:	4630      	mov	r0, r6
 8003458:	47c0      	blx	r8
 800345a:	3001      	adds	r0, #1
 800345c:	d0e6      	beq.n	800342c <_printf_common+0xb4>
 800345e:	f109 0901 	add.w	r9, r9, #1
 8003462:	e7d8      	b.n	8003416 <_printf_common+0x9e>

08003464 <_printf_i>:
 8003464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003468:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800346c:	460c      	mov	r4, r1
 800346e:	7e09      	ldrb	r1, [r1, #24]
 8003470:	b085      	sub	sp, #20
 8003472:	296e      	cmp	r1, #110	; 0x6e
 8003474:	4617      	mov	r7, r2
 8003476:	4606      	mov	r6, r0
 8003478:	4698      	mov	r8, r3
 800347a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800347c:	f000 80b3 	beq.w	80035e6 <_printf_i+0x182>
 8003480:	d822      	bhi.n	80034c8 <_printf_i+0x64>
 8003482:	2963      	cmp	r1, #99	; 0x63
 8003484:	d036      	beq.n	80034f4 <_printf_i+0x90>
 8003486:	d80a      	bhi.n	800349e <_printf_i+0x3a>
 8003488:	2900      	cmp	r1, #0
 800348a:	f000 80b9 	beq.w	8003600 <_printf_i+0x19c>
 800348e:	2958      	cmp	r1, #88	; 0x58
 8003490:	f000 8083 	beq.w	800359a <_printf_i+0x136>
 8003494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003498:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800349c:	e032      	b.n	8003504 <_printf_i+0xa0>
 800349e:	2964      	cmp	r1, #100	; 0x64
 80034a0:	d001      	beq.n	80034a6 <_printf_i+0x42>
 80034a2:	2969      	cmp	r1, #105	; 0x69
 80034a4:	d1f6      	bne.n	8003494 <_printf_i+0x30>
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	6813      	ldr	r3, [r2, #0]
 80034aa:	0605      	lsls	r5, r0, #24
 80034ac:	f103 0104 	add.w	r1, r3, #4
 80034b0:	d52a      	bpl.n	8003508 <_printf_i+0xa4>
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6011      	str	r1, [r2, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	da03      	bge.n	80034c2 <_printf_i+0x5e>
 80034ba:	222d      	movs	r2, #45	; 0x2d
 80034bc:	425b      	negs	r3, r3
 80034be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80034c2:	486f      	ldr	r0, [pc, #444]	; (8003680 <_printf_i+0x21c>)
 80034c4:	220a      	movs	r2, #10
 80034c6:	e039      	b.n	800353c <_printf_i+0xd8>
 80034c8:	2973      	cmp	r1, #115	; 0x73
 80034ca:	f000 809d 	beq.w	8003608 <_printf_i+0x1a4>
 80034ce:	d808      	bhi.n	80034e2 <_printf_i+0x7e>
 80034d0:	296f      	cmp	r1, #111	; 0x6f
 80034d2:	d020      	beq.n	8003516 <_printf_i+0xb2>
 80034d4:	2970      	cmp	r1, #112	; 0x70
 80034d6:	d1dd      	bne.n	8003494 <_printf_i+0x30>
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	f043 0320 	orr.w	r3, r3, #32
 80034de:	6023      	str	r3, [r4, #0]
 80034e0:	e003      	b.n	80034ea <_printf_i+0x86>
 80034e2:	2975      	cmp	r1, #117	; 0x75
 80034e4:	d017      	beq.n	8003516 <_printf_i+0xb2>
 80034e6:	2978      	cmp	r1, #120	; 0x78
 80034e8:	d1d4      	bne.n	8003494 <_printf_i+0x30>
 80034ea:	2378      	movs	r3, #120	; 0x78
 80034ec:	4865      	ldr	r0, [pc, #404]	; (8003684 <_printf_i+0x220>)
 80034ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034f2:	e055      	b.n	80035a0 <_printf_i+0x13c>
 80034f4:	6813      	ldr	r3, [r2, #0]
 80034f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034fa:	1d19      	adds	r1, r3, #4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6011      	str	r1, [r2, #0]
 8003500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003504:	2301      	movs	r3, #1
 8003506:	e08c      	b.n	8003622 <_printf_i+0x1be>
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800350e:	6011      	str	r1, [r2, #0]
 8003510:	bf18      	it	ne
 8003512:	b21b      	sxthne	r3, r3
 8003514:	e7cf      	b.n	80034b6 <_printf_i+0x52>
 8003516:	6813      	ldr	r3, [r2, #0]
 8003518:	6825      	ldr	r5, [r4, #0]
 800351a:	1d18      	adds	r0, r3, #4
 800351c:	6010      	str	r0, [r2, #0]
 800351e:	0628      	lsls	r0, r5, #24
 8003520:	d501      	bpl.n	8003526 <_printf_i+0xc2>
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	e002      	b.n	800352c <_printf_i+0xc8>
 8003526:	0668      	lsls	r0, r5, #25
 8003528:	d5fb      	bpl.n	8003522 <_printf_i+0xbe>
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	296f      	cmp	r1, #111	; 0x6f
 800352e:	bf14      	ite	ne
 8003530:	220a      	movne	r2, #10
 8003532:	2208      	moveq	r2, #8
 8003534:	4852      	ldr	r0, [pc, #328]	; (8003680 <_printf_i+0x21c>)
 8003536:	2100      	movs	r1, #0
 8003538:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800353c:	6865      	ldr	r5, [r4, #4]
 800353e:	2d00      	cmp	r5, #0
 8003540:	60a5      	str	r5, [r4, #8]
 8003542:	f2c0 8095 	blt.w	8003670 <_printf_i+0x20c>
 8003546:	6821      	ldr	r1, [r4, #0]
 8003548:	f021 0104 	bic.w	r1, r1, #4
 800354c:	6021      	str	r1, [r4, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d13d      	bne.n	80035ce <_printf_i+0x16a>
 8003552:	2d00      	cmp	r5, #0
 8003554:	f040 808e 	bne.w	8003674 <_printf_i+0x210>
 8003558:	4665      	mov	r5, ip
 800355a:	2a08      	cmp	r2, #8
 800355c:	d10b      	bne.n	8003576 <_printf_i+0x112>
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	07db      	lsls	r3, r3, #31
 8003562:	d508      	bpl.n	8003576 <_printf_i+0x112>
 8003564:	6923      	ldr	r3, [r4, #16]
 8003566:	6862      	ldr	r2, [r4, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	bfde      	ittt	le
 800356c:	2330      	movle	r3, #48	; 0x30
 800356e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003572:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003576:	ebac 0305 	sub.w	r3, ip, r5
 800357a:	6123      	str	r3, [r4, #16]
 800357c:	f8cd 8000 	str.w	r8, [sp]
 8003580:	463b      	mov	r3, r7
 8003582:	aa03      	add	r2, sp, #12
 8003584:	4621      	mov	r1, r4
 8003586:	4630      	mov	r0, r6
 8003588:	f7ff fef6 	bl	8003378 <_printf_common>
 800358c:	3001      	adds	r0, #1
 800358e:	d14d      	bne.n	800362c <_printf_i+0x1c8>
 8003590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003594:	b005      	add	sp, #20
 8003596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800359a:	4839      	ldr	r0, [pc, #228]	; (8003680 <_printf_i+0x21c>)
 800359c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80035a0:	6813      	ldr	r3, [r2, #0]
 80035a2:	6821      	ldr	r1, [r4, #0]
 80035a4:	1d1d      	adds	r5, r3, #4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6015      	str	r5, [r2, #0]
 80035aa:	060a      	lsls	r2, r1, #24
 80035ac:	d50b      	bpl.n	80035c6 <_printf_i+0x162>
 80035ae:	07ca      	lsls	r2, r1, #31
 80035b0:	bf44      	itt	mi
 80035b2:	f041 0120 	orrmi.w	r1, r1, #32
 80035b6:	6021      	strmi	r1, [r4, #0]
 80035b8:	b91b      	cbnz	r3, 80035c2 <_printf_i+0x15e>
 80035ba:	6822      	ldr	r2, [r4, #0]
 80035bc:	f022 0220 	bic.w	r2, r2, #32
 80035c0:	6022      	str	r2, [r4, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	e7b7      	b.n	8003536 <_printf_i+0xd2>
 80035c6:	064d      	lsls	r5, r1, #25
 80035c8:	bf48      	it	mi
 80035ca:	b29b      	uxthmi	r3, r3
 80035cc:	e7ef      	b.n	80035ae <_printf_i+0x14a>
 80035ce:	4665      	mov	r5, ip
 80035d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80035d4:	fb02 3311 	mls	r3, r2, r1, r3
 80035d8:	5cc3      	ldrb	r3, [r0, r3]
 80035da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035de:	460b      	mov	r3, r1
 80035e0:	2900      	cmp	r1, #0
 80035e2:	d1f5      	bne.n	80035d0 <_printf_i+0x16c>
 80035e4:	e7b9      	b.n	800355a <_printf_i+0xf6>
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	6825      	ldr	r5, [r4, #0]
 80035ea:	1d18      	adds	r0, r3, #4
 80035ec:	6961      	ldr	r1, [r4, #20]
 80035ee:	6010      	str	r0, [r2, #0]
 80035f0:	0628      	lsls	r0, r5, #24
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	d501      	bpl.n	80035fa <_printf_i+0x196>
 80035f6:	6019      	str	r1, [r3, #0]
 80035f8:	e002      	b.n	8003600 <_printf_i+0x19c>
 80035fa:	066a      	lsls	r2, r5, #25
 80035fc:	d5fb      	bpl.n	80035f6 <_printf_i+0x192>
 80035fe:	8019      	strh	r1, [r3, #0]
 8003600:	2300      	movs	r3, #0
 8003602:	4665      	mov	r5, ip
 8003604:	6123      	str	r3, [r4, #16]
 8003606:	e7b9      	b.n	800357c <_printf_i+0x118>
 8003608:	6813      	ldr	r3, [r2, #0]
 800360a:	1d19      	adds	r1, r3, #4
 800360c:	6011      	str	r1, [r2, #0]
 800360e:	681d      	ldr	r5, [r3, #0]
 8003610:	6862      	ldr	r2, [r4, #4]
 8003612:	2100      	movs	r1, #0
 8003614:	4628      	mov	r0, r5
 8003616:	f000 f837 	bl	8003688 <memchr>
 800361a:	b108      	cbz	r0, 8003620 <_printf_i+0x1bc>
 800361c:	1b40      	subs	r0, r0, r5
 800361e:	6060      	str	r0, [r4, #4]
 8003620:	6863      	ldr	r3, [r4, #4]
 8003622:	6123      	str	r3, [r4, #16]
 8003624:	2300      	movs	r3, #0
 8003626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800362a:	e7a7      	b.n	800357c <_printf_i+0x118>
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	462a      	mov	r2, r5
 8003630:	4639      	mov	r1, r7
 8003632:	4630      	mov	r0, r6
 8003634:	47c0      	blx	r8
 8003636:	3001      	adds	r0, #1
 8003638:	d0aa      	beq.n	8003590 <_printf_i+0x12c>
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	079b      	lsls	r3, r3, #30
 800363e:	d413      	bmi.n	8003668 <_printf_i+0x204>
 8003640:	68e0      	ldr	r0, [r4, #12]
 8003642:	9b03      	ldr	r3, [sp, #12]
 8003644:	4298      	cmp	r0, r3
 8003646:	bfb8      	it	lt
 8003648:	4618      	movlt	r0, r3
 800364a:	e7a3      	b.n	8003594 <_printf_i+0x130>
 800364c:	2301      	movs	r3, #1
 800364e:	464a      	mov	r2, r9
 8003650:	4639      	mov	r1, r7
 8003652:	4630      	mov	r0, r6
 8003654:	47c0      	blx	r8
 8003656:	3001      	adds	r0, #1
 8003658:	d09a      	beq.n	8003590 <_printf_i+0x12c>
 800365a:	3501      	adds	r5, #1
 800365c:	68e3      	ldr	r3, [r4, #12]
 800365e:	9a03      	ldr	r2, [sp, #12]
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	42ab      	cmp	r3, r5
 8003664:	dcf2      	bgt.n	800364c <_printf_i+0x1e8>
 8003666:	e7eb      	b.n	8003640 <_printf_i+0x1dc>
 8003668:	2500      	movs	r5, #0
 800366a:	f104 0919 	add.w	r9, r4, #25
 800366e:	e7f5      	b.n	800365c <_printf_i+0x1f8>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1ac      	bne.n	80035ce <_printf_i+0x16a>
 8003674:	7803      	ldrb	r3, [r0, #0]
 8003676:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800367a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800367e:	e76c      	b.n	800355a <_printf_i+0xf6>
 8003680:	080037c9 	.word	0x080037c9
 8003684:	080037da 	.word	0x080037da

08003688 <memchr>:
 8003688:	b510      	push	{r4, lr}
 800368a:	b2c9      	uxtb	r1, r1
 800368c:	4402      	add	r2, r0
 800368e:	4290      	cmp	r0, r2
 8003690:	4603      	mov	r3, r0
 8003692:	d101      	bne.n	8003698 <memchr+0x10>
 8003694:	2300      	movs	r3, #0
 8003696:	e003      	b.n	80036a0 <memchr+0x18>
 8003698:	781c      	ldrb	r4, [r3, #0]
 800369a:	3001      	adds	r0, #1
 800369c:	428c      	cmp	r4, r1
 800369e:	d1f6      	bne.n	800368e <memchr+0x6>
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd10      	pop	{r4, pc}

080036a4 <memcpy>:
 80036a4:	b510      	push	{r4, lr}
 80036a6:	1e43      	subs	r3, r0, #1
 80036a8:	440a      	add	r2, r1
 80036aa:	4291      	cmp	r1, r2
 80036ac:	d100      	bne.n	80036b0 <memcpy+0xc>
 80036ae:	bd10      	pop	{r4, pc}
 80036b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036b8:	e7f7      	b.n	80036aa <memcpy+0x6>

080036ba <memmove>:
 80036ba:	4288      	cmp	r0, r1
 80036bc:	b510      	push	{r4, lr}
 80036be:	eb01 0302 	add.w	r3, r1, r2
 80036c2:	d807      	bhi.n	80036d4 <memmove+0x1a>
 80036c4:	1e42      	subs	r2, r0, #1
 80036c6:	4299      	cmp	r1, r3
 80036c8:	d00a      	beq.n	80036e0 <memmove+0x26>
 80036ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80036d2:	e7f8      	b.n	80036c6 <memmove+0xc>
 80036d4:	4283      	cmp	r3, r0
 80036d6:	d9f5      	bls.n	80036c4 <memmove+0xa>
 80036d8:	1881      	adds	r1, r0, r2
 80036da:	1ad2      	subs	r2, r2, r3
 80036dc:	42d3      	cmn	r3, r2
 80036de:	d100      	bne.n	80036e2 <memmove+0x28>
 80036e0:	bd10      	pop	{r4, pc}
 80036e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80036ea:	e7f7      	b.n	80036dc <memmove+0x22>

080036ec <_realloc_r>:
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ee:	4607      	mov	r7, r0
 80036f0:	4614      	mov	r4, r2
 80036f2:	460e      	mov	r6, r1
 80036f4:	b921      	cbnz	r1, 8003700 <_realloc_r+0x14>
 80036f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036fa:	4611      	mov	r1, r2
 80036fc:	f7ff bc1a 	b.w	8002f34 <_malloc_r>
 8003700:	b922      	cbnz	r2, 800370c <_realloc_r+0x20>
 8003702:	f7ff fbcb 	bl	8002e9c <_free_r>
 8003706:	4625      	mov	r5, r4
 8003708:	4628      	mov	r0, r5
 800370a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800370c:	f000 f814 	bl	8003738 <_malloc_usable_size_r>
 8003710:	42a0      	cmp	r0, r4
 8003712:	d20f      	bcs.n	8003734 <_realloc_r+0x48>
 8003714:	4621      	mov	r1, r4
 8003716:	4638      	mov	r0, r7
 8003718:	f7ff fc0c 	bl	8002f34 <_malloc_r>
 800371c:	4605      	mov	r5, r0
 800371e:	2800      	cmp	r0, #0
 8003720:	d0f2      	beq.n	8003708 <_realloc_r+0x1c>
 8003722:	4631      	mov	r1, r6
 8003724:	4622      	mov	r2, r4
 8003726:	f7ff ffbd 	bl	80036a4 <memcpy>
 800372a:	4631      	mov	r1, r6
 800372c:	4638      	mov	r0, r7
 800372e:	f7ff fbb5 	bl	8002e9c <_free_r>
 8003732:	e7e9      	b.n	8003708 <_realloc_r+0x1c>
 8003734:	4635      	mov	r5, r6
 8003736:	e7e7      	b.n	8003708 <_realloc_r+0x1c>

08003738 <_malloc_usable_size_r>:
 8003738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800373c:	1f18      	subs	r0, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	bfbc      	itt	lt
 8003742:	580b      	ldrlt	r3, [r1, r0]
 8003744:	18c0      	addlt	r0, r0, r3
 8003746:	4770      	bx	lr

08003748 <_init>:
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	bf00      	nop
 800374c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374e:	bc08      	pop	{r3}
 8003750:	469e      	mov	lr, r3
 8003752:	4770      	bx	lr

08003754 <_fini>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr
