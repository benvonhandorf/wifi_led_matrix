
GraphicsDriver_STM32F411RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008490  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000054  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000f0  08008934  08008934  00018934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a24  08008a24  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008a24  08008a24  00018a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08008a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e84  20000174  08008ba8  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ff8  08008ba8  00021ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fb9  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385e  00000000  00000000  0003615d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000399c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  0003aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4fb  00000000  00000000  0003b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013280  00000000  00000000  00056eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000927f5  00000000  00000000  0006a133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009f  00000000  00000000  000fc928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005024  00000000  00000000  000fc9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008618 	.word	0x08008618

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	08008618 	.word	0x08008618

080001e0 <_ZN7RequestC1Ev>:

#include "Protocol.h"
#include "Request.h"
#include <string.h>

Request::Request() {
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	4a0c      	ldr	r2, [pc, #48]	; (800021c <_ZN7RequestC1Ev+0x3c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	601a      	str	r2, [r3, #0]
	for (int c = 0; c < NETWORK_PACKET_SIZE; c++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001f8:	da09      	bge.n	800020e <_ZN7RequestC1Ev+0x2e>
		body[c] = 0x00;
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	4413      	add	r3, r2
 8000200:	3308      	adds	r3, #8
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]
	for (int c = 0; c < NETWORK_PACKET_SIZE; c++) {
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	3301      	adds	r3, #1
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	e7f1      	b.n	80001f2 <_ZN7RequestC1Ev+0x12>
	}
}
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4618      	mov	r0, r3
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	080086f4 	.word	0x080086f4

08000220 <_ZN7RequestD1Ev>:

Request::~Request() {
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <_ZN7RequestD1Ev+0x1c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

}
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	080086f4 	.word	0x080086f4

08000240 <_ZN7RequestD0Ev>:
Request::~Request() {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
}
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ffe9 	bl	8000220 <_ZN7RequestD1Ev>
 800024e:	f640 0108 	movw	r1, #2056	; 0x808
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f007 fc58 	bl	8007b08 <_ZdlPvj>
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4618      	mov	r0, r3
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}

08000262 <_ZN7Request5ParseEPht>:

bool Request::Parse(uint8_t *data, uint16_t dataLength) {
 8000262:	b580      	push	{r7, lr}
 8000264:	b084      	sub	sp, #16
 8000266:	af00      	add	r7, sp, #0
 8000268:	60f8      	str	r0, [r7, #12]
 800026a:	60b9      	str	r1, [r7, #8]
 800026c:	4613      	mov	r3, r2
 800026e:	80fb      	strh	r3, [r7, #6]
	if (dataLength < 3 || data == 0) {
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	2b02      	cmp	r3, #2
 8000274:	d902      	bls.n	800027c <_ZN7Request5ParseEPht+0x1a>
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d101      	bne.n	8000280 <_ZN7Request5ParseEPht+0x1e>
		return false;
 800027c:	2300      	movs	r3, #0
 800027e:	e039      	b.n	80002f4 <_ZN7Request5ParseEPht+0x92>
	}

	type = data[0];
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	711a      	strb	r2, [r3, #4]
	bodyLength = (data[1] << 8) | data[2];
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	3301      	adds	r3, #1
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	021b      	lsls	r3, r3, #8
 8000290:	b21a      	sxth	r2, r3
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	3302      	adds	r3, #2
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	b21b      	sxth	r3, r3
 800029a:	4313      	orrs	r3, r2
 800029c:	b21b      	sxth	r3, r3
 800029e:	b29a      	uxth	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	80da      	strh	r2, [r3, #6]

	memcpy(this->body, data + 3, bodyLength);
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f103 0008 	add.w	r0, r3, #8
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	1cd9      	adds	r1, r3, #3
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	88db      	ldrh	r3, [r3, #6]
 80002b2:	461a      	mov	r2, r3
 80002b4:	f007 fd36 	bl	8007d24 <memcpy>

	switch (type) {
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	2b80      	cmp	r3, #128	; 0x80
 80002be:	d016      	beq.n	80002ee <_ZN7Request5ParseEPht+0x8c>
 80002c0:	2b80      	cmp	r3, #128	; 0x80
 80002c2:	dc16      	bgt.n	80002f2 <_ZN7Request5ParseEPht+0x90>
 80002c4:	2b04      	cmp	r3, #4
 80002c6:	dc14      	bgt.n	80002f2 <_ZN7Request5ParseEPht+0x90>
 80002c8:	2b03      	cmp	r3, #3
 80002ca:	da04      	bge.n	80002d6 <_ZN7Request5ParseEPht+0x74>
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d007      	beq.n	80002e0 <_ZN7Request5ParseEPht+0x7e>
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	d00a      	beq.n	80002ea <_ZN7Request5ParseEPht+0x88>
 80002d4:	e00d      	b.n	80002f2 <_ZN7Request5ParseEPht+0x90>
	case RequestType::ClearAssignPixelData:
	case RequestType::AssignPixelData:
		return ParseClearPixelDataRequest();
 80002d6:	68f8      	ldr	r0, [r7, #12]
 80002d8:	f000 f827 	bl	800032a <_ZN7Request26ParseClearPixelDataRequestEv>
 80002dc:	4603      	mov	r3, r0
 80002de:	e009      	b.n	80002f4 <_ZN7Request5ParseEPht+0x92>
	case RequestType::SetPixelData:
		return ParseSetPixelDataRequest();
 80002e0:	68f8      	ldr	r0, [r7, #12]
 80002e2:	f000 f80b 	bl	80002fc <_ZN7Request24ParseSetPixelDataRequestEv>
 80002e6:	4603      	mov	r3, r0
 80002e8:	e004      	b.n	80002f4 <_ZN7Request5ParseEPht+0x92>
	case RequestType::Commit:
		return true;
 80002ea:	2301      	movs	r3, #1
 80002ec:	e002      	b.n	80002f4 <_ZN7Request5ParseEPht+0x92>
	case RequestType::Configure:
		return true;
 80002ee:	2301      	movs	r3, #1
 80002f0:	e000      	b.n	80002f4 <_ZN7Request5ParseEPht+0x92>
	}

	return false;
 80002f2:	2300      	movs	r3, #0
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <_ZN7Request24ParseSetPixelDataRequestEv>:

bool Request::ParseSetPixelDataRequest() {
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	if (bodyLength % 4 != 0 || bodyLength == 4) {
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	88db      	ldrh	r3, [r3, #6]
 8000308:	f003 0303 	and.w	r3, r3, #3
 800030c:	2b00      	cmp	r3, #0
 800030e:	d103      	bne.n	8000318 <_ZN7Request24ParseSetPixelDataRequestEv+0x1c>
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	88db      	ldrh	r3, [r3, #6]
 8000314:	2b04      	cmp	r3, #4
 8000316:	d101      	bne.n	800031c <_ZN7Request24ParseSetPixelDataRequestEv+0x20>
		return false;
 8000318:	2300      	movs	r3, #0
 800031a:	e000      	b.n	800031e <_ZN7Request24ParseSetPixelDataRequestEv+0x22>
	}

	return true;
 800031c:	2301      	movs	r3, #1
}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr

0800032a <_ZN7Request26ParseClearPixelDataRequestEv>:

bool Request::ParseClearPixelDataRequest() {
 800032a:	b480      	push	{r7}
 800032c:	b083      	sub	sp, #12
 800032e:	af00      	add	r7, sp, #0
 8000330:	6078      	str	r0, [r7, #4]
	if (bodyLength % 8 != 0) {
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	88db      	ldrh	r3, [r3, #6]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <_ZN7Request26ParseClearPixelDataRequestEv+0x18>
		return false;
 800033e:	2300      	movs	r3, #0
 8000340:	e000      	b.n	8000344 <_ZN7Request26ParseClearPixelDataRequestEv+0x1a>
	}

	return true;
 8000342:	2301      	movs	r3, #1
}
 8000344:	4618      	mov	r0, r3
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <_ZN16CommandProcessorC1Ev>:
 */

#include "CommandProcessor.h"
#include "string.h"

CommandProcessor::CommandProcessor() {
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <_ZN16CommandProcessorC1Ev+0x1c>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4618      	mov	r0, r3
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	0800871c 	.word	0x0800871c

08000370 <_ZN16CommandProcessorD1Ev>:

CommandProcessor::~CommandProcessor() {
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <_ZN16CommandProcessorD1Ev+0x1c>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4618      	mov	r0, r3
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	0800871c 	.word	0x0800871c

08000390 <_ZN16CommandProcessorD0Ev>:
CommandProcessor::~CommandProcessor() {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
}
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f7ff ffe9 	bl	8000370 <_ZN16CommandProcessorD1Ev>
 800039e:	2104      	movs	r1, #4
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f007 fbb1 	bl	8007b08 <_ZdlPvj>
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <_ZN16CommandProcessor12SetPixelDataEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>:

void CommandProcessor::SetPixelData(Request *request, DisplayDriver *display,
		Configuration *configuration, PixelMapping *pixelMapping) {
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b08f      	sub	sp, #60	; 0x3c
 80003b4:	af04      	add	r7, sp, #16
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
 80003bc:	603b      	str	r3, [r7, #0]
	uint16_t x = request->body[0] << 8 | request->body[1];
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	7a1b      	ldrb	r3, [r3, #8]
 80003c2:	021b      	lsls	r3, r3, #8
 80003c4:	b21a      	sxth	r2, r3
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	7a5b      	ldrb	r3, [r3, #9]
 80003ca:	b21b      	sxth	r3, r3
 80003cc:	4313      	orrs	r3, r2
 80003ce:	b21b      	sxth	r3, r3
 80003d0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t y = request->body[2] << 8 | request->body[3];
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	7a9b      	ldrb	r3, [r3, #10]
 80003d6:	021b      	lsls	r3, r3, #8
 80003d8:	b21a      	sxth	r2, r3
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	7adb      	ldrb	r3, [r3, #11]
 80003de:	b21b      	sxth	r3, r3
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b21b      	sxth	r3, r3
 80003e4:	847b      	strh	r3, [r7, #34]	; 0x22

	uint16_t pixelStart = 4;
 80003e6:	2304      	movs	r3, #4
 80003e8:	84bb      	strh	r3, [r7, #36]	; 0x24

	while (pixelStart < request->bodyLength) {
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	88db      	ldrh	r3, [r3, #6]
 80003ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d240      	bcs.n	8000476 <_ZN16CommandProcessor12SetPixelDataEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0xc6>
		uint8_t r = request->body[pixelStart + 0];
 80003f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80003f6:	68ba      	ldr	r2, [r7, #8]
 80003f8:	4413      	add	r3, r2
 80003fa:	7a1b      	ldrb	r3, [r3, #8]
 80003fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		uint8_t g = request->body[pixelStart + 1];
 8000400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000402:	3301      	adds	r3, #1
 8000404:	68ba      	ldr	r2, [r7, #8]
 8000406:	4413      	add	r3, r2
 8000408:	7a1b      	ldrb	r3, [r3, #8]
 800040a:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t b = request->body[pixelStart + 2];
 800040e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000410:	3302      	adds	r3, #2
 8000412:	68ba      	ldr	r2, [r7, #8]
 8000414:	4413      	add	r3, r2
 8000416:	7a1b      	ldrb	r3, [r3, #8]
 8000418:	77fb      	strb	r3, [r7, #31]
		uint8_t w = request->body[pixelStart + 3];
 800041a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800041c:	3303      	adds	r3, #3
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	4413      	add	r3, r2
 8000422:	7a1b      	ldrb	r3, [r3, #8]
 8000424:	77bb      	strb	r3, [r7, #30]

		PixelMapping::Pixel physicalPixel =
				pixelMapping->mapVirtualPixelToPhysicalPixel(
						PixelMapping::Pixel(x, y));
 8000426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	681c      	ldr	r4, [r3, #0]
 800042c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800042e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000430:	f107 0318 	add.w	r3, r7, #24
 8000434:	4618      	mov	r0, r3
 8000436:	f006 fe4d 	bl	80070d4 <_ZN12PixelMapping5PixelC1Ett>
 800043a:	69b9      	ldr	r1, [r7, #24]
 800043c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800043e:	47a0      	blx	r4
 8000440:	4603      	mov	r3, r0
 8000442:	617b      	str	r3, [r7, #20]

		display->SetPixel(physicalPixel.x, physicalPixel.y, r, g, b, w);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3308      	adds	r3, #8
 800044a:	681c      	ldr	r4, [r3, #0]
 800044c:	8ab9      	ldrh	r1, [r7, #20]
 800044e:	8afa      	ldrh	r2, [r7, #22]
 8000450:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
 8000454:	7fbb      	ldrb	r3, [r7, #30]
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	7ffb      	ldrb	r3, [r7, #31]
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	4603      	mov	r3, r0
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	47a0      	blx	r4

		pixelStart += 4;
 8000468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800046a:	3304      	adds	r3, #4
 800046c:	84bb      	strh	r3, [r7, #36]	; 0x24
		x++;
 800046e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000470:	3301      	adds	r3, #1
 8000472:	84fb      	strh	r3, [r7, #38]	; 0x26
	while (pixelStart < request->bodyLength) {
 8000474:	e7b9      	b.n	80003ea <_ZN16CommandProcessor12SetPixelDataEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0x3a>
	}
}
 8000476:	bf00      	nop
 8000478:	372c      	adds	r7, #44	; 0x2c
 800047a:	46bd      	mov	sp, r7
 800047c:	bd90      	pop	{r4, r7, pc}

0800047e <_ZN16CommandProcessor5ClearEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>:

void CommandProcessor::Clear(Request *request, DisplayDriver *display,
		Configuration *configuration, PixelMapping *pixelMapping) {
 800047e:	b590      	push	{r4, r7, lr}
 8000480:	b08d      	sub	sp, #52	; 0x34
 8000482:	af04      	add	r7, sp, #16
 8000484:	60f8      	str	r0, [r7, #12]
 8000486:	60b9      	str	r1, [r7, #8]
 8000488:	607a      	str	r2, [r7, #4]
 800048a:	603b      	str	r3, [r7, #0]
	for (uint16_t x = 0; x < configuration->getWidth(); x++) {
 800048c:	2300      	movs	r3, #0
 800048e:	83fb      	strh	r3, [r7, #30]
 8000490:	6838      	ldr	r0, [r7, #0]
 8000492:	f007 fa93 	bl	80079bc <_ZN13Configuration8getWidthEv>
 8000496:	4603      	mov	r3, r0
 8000498:	461a      	mov	r2, r3
 800049a:	8bfb      	ldrh	r3, [r7, #30]
 800049c:	4293      	cmp	r3, r2
 800049e:	bf34      	ite	cc
 80004a0:	2301      	movcc	r3, #1
 80004a2:	2300      	movcs	r3, #0
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d034      	beq.n	8000514 <_ZN16CommandProcessor5ClearEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0x96>
		for (uint16_t y = 0; y < configuration->getHeight(); y++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	83bb      	strh	r3, [r7, #28]
 80004ae:	6838      	ldr	r0, [r7, #0]
 80004b0:	f007 fa9c 	bl	80079ec <_ZN13Configuration9getHeightEv>
 80004b4:	4603      	mov	r3, r0
 80004b6:	461a      	mov	r2, r3
 80004b8:	8bbb      	ldrh	r3, [r7, #28]
 80004ba:	4293      	cmp	r3, r2
 80004bc:	bf34      	ite	cc
 80004be:	2301      	movcc	r3, #1
 80004c0:	2300      	movcs	r3, #0
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d021      	beq.n	800050c <_ZN16CommandProcessor5ClearEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0x8e>
			PixelMapping::Pixel physicalPixel =
					pixelMapping->mapVirtualPixelToPhysicalPixel(
							PixelMapping::Pixel(x, y));
 80004c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	681c      	ldr	r4, [r3, #0]
 80004ce:	8bba      	ldrh	r2, [r7, #28]
 80004d0:	8bf9      	ldrh	r1, [r7, #30]
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	4618      	mov	r0, r3
 80004d8:	f006 fdfc 	bl	80070d4 <_ZN12PixelMapping5PixelC1Ett>
 80004dc:	69b9      	ldr	r1, [r7, #24]
 80004de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80004e0:	47a0      	blx	r4
 80004e2:	4603      	mov	r3, r0
 80004e4:	617b      	str	r3, [r7, #20]

			display->SetPixel(physicalPixel.x, physicalPixel.y, 0, 0, 0, 0);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3308      	adds	r3, #8
 80004ec:	681c      	ldr	r4, [r3, #0]
 80004ee:	8ab9      	ldrh	r1, [r7, #20]
 80004f0:	8afa      	ldrh	r2, [r7, #22]
 80004f2:	2300      	movs	r3, #0
 80004f4:	9302      	str	r3, [sp, #8]
 80004f6:	2300      	movs	r3, #0
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2300      	movs	r3, #0
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	47a0      	blx	r4
		for (uint16_t y = 0; y < configuration->getHeight(); y++) {
 8000504:	8bbb      	ldrh	r3, [r7, #28]
 8000506:	3301      	adds	r3, #1
 8000508:	83bb      	strh	r3, [r7, #28]
 800050a:	e7d0      	b.n	80004ae <_ZN16CommandProcessor5ClearEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0x30>
	for (uint16_t x = 0; x < configuration->getWidth(); x++) {
 800050c:	8bfb      	ldrh	r3, [r7, #30]
 800050e:	3301      	adds	r3, #1
 8000510:	83fb      	strh	r3, [r7, #30]
 8000512:	e7bd      	b.n	8000490 <_ZN16CommandProcessor5ClearEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0x12>
		}
	}
}
 8000514:	bf00      	nop
 8000516:	3724      	adds	r7, #36	; 0x24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd90      	pop	{r4, r7, pc}

0800051c <_ZN16CommandProcessor15AssignPixelDataEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>:

void CommandProcessor::AssignPixelData(Request *request, DisplayDriver *display,
		Configuration *configuration, PixelMapping *pixelMapping) {
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b08f      	sub	sp, #60	; 0x3c
 8000520:	af04      	add	r7, sp, #16
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
	for (uint16_t offset = 0; offset < request->bodyLength; offset += 8) {
 800052a:	2300      	movs	r3, #0
 800052c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	88db      	ldrh	r3, [r3, #6]
 8000532:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000534:	429a      	cmp	r2, r3
 8000536:	d25d      	bcs.n	80005f4 <_ZN16CommandProcessor15AssignPixelDataEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0xd8>

		uint16_t x = request->body[offset + 0] << 8 | request->body[offset + 1];
 8000538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	4413      	add	r3, r2
 800053e:	7a1b      	ldrb	r3, [r3, #8]
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	b21a      	sxth	r2, r3
 8000544:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000546:	3301      	adds	r3, #1
 8000548:	68b9      	ldr	r1, [r7, #8]
 800054a:	440b      	add	r3, r1
 800054c:	7a1b      	ldrb	r3, [r3, #8]
 800054e:	b21b      	sxth	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b21b      	sxth	r3, r3
 8000554:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t y = request->body[offset + 2] << 8 | request->body[offset + 3];
 8000556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000558:	3302      	adds	r3, #2
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	4413      	add	r3, r2
 800055e:	7a1b      	ldrb	r3, [r3, #8]
 8000560:	021b      	lsls	r3, r3, #8
 8000562:	b21a      	sxth	r2, r3
 8000564:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000566:	3303      	adds	r3, #3
 8000568:	68b9      	ldr	r1, [r7, #8]
 800056a:	440b      	add	r3, r1
 800056c:	7a1b      	ldrb	r3, [r3, #8]
 800056e:	b21b      	sxth	r3, r3
 8000570:	4313      	orrs	r3, r2
 8000572:	b21b      	sxth	r3, r3
 8000574:	847b      	strh	r3, [r7, #34]	; 0x22

		uint8_t r = request->body[offset + 4];
 8000576:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000578:	3304      	adds	r3, #4
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	4413      	add	r3, r2
 800057e:	7a1b      	ldrb	r3, [r3, #8]
 8000580:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		uint8_t g = request->body[offset + 5];
 8000584:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000586:	3305      	adds	r3, #5
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	4413      	add	r3, r2
 800058c:	7a1b      	ldrb	r3, [r3, #8]
 800058e:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t b = request->body[offset + 6];
 8000592:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000594:	3306      	adds	r3, #6
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	4413      	add	r3, r2
 800059a:	7a1b      	ldrb	r3, [r3, #8]
 800059c:	77fb      	strb	r3, [r7, #31]
		uint8_t w = request->body[offset + 7];
 800059e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005a0:	3307      	adds	r3, #7
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	4413      	add	r3, r2
 80005a6:	7a1b      	ldrb	r3, [r3, #8]
 80005a8:	77bb      	strb	r3, [r7, #30]

		PixelMapping::Pixel physicalPixel =
				pixelMapping->mapVirtualPixelToPhysicalPixel(
						PixelMapping::Pixel(x, y));
 80005aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	681c      	ldr	r4, [r3, #0]
 80005b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80005b2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80005b4:	f107 0318 	add.w	r3, r7, #24
 80005b8:	4618      	mov	r0, r3
 80005ba:	f006 fd8b 	bl	80070d4 <_ZN12PixelMapping5PixelC1Ett>
 80005be:	69b9      	ldr	r1, [r7, #24]
 80005c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005c2:	47a0      	blx	r4
 80005c4:	4603      	mov	r3, r0
 80005c6:	617b      	str	r3, [r7, #20]

		display->SetPixel(physicalPixel.x, physicalPixel.y, r, g, b, w);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3308      	adds	r3, #8
 80005ce:	681c      	ldr	r4, [r3, #0]
 80005d0:	8ab9      	ldrh	r1, [r7, #20]
 80005d2:	8afa      	ldrh	r2, [r7, #22]
 80005d4:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
 80005d8:	7fbb      	ldrb	r3, [r7, #30]
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	7ffb      	ldrb	r3, [r7, #31]
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	4603      	mov	r3, r0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	47a0      	blx	r4
	for (uint16_t offset = 0; offset < request->bodyLength; offset += 8) {
 80005ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005ee:	3308      	adds	r3, #8
 80005f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80005f2:	e79c      	b.n	800052e <_ZN16CommandProcessor15AssignPixelDataEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0x12>
	}
}
 80005f4:	bf00      	nop
 80005f6:	372c      	adds	r7, #44	; 0x2c
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd90      	pop	{r4, r7, pc}

080005fc <_ZN16CommandProcessor6CommitEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>:

void CommandProcessor::Commit(Request *request, DisplayDriver *display,
		Configuration *configuration, PixelMapping *pixelMapping) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	603b      	str	r3, [r7, #0]
	display->SwapBuffer();
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	330c      	adds	r3, #12
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	4798      	blx	r3
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_ZN16CommandProcessor9ConfigureEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>:

void CommandProcessor::Configure(Request *request, DisplayDriver *display,
		Configuration *configuration, PixelMapping *pixelMapping) {
 800061e:	b480      	push	{r7}
 8000620:	b087      	sub	sp, #28
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
 800062a:	603b      	str	r3, [r7, #0]
	if(request->bodyLength == sizeof(struct ConfigurationDefinition)) {
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	88db      	ldrh	r3, [r3, #6]
 8000630:	2b08      	cmp	r3, #8
 8000632:	d135      	bne.n	80006a0 <_ZN16CommandProcessor9ConfigureEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0x82>
		struct ConfigurationDefinition configurationDefinition;

		memcpy(&configurationDefinition, request->body, sizeof(struct ConfigurationDefinition));
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	f103 0208 	add.w	r2, r3, #8
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	6810      	ldr	r0, [r2, #0]
 8000640:	6851      	ldr	r1, [r2, #4]
 8000642:	c303      	stmia	r3!, {r0, r1}

		if(configurationDefinition.version == CONFIGURATION_VERSION) {
 8000644:	7c3b      	ldrb	r3, [r7, #16]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d12a      	bne.n	80006a0 <_ZN16CommandProcessor9ConfigureEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0x82>
			configuration->useMatrix = configurationDefinition.displayType == ConfigurationDisplayType::Matrix;
 800064a:	7c7b      	ldrb	r3, [r7, #17]
 800064c:	2b01      	cmp	r3, #1
 800064e:	bf0c      	ite	eq
 8000650:	2301      	moveq	r3, #1
 8000652:	2300      	movne	r3, #0
 8000654:	b2da      	uxtb	r2, r3
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	701a      	strb	r2, [r3, #0]
			configuration->useStrands = configurationDefinition.displayType == ConfigurationDisplayType::WS2812Strand;
 800065a:	7c7b      	ldrb	r3, [r7, #17]
 800065c:	2b02      	cmp	r3, #2
 800065e:	bf0c      	ite	eq
 8000660:	2301      	moveq	r3, #1
 8000662:	2300      	movne	r3, #0
 8000664:	b2da      	uxtb	r2, r3
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	709a      	strb	r2, [r3, #2]
			configuration->elementWidth = BYTES_TO_UINT16(configurationDefinition.widthH, configurationDefinition.widthL);
 800066a:	7cbb      	ldrb	r3, [r7, #18]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	b21a      	sxth	r2, r3
 8000670:	7cfb      	ldrb	r3, [r7, #19]
 8000672:	b21b      	sxth	r3, r3
 8000674:	4313      	orrs	r3, r2
 8000676:	b21b      	sxth	r3, r3
 8000678:	b29a      	uxth	r2, r3
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	80da      	strh	r2, [r3, #6]
			configuration->elementHeight = BYTES_TO_UINT16(configurationDefinition.heightH, configurationDefinition.heightL);
 800067e:	7d3b      	ldrb	r3, [r7, #20]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	b21a      	sxth	r2, r3
 8000684:	7d7b      	ldrb	r3, [r7, #21]
 8000686:	b21b      	sxth	r3, r3
 8000688:	4313      	orrs	r3, r2
 800068a:	b21b      	sxth	r3, r3
 800068c:	b29a      	uxth	r2, r3
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	811a      	strh	r2, [r3, #8]
			configuration->elementCount = configurationDefinition.elements;
 8000692:	7dbb      	ldrb	r3, [r7, #22]
 8000694:	b29a      	uxth	r2, r3
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	809a      	strh	r2, [r3, #4]
			configuration->pixelConfiguration = (Configuration::PixelConfiguration) configurationDefinition.pixelMappingType;
 800069a:	7dfa      	ldrb	r2, [r7, #23]
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	729a      	strb	r2, [r3, #10]
		}
 	}
}
 80006a0:	bf00      	nop
 80006a2:	371c      	adds	r7, #28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>:

void CommandProcessor::ProcessRequest(Request *request, DisplayDriver *display,
		Configuration *configuration, PixelMapping *pixelMapping) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	603b      	str	r3, [r7, #0]
	switch (request->type) {
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	2b04      	cmp	r3, #4
 80006c0:	dc10      	bgt.n	80006e4 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0x38>
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dd46      	ble.n	8000754 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0xa8>
 80006c6:	3b01      	subs	r3, #1
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d843      	bhi.n	8000754 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0xa8>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0x28>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	080006eb 	.word	0x080006eb
 80006d8:	08000731 	.word	0x08000731
 80006dc:	080006fd 	.word	0x080006fd
 80006e0:	0800071f 	.word	0x0800071f
 80006e4:	2b80      	cmp	r3, #128	; 0x80
 80006e6:	d02c      	beq.n	8000742 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0x96>
	case RequestType::Configure: {
		Configure(request, display, configuration, pixelMapping);
		break;
	}
	}
}
 80006e8:	e034      	b.n	8000754 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0xa8>
		SetPixelData(request, display, configuration, pixelMapping);
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	68b9      	ldr	r1, [r7, #8]
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f7ff fe5b 	bl	80003b0 <_ZN16CommandProcessor12SetPixelDataEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>
		break;
 80006fa:	e02b      	b.n	8000754 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0xa8>
		Clear(request, display, configuration, pixelMapping);
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	68b9      	ldr	r1, [r7, #8]
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f7ff feb9 	bl	800047e <_ZN16CommandProcessor5ClearEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>
		AssignPixelData(request, display, configuration, pixelMapping);
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	68b9      	ldr	r1, [r7, #8]
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff00 	bl	800051c <_ZN16CommandProcessor15AssignPixelDataEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>
		break;
 800071c:	e01a      	b.n	8000754 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0xa8>
		AssignPixelData(request, display, configuration, pixelMapping);
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	68b9      	ldr	r1, [r7, #8]
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	f7ff fef7 	bl	800051c <_ZN16CommandProcessor15AssignPixelDataEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>
		break;
 800072e:	e011      	b.n	8000754 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0xa8>
		Commit(request, display, configuration, pixelMapping);
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	68b9      	ldr	r1, [r7, #8]
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f7ff ff5e 	bl	80005fc <_ZN16CommandProcessor6CommitEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>
		break;
 8000740:	e008      	b.n	8000754 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping+0xa8>
		Configure(request, display, configuration, pixelMapping);
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	68b9      	ldr	r1, [r7, #8]
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f7ff ff66 	bl	800061e <_ZN16CommandProcessor9ConfigureEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>
		break;
 8000752:	bf00      	nop
}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <strcmp>:
 800075c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000764:	2a01      	cmp	r2, #1
 8000766:	bf28      	it	cs
 8000768:	429a      	cmpcs	r2, r3
 800076a:	d0f7      	beq.n	800075c <strcmp>
 800076c:	1ad0      	subs	r0, r2, r3
 800076e:	4770      	bx	lr

08000770 <strlen>:
 8000770:	4603      	mov	r3, r0
 8000772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000776:	2a00      	cmp	r2, #0
 8000778:	d1fb      	bne.n	8000772 <strlen+0x2>
 800077a:	1a18      	subs	r0, r3, r0
 800077c:	3801      	subs	r0, #1
 800077e:	4770      	bx	lr

08000780 <memchr>:
 8000780:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000784:	2a10      	cmp	r2, #16
 8000786:	db2b      	blt.n	80007e0 <memchr+0x60>
 8000788:	f010 0f07 	tst.w	r0, #7
 800078c:	d008      	beq.n	80007a0 <memchr+0x20>
 800078e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000792:	3a01      	subs	r2, #1
 8000794:	428b      	cmp	r3, r1
 8000796:	d02d      	beq.n	80007f4 <memchr+0x74>
 8000798:	f010 0f07 	tst.w	r0, #7
 800079c:	b342      	cbz	r2, 80007f0 <memchr+0x70>
 800079e:	d1f6      	bne.n	800078e <memchr+0xe>
 80007a0:	b4f0      	push	{r4, r5, r6, r7}
 80007a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80007a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80007aa:	f022 0407 	bic.w	r4, r2, #7
 80007ae:	f07f 0700 	mvns.w	r7, #0
 80007b2:	2300      	movs	r3, #0
 80007b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80007b8:	3c08      	subs	r4, #8
 80007ba:	ea85 0501 	eor.w	r5, r5, r1
 80007be:	ea86 0601 	eor.w	r6, r6, r1
 80007c2:	fa85 f547 	uadd8	r5, r5, r7
 80007c6:	faa3 f587 	sel	r5, r3, r7
 80007ca:	fa86 f647 	uadd8	r6, r6, r7
 80007ce:	faa5 f687 	sel	r6, r5, r7
 80007d2:	b98e      	cbnz	r6, 80007f8 <memchr+0x78>
 80007d4:	d1ee      	bne.n	80007b4 <memchr+0x34>
 80007d6:	bcf0      	pop	{r4, r5, r6, r7}
 80007d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80007dc:	f002 0207 	and.w	r2, r2, #7
 80007e0:	b132      	cbz	r2, 80007f0 <memchr+0x70>
 80007e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80007e6:	3a01      	subs	r2, #1
 80007e8:	ea83 0301 	eor.w	r3, r3, r1
 80007ec:	b113      	cbz	r3, 80007f4 <memchr+0x74>
 80007ee:	d1f8      	bne.n	80007e2 <memchr+0x62>
 80007f0:	2000      	movs	r0, #0
 80007f2:	4770      	bx	lr
 80007f4:	3801      	subs	r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	bf06      	itte	eq
 80007fc:	4635      	moveq	r5, r6
 80007fe:	3803      	subeq	r0, #3
 8000800:	3807      	subne	r0, #7
 8000802:	f015 0f01 	tst.w	r5, #1
 8000806:	d107      	bne.n	8000818 <memchr+0x98>
 8000808:	3001      	adds	r0, #1
 800080a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800080e:	bf02      	ittt	eq
 8000810:	3001      	addeq	r0, #1
 8000812:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000816:	3001      	addeq	r0, #1
 8000818:	bcf0      	pop	{r4, r5, r6, r7}
 800081a:	3801      	subs	r0, #1
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_uldivmod>:
 8000820:	b953      	cbnz	r3, 8000838 <__aeabi_uldivmod+0x18>
 8000822:	b94a      	cbnz	r2, 8000838 <__aeabi_uldivmod+0x18>
 8000824:	2900      	cmp	r1, #0
 8000826:	bf08      	it	eq
 8000828:	2800      	cmpeq	r0, #0
 800082a:	bf1c      	itt	ne
 800082c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000830:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000834:	f001 b8c0 	b.w	80019b8 <__aeabi_idiv0>
 8000838:	f1ad 0c08 	sub.w	ip, sp, #8
 800083c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000840:	f000 f806 	bl	8000850 <__udivmoddi4>
 8000844:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084c:	b004      	add	sp, #16
 800084e:	4770      	bx	lr

08000850 <__udivmoddi4>:
 8000850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000854:	9d08      	ldr	r5, [sp, #32]
 8000856:	4604      	mov	r4, r0
 8000858:	468c      	mov	ip, r1
 800085a:	2b00      	cmp	r3, #0
 800085c:	f040 8083 	bne.w	8000966 <__udivmoddi4+0x116>
 8000860:	428a      	cmp	r2, r1
 8000862:	4617      	mov	r7, r2
 8000864:	d947      	bls.n	80008f6 <__udivmoddi4+0xa6>
 8000866:	fab2 f282 	clz	r2, r2
 800086a:	b142      	cbz	r2, 800087e <__udivmoddi4+0x2e>
 800086c:	f1c2 0020 	rsb	r0, r2, #32
 8000870:	fa24 f000 	lsr.w	r0, r4, r0
 8000874:	4091      	lsls	r1, r2
 8000876:	4097      	lsls	r7, r2
 8000878:	ea40 0c01 	orr.w	ip, r0, r1
 800087c:	4094      	lsls	r4, r2
 800087e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000882:	0c23      	lsrs	r3, r4, #16
 8000884:	fbbc f6f8 	udiv	r6, ip, r8
 8000888:	fa1f fe87 	uxth.w	lr, r7
 800088c:	fb08 c116 	mls	r1, r8, r6, ip
 8000890:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000894:	fb06 f10e 	mul.w	r1, r6, lr
 8000898:	4299      	cmp	r1, r3
 800089a:	d909      	bls.n	80008b0 <__udivmoddi4+0x60>
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80008a2:	f080 8119 	bcs.w	8000ad8 <__udivmoddi4+0x288>
 80008a6:	4299      	cmp	r1, r3
 80008a8:	f240 8116 	bls.w	8000ad8 <__udivmoddi4+0x288>
 80008ac:	3e02      	subs	r6, #2
 80008ae:	443b      	add	r3, r7
 80008b0:	1a5b      	subs	r3, r3, r1
 80008b2:	b2a4      	uxth	r4, r4
 80008b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b8:	fb08 3310 	mls	r3, r8, r0, r3
 80008bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008c4:	45a6      	cmp	lr, r4
 80008c6:	d909      	bls.n	80008dc <__udivmoddi4+0x8c>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008ce:	f080 8105 	bcs.w	8000adc <__udivmoddi4+0x28c>
 80008d2:	45a6      	cmp	lr, r4
 80008d4:	f240 8102 	bls.w	8000adc <__udivmoddi4+0x28c>
 80008d8:	3802      	subs	r0, #2
 80008da:	443c      	add	r4, r7
 80008dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008e0:	eba4 040e 	sub.w	r4, r4, lr
 80008e4:	2600      	movs	r6, #0
 80008e6:	b11d      	cbz	r5, 80008f0 <__udivmoddi4+0xa0>
 80008e8:	40d4      	lsrs	r4, r2
 80008ea:	2300      	movs	r3, #0
 80008ec:	e9c5 4300 	strd	r4, r3, [r5]
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xaa>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f282 	clz	r2, r2
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d150      	bne.n	80009a4 <__udivmoddi4+0x154>
 8000902:	1bcb      	subs	r3, r1, r7
 8000904:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000908:	fa1f f887 	uxth.w	r8, r7
 800090c:	2601      	movs	r6, #1
 800090e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000912:	0c21      	lsrs	r1, r4, #16
 8000914:	fb0e 331c 	mls	r3, lr, ip, r3
 8000918:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800091c:	fb08 f30c 	mul.w	r3, r8, ip
 8000920:	428b      	cmp	r3, r1
 8000922:	d907      	bls.n	8000934 <__udivmoddi4+0xe4>
 8000924:	1879      	adds	r1, r7, r1
 8000926:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800092a:	d202      	bcs.n	8000932 <__udivmoddi4+0xe2>
 800092c:	428b      	cmp	r3, r1
 800092e:	f200 80e9 	bhi.w	8000b04 <__udivmoddi4+0x2b4>
 8000932:	4684      	mov	ip, r0
 8000934:	1ac9      	subs	r1, r1, r3
 8000936:	b2a3      	uxth	r3, r4
 8000938:	fbb1 f0fe 	udiv	r0, r1, lr
 800093c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000940:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000944:	fb08 f800 	mul.w	r8, r8, r0
 8000948:	45a0      	cmp	r8, r4
 800094a:	d907      	bls.n	800095c <__udivmoddi4+0x10c>
 800094c:	193c      	adds	r4, r7, r4
 800094e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000952:	d202      	bcs.n	800095a <__udivmoddi4+0x10a>
 8000954:	45a0      	cmp	r8, r4
 8000956:	f200 80d9 	bhi.w	8000b0c <__udivmoddi4+0x2bc>
 800095a:	4618      	mov	r0, r3
 800095c:	eba4 0408 	sub.w	r4, r4, r8
 8000960:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000964:	e7bf      	b.n	80008e6 <__udivmoddi4+0x96>
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0x12e>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80b1 	beq.w	8000ad2 <__udivmoddi4+0x282>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x1cc>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0x140>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80b8 	bhi.w	8000b00 <__udivmoddi4+0x2b0>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0103 	sbc.w	r1, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	468c      	mov	ip, r1
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0a8      	beq.n	80008f0 <__udivmoddi4+0xa0>
 800099e:	e9c5 4c00 	strd	r4, ip, [r5]
 80009a2:	e7a5      	b.n	80008f0 <__udivmoddi4+0xa0>
 80009a4:	f1c2 0320 	rsb	r3, r2, #32
 80009a8:	fa20 f603 	lsr.w	r6, r0, r3
 80009ac:	4097      	lsls	r7, r2
 80009ae:	fa01 f002 	lsl.w	r0, r1, r2
 80009b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b6:	40d9      	lsrs	r1, r3
 80009b8:	4330      	orrs	r0, r6
 80009ba:	0c03      	lsrs	r3, r0, #16
 80009bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80009c0:	fa1f f887 	uxth.w	r8, r7
 80009c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80009c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009cc:	fb06 f108 	mul.w	r1, r6, r8
 80009d0:	4299      	cmp	r1, r3
 80009d2:	fa04 f402 	lsl.w	r4, r4, r2
 80009d6:	d909      	bls.n	80009ec <__udivmoddi4+0x19c>
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80009de:	f080 808d 	bcs.w	8000afc <__udivmoddi4+0x2ac>
 80009e2:	4299      	cmp	r1, r3
 80009e4:	f240 808a 	bls.w	8000afc <__udivmoddi4+0x2ac>
 80009e8:	3e02      	subs	r6, #2
 80009ea:	443b      	add	r3, r7
 80009ec:	1a5b      	subs	r3, r3, r1
 80009ee:	b281      	uxth	r1, r0
 80009f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80009f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80009f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009fc:	fb00 f308 	mul.w	r3, r0, r8
 8000a00:	428b      	cmp	r3, r1
 8000a02:	d907      	bls.n	8000a14 <__udivmoddi4+0x1c4>
 8000a04:	1879      	adds	r1, r7, r1
 8000a06:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a0a:	d273      	bcs.n	8000af4 <__udivmoddi4+0x2a4>
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	d971      	bls.n	8000af4 <__udivmoddi4+0x2a4>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4439      	add	r1, r7
 8000a14:	1acb      	subs	r3, r1, r3
 8000a16:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a1a:	e778      	b.n	800090e <__udivmoddi4+0xbe>
 8000a1c:	f1c6 0c20 	rsb	ip, r6, #32
 8000a20:	fa03 f406 	lsl.w	r4, r3, r6
 8000a24:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a28:	431c      	orrs	r4, r3
 8000a2a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a36:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a3a:	431f      	orrs	r7, r3
 8000a3c:	0c3b      	lsrs	r3, r7, #16
 8000a3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a42:	fa1f f884 	uxth.w	r8, r4
 8000a46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a4a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a4e:	fb09 fa08 	mul.w	sl, r9, r8
 8000a52:	458a      	cmp	sl, r1
 8000a54:	fa02 f206 	lsl.w	r2, r2, r6
 8000a58:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x220>
 8000a5e:	1861      	adds	r1, r4, r1
 8000a60:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a64:	d248      	bcs.n	8000af8 <__udivmoddi4+0x2a8>
 8000a66:	458a      	cmp	sl, r1
 8000a68:	d946      	bls.n	8000af8 <__udivmoddi4+0x2a8>
 8000a6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000a6e:	4421      	add	r1, r4
 8000a70:	eba1 010a 	sub.w	r1, r1, sl
 8000a74:	b2bf      	uxth	r7, r7
 8000a76:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a7a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a7e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a82:	fb00 f808 	mul.w	r8, r0, r8
 8000a86:	45b8      	cmp	r8, r7
 8000a88:	d907      	bls.n	8000a9a <__udivmoddi4+0x24a>
 8000a8a:	19e7      	adds	r7, r4, r7
 8000a8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a90:	d22e      	bcs.n	8000af0 <__udivmoddi4+0x2a0>
 8000a92:	45b8      	cmp	r8, r7
 8000a94:	d92c      	bls.n	8000af0 <__udivmoddi4+0x2a0>
 8000a96:	3802      	subs	r0, #2
 8000a98:	4427      	add	r7, r4
 8000a9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a9e:	eba7 0708 	sub.w	r7, r7, r8
 8000aa2:	fba0 8902 	umull	r8, r9, r0, r2
 8000aa6:	454f      	cmp	r7, r9
 8000aa8:	46c6      	mov	lr, r8
 8000aaa:	4649      	mov	r1, r9
 8000aac:	d31a      	bcc.n	8000ae4 <__udivmoddi4+0x294>
 8000aae:	d017      	beq.n	8000ae0 <__udivmoddi4+0x290>
 8000ab0:	b15d      	cbz	r5, 8000aca <__udivmoddi4+0x27a>
 8000ab2:	ebb3 020e 	subs.w	r2, r3, lr
 8000ab6:	eb67 0701 	sbc.w	r7, r7, r1
 8000aba:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000abe:	40f2      	lsrs	r2, r6
 8000ac0:	ea4c 0202 	orr.w	r2, ip, r2
 8000ac4:	40f7      	lsrs	r7, r6
 8000ac6:	e9c5 2700 	strd	r2, r7, [r5]
 8000aca:	2600      	movs	r6, #0
 8000acc:	4631      	mov	r1, r6
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	462e      	mov	r6, r5
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	e70b      	b.n	80008f0 <__udivmoddi4+0xa0>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	e6e9      	b.n	80008b0 <__udivmoddi4+0x60>
 8000adc:	4618      	mov	r0, r3
 8000ade:	e6fd      	b.n	80008dc <__udivmoddi4+0x8c>
 8000ae0:	4543      	cmp	r3, r8
 8000ae2:	d2e5      	bcs.n	8000ab0 <__udivmoddi4+0x260>
 8000ae4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ae8:	eb69 0104 	sbc.w	r1, r9, r4
 8000aec:	3801      	subs	r0, #1
 8000aee:	e7df      	b.n	8000ab0 <__udivmoddi4+0x260>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e7d2      	b.n	8000a9a <__udivmoddi4+0x24a>
 8000af4:	4660      	mov	r0, ip
 8000af6:	e78d      	b.n	8000a14 <__udivmoddi4+0x1c4>
 8000af8:	4681      	mov	r9, r0
 8000afa:	e7b9      	b.n	8000a70 <__udivmoddi4+0x220>
 8000afc:	4666      	mov	r6, ip
 8000afe:	e775      	b.n	80009ec <__udivmoddi4+0x19c>
 8000b00:	4630      	mov	r0, r6
 8000b02:	e74a      	b.n	800099a <__udivmoddi4+0x14a>
 8000b04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b08:	4439      	add	r1, r7
 8000b0a:	e713      	b.n	8000934 <__udivmoddi4+0xe4>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	443c      	add	r4, r7
 8000b10:	e724      	b.n	800095c <__udivmoddi4+0x10c>
 8000b12:	bf00      	nop

08000b14 <selfrel_offset31>:
 8000b14:	6803      	ldr	r3, [r0, #0]
 8000b16:	005a      	lsls	r2, r3, #1
 8000b18:	bf4c      	ite	mi
 8000b1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	4418      	add	r0, r3
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <search_EIT_table>:
 8000b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b2c:	b329      	cbz	r1, 8000b7a <search_EIT_table+0x52>
 8000b2e:	1e4f      	subs	r7, r1, #1
 8000b30:	4604      	mov	r4, r0
 8000b32:	4615      	mov	r5, r2
 8000b34:	463e      	mov	r6, r7
 8000b36:	f04f 0800 	mov.w	r8, #0
 8000b3a:	eb08 0106 	add.w	r1, r8, r6
 8000b3e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000b42:	1049      	asrs	r1, r1, #1
 8000b44:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000b48:	4648      	mov	r0, r9
 8000b4a:	f7ff ffe3 	bl	8000b14 <selfrel_offset31>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	00c8      	lsls	r0, r1, #3
 8000b52:	3008      	adds	r0, #8
 8000b54:	428f      	cmp	r7, r1
 8000b56:	4420      	add	r0, r4
 8000b58:	d009      	beq.n	8000b6e <search_EIT_table+0x46>
 8000b5a:	42ab      	cmp	r3, r5
 8000b5c:	d809      	bhi.n	8000b72 <search_EIT_table+0x4a>
 8000b5e:	f7ff ffd9 	bl	8000b14 <selfrel_offset31>
 8000b62:	3801      	subs	r0, #1
 8000b64:	42a8      	cmp	r0, r5
 8000b66:	d20a      	bcs.n	8000b7e <search_EIT_table+0x56>
 8000b68:	f101 0801 	add.w	r8, r1, #1
 8000b6c:	e7e5      	b.n	8000b3a <search_EIT_table+0x12>
 8000b6e:	42ab      	cmp	r3, r5
 8000b70:	d905      	bls.n	8000b7e <search_EIT_table+0x56>
 8000b72:	4588      	cmp	r8, r1
 8000b74:	d001      	beq.n	8000b7a <search_EIT_table+0x52>
 8000b76:	1e4e      	subs	r6, r1, #1
 8000b78:	e7df      	b.n	8000b3a <search_EIT_table+0x12>
 8000b7a:	f04f 0900 	mov.w	r9, #0
 8000b7e:	4648      	mov	r0, r9
 8000b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000b84 <__gnu_unwind_get_pr_addr>:
 8000b84:	2801      	cmp	r0, #1
 8000b86:	d007      	beq.n	8000b98 <__gnu_unwind_get_pr_addr+0x14>
 8000b88:	2802      	cmp	r0, #2
 8000b8a:	d007      	beq.n	8000b9c <__gnu_unwind_get_pr_addr+0x18>
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__gnu_unwind_get_pr_addr+0x1c>)
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	bf0c      	ite	eq
 8000b92:	4618      	moveq	r0, r3
 8000b94:	2000      	movne	r0, #0
 8000b96:	4770      	bx	lr
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <__gnu_unwind_get_pr_addr+0x20>)
 8000b9a:	4770      	bx	lr
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <__gnu_unwind_get_pr_addr+0x24>)
 8000b9e:	4770      	bx	lr
 8000ba0:	08001249 	.word	0x08001249
 8000ba4:	0800124d 	.word	0x0800124d
 8000ba8:	08001251 	.word	0x08001251

08000bac <get_eit_entry>:
 8000bac:	b530      	push	{r4, r5, lr}
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <get_eit_entry+0x90>)
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	1e8d      	subs	r5, r1, #2
 8000bb6:	b33b      	cbz	r3, 8000c08 <get_eit_entry+0x5c>
 8000bb8:	a901      	add	r1, sp, #4
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f3af 8000 	nop.w
 8000bc0:	b1e8      	cbz	r0, 8000bfe <get_eit_entry+0x52>
 8000bc2:	9901      	ldr	r1, [sp, #4]
 8000bc4:	462a      	mov	r2, r5
 8000bc6:	f7ff ffaf 	bl	8000b28 <search_EIT_table>
 8000bca:	4601      	mov	r1, r0
 8000bcc:	b1b8      	cbz	r0, 8000bfe <get_eit_entry+0x52>
 8000bce:	f7ff ffa1 	bl	8000b14 <selfrel_offset31>
 8000bd2:	684b      	ldr	r3, [r1, #4]
 8000bd4:	64a0      	str	r0, [r4, #72]	; 0x48
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d02b      	beq.n	8000c32 <get_eit_entry+0x86>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f101 0004 	add.w	r0, r1, #4
 8000be0:	db23      	blt.n	8000c2a <get_eit_entry+0x7e>
 8000be2:	f7ff ff97 	bl	8000b14 <selfrel_offset31>
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000bec:	6803      	ldr	r3, [r0, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db10      	blt.n	8000c14 <get_eit_entry+0x68>
 8000bf2:	f7ff ff8f 	bl	8000b14 <selfrel_offset31>
 8000bf6:	6120      	str	r0, [r4, #16]
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	b003      	add	sp, #12
 8000bfc:	bd30      	pop	{r4, r5, pc}
 8000bfe:	2300      	movs	r3, #0
 8000c00:	2009      	movs	r0, #9
 8000c02:	6123      	str	r3, [r4, #16]
 8000c04:	b003      	add	sp, #12
 8000c06:	bd30      	pop	{r4, r5, pc}
 8000c08:	490d      	ldr	r1, [pc, #52]	; (8000c40 <get_eit_entry+0x94>)
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <get_eit_entry+0x98>)
 8000c0c:	1a09      	subs	r1, r1, r0
 8000c0e:	10c9      	asrs	r1, r1, #3
 8000c10:	9101      	str	r1, [sp, #4]
 8000c12:	e7d7      	b.n	8000bc4 <get_eit_entry+0x18>
 8000c14:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000c18:	f7ff ffb4 	bl	8000b84 <__gnu_unwind_get_pr_addr>
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	6120      	str	r0, [r4, #16]
 8000c20:	bf14      	ite	ne
 8000c22:	2000      	movne	r0, #0
 8000c24:	2009      	moveq	r0, #9
 8000c26:	b003      	add	sp, #12
 8000c28:	bd30      	pop	{r4, r5, pc}
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000c30:	e7dc      	b.n	8000bec <get_eit_entry+0x40>
 8000c32:	2300      	movs	r3, #0
 8000c34:	6123      	str	r3, [r4, #16]
 8000c36:	2005      	movs	r0, #5
 8000c38:	e7df      	b.n	8000bfa <get_eit_entry+0x4e>
 8000c3a:	bf00      	nop
 8000c3c:	00000000 	.word	0x00000000
 8000c40:	08008a24 	.word	0x08008a24
 8000c44:	08008934 	.word	0x08008934

08000c48 <restore_non_core_regs>:
 8000c48:	6803      	ldr	r3, [r0, #0]
 8000c4a:	07da      	lsls	r2, r3, #31
 8000c4c:	b510      	push	{r4, lr}
 8000c4e:	4604      	mov	r4, r0
 8000c50:	d406      	bmi.n	8000c60 <restore_non_core_regs+0x18>
 8000c52:	079b      	lsls	r3, r3, #30
 8000c54:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000c58:	d509      	bpl.n	8000c6e <restore_non_core_regs+0x26>
 8000c5a:	f000 fc4b 	bl	80014f4 <__gnu_Unwind_Restore_VFP_D>
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	0759      	lsls	r1, r3, #29
 8000c62:	d509      	bpl.n	8000c78 <restore_non_core_regs+0x30>
 8000c64:	071a      	lsls	r2, r3, #28
 8000c66:	d50e      	bpl.n	8000c86 <restore_non_core_regs+0x3e>
 8000c68:	06db      	lsls	r3, r3, #27
 8000c6a:	d513      	bpl.n	8000c94 <restore_non_core_regs+0x4c>
 8000c6c:	bd10      	pop	{r4, pc}
 8000c6e:	f000 fc39 	bl	80014e4 <__gnu_Unwind_Restore_VFP>
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	0759      	lsls	r1, r3, #29
 8000c76:	d4f5      	bmi.n	8000c64 <restore_non_core_regs+0x1c>
 8000c78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000c7c:	f000 fc42 	bl	8001504 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	071a      	lsls	r2, r3, #28
 8000c84:	d4f0      	bmi.n	8000c68 <restore_non_core_regs+0x20>
 8000c86:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000c8a:	f000 fc43 	bl	8001514 <__gnu_Unwind_Restore_WMMXD>
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	06db      	lsls	r3, r3, #27
 8000c92:	d4eb      	bmi.n	8000c6c <restore_non_core_regs+0x24>
 8000c94:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c9c:	f000 bc7e 	b.w	800159c <__gnu_Unwind_Restore_WMMXC>

08000ca0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	6800      	ldr	r0, [r0, #0]
 8000ca4:	b100      	cbz	r0, 8000ca8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8000ca6:	4418      	add	r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <__gnu_unwind_24bit.isra.0>:
 8000cac:	2009      	movs	r0, #9
 8000cae:	4770      	bx	lr

08000cb0 <_Unwind_DebugHook>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <unwind_phase2>:
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	460e      	mov	r6, r1
 8000cba:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f7ff ff75 	bl	8000bac <get_eit_entry>
 8000cc2:	4605      	mov	r5, r0
 8000cc4:	b988      	cbnz	r0, 8000cea <unwind_phase2+0x36>
 8000cc6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000cc8:	6163      	str	r3, [r4, #20]
 8000cca:	4632      	mov	r2, r6
 8000ccc:	6923      	ldr	r3, [r4, #16]
 8000cce:	4621      	mov	r1, r4
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	4798      	blx	r3
 8000cd4:	2808      	cmp	r0, #8
 8000cd6:	d0f0      	beq.n	8000cba <unwind_phase2+0x6>
 8000cd8:	2807      	cmp	r0, #7
 8000cda:	d106      	bne.n	8000cea <unwind_phase2+0x36>
 8000cdc:	4628      	mov	r0, r5
 8000cde:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000ce0:	f7ff ffe6 	bl	8000cb0 <_Unwind_DebugHook>
 8000ce4:	1d30      	adds	r0, r6, #4
 8000ce6:	f000 fbf1 	bl	80014cc <__restore_core_regs>
 8000cea:	f006 ffd9 	bl	8007ca0 <abort>
 8000cee:	bf00      	nop

08000cf0 <unwind_phase2_forced>:
 8000cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf4:	1d0d      	adds	r5, r1, #4
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	4614      	mov	r4, r2
 8000cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000d00:	f10d 0c0c 	add.w	ip, sp, #12
 8000d04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d18:	ad02      	add	r5, sp, #8
 8000d1a:	68f7      	ldr	r7, [r6, #12]
 8000d1c:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8000d20:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000d24:	2300      	movs	r3, #0
 8000d26:	602b      	str	r3, [r5, #0]
 8000d28:	e021      	b.n	8000d6e <unwind_phase2_forced+0x7e>
 8000d2a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000d2c:	6173      	str	r3, [r6, #20]
 8000d2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d32:	4629      	mov	r1, r5
 8000d34:	a87a      	add	r0, sp, #488	; 0x1e8
 8000d36:	f006 fff5 	bl	8007d24 <memcpy>
 8000d3a:	6933      	ldr	r3, [r6, #16]
 8000d3c:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000d3e:	4631      	mov	r1, r6
 8000d40:	4650      	mov	r0, sl
 8000d42:	4798      	blx	r3
 8000d44:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000d46:	e9cd 5800 	strd	r5, r8, [sp]
 8000d4a:	4621      	mov	r1, r4
 8000d4c:	646b      	str	r3, [r5, #68]	; 0x44
 8000d4e:	4681      	mov	r9, r0
 8000d50:	4633      	mov	r3, r6
 8000d52:	4632      	mov	r2, r6
 8000d54:	2001      	movs	r0, #1
 8000d56:	47b8      	blx	r7
 8000d58:	4604      	mov	r4, r0
 8000d5a:	b9e8      	cbnz	r0, 8000d98 <unwind_phase2_forced+0xa8>
 8000d5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d60:	a97a      	add	r1, sp, #488	; 0x1e8
 8000d62:	4628      	mov	r0, r5
 8000d64:	f006 ffde 	bl	8007d24 <memcpy>
 8000d68:	f1b9 0f08 	cmp.w	r9, #8
 8000d6c:	d11b      	bne.n	8000da6 <unwind_phase2_forced+0xb6>
 8000d6e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000d70:	4630      	mov	r0, r6
 8000d72:	f7ff ff1b 	bl	8000bac <get_eit_entry>
 8000d76:	3409      	adds	r4, #9
 8000d78:	fa5f fa84 	uxtb.w	sl, r4
 8000d7c:	4681      	mov	r9, r0
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	d0d3      	beq.n	8000d2a <unwind_phase2_forced+0x3a>
 8000d82:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000d84:	f04a 0110 	orr.w	r1, sl, #16
 8000d88:	e9cd 5800 	strd	r5, r8, [sp]
 8000d8c:	4632      	mov	r2, r6
 8000d8e:	646b      	str	r3, [r5, #68]	; 0x44
 8000d90:	2001      	movs	r0, #1
 8000d92:	4633      	mov	r3, r6
 8000d94:	47b8      	blx	r7
 8000d96:	b108      	cbz	r0, 8000d9c <unwind_phase2_forced+0xac>
 8000d98:	f04f 0909 	mov.w	r9, #9
 8000d9c:	4648      	mov	r0, r9
 8000d9e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	f1b9 0f07 	cmp.w	r9, #7
 8000daa:	d1f5      	bne.n	8000d98 <unwind_phase2_forced+0xa8>
 8000dac:	4620      	mov	r0, r4
 8000dae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000db0:	f7ff ff7e 	bl	8000cb0 <_Unwind_DebugHook>
 8000db4:	a803      	add	r0, sp, #12
 8000db6:	f000 fb89 	bl	80014cc <__restore_core_regs>
 8000dba:	bf00      	nop

08000dbc <_Unwind_GetCFA>:
 8000dbc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000dbe:	4770      	bx	lr

08000dc0 <__gnu_Unwind_RaiseException>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000dc4:	640b      	str	r3, [r1, #64]	; 0x40
 8000dc6:	1d0e      	adds	r6, r1, #4
 8000dc8:	460f      	mov	r7, r1
 8000dca:	4605      	mov	r5, r0
 8000dcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dce:	b0f9      	sub	sp, #484	; 0x1e4
 8000dd0:	ac01      	add	r4, sp, #4
 8000dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000de0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000de8:	9600      	str	r6, [sp, #0]
 8000dea:	e006      	b.n	8000dfa <__gnu_Unwind_RaiseException+0x3a>
 8000dec:	692b      	ldr	r3, [r5, #16]
 8000dee:	466a      	mov	r2, sp
 8000df0:	4629      	mov	r1, r5
 8000df2:	4798      	blx	r3
 8000df4:	2808      	cmp	r0, #8
 8000df6:	4604      	mov	r4, r0
 8000df8:	d108      	bne.n	8000e0c <__gnu_Unwind_RaiseException+0x4c>
 8000dfa:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	f7ff fed5 	bl	8000bac <get_eit_entry>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d0f2      	beq.n	8000dec <__gnu_Unwind_RaiseException+0x2c>
 8000e06:	2009      	movs	r0, #9
 8000e08:	b079      	add	sp, #484	; 0x1e4
 8000e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0c:	4668      	mov	r0, sp
 8000e0e:	f7ff ff1b 	bl	8000c48 <restore_non_core_regs>
 8000e12:	2c06      	cmp	r4, #6
 8000e14:	d1f7      	bne.n	8000e06 <__gnu_Unwind_RaiseException+0x46>
 8000e16:	4639      	mov	r1, r7
 8000e18:	4628      	mov	r0, r5
 8000e1a:	f7ff ff4b 	bl	8000cb4 <unwind_phase2>
 8000e1e:	bf00      	nop

08000e20 <__gnu_Unwind_ForcedUnwind>:
 8000e20:	b430      	push	{r4, r5}
 8000e22:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000e24:	60c1      	str	r1, [r0, #12]
 8000e26:	6182      	str	r2, [r0, #24]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	641d      	str	r5, [r3, #64]	; 0x40
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	bc30      	pop	{r4, r5}
 8000e30:	e75e      	b.n	8000cf0 <unwind_phase2_forced>
 8000e32:	bf00      	nop

08000e34 <__gnu_Unwind_Resume>:
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	68c6      	ldr	r6, [r0, #12]
 8000e38:	6943      	ldr	r3, [r0, #20]
 8000e3a:	640b      	str	r3, [r1, #64]	; 0x40
 8000e3c:	b9ae      	cbnz	r6, 8000e6a <__gnu_Unwind_Resume+0x36>
 8000e3e:	6903      	ldr	r3, [r0, #16]
 8000e40:	460a      	mov	r2, r1
 8000e42:	4604      	mov	r4, r0
 8000e44:	460d      	mov	r5, r1
 8000e46:	4601      	mov	r1, r0
 8000e48:	2002      	movs	r0, #2
 8000e4a:	4798      	blx	r3
 8000e4c:	2807      	cmp	r0, #7
 8000e4e:	d005      	beq.n	8000e5c <__gnu_Unwind_Resume+0x28>
 8000e50:	2808      	cmp	r0, #8
 8000e52:	d10f      	bne.n	8000e74 <__gnu_Unwind_Resume+0x40>
 8000e54:	4629      	mov	r1, r5
 8000e56:	4620      	mov	r0, r4
 8000e58:	f7ff ff2c 	bl	8000cb4 <unwind_phase2>
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000e60:	f7ff ff26 	bl	8000cb0 <_Unwind_DebugHook>
 8000e64:	1d28      	adds	r0, r5, #4
 8000e66:	f000 fb31 	bl	80014cc <__restore_core_regs>
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f7ff ff40 	bl	8000cf0 <unwind_phase2_forced>
 8000e70:	f006 ff16 	bl	8007ca0 <abort>
 8000e74:	f006 ff14 	bl	8007ca0 <abort>

08000e78 <__gnu_Unwind_Resume_or_Rethrow>:
 8000e78:	68c2      	ldr	r2, [r0, #12]
 8000e7a:	b11a      	cbz	r2, 8000e84 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000e7c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000e7e:	640a      	str	r2, [r1, #64]	; 0x40
 8000e80:	2200      	movs	r2, #0
 8000e82:	e735      	b.n	8000cf0 <unwind_phase2_forced>
 8000e84:	e79c      	b.n	8000dc0 <__gnu_Unwind_RaiseException>
 8000e86:	bf00      	nop

08000e88 <_Unwind_Complete>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <_Unwind_DeleteException>:
 8000e8c:	6883      	ldr	r3, [r0, #8]
 8000e8e:	4601      	mov	r1, r0
 8000e90:	b10b      	cbz	r3, 8000e96 <_Unwind_DeleteException+0xa>
 8000e92:	2001      	movs	r0, #1
 8000e94:	4718      	bx	r3
 8000e96:	4770      	bx	lr

08000e98 <_Unwind_VRS_Get>:
 8000e98:	2901      	cmp	r1, #1
 8000e9a:	d012      	beq.n	8000ec2 <_Unwind_VRS_Get+0x2a>
 8000e9c:	d809      	bhi.n	8000eb2 <_Unwind_VRS_Get+0x1a>
 8000e9e:	b973      	cbnz	r3, 8000ebe <_Unwind_VRS_Get+0x26>
 8000ea0:	2a0f      	cmp	r2, #15
 8000ea2:	d80c      	bhi.n	8000ebe <_Unwind_VRS_Get+0x26>
 8000ea4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	6853      	ldr	r3, [r2, #4]
 8000eac:	9a00      	ldr	r2, [sp, #0]
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4770      	bx	lr
 8000eb2:	3903      	subs	r1, #3
 8000eb4:	2901      	cmp	r1, #1
 8000eb6:	bf94      	ite	ls
 8000eb8:	2001      	movls	r0, #1
 8000eba:	2002      	movhi	r0, #2
 8000ebc:	4770      	bx	lr
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	4770      	bx	lr
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <_Unwind_GetGR>:
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	2300      	movs	r3, #0
 8000ece:	ac03      	add	r4, sp, #12
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	9400      	str	r4, [sp, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff ffdf 	bl	8000e98 <_Unwind_VRS_Get>
 8000eda:	9803      	ldr	r0, [sp, #12]
 8000edc:	b004      	add	sp, #16
 8000ede:	bd10      	pop	{r4, pc}

08000ee0 <_Unwind_VRS_Set>:
 8000ee0:	2901      	cmp	r1, #1
 8000ee2:	d012      	beq.n	8000f0a <_Unwind_VRS_Set+0x2a>
 8000ee4:	d809      	bhi.n	8000efa <_Unwind_VRS_Set+0x1a>
 8000ee6:	b973      	cbnz	r3, 8000f06 <_Unwind_VRS_Set+0x26>
 8000ee8:	2a0f      	cmp	r2, #15
 8000eea:	d80c      	bhi.n	8000f06 <_Unwind_VRS_Set+0x26>
 8000eec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000ef0:	9a00      	ldr	r2, [sp, #0]
 8000ef2:	6812      	ldr	r2, [r2, #0]
 8000ef4:	6042      	str	r2, [r0, #4]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	4770      	bx	lr
 8000efa:	3903      	subs	r1, #3
 8000efc:	2901      	cmp	r1, #1
 8000efe:	bf94      	ite	ls
 8000f00:	2001      	movls	r0, #1
 8000f02:	2002      	movhi	r0, #2
 8000f04:	4770      	bx	lr
 8000f06:	2002      	movs	r0, #2
 8000f08:	4770      	bx	lr
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <_Unwind_SetGR>:
 8000f10:	b510      	push	{r4, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	2300      	movs	r3, #0
 8000f16:	ac03      	add	r4, sp, #12
 8000f18:	9203      	str	r2, [sp, #12]
 8000f1a:	9400      	str	r4, [sp, #0]
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff ffde 	bl	8000ee0 <_Unwind_VRS_Set>
 8000f24:	b004      	add	sp, #16
 8000f26:	bd10      	pop	{r4, pc}

08000f28 <__gnu_Unwind_Backtrace>:
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	1d15      	adds	r5, r2, #4
 8000f30:	468c      	mov	ip, r1
 8000f32:	4606      	mov	r6, r0
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000f3a:	ac17      	add	r4, sp, #92	; 0x5c
 8000f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f4a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f52:	4665      	mov	r5, ip
 8000f54:	9716      	str	r7, [sp, #88]	; 0x58
 8000f56:	e010      	b.n	8000f7a <__gnu_Unwind_Backtrace+0x52>
 8000f58:	f7ff ffda 	bl	8000f10 <_Unwind_SetGR>
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	a816      	add	r0, sp, #88	; 0x58
 8000f60:	47b0      	blx	r6
 8000f62:	4603      	mov	r3, r0
 8000f64:	aa16      	add	r2, sp, #88	; 0x58
 8000f66:	4669      	mov	r1, sp
 8000f68:	2008      	movs	r0, #8
 8000f6a:	b983      	cbnz	r3, 8000f8e <__gnu_Unwind_Backtrace+0x66>
 8000f6c:	9b04      	ldr	r3, [sp, #16]
 8000f6e:	4798      	blx	r3
 8000f70:	2805      	cmp	r0, #5
 8000f72:	4604      	mov	r4, r0
 8000f74:	d00c      	beq.n	8000f90 <__gnu_Unwind_Backtrace+0x68>
 8000f76:	2809      	cmp	r0, #9
 8000f78:	d009      	beq.n	8000f8e <__gnu_Unwind_Backtrace+0x66>
 8000f7a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000f7c:	4668      	mov	r0, sp
 8000f7e:	f7ff fe15 	bl	8000bac <get_eit_entry>
 8000f82:	4603      	mov	r3, r0
 8000f84:	466a      	mov	r2, sp
 8000f86:	210c      	movs	r1, #12
 8000f88:	a816      	add	r0, sp, #88	; 0x58
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0e4      	beq.n	8000f58 <__gnu_Unwind_Backtrace+0x30>
 8000f8e:	2409      	movs	r4, #9
 8000f90:	a816      	add	r0, sp, #88	; 0x58
 8000f92:	f7ff fe59 	bl	8000c48 <restore_non_core_regs>
 8000f96:	4620      	mov	r0, r4
 8000f98:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f9e:	bf00      	nop

08000fa0 <__gnu_unwind_pr_common>:
 8000fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa4:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	460d      	mov	r5, r1
 8000faa:	f854 1b04 	ldr.w	r1, [r4], #4
 8000fae:	9406      	str	r4, [sp, #24]
 8000fb0:	4617      	mov	r7, r2
 8000fb2:	f000 0803 	and.w	r8, r0, #3
 8000fb6:	461e      	mov	r6, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d079      	beq.n	80010b0 <__gnu_unwind_pr_common+0x110>
 8000fbc:	0c0b      	lsrs	r3, r1, #16
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	0409      	lsls	r1, r1, #16
 8000fc2:	f88d 301d 	strb.w	r3, [sp, #29]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000fcc:	9105      	str	r1, [sp, #20]
 8000fce:	f88d 301c 	strb.w	r3, [sp, #28]
 8000fd2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000fd4:	f1b8 0f02 	cmp.w	r8, #2
 8000fd8:	bf08      	it	eq
 8000fda:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000fdc:	f013 0301 	ands.w	r3, r3, #1
 8000fe0:	d00c      	beq.n	8000ffc <__gnu_unwind_pr_common+0x5c>
 8000fe2:	4638      	mov	r0, r7
 8000fe4:	a905      	add	r1, sp, #20
 8000fe6:	f000 fb73 	bl	80016d0 <__gnu_unwind_execute>
 8000fea:	b918      	cbnz	r0, 8000ff4 <__gnu_unwind_pr_common+0x54>
 8000fec:	2008      	movs	r0, #8
 8000fee:	b009      	add	sp, #36	; 0x24
 8000ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ff4:	2009      	movs	r0, #9
 8000ff6:	b009      	add	sp, #36	; 0x24
 8000ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ffc:	f8d4 a000 	ldr.w	sl, [r4]
 8001000:	f1ba 0f00 	cmp.w	sl, #0
 8001004:	d0ed      	beq.n	8000fe2 <__gnu_unwind_pr_common+0x42>
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f000 0308 	and.w	r3, r0, #8
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2e02      	cmp	r6, #2
 8001010:	d04a      	beq.n	80010a8 <__gnu_unwind_pr_common+0x108>
 8001012:	f8b4 a000 	ldrh.w	sl, [r4]
 8001016:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 800101a:	3404      	adds	r4, #4
 800101c:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800101e:	f029 0b01 	bic.w	fp, r9, #1
 8001022:	210f      	movs	r1, #15
 8001024:	4638      	mov	r0, r7
 8001026:	4493      	add	fp, r2
 8001028:	f7ff ff4e 	bl	8000ec8 <_Unwind_GetGR>
 800102c:	4583      	cmp	fp, r0
 800102e:	d839      	bhi.n	80010a4 <__gnu_unwind_pr_common+0x104>
 8001030:	f02a 0201 	bic.w	r2, sl, #1
 8001034:	445a      	add	r2, fp
 8001036:	4282      	cmp	r2, r0
 8001038:	bf94      	ite	ls
 800103a:	2000      	movls	r0, #0
 800103c:	2001      	movhi	r0, #1
 800103e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	f00a 0a01 	and.w	sl, sl, #1
 800104a:	ea43 030a 	orr.w	r3, r3, sl
 800104e:	2b01      	cmp	r3, #1
 8001050:	d049      	beq.n	80010e6 <__gnu_unwind_pr_common+0x146>
 8001052:	2b02      	cmp	r3, #2
 8001054:	d032      	beq.n	80010bc <__gnu_unwind_pr_common+0x11c>
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1cc      	bne.n	8000ff4 <__gnu_unwind_pr_common+0x54>
 800105a:	f1b8 0f00 	cmp.w	r8, #0
 800105e:	d002      	beq.n	8001066 <__gnu_unwind_pr_common+0xc6>
 8001060:	2800      	cmp	r0, #0
 8001062:	f040 80cd 	bne.w	8001200 <__gnu_unwind_pr_common+0x260>
 8001066:	3404      	adds	r4, #4
 8001068:	f8d4 a000 	ldr.w	sl, [r4]
 800106c:	f1ba 0f00 	cmp.w	sl, #0
 8001070:	d1cd      	bne.n	800100e <__gnu_unwind_pr_common+0x6e>
 8001072:	a905      	add	r1, sp, #20
 8001074:	4638      	mov	r0, r7
 8001076:	f000 fb2b 	bl	80016d0 <__gnu_unwind_execute>
 800107a:	2800      	cmp	r0, #0
 800107c:	d1ba      	bne.n	8000ff4 <__gnu_unwind_pr_common+0x54>
 800107e:	9b01      	ldr	r3, [sp, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0b3      	beq.n	8000fec <__gnu_unwind_pr_common+0x4c>
 8001084:	210f      	movs	r1, #15
 8001086:	4638      	mov	r0, r7
 8001088:	f7ff ff1e 	bl	8000ec8 <_Unwind_GetGR>
 800108c:	210e      	movs	r1, #14
 800108e:	4602      	mov	r2, r0
 8001090:	4638      	mov	r0, r7
 8001092:	f7ff ff3d 	bl	8000f10 <_Unwind_SetGR>
 8001096:	4638      	mov	r0, r7
 8001098:	4a6a      	ldr	r2, [pc, #424]	; (8001244 <__gnu_unwind_pr_common+0x2a4>)
 800109a:	210f      	movs	r1, #15
 800109c:	f7ff ff38 	bl	8000f10 <_Unwind_SetGR>
 80010a0:	2007      	movs	r0, #7
 80010a2:	e7a8      	b.n	8000ff6 <__gnu_unwind_pr_common+0x56>
 80010a4:	2000      	movs	r0, #0
 80010a6:	e7ca      	b.n	800103e <__gnu_unwind_pr_common+0x9e>
 80010a8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80010ac:	3408      	adds	r4, #8
 80010ae:	e7b5      	b.n	800101c <__gnu_unwind_pr_common+0x7c>
 80010b0:	0209      	lsls	r1, r1, #8
 80010b2:	2303      	movs	r3, #3
 80010b4:	9105      	str	r1, [sp, #20]
 80010b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80010ba:	e78a      	b.n	8000fd2 <__gnu_unwind_pr_common+0x32>
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80010c2:	f1b8 0f00 	cmp.w	r8, #0
 80010c6:	d145      	bne.n	8001154 <__gnu_unwind_pr_common+0x1b4>
 80010c8:	b128      	cbz	r0, 80010d6 <__gnu_unwind_pr_common+0x136>
 80010ca:	9a02      	ldr	r2, [sp, #8]
 80010cc:	2a00      	cmp	r2, #0
 80010ce:	d05c      	beq.n	800118a <__gnu_unwind_pr_common+0x1ea>
 80010d0:	f1bb 0f00 	cmp.w	fp, #0
 80010d4:	d074      	beq.n	80011c0 <__gnu_unwind_pr_common+0x220>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	da00      	bge.n	80010dc <__gnu_unwind_pr_common+0x13c>
 80010da:	3404      	adds	r4, #4
 80010dc:	f10b 0b01 	add.w	fp, fp, #1
 80010e0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80010e4:	e7c0      	b.n	8001068 <__gnu_unwind_pr_common+0xc8>
 80010e6:	f1b8 0f00 	cmp.w	r8, #0
 80010ea:	d119      	bne.n	8001120 <__gnu_unwind_pr_common+0x180>
 80010ec:	b1b0      	cbz	r0, 800111c <__gnu_unwind_pr_common+0x17c>
 80010ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80010f2:	1c99      	adds	r1, r3, #2
 80010f4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80010f8:	f43f af7c 	beq.w	8000ff4 <__gnu_unwind_pr_common+0x54>
 80010fc:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001100:	3301      	adds	r3, #1
 8001102:	9104      	str	r1, [sp, #16]
 8001104:	f000 8090 	beq.w	8001228 <__gnu_unwind_pr_common+0x288>
 8001108:	1d20      	adds	r0, r4, #4
 800110a:	f7ff fdc9 	bl	8000ca0 <_Unwind_decode_typeinfo_ptr.isra.0>
 800110e:	ab04      	add	r3, sp, #16
 8001110:	4601      	mov	r1, r0
 8001112:	4628      	mov	r0, r5
 8001114:	f3af 8000 	nop.w
 8001118:	2800      	cmp	r0, #0
 800111a:	d15b      	bne.n	80011d4 <__gnu_unwind_pr_common+0x234>
 800111c:	3408      	adds	r4, #8
 800111e:	e7a3      	b.n	8001068 <__gnu_unwind_pr_common+0xc8>
 8001120:	210d      	movs	r1, #13
 8001122:	4638      	mov	r0, r7
 8001124:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8001128:	f7ff fece 	bl	8000ec8 <_Unwind_GetGR>
 800112c:	4581      	cmp	r9, r0
 800112e:	d1f5      	bne.n	800111c <__gnu_unwind_pr_common+0x17c>
 8001130:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001132:	429c      	cmp	r4, r3
 8001134:	d1f2      	bne.n	800111c <__gnu_unwind_pr_common+0x17c>
 8001136:	4620      	mov	r0, r4
 8001138:	f7ff fcec 	bl	8000b14 <selfrel_offset31>
 800113c:	210f      	movs	r1, #15
 800113e:	4602      	mov	r2, r0
 8001140:	4638      	mov	r0, r7
 8001142:	f7ff fee5 	bl	8000f10 <_Unwind_SetGR>
 8001146:	4638      	mov	r0, r7
 8001148:	462a      	mov	r2, r5
 800114a:	2100      	movs	r1, #0
 800114c:	f7ff fee0 	bl	8000f10 <_Unwind_SetGR>
 8001150:	2007      	movs	r0, #7
 8001152:	e750      	b.n	8000ff6 <__gnu_unwind_pr_common+0x56>
 8001154:	210d      	movs	r1, #13
 8001156:	4638      	mov	r0, r7
 8001158:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800115c:	f7ff feb4 	bl	8000ec8 <_Unwind_GetGR>
 8001160:	4581      	cmp	r9, r0
 8001162:	d001      	beq.n	8001168 <__gnu_unwind_pr_common+0x1c8>
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	e7b6      	b.n	80010d6 <__gnu_unwind_pr_common+0x136>
 8001168:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800116a:	429c      	cmp	r4, r3
 800116c:	d1fa      	bne.n	8001164 <__gnu_unwind_pr_common+0x1c4>
 800116e:	2204      	movs	r2, #4
 8001170:	2100      	movs	r1, #0
 8001172:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 8001176:	18a3      	adds	r3, r4, r2
 8001178:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 800117c:	636b      	str	r3, [r5, #52]	; 0x34
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	428b      	cmp	r3, r1
 8001182:	db59      	blt.n	8001238 <__gnu_unwind_pr_common+0x298>
 8001184:	2301      	movs	r3, #1
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	e7a8      	b.n	80010dc <__gnu_unwind_pr_common+0x13c>
 800118a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800118e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001192:	f104 0a04 	add.w	sl, r4, #4
 8001196:	46b0      	mov	r8, r6
 8001198:	4691      	mov	r9, r2
 800119a:	461e      	mov	r6, r3
 800119c:	e00d      	b.n	80011ba <__gnu_unwind_pr_common+0x21a>
 800119e:	9604      	str	r6, [sp, #16]
 80011a0:	f7ff fd7e 	bl	8000ca0 <_Unwind_decode_typeinfo_ptr.isra.0>
 80011a4:	ab04      	add	r3, sp, #16
 80011a6:	4601      	mov	r1, r0
 80011a8:	2200      	movs	r2, #0
 80011aa:	4628      	mov	r0, r5
 80011ac:	f3af 8000 	nop.w
 80011b0:	f109 0901 	add.w	r9, r9, #1
 80011b4:	f10a 0a04 	add.w	sl, sl, #4
 80011b8:	b9e8      	cbnz	r0, 80011f6 <__gnu_unwind_pr_common+0x256>
 80011ba:	45d9      	cmp	r9, fp
 80011bc:	4650      	mov	r0, sl
 80011be:	d1ee      	bne.n	800119e <__gnu_unwind_pr_common+0x1fe>
 80011c0:	4638      	mov	r0, r7
 80011c2:	210d      	movs	r1, #13
 80011c4:	f7ff fe80 	bl	8000ec8 <_Unwind_GetGR>
 80011c8:	9b04      	ldr	r3, [sp, #16]
 80011ca:	6228      	str	r0, [r5, #32]
 80011cc:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 80011d0:	2006      	movs	r0, #6
 80011d2:	e710      	b.n	8000ff6 <__gnu_unwind_pr_common+0x56>
 80011d4:	4681      	mov	r9, r0
 80011d6:	210d      	movs	r1, #13
 80011d8:	4638      	mov	r0, r7
 80011da:	f7ff fe75 	bl	8000ec8 <_Unwind_GetGR>
 80011de:	f1b9 0f02 	cmp.w	r9, #2
 80011e2:	6228      	str	r0, [r5, #32]
 80011e4:	d125      	bne.n	8001232 <__gnu_unwind_pr_common+0x292>
 80011e6:	462b      	mov	r3, r5
 80011e8:	9a04      	ldr	r2, [sp, #16]
 80011ea:	f843 2f2c 	str.w	r2, [r3, #44]!
 80011ee:	626b      	str	r3, [r5, #36]	; 0x24
 80011f0:	62ac      	str	r4, [r5, #40]	; 0x28
 80011f2:	2006      	movs	r0, #6
 80011f4:	e6ff      	b.n	8000ff6 <__gnu_unwind_pr_common+0x56>
 80011f6:	4646      	mov	r6, r8
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80011fe:	e76a      	b.n	80010d6 <__gnu_unwind_pr_common+0x136>
 8001200:	4620      	mov	r0, r4
 8001202:	f7ff fc87 	bl	8000b14 <selfrel_offset31>
 8001206:	3404      	adds	r4, #4
 8001208:	4602      	mov	r2, r0
 800120a:	63ac      	str	r4, [r5, #56]	; 0x38
 800120c:	4628      	mov	r0, r5
 800120e:	4614      	mov	r4, r2
 8001210:	f3af 8000 	nop.w
 8001214:	2800      	cmp	r0, #0
 8001216:	f43f aeed 	beq.w	8000ff4 <__gnu_unwind_pr_common+0x54>
 800121a:	4638      	mov	r0, r7
 800121c:	4622      	mov	r2, r4
 800121e:	210f      	movs	r1, #15
 8001220:	f7ff fe76 	bl	8000f10 <_Unwind_SetGR>
 8001224:	2007      	movs	r0, #7
 8001226:	e6e6      	b.n	8000ff6 <__gnu_unwind_pr_common+0x56>
 8001228:	4638      	mov	r0, r7
 800122a:	210d      	movs	r1, #13
 800122c:	f7ff fe4c 	bl	8000ec8 <_Unwind_GetGR>
 8001230:	6228      	str	r0, [r5, #32]
 8001232:	9b04      	ldr	r3, [sp, #16]
 8001234:	626b      	str	r3, [r5, #36]	; 0x24
 8001236:	e7db      	b.n	80011f0 <__gnu_unwind_pr_common+0x250>
 8001238:	f10b 0001 	add.w	r0, fp, #1
 800123c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001240:	e77a      	b.n	8001138 <__gnu_unwind_pr_common+0x198>
 8001242:	bf00      	nop
 8001244:	00000000 	.word	0x00000000

08001248 <__aeabi_unwind_cpp_pr0>:
 8001248:	2300      	movs	r3, #0
 800124a:	e6a9      	b.n	8000fa0 <__gnu_unwind_pr_common>

0800124c <__aeabi_unwind_cpp_pr1>:
 800124c:	2301      	movs	r3, #1
 800124e:	e6a7      	b.n	8000fa0 <__gnu_unwind_pr_common>

08001250 <__aeabi_unwind_cpp_pr2>:
 8001250:	2302      	movs	r3, #2
 8001252:	e6a5      	b.n	8000fa0 <__gnu_unwind_pr_common>

08001254 <_Unwind_VRS_Pop>:
 8001254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001258:	4606      	mov	r6, r0
 800125a:	b0c3      	sub	sp, #268	; 0x10c
 800125c:	4615      	mov	r5, r2
 800125e:	461c      	mov	r4, r3
 8001260:	2904      	cmp	r1, #4
 8001262:	f200 80b9 	bhi.w	80013d8 <_Unwind_VRS_Pop+0x184>
 8001266:	e8df f001 	tbb	[pc, r1]
 800126a:	539a      	.short	0x539a
 800126c:	29b7      	.short	0x29b7
 800126e:	03          	.byte	0x03
 800126f:	00          	.byte	0x00
 8001270:	2c00      	cmp	r4, #0
 8001272:	f040 80b1 	bne.w	80013d8 <_Unwind_VRS_Pop+0x184>
 8001276:	2a10      	cmp	r2, #16
 8001278:	f200 80ae 	bhi.w	80013d8 <_Unwind_VRS_Pop+0x184>
 800127c:	6803      	ldr	r3, [r0, #0]
 800127e:	06d8      	lsls	r0, r3, #27
 8001280:	f100 80f3 	bmi.w	800146a <_Unwind_VRS_Pop+0x216>
 8001284:	af20      	add	r7, sp, #128	; 0x80
 8001286:	4638      	mov	r0, r7
 8001288:	f000 f992 	bl	80015b0 <__gnu_Unwind_Save_WMMXC>
 800128c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 800128e:	2300      	movs	r3, #0
 8001290:	2401      	movs	r4, #1
 8001292:	fa04 f203 	lsl.w	r2, r4, r3
 8001296:	422a      	tst	r2, r5
 8001298:	4601      	mov	r1, r0
 800129a:	d004      	beq.n	80012a6 <_Unwind_VRS_Pop+0x52>
 800129c:	f851 2b04 	ldr.w	r2, [r1], #4
 80012a0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 80012a4:	4608      	mov	r0, r1
 80012a6:	3301      	adds	r3, #1
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d1f2      	bne.n	8001292 <_Unwind_VRS_Pop+0x3e>
 80012ac:	63b0      	str	r0, [r6, #56]	; 0x38
 80012ae:	4638      	mov	r0, r7
 80012b0:	f000 f974 	bl	800159c <__gnu_Unwind_Restore_WMMXC>
 80012b4:	2000      	movs	r0, #0
 80012b6:	b043      	add	sp, #268	; 0x10c
 80012b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012bc:	2c03      	cmp	r4, #3
 80012be:	f040 808b 	bne.w	80013d8 <_Unwind_VRS_Pop+0x184>
 80012c2:	b294      	uxth	r4, r2
 80012c4:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 80012c8:	2b10      	cmp	r3, #16
 80012ca:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80012ce:	f200 8083 	bhi.w	80013d8 <_Unwind_VRS_Pop+0x184>
 80012d2:	6803      	ldr	r3, [r0, #0]
 80012d4:	071f      	lsls	r7, r3, #28
 80012d6:	f100 80d0 	bmi.w	800147a <_Unwind_VRS_Pop+0x226>
 80012da:	af20      	add	r7, sp, #128	; 0x80
 80012dc:	4638      	mov	r0, r7
 80012de:	f000 f93b 	bl	8001558 <__gnu_Unwind_Save_WMMXD>
 80012e2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80012e6:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 80012e8:	b154      	cbz	r4, 8001300 <_Unwind_VRS_Pop+0xac>
 80012ea:	460b      	mov	r3, r1
 80012ec:	1ae8      	subs	r0, r5, r3
 80012ee:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80012f2:	00e4      	lsls	r4, r4, #3
 80012f4:	581a      	ldr	r2, [r3, r0]
 80012f6:	f843 2b04 	str.w	r2, [r3], #4
 80012fa:	428b      	cmp	r3, r1
 80012fc:	d1fa      	bne.n	80012f4 <_Unwind_VRS_Pop+0xa0>
 80012fe:	4425      	add	r5, r4
 8001300:	4638      	mov	r0, r7
 8001302:	63b5      	str	r5, [r6, #56]	; 0x38
 8001304:	f000 f906 	bl	8001514 <__gnu_Unwind_Restore_WMMXD>
 8001308:	2000      	movs	r0, #0
 800130a:	b043      	add	sp, #268	; 0x10c
 800130c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001310:	2c01      	cmp	r4, #1
 8001312:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8001316:	b295      	uxth	r5, r2
 8001318:	d05a      	beq.n	80013d0 <_Unwind_VRS_Pop+0x17c>
 800131a:	2c05      	cmp	r4, #5
 800131c:	d15c      	bne.n	80013d8 <_Unwind_VRS_Pop+0x184>
 800131e:	eb08 0905 	add.w	r9, r8, r5
 8001322:	f1b9 0f20 	cmp.w	r9, #32
 8001326:	d857      	bhi.n	80013d8 <_Unwind_VRS_Pop+0x184>
 8001328:	f1b8 0f0f 	cmp.w	r8, #15
 800132c:	d977      	bls.n	800141e <_Unwind_VRS_Pop+0x1ca>
 800132e:	46a9      	mov	r9, r5
 8001330:	2d00      	cmp	r5, #0
 8001332:	f040 8088 	bne.w	8001446 <_Unwind_VRS_Pop+0x1f2>
 8001336:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001338:	b36d      	cbz	r5, 8001396 <_Unwind_VRS_Pop+0x142>
 800133a:	af20      	add	r7, sp, #128	; 0x80
 800133c:	f04f 0900 	mov.w	r9, #0
 8001340:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8001344:	3f04      	subs	r7, #4
 8001346:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800134a:	f853 1b04 	ldr.w	r1, [r3], #4
 800134e:	f847 1f04 	str.w	r1, [r7, #4]!
 8001352:	42ab      	cmp	r3, r5
 8001354:	d1f9      	bne.n	800134a <_Unwind_VRS_Pop+0xf6>
 8001356:	f1b9 0f00 	cmp.w	r9, #0
 800135a:	d00f      	beq.n	800137c <_Unwind_VRS_Pop+0x128>
 800135c:	466f      	mov	r7, sp
 800135e:	4641      	mov	r1, r8
 8001360:	2910      	cmp	r1, #16
 8001362:	bf38      	it	cc
 8001364:	2110      	movcc	r1, #16
 8001366:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800136a:	3984      	subs	r1, #132	; 0x84
 800136c:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8001370:	f853 0b04 	ldr.w	r0, [r3], #4
 8001374:	f841 0f04 	str.w	r0, [r1, #4]!
 8001378:	42ab      	cmp	r3, r5
 800137a:	d1f9      	bne.n	8001370 <_Unwind_VRS_Pop+0x11c>
 800137c:	2c01      	cmp	r4, #1
 800137e:	f000 8084 	beq.w	800148a <_Unwind_VRS_Pop+0x236>
 8001382:	f1b8 0f0f 	cmp.w	r8, #15
 8001386:	63b5      	str	r5, [r6, #56]	; 0x38
 8001388:	d945      	bls.n	8001416 <_Unwind_VRS_Pop+0x1c2>
 800138a:	f1b9 0f00 	cmp.w	r9, #0
 800138e:	d002      	beq.n	8001396 <_Unwind_VRS_Pop+0x142>
 8001390:	4668      	mov	r0, sp
 8001392:	f000 f8b7 	bl	8001504 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001396:	2000      	movs	r0, #0
 8001398:	b043      	add	sp, #268	; 0x10c
 800139a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800139e:	b9dc      	cbnz	r4, 80013d8 <_Unwind_VRS_Pop+0x184>
 80013a0:	6b87      	ldr	r7, [r0, #56]	; 0x38
 80013a2:	4623      	mov	r3, r4
 80013a4:	2001      	movs	r0, #1
 80013a6:	b294      	uxth	r4, r2
 80013a8:	f106 0c04 	add.w	ip, r6, #4
 80013ac:	fa00 f203 	lsl.w	r2, r0, r3
 80013b0:	4222      	tst	r2, r4
 80013b2:	4639      	mov	r1, r7
 80013b4:	d004      	beq.n	80013c0 <_Unwind_VRS_Pop+0x16c>
 80013b6:	f851 2b04 	ldr.w	r2, [r1], #4
 80013ba:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 80013be:	460f      	mov	r7, r1
 80013c0:	3301      	adds	r3, #1
 80013c2:	2b10      	cmp	r3, #16
 80013c4:	d1f2      	bne.n	80013ac <_Unwind_VRS_Pop+0x158>
 80013c6:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 80013ca:	d1e4      	bne.n	8001396 <_Unwind_VRS_Pop+0x142>
 80013cc:	63b7      	str	r7, [r6, #56]	; 0x38
 80013ce:	e004      	b.n	80013da <_Unwind_VRS_Pop+0x186>
 80013d0:	eb08 0305 	add.w	r3, r8, r5
 80013d4:	2b10      	cmp	r3, #16
 80013d6:	d903      	bls.n	80013e0 <_Unwind_VRS_Pop+0x18c>
 80013d8:	2002      	movs	r0, #2
 80013da:	b043      	add	sp, #268	; 0x10c
 80013dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013e0:	f1b8 0f0f 	cmp.w	r8, #15
 80013e4:	d8f8      	bhi.n	80013d8 <_Unwind_VRS_Pop+0x184>
 80013e6:	6833      	ldr	r3, [r6, #0]
 80013e8:	07da      	lsls	r2, r3, #31
 80013ea:	d506      	bpl.n	80013fa <_Unwind_VRS_Pop+0x1a6>
 80013ec:	4630      	mov	r0, r6
 80013ee:	f023 0303 	bic.w	r3, r3, #3
 80013f2:	f840 3b48 	str.w	r3, [r0], #72
 80013f6:	f000 f879 	bl	80014ec <__gnu_Unwind_Save_VFP>
 80013fa:	af20      	add	r7, sp, #128	; 0x80
 80013fc:	4638      	mov	r0, r7
 80013fe:	f000 f875 	bl	80014ec <__gnu_Unwind_Save_VFP>
 8001402:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001404:	2d00      	cmp	r5, #0
 8001406:	d199      	bne.n	800133c <_Unwind_VRS_Pop+0xe8>
 8001408:	461d      	mov	r5, r3
 800140a:	3504      	adds	r5, #4
 800140c:	63b5      	str	r5, [r6, #56]	; 0x38
 800140e:	4638      	mov	r0, r7
 8001410:	f000 f868 	bl	80014e4 <__gnu_Unwind_Restore_VFP>
 8001414:	e7bf      	b.n	8001396 <_Unwind_VRS_Pop+0x142>
 8001416:	a820      	add	r0, sp, #128	; 0x80
 8001418:	f000 f86c 	bl	80014f4 <__gnu_Unwind_Restore_VFP_D>
 800141c:	e7b5      	b.n	800138a <_Unwind_VRS_Pop+0x136>
 800141e:	f1b9 0f10 	cmp.w	r9, #16
 8001422:	d940      	bls.n	80014a6 <_Unwind_VRS_Pop+0x252>
 8001424:	f1a9 0910 	sub.w	r9, r9, #16
 8001428:	6833      	ldr	r3, [r6, #0]
 800142a:	07d9      	lsls	r1, r3, #31
 800142c:	d508      	bpl.n	8001440 <_Unwind_VRS_Pop+0x1ec>
 800142e:	f023 0301 	bic.w	r3, r3, #1
 8001432:	4630      	mov	r0, r6
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	f840 3b48 	str.w	r3, [r0], #72
 800143c:	f000 f85e 	bl	80014fc <__gnu_Unwind_Save_VFP_D>
 8001440:	f1b9 0f00 	cmp.w	r9, #0
 8001444:	d032      	beq.n	80014ac <_Unwind_VRS_Pop+0x258>
 8001446:	6833      	ldr	r3, [r6, #0]
 8001448:	075a      	lsls	r2, r3, #29
 800144a:	d420      	bmi.n	800148e <_Unwind_VRS_Pop+0x23a>
 800144c:	f1b8 0f0f 	cmp.w	r8, #15
 8001450:	d925      	bls.n	800149e <_Unwind_VRS_Pop+0x24a>
 8001452:	466f      	mov	r7, sp
 8001454:	4638      	mov	r0, r7
 8001456:	f1c8 0510 	rsb	r5, r8, #16
 800145a:	f000 f857 	bl	800150c <__gnu_Unwind_Save_VFP_D_16_to_31>
 800145e:	2d00      	cmp	r5, #0
 8001460:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001462:	f77f af7c 	ble.w	800135e <_Unwind_VRS_Pop+0x10a>
 8001466:	af20      	add	r7, sp, #128	; 0x80
 8001468:	e76a      	b.n	8001340 <_Unwind_VRS_Pop+0xec>
 800146a:	f023 0310 	bic.w	r3, r3, #16
 800146e:	6033      	str	r3, [r6, #0]
 8001470:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001474:	f000 f89c 	bl	80015b0 <__gnu_Unwind_Save_WMMXC>
 8001478:	e704      	b.n	8001284 <_Unwind_VRS_Pop+0x30>
 800147a:	f023 0308 	bic.w	r3, r3, #8
 800147e:	6003      	str	r3, [r0, #0]
 8001480:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001484:	f000 f868 	bl	8001558 <__gnu_Unwind_Save_WMMXD>
 8001488:	e727      	b.n	80012da <_Unwind_VRS_Pop+0x86>
 800148a:	af20      	add	r7, sp, #128	; 0x80
 800148c:	e7bd      	b.n	800140a <_Unwind_VRS_Pop+0x1b6>
 800148e:	4630      	mov	r0, r6
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	f840 3bd0 	str.w	r3, [r0], #208
 8001498:	f000 f838 	bl	800150c <__gnu_Unwind_Save_VFP_D_16_to_31>
 800149c:	e7d6      	b.n	800144c <_Unwind_VRS_Pop+0x1f8>
 800149e:	a820      	add	r0, sp, #128	; 0x80
 80014a0:	f000 f82c 	bl	80014fc <__gnu_Unwind_Save_VFP_D>
 80014a4:	e7d5      	b.n	8001452 <_Unwind_VRS_Pop+0x1fe>
 80014a6:	f04f 0900 	mov.w	r9, #0
 80014aa:	e7bd      	b.n	8001428 <_Unwind_VRS_Pop+0x1d4>
 80014ac:	f1b8 0f0f 	cmp.w	r8, #15
 80014b0:	f63f af41 	bhi.w	8001336 <_Unwind_VRS_Pop+0xe2>
 80014b4:	af20      	add	r7, sp, #128	; 0x80
 80014b6:	4638      	mov	r0, r7
 80014b8:	f000 f820 	bl	80014fc <__gnu_Unwind_Save_VFP_D>
 80014bc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80014be:	2d00      	cmp	r5, #0
 80014c0:	f47f af3c 	bne.w	800133c <_Unwind_VRS_Pop+0xe8>
 80014c4:	4638      	mov	r0, r7
 80014c6:	f000 f815 	bl	80014f4 <__gnu_Unwind_Restore_VFP_D>
 80014ca:	e764      	b.n	8001396 <_Unwind_VRS_Pop+0x142>

080014cc <__restore_core_regs>:
 80014cc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80014d0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80014d4:	469c      	mov	ip, r3
 80014d6:	46a6      	mov	lr, r4
 80014d8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80014dc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80014e0:	46e5      	mov	sp, ip
 80014e2:	bd00      	pop	{pc}

080014e4 <__gnu_Unwind_Restore_VFP>:
 80014e4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop

080014ec <__gnu_Unwind_Save_VFP>:
 80014ec:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <__gnu_Unwind_Restore_VFP_D>:
 80014f4:	ec90 0b20 	vldmia	r0, {d0-d15}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop

080014fc <__gnu_Unwind_Save_VFP_D>:
 80014fc:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop

08001504 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001504:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800150c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <__gnu_Unwind_Restore_WMMXD>:
 8001514:	ecf0 0102 	ldfe	f0, [r0], #8
 8001518:	ecf0 1102 	ldfe	f1, [r0], #8
 800151c:	ecf0 2102 	ldfe	f2, [r0], #8
 8001520:	ecf0 3102 	ldfe	f3, [r0], #8
 8001524:	ecf0 4102 	ldfe	f4, [r0], #8
 8001528:	ecf0 5102 	ldfe	f5, [r0], #8
 800152c:	ecf0 6102 	ldfe	f6, [r0], #8
 8001530:	ecf0 7102 	ldfe	f7, [r0], #8
 8001534:	ecf0 8102 	ldfp	f0, [r0], #8
 8001538:	ecf0 9102 	ldfp	f1, [r0], #8
 800153c:	ecf0 a102 	ldfp	f2, [r0], #8
 8001540:	ecf0 b102 	ldfp	f3, [r0], #8
 8001544:	ecf0 c102 	ldfp	f4, [r0], #8
 8001548:	ecf0 d102 	ldfp	f5, [r0], #8
 800154c:	ecf0 e102 	ldfp	f6, [r0], #8
 8001550:	ecf0 f102 	ldfp	f7, [r0], #8
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop

08001558 <__gnu_Unwind_Save_WMMXD>:
 8001558:	ece0 0102 	stfe	f0, [r0], #8
 800155c:	ece0 1102 	stfe	f1, [r0], #8
 8001560:	ece0 2102 	stfe	f2, [r0], #8
 8001564:	ece0 3102 	stfe	f3, [r0], #8
 8001568:	ece0 4102 	stfe	f4, [r0], #8
 800156c:	ece0 5102 	stfe	f5, [r0], #8
 8001570:	ece0 6102 	stfe	f6, [r0], #8
 8001574:	ece0 7102 	stfe	f7, [r0], #8
 8001578:	ece0 8102 	stfp	f0, [r0], #8
 800157c:	ece0 9102 	stfp	f1, [r0], #8
 8001580:	ece0 a102 	stfp	f2, [r0], #8
 8001584:	ece0 b102 	stfp	f3, [r0], #8
 8001588:	ece0 c102 	stfp	f4, [r0], #8
 800158c:	ece0 d102 	stfp	f5, [r0], #8
 8001590:	ece0 e102 	stfp	f6, [r0], #8
 8001594:	ece0 f102 	stfp	f7, [r0], #8
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop

0800159c <__gnu_Unwind_Restore_WMMXC>:
 800159c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80015a0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80015a4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80015a8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop

080015b0 <__gnu_Unwind_Save_WMMXC>:
 80015b0:	fca0 8101 	stc2	1, cr8, [r0], #4
 80015b4:	fca0 9101 	stc2	1, cr9, [r0], #4
 80015b8:	fca0 a101 	stc2	1, cr10, [r0], #4
 80015bc:	fca0 b101 	stc2	1, cr11, [r0], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop

080015c4 <_Unwind_RaiseException>:
 80015c4:	46ec      	mov	ip, sp
 80015c6:	b500      	push	{lr}
 80015c8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015d8:	a901      	add	r1, sp, #4
 80015da:	f7ff fbf1 	bl	8000dc0 <__gnu_Unwind_RaiseException>
 80015de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015e2:	b012      	add	sp, #72	; 0x48
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <_Unwind_Resume>:
 80015e8:	46ec      	mov	ip, sp
 80015ea:	b500      	push	{lr}
 80015ec:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015fc:	a901      	add	r1, sp, #4
 80015fe:	f7ff fc19 	bl	8000e34 <__gnu_Unwind_Resume>
 8001602:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001606:	b012      	add	sp, #72	; 0x48
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop

0800160c <_Unwind_Resume_or_Rethrow>:
 800160c:	46ec      	mov	ip, sp
 800160e:	b500      	push	{lr}
 8001610:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001614:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001620:	a901      	add	r1, sp, #4
 8001622:	f7ff fc29 	bl	8000e78 <__gnu_Unwind_Resume_or_Rethrow>
 8001626:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800162a:	b012      	add	sp, #72	; 0x48
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop

08001630 <_Unwind_ForcedUnwind>:
 8001630:	46ec      	mov	ip, sp
 8001632:	b500      	push	{lr}
 8001634:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001638:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001644:	ab01      	add	r3, sp, #4
 8001646:	f7ff fbeb 	bl	8000e20 <__gnu_Unwind_ForcedUnwind>
 800164a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800164e:	b012      	add	sp, #72	; 0x48
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop

08001654 <_Unwind_Backtrace>:
 8001654:	46ec      	mov	ip, sp
 8001656:	b500      	push	{lr}
 8001658:	e92d 5000 	stmdb	sp!, {ip, lr}
 800165c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001668:	aa01      	add	r2, sp, #4
 800166a:	f7ff fc5d 	bl	8000f28 <__gnu_Unwind_Backtrace>
 800166e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001672:	b012      	add	sp, #72	; 0x48
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop

08001678 <next_unwind_byte>:
 8001678:	7a02      	ldrb	r2, [r0, #8]
 800167a:	b97a      	cbnz	r2, 800169c <next_unwind_byte+0x24>
 800167c:	7a43      	ldrb	r3, [r0, #9]
 800167e:	b1a3      	cbz	r3, 80016aa <next_unwind_byte+0x32>
 8001680:	6842      	ldr	r2, [r0, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	b410      	push	{r4}
 8001686:	7243      	strb	r3, [r0, #9]
 8001688:	6813      	ldr	r3, [r2, #0]
 800168a:	2103      	movs	r1, #3
 800168c:	1d14      	adds	r4, r2, #4
 800168e:	7201      	strb	r1, [r0, #8]
 8001690:	021a      	lsls	r2, r3, #8
 8001692:	6044      	str	r4, [r0, #4]
 8001694:	6002      	str	r2, [r0, #0]
 8001696:	bc10      	pop	{r4}
 8001698:	0e18      	lsrs	r0, r3, #24
 800169a:	4770      	bx	lr
 800169c:	6803      	ldr	r3, [r0, #0]
 800169e:	3a01      	subs	r2, #1
 80016a0:	7202      	strb	r2, [r0, #8]
 80016a2:	021a      	lsls	r2, r3, #8
 80016a4:	6002      	str	r2, [r0, #0]
 80016a6:	0e18      	lsrs	r0, r3, #24
 80016a8:	4770      	bx	lr
 80016aa:	20b0      	movs	r0, #176	; 0xb0
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop

080016b0 <_Unwind_GetGR.constprop.0>:
 80016b0:	b500      	push	{lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	aa03      	add	r2, sp, #12
 80016b6:	2300      	movs	r3, #0
 80016b8:	9200      	str	r2, [sp, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	220c      	movs	r2, #12
 80016be:	f7ff fbeb 	bl	8000e98 <_Unwind_VRS_Get>
 80016c2:	9803      	ldr	r0, [sp, #12]
 80016c4:	b005      	add	sp, #20
 80016c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80016ca:	bf00      	nop

080016cc <unwind_UCB_from_context>:
 80016cc:	e7f0      	b.n	80016b0 <_Unwind_GetGR.constprop.0>
 80016ce:	bf00      	nop

080016d0 <__gnu_unwind_execute>:
 80016d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016d4:	4605      	mov	r5, r0
 80016d6:	b085      	sub	sp, #20
 80016d8:	460e      	mov	r6, r1
 80016da:	f04f 0800 	mov.w	r8, #0
 80016de:	4630      	mov	r0, r6
 80016e0:	f7ff ffca 	bl	8001678 <next_unwind_byte>
 80016e4:	28b0      	cmp	r0, #176	; 0xb0
 80016e6:	4604      	mov	r4, r0
 80016e8:	f000 80b2 	beq.w	8001850 <__gnu_unwind_execute+0x180>
 80016ec:	0607      	lsls	r7, r0, #24
 80016ee:	d520      	bpl.n	8001732 <__gnu_unwind_execute+0x62>
 80016f0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80016f4:	2b80      	cmp	r3, #128	; 0x80
 80016f6:	d04d      	beq.n	8001794 <__gnu_unwind_execute+0xc4>
 80016f8:	2b90      	cmp	r3, #144	; 0x90
 80016fa:	d036      	beq.n	800176a <__gnu_unwind_execute+0x9a>
 80016fc:	2ba0      	cmp	r3, #160	; 0xa0
 80016fe:	d060      	beq.n	80017c2 <__gnu_unwind_execute+0xf2>
 8001700:	2bb0      	cmp	r3, #176	; 0xb0
 8001702:	d074      	beq.n	80017ee <__gnu_unwind_execute+0x11e>
 8001704:	2bc0      	cmp	r3, #192	; 0xc0
 8001706:	f000 808b 	beq.w	8001820 <__gnu_unwind_execute+0x150>
 800170a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800170e:	2bd0      	cmp	r3, #208	; 0xd0
 8001710:	d10b      	bne.n	800172a <__gnu_unwind_execute+0x5a>
 8001712:	f000 0207 	and.w	r2, r0, #7
 8001716:	3201      	adds	r2, #1
 8001718:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800171c:	2305      	movs	r3, #5
 800171e:	2101      	movs	r1, #1
 8001720:	4628      	mov	r0, r5
 8001722:	f7ff fd97 	bl	8001254 <_Unwind_VRS_Pop>
 8001726:	2800      	cmp	r0, #0
 8001728:	d0d9      	beq.n	80016de <__gnu_unwind_execute+0xe>
 800172a:	2009      	movs	r0, #9
 800172c:	b005      	add	sp, #20
 800172e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001732:	f10d 090c 	add.w	r9, sp, #12
 8001736:	2300      	movs	r3, #0
 8001738:	4619      	mov	r1, r3
 800173a:	0087      	lsls	r7, r0, #2
 800173c:	f8cd 9000 	str.w	r9, [sp]
 8001740:	220d      	movs	r2, #13
 8001742:	4628      	mov	r0, r5
 8001744:	f7ff fba8 	bl	8000e98 <_Unwind_VRS_Get>
 8001748:	b2ff      	uxtb	r7, r7
 800174a:	9b03      	ldr	r3, [sp, #12]
 800174c:	f8cd 9000 	str.w	r9, [sp]
 8001750:	3704      	adds	r7, #4
 8001752:	0660      	lsls	r0, r4, #25
 8001754:	bf4c      	ite	mi
 8001756:	1bdf      	submi	r7, r3, r7
 8001758:	18ff      	addpl	r7, r7, r3
 800175a:	2300      	movs	r3, #0
 800175c:	4619      	mov	r1, r3
 800175e:	220d      	movs	r2, #13
 8001760:	4628      	mov	r0, r5
 8001762:	9703      	str	r7, [sp, #12]
 8001764:	f7ff fbbc 	bl	8000ee0 <_Unwind_VRS_Set>
 8001768:	e7b9      	b.n	80016de <__gnu_unwind_execute+0xe>
 800176a:	f000 030d 	and.w	r3, r0, #13
 800176e:	2b0d      	cmp	r3, #13
 8001770:	d0db      	beq.n	800172a <__gnu_unwind_execute+0x5a>
 8001772:	af03      	add	r7, sp, #12
 8001774:	2300      	movs	r3, #0
 8001776:	f000 020f 	and.w	r2, r0, #15
 800177a:	4619      	mov	r1, r3
 800177c:	9700      	str	r7, [sp, #0]
 800177e:	4628      	mov	r0, r5
 8001780:	f7ff fb8a 	bl	8000e98 <_Unwind_VRS_Get>
 8001784:	2300      	movs	r3, #0
 8001786:	9700      	str	r7, [sp, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	220d      	movs	r2, #13
 800178c:	4628      	mov	r0, r5
 800178e:	f7ff fba7 	bl	8000ee0 <_Unwind_VRS_Set>
 8001792:	e7a4      	b.n	80016de <__gnu_unwind_execute+0xe>
 8001794:	4630      	mov	r0, r6
 8001796:	f7ff ff6f 	bl	8001678 <next_unwind_byte>
 800179a:	0224      	lsls	r4, r4, #8
 800179c:	4320      	orrs	r0, r4
 800179e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80017a2:	d0c2      	beq.n	800172a <__gnu_unwind_execute+0x5a>
 80017a4:	0104      	lsls	r4, r0, #4
 80017a6:	2300      	movs	r3, #0
 80017a8:	b2a2      	uxth	r2, r4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4628      	mov	r0, r5
 80017ae:	f7ff fd51 	bl	8001254 <_Unwind_VRS_Pop>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d1b9      	bne.n	800172a <__gnu_unwind_execute+0x5a>
 80017b6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80017ba:	bf18      	it	ne
 80017bc:	f04f 0801 	movne.w	r8, #1
 80017c0:	e78d      	b.n	80016de <__gnu_unwind_execute+0xe>
 80017c2:	43c2      	mvns	r2, r0
 80017c4:	f002 0307 	and.w	r3, r2, #7
 80017c8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80017cc:	411a      	asrs	r2, r3
 80017ce:	0701      	lsls	r1, r0, #28
 80017d0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	bf48      	it	mi
 80017da:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80017de:	4619      	mov	r1, r3
 80017e0:	4628      	mov	r0, r5
 80017e2:	f7ff fd37 	bl	8001254 <_Unwind_VRS_Pop>
 80017e6:	2800      	cmp	r0, #0
 80017e8:	f43f af79 	beq.w	80016de <__gnu_unwind_execute+0xe>
 80017ec:	e79d      	b.n	800172a <__gnu_unwind_execute+0x5a>
 80017ee:	28b1      	cmp	r0, #177	; 0xb1
 80017f0:	d033      	beq.n	800185a <__gnu_unwind_execute+0x18a>
 80017f2:	28b2      	cmp	r0, #178	; 0xb2
 80017f4:	f000 808b 	beq.w	800190e <__gnu_unwind_execute+0x23e>
 80017f8:	28b3      	cmp	r0, #179	; 0xb3
 80017fa:	d039      	beq.n	8001870 <__gnu_unwind_execute+0x1a0>
 80017fc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001800:	2bb4      	cmp	r3, #180	; 0xb4
 8001802:	d092      	beq.n	800172a <__gnu_unwind_execute+0x5a>
 8001804:	f000 0207 	and.w	r2, r0, #7
 8001808:	3201      	adds	r2, #1
 800180a:	2301      	movs	r3, #1
 800180c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001810:	4619      	mov	r1, r3
 8001812:	4628      	mov	r0, r5
 8001814:	f7ff fd1e 	bl	8001254 <_Unwind_VRS_Pop>
 8001818:	2800      	cmp	r0, #0
 800181a:	f43f af60 	beq.w	80016de <__gnu_unwind_execute+0xe>
 800181e:	e784      	b.n	800172a <__gnu_unwind_execute+0x5a>
 8001820:	28c6      	cmp	r0, #198	; 0xc6
 8001822:	d042      	beq.n	80018aa <__gnu_unwind_execute+0x1da>
 8001824:	28c7      	cmp	r0, #199	; 0xc7
 8001826:	d04c      	beq.n	80018c2 <__gnu_unwind_execute+0x1f2>
 8001828:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800182c:	2bc0      	cmp	r3, #192	; 0xc0
 800182e:	d05b      	beq.n	80018e8 <__gnu_unwind_execute+0x218>
 8001830:	28c8      	cmp	r0, #200	; 0xc8
 8001832:	d060      	beq.n	80018f6 <__gnu_unwind_execute+0x226>
 8001834:	28c9      	cmp	r0, #201	; 0xc9
 8001836:	f47f af78 	bne.w	800172a <__gnu_unwind_execute+0x5a>
 800183a:	4630      	mov	r0, r6
 800183c:	f7ff ff1c 	bl	8001678 <next_unwind_byte>
 8001840:	0302      	lsls	r2, r0, #12
 8001842:	f000 000f 	and.w	r0, r0, #15
 8001846:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800184a:	3001      	adds	r0, #1
 800184c:	4302      	orrs	r2, r0
 800184e:	e765      	b.n	800171c <__gnu_unwind_execute+0x4c>
 8001850:	f1b8 0f00 	cmp.w	r8, #0
 8001854:	d018      	beq.n	8001888 <__gnu_unwind_execute+0x1b8>
 8001856:	2000      	movs	r0, #0
 8001858:	e768      	b.n	800172c <__gnu_unwind_execute+0x5c>
 800185a:	4630      	mov	r0, r6
 800185c:	f7ff ff0c 	bl	8001678 <next_unwind_byte>
 8001860:	4602      	mov	r2, r0
 8001862:	2800      	cmp	r0, #0
 8001864:	f43f af61 	beq.w	800172a <__gnu_unwind_execute+0x5a>
 8001868:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800186c:	d0d0      	beq.n	8001810 <__gnu_unwind_execute+0x140>
 800186e:	e75c      	b.n	800172a <__gnu_unwind_execute+0x5a>
 8001870:	4630      	mov	r0, r6
 8001872:	f7ff ff01 	bl	8001678 <next_unwind_byte>
 8001876:	0301      	lsls	r1, r0, #12
 8001878:	f000 000f 	and.w	r0, r0, #15
 800187c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001880:	1c42      	adds	r2, r0, #1
 8001882:	2301      	movs	r3, #1
 8001884:	430a      	orrs	r2, r1
 8001886:	e7c3      	b.n	8001810 <__gnu_unwind_execute+0x140>
 8001888:	ac03      	add	r4, sp, #12
 800188a:	4643      	mov	r3, r8
 800188c:	220e      	movs	r2, #14
 800188e:	4641      	mov	r1, r8
 8001890:	9400      	str	r4, [sp, #0]
 8001892:	4628      	mov	r0, r5
 8001894:	f7ff fb00 	bl	8000e98 <_Unwind_VRS_Get>
 8001898:	9400      	str	r4, [sp, #0]
 800189a:	4628      	mov	r0, r5
 800189c:	4643      	mov	r3, r8
 800189e:	220f      	movs	r2, #15
 80018a0:	4641      	mov	r1, r8
 80018a2:	f7ff fb1d 	bl	8000ee0 <_Unwind_VRS_Set>
 80018a6:	4640      	mov	r0, r8
 80018a8:	e740      	b.n	800172c <__gnu_unwind_execute+0x5c>
 80018aa:	4630      	mov	r0, r6
 80018ac:	f7ff fee4 	bl	8001678 <next_unwind_byte>
 80018b0:	0301      	lsls	r1, r0, #12
 80018b2:	f000 000f 	and.w	r0, r0, #15
 80018b6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80018ba:	1c42      	adds	r2, r0, #1
 80018bc:	2303      	movs	r3, #3
 80018be:	430a      	orrs	r2, r1
 80018c0:	e7a6      	b.n	8001810 <__gnu_unwind_execute+0x140>
 80018c2:	4630      	mov	r0, r6
 80018c4:	f7ff fed8 	bl	8001678 <next_unwind_byte>
 80018c8:	4602      	mov	r2, r0
 80018ca:	2800      	cmp	r0, #0
 80018cc:	f43f af2d 	beq.w	800172a <__gnu_unwind_execute+0x5a>
 80018d0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80018d4:	f47f af29 	bne.w	800172a <__gnu_unwind_execute+0x5a>
 80018d8:	2104      	movs	r1, #4
 80018da:	4628      	mov	r0, r5
 80018dc:	f7ff fcba 	bl	8001254 <_Unwind_VRS_Pop>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	f43f aefc 	beq.w	80016de <__gnu_unwind_execute+0xe>
 80018e6:	e720      	b.n	800172a <__gnu_unwind_execute+0x5a>
 80018e8:	f000 020f 	and.w	r2, r0, #15
 80018ec:	3201      	adds	r2, #1
 80018ee:	2303      	movs	r3, #3
 80018f0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80018f4:	e78c      	b.n	8001810 <__gnu_unwind_execute+0x140>
 80018f6:	4630      	mov	r0, r6
 80018f8:	f7ff febe 	bl	8001678 <next_unwind_byte>
 80018fc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001900:	f000 030f 	and.w	r3, r0, #15
 8001904:	3210      	adds	r2, #16
 8001906:	3301      	adds	r3, #1
 8001908:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800190c:	e706      	b.n	800171c <__gnu_unwind_execute+0x4c>
 800190e:	2300      	movs	r3, #0
 8001910:	f10d 090c 	add.w	r9, sp, #12
 8001914:	220d      	movs	r2, #13
 8001916:	4619      	mov	r1, r3
 8001918:	f8cd 9000 	str.w	r9, [sp]
 800191c:	4628      	mov	r0, r5
 800191e:	f7ff fabb 	bl	8000e98 <_Unwind_VRS_Get>
 8001922:	4630      	mov	r0, r6
 8001924:	f7ff fea8 	bl	8001678 <next_unwind_byte>
 8001928:	0602      	lsls	r2, r0, #24
 800192a:	f04f 0702 	mov.w	r7, #2
 800192e:	d50c      	bpl.n	800194a <__gnu_unwind_execute+0x27a>
 8001930:	9b03      	ldr	r3, [sp, #12]
 8001932:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001936:	40b8      	lsls	r0, r7
 8001938:	4403      	add	r3, r0
 800193a:	4630      	mov	r0, r6
 800193c:	9303      	str	r3, [sp, #12]
 800193e:	f7ff fe9b 	bl	8001678 <next_unwind_byte>
 8001942:	0603      	lsls	r3, r0, #24
 8001944:	f107 0707 	add.w	r7, r7, #7
 8001948:	d4f2      	bmi.n	8001930 <__gnu_unwind_execute+0x260>
 800194a:	9b03      	ldr	r3, [sp, #12]
 800194c:	f8cd 9000 	str.w	r9, [sp]
 8001950:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001954:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001958:	40bc      	lsls	r4, r7
 800195a:	2300      	movs	r3, #0
 800195c:	4414      	add	r4, r2
 800195e:	4619      	mov	r1, r3
 8001960:	220d      	movs	r2, #13
 8001962:	4628      	mov	r0, r5
 8001964:	9403      	str	r4, [sp, #12]
 8001966:	f7ff fabb 	bl	8000ee0 <_Unwind_VRS_Set>
 800196a:	e6b8      	b.n	80016de <__gnu_unwind_execute+0xe>

0800196c <__gnu_unwind_frame>:
 800196c:	b510      	push	{r4, lr}
 800196e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001970:	b084      	sub	sp, #16
 8001972:	6853      	ldr	r3, [r2, #4]
 8001974:	2403      	movs	r4, #3
 8001976:	f88d 400c 	strb.w	r4, [sp, #12]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	f102 0408 	add.w	r4, r2, #8
 8001980:	4608      	mov	r0, r1
 8001982:	79d2      	ldrb	r2, [r2, #7]
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	a901      	add	r1, sp, #4
 8001988:	9402      	str	r4, [sp, #8]
 800198a:	f88d 200d 	strb.w	r2, [sp, #13]
 800198e:	f7ff fe9f 	bl	80016d0 <__gnu_unwind_execute>
 8001992:	b004      	add	sp, #16
 8001994:	bd10      	pop	{r4, pc}
 8001996:	bf00      	nop

08001998 <_Unwind_GetRegionStart>:
 8001998:	b508      	push	{r3, lr}
 800199a:	f7ff fe97 	bl	80016cc <unwind_UCB_from_context>
 800199e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80019a0:	bd08      	pop	{r3, pc}
 80019a2:	bf00      	nop

080019a4 <_Unwind_GetLanguageSpecificData>:
 80019a4:	b508      	push	{r3, lr}
 80019a6:	f7ff fe91 	bl	80016cc <unwind_UCB_from_context>
 80019aa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80019ac:	79c3      	ldrb	r3, [r0, #7]
 80019ae:	3302      	adds	r3, #2
 80019b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80019b4:	bd08      	pop	{r3, pc}
 80019b6:	bf00      	nop

080019b8 <__aeabi_idiv0>:
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop

080019bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c0:	f000 fcc8 	bl	8002354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c4:	f000 f810 	bl	80019e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c8:	f000 f9d8 	bl	8001d7c <MX_GPIO_Init>
  MX_DMA_Init();
 80019cc:	f000 f9ae 	bl	8001d2c <MX_DMA_Init>
  MX_SPI1_Init();
 80019d0:	f000 f872 	bl	8001ab8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80019d4:	f000 f8a2 	bl	8001b1c <MX_TIM1_Init>
  MX_TIM3_Init();
 80019d8:	f000 f920 	bl	8001c1c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80019dc:	f000 f97c 	bl	8001cd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 80019e0:	f005 feca 	bl	8007778 <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <main+0x28>
	...

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b094      	sub	sp, #80	; 0x50
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	2230      	movs	r2, #48	; 0x30
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f006 f9a2 	bl	8007d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <SystemClock_Config+0xc8>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <SystemClock_Config+0xc8>)
 8001a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <SystemClock_Config+0xc8>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <SystemClock_Config+0xcc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a20      	ldr	r2, [pc, #128]	; (8001ab4 <SystemClock_Config+0xcc>)
 8001a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <SystemClock_Config+0xcc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a44:	2301      	movs	r3, #1
 8001a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001a5c:	23c8      	movs	r3, #200	; 0xc8
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a64:	2304      	movs	r3, #4
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fcdd 	bl	800442c <HAL_RCC_OscConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a78:	f000 fa10 	bl	8001e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a80:	2302      	movs	r3, #2
 8001a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2103      	movs	r1, #3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 ff37 	bl	800490c <HAL_RCC_ClockConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001aa4:	f000 f9fa 	bl	8001e9c <Error_Handler>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3750      	adds	r7, #80	; 0x50
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001abe:	4a16      	ldr	r2, [pc, #88]	; (8001b18 <MX_SPI1_Init+0x60>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001afc:	220a      	movs	r2, #10
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	; (8001b14 <MX_SPI1_Init+0x5c>)
 8001b02:	f003 f8ff 	bl	8004d04 <HAL_SPI_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8001b0c:	f000 f9c6 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20001f8c 	.word	0x20001f8c
 8001b18:	40013000 	.word	0x40013000

08001b1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b092      	sub	sp, #72	; 0x48
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
 8001b3c:	615a      	str	r2, [r3, #20]
 8001b3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2220      	movs	r2, #32
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f006 f8fa 	bl	8007d40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b4c:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <MX_TIM1_Init+0xf8>)
 8001b4e:	4a32      	ldr	r2, [pc, #200]	; (8001c18 <MX_TIM1_Init+0xfc>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b52:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <MX_TIM1_Init+0xf8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <MX_TIM1_Init+0xf8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <MX_TIM1_Init+0xf8>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <MX_TIM1_Init+0xf8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <MX_TIM1_Init+0xf8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <MX_TIM1_Init+0xf8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b76:	4827      	ldr	r0, [pc, #156]	; (8001c14 <MX_TIM1_Init+0xf8>)
 8001b78:	f003 fa95 	bl	80050a6 <HAL_TIM_PWM_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001b82:	f000 f98b 	bl	8001e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b92:	4619      	mov	r1, r3
 8001b94:	481f      	ldr	r0, [pc, #124]	; (8001c14 <MX_TIM1_Init+0xf8>)
 8001b96:	f003 ff1f 	bl	80059d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001ba0:	f000 f97c 	bl	8001e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba4:	2360      	movs	r3, #96	; 0x60
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4812      	ldr	r0, [pc, #72]	; (8001c14 <MX_TIM1_Init+0xf8>)
 8001bca:	f003 fbe5 	bl	8005398 <HAL_TIM_PWM_ConfigChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001bd4:	f000 f962 	bl	8001e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <MX_TIM1_Init+0xf8>)
 8001bfc:	f003 ff5a 	bl	8005ab4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001c06:	f000 f949 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	3748      	adds	r7, #72	; 0x48
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20001f4c 	.word	0x20001f4c
 8001c18:	40010000 	.word	0x40010000

08001c1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]
 8001c3a:	615a      	str	r2, [r3, #20]
 8001c3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <MX_TIM3_Init+0xb4>)
 8001c40:	4a24      	ldr	r2, [pc, #144]	; (8001cd4 <MX_TIM3_Init+0xb8>)
 8001c42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200;
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <MX_TIM3_Init+0xb4>)
 8001c46:	22c8      	movs	r2, #200	; 0xc8
 8001c48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <MX_TIM3_Init+0xb4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <MX_TIM3_Init+0xb4>)
 8001c52:	220a      	movs	r2, #10
 8001c54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <MX_TIM3_Init+0xb4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <MX_TIM3_Init+0xb4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c62:	481b      	ldr	r0, [pc, #108]	; (8001cd0 <MX_TIM3_Init+0xb4>)
 8001c64:	f003 fa1f 	bl	80050a6 <HAL_TIM_PWM_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001c6e:	f000 f915 	bl	8001e9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001c72:	2108      	movs	r1, #8
 8001c74:	4816      	ldr	r0, [pc, #88]	; (8001cd0 <MX_TIM3_Init+0xb4>)
 8001c76:	f003 fa41 	bl	80050fc <HAL_TIM_OnePulse_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c80:	f000 f90c 	bl	8001e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	4619      	mov	r1, r3
 8001c92:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <MX_TIM3_Init+0xb4>)
 8001c94:	f003 fea0 	bl	80059d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001c9e:	f000 f8fd 	bl	8001e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca2:	2360      	movs	r3, #96	; 0x60
 8001ca4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <MX_TIM3_Init+0xb4>)
 8001cba:	f003 fb6d 	bl	8005398 <HAL_TIM_PWM_ConfigChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001cc4:	f000 f8ea 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20001ecc 	.word	0x20001ecc
 8001cd4:	40000400 	.word	0x40000400

08001cd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <MX_USART1_UART_Init+0x50>)
 8001ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cfe:	220c      	movs	r2, #12
 8001d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001d10:	f003 ff36 	bl	8005b80 <HAL_UART_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d1a:	f000 f8bf 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20001f0c 	.word	0x20001f0c
 8001d28:	40011000 	.word	0x40011000

08001d2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <MX_DMA_Init+0x4c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <MX_DMA_Init+0x4c>)
 8001d3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <MX_DMA_Init+0x4c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	2038      	movs	r0, #56	; 0x38
 8001d54:	f000 fc6f 	bl	8002636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d58:	2038      	movs	r0, #56	; 0x38
 8001d5a:	f000 fc88 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	2039      	movs	r0, #57	; 0x39
 8001d64:	f000 fc67 	bl	8002636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d68:	2039      	movs	r0, #57	; 0x39
 8001d6a:	f000 fc80 	bl	800266e <HAL_NVIC_EnableIRQ>

}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800

08001d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a3b      	ldr	r2, [pc, #236]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a34      	ldr	r2, [pc, #208]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a2d      	ldr	r2, [pc, #180]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a26      	ldr	r2, [pc, #152]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <MX_GPIO_Init+0x10c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001e02:	2200      	movs	r2, #0
 8001e04:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8001e08:	4820      	ldr	r0, [pc, #128]	; (8001e8c <MX_GPIO_Init+0x110>)
 8001e0a:	f002 fadd 	bl	80043c8 <HAL_GPIO_WritePin>
                          |LED_5_Pin|LED_6_Pin|LED_7_Pin|LED_8_Pin
                          |LED_0_Pin|LED_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f247 71ff 	movw	r1, #30719	; 0x77ff
 8001e14:	481e      	ldr	r0, [pc, #120]	; (8001e90 <MX_GPIO_Init+0x114>)
 8001e16:	f002 fad7 	bl	80043c8 <HAL_GPIO_WritePin>
                          |Matrix_G1_Pin|Matrix_R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
                           LED_5_Pin LED_6_Pin LED_7_Pin LED_8_Pin
                           LED_0_Pin LED_CLK_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001e1a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8001e1e:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin|LED_6_Pin|LED_7_Pin|LED_8_Pin
                          |LED_0_Pin|LED_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4816      	ldr	r0, [pc, #88]	; (8001e8c <MX_GPIO_Init+0x110>)
 8001e34:	f002 f944 	bl	80040c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NCS_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_Pin;
 8001e38:	2310      	movs	r3, #16
 8001e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e3c:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <MX_GPIO_Init+0x118>)
 8001e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4813      	ldr	r0, [pc, #76]	; (8001e98 <MX_GPIO_Init+0x11c>)
 8001e4c:	f002 f938 	bl	80040c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B0_Pin Matrix_D_Pin
                           Matrix_CLK_Pin Matrix_LAT_Pin Matrix_OE_Pin Matrix_C_Pin
                           Matrix_B_Pin Matrix_A_Pin Matrix_E_Pin Matrix_B1_Pin
                           Matrix_G1_Pin Matrix_R1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 8001e50:	f247 73ff 	movw	r3, #30719	; 0x77ff
 8001e54:	617b      	str	r3, [r7, #20]
                          |Matrix_CLK_Pin|Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_C_Pin
                          |Matrix_B_Pin|Matrix_A_Pin|Matrix_E_Pin|Matrix_B1_Pin
                          |Matrix_G1_Pin|Matrix_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4809      	ldr	r0, [pc, #36]	; (8001e90 <MX_GPIO_Init+0x114>)
 8001e6a:	f002 f929 	bl	80040c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	200a      	movs	r0, #10
 8001e74:	f000 fbdf 	bl	8002636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e78:	200a      	movs	r0, #10
 8001e7a:	f000 fbf8 	bl	800266e <HAL_NVIC_EnableIRQ>

}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020400 	.word	0x40020400
 8001e94:	10110000 	.word	0x10110000
 8001e98:	40020000 	.word	0x40020000

08001e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <Error_Handler+0x8>
	...

08001ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a08      	ldr	r2, [pc, #32]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a34      	ldr	r2, [pc, #208]	; (8001fe8 <HAL_SPI_MspInit+0xf0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d162      	bne.n	8001fe0 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <HAL_SPI_MspInit+0xf4>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a32      	ldr	r2, [pc, #200]	; (8001fec <HAL_SPI_MspInit+0xf4>)
 8001f24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_SPI_MspInit+0xf4>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <HAL_SPI_MspInit+0xf4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <HAL_SPI_MspInit+0xf4>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b29      	ldr	r3, [pc, #164]	; (8001fec <HAL_SPI_MspInit+0xf4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f52:	23e0      	movs	r3, #224	; 0xe0
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f62:	2305      	movs	r3, #5
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4820      	ldr	r0, [pc, #128]	; (8001ff0 <HAL_SPI_MspInit+0xf8>)
 8001f6e:	f002 f8a7 	bl	80040c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001f74:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <HAL_SPI_MspInit+0x100>)
 8001f76:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001f7a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f7e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f92:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001fa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fac:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001fb4:	480f      	ldr	r0, [pc, #60]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001fb6:	f000 fb83 	bl	80026c0 <HAL_DMA_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001fc0:	f7ff ff6c 	bl	8001e9c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001fc8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <HAL_SPI_MspInit+0xfc>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2023      	movs	r0, #35	; 0x23
 8001fd6:	f000 fb2e 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fda:	2023      	movs	r0, #35	; 0x23
 8001fdc:	f000 fb47 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40013000 	.word	0x40013000
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	2000019c 	.word	0x2000019c
 8001ff8:	40026410 	.word	0x40026410

08001ffc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a30      	ldr	r2, [pc, #192]	; (80020cc <HAL_TIM_PWM_MspInit+0xd0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d13e      	bne.n	800208c <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_TIM_PWM_MspInit+0xd4>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a2e      	ldr	r2, [pc, #184]	; (80020d0 <HAL_TIM_PWM_MspInit+0xd4>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <HAL_TIM_PWM_MspInit+0xd4>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800202a:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 800202c:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <HAL_TIM_PWM_MspInit+0xdc>)
 800202e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002030:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8002032:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002036:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002038:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800203e:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8002046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 800204e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002052:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8002056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800206e:	4819      	ldr	r0, [pc, #100]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8002070:	f000 fb26 	bl	80026c0 <HAL_DMA_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800207a:	f7ff ff0f 	bl	8001e9c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
 8002084:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800208a:	e01a      	b.n	80020c2 <HAL_TIM_PWM_MspInit+0xc6>
  else if(htim_pwm->Instance==TIM3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a12      	ldr	r2, [pc, #72]	; (80020dc <HAL_TIM_PWM_MspInit+0xe0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d115      	bne.n	80020c2 <HAL_TIM_PWM_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_TIM_PWM_MspInit+0xd4>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_TIM_PWM_MspInit+0xd4>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_TIM_PWM_MspInit+0xd4>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	201d      	movs	r0, #29
 80020b8:	f000 fabd 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020bc:	201d      	movs	r0, #29
 80020be:	f000 fad6 	bl	800266e <HAL_NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40023800 	.word	0x40023800
 80020d4:	20001e6c 	.word	0x20001e6c
 80020d8:	40026428 	.word	0x40026428
 80020dc:	40000400 	.word	0x40000400

080020e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_UART_MspInit+0x84>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d12c      	bne.n	800215c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_UART_MspInit+0x88>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a17      	ldr	r2, [pc, #92]	; (8002168 <HAL_UART_MspInit+0x88>)
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_UART_MspInit+0x88>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_UART_MspInit+0x88>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a10      	ldr	r2, [pc, #64]	; (8002168 <HAL_UART_MspInit+0x88>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_UART_MspInit+0x88>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800213a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800214c:	2307      	movs	r3, #7
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <HAL_UART_MspInit+0x8c>)
 8002158:	f001 ffb2 	bl	80040c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800215c:	bf00      	nop
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40011000 	.word	0x40011000
 8002168:	40023800 	.word	0x40023800
 800216c:	40020000 	.word	0x40020000

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021bc:	f000 f91c 	bl	80023f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021c8:	2010      	movs	r0, #16
 80021ca:	f002 f917 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <TIM3_IRQHandler+0x10>)
 80021da:	f002 ffd5 	bl	8005188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20001ecc 	.word	0x20001ecc

080021e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <SPI1_IRQHandler+0x10>)
 80021ee:	f002 fded 	bl	8004dcc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20001f8c 	.word	0x20001f8c

080021fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <DMA2_Stream0_IRQHandler+0x10>)
 8002202:	f000 fb85 	bl	8002910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000019c 	.word	0x2000019c

08002210 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <DMA2_Stream1_IRQHandler+0x10>)
 8002216:	f000 fb7b 	bl	8002910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20001e6c 	.word	0x20001e6c

08002224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
	return 1;
 8002228:	2301      	movs	r3, #1
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_kill>:

int _kill(int pid, int sig)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800223e:	f005 fd37 	bl	8007cb0 <__errno>
 8002242:	4603      	mov	r3, r0
 8002244:	2216      	movs	r2, #22
 8002246:	601a      	str	r2, [r3, #0]
	return -1;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_exit>:

void _exit (int status)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800225c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ffe7 	bl	8002234 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002266:	e7fe      	b.n	8002266 <_exit+0x12>

08002268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002270:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <_sbrk+0x5c>)
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <_sbrk+0x60>)
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <_sbrk+0x64>)
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <_sbrk+0x68>)
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d207      	bcs.n	80022a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002298:	f005 fd0a 	bl	8007cb0 <__errno>
 800229c:	4603      	mov	r3, r0
 800229e:	220c      	movs	r2, #12
 80022a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a6:	e009      	b.n	80022bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <_sbrk+0x64>)
 80022b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20020000 	.word	0x20020000
 80022c8:	00000400 	.word	0x00000400
 80022cc:	20000190 	.word	0x20000190
 80022d0:	20001ff8 	.word	0x20001ff8

080022d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <SystemInit+0x28>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <SystemInit+0x28>)
 80022e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SystemInit+0x28>)
 80022ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ee:	609a      	str	r2, [r3, #8]
#endif
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002338 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002304:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002306:	e003      	b.n	8002310 <LoopCopyDataInit>

08002308 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800230a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800230c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800230e:	3104      	adds	r1, #4

08002310 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002314:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002316:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002318:	d3f6      	bcc.n	8002308 <CopyDataInit>
  ldr  r2, =_sbss
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800231c:	e002      	b.n	8002324 <LoopFillZerobss>

0800231e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800231e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002320:	f842 3b04 	str.w	r3, [r2], #4

08002324 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002326:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002328:	d3f9      	bcc.n	800231e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800232a:	f7ff ffd3 	bl	80022d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800232e:	f005 fcc5 	bl	8007cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002332:	f7ff fb43 	bl	80019bc <main>
  bx  lr    
 8002336:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002338:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800233c:	08008a34 	.word	0x08008a34
  ldr  r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002344:	20000174 	.word	0x20000174
  ldr  r2, =_sbss
 8002348:	20000174 	.word	0x20000174
  ldr  r3, = _ebss
 800234c:	20001ff8 	.word	0x20001ff8

08002350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC_IRQHandler>
	...

08002354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_Init+0x40>)
 800235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002362:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_Init+0x40>)
 800236a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_Init+0x40>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237c:	2003      	movs	r0, #3
 800237e:	f000 f94f 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002382:	2000      	movs	r0, #0
 8002384:	f000 f808 	bl	8002398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002388:	f7ff fd8e 	bl	8001ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023c00 	.word	0x40023c00

08002398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_InitTick+0x54>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x58>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f975 	bl	80026a6 <HAL_SYSTICK_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00e      	b.n	80023e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b0f      	cmp	r3, #15
 80023ca:	d80a      	bhi.n	80023e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023cc:	2200      	movs	r2, #0
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023d4:	f000 f92f 	bl	8002636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d8:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <HAL_InitTick+0x5c>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000008 	.word	0x20000008
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x20>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x24>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_IncTick+0x24>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000008 	.word	0x20000008
 800241c:	20001fe4 	.word	0x20001fe4

08002420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_GetTick+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20001fe4 	.word	0x20001fe4

08002438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db0b      	blt.n	80024c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4907      	ldr	r1, [pc, #28]	; (80024d4 <__NVIC_EnableIRQ+0x38>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000e100 	.word	0xe000e100

080024d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db12      	blt.n	8002510 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	490a      	ldr	r1, [pc, #40]	; (800251c <__NVIC_DisableIRQ+0x44>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2001      	movs	r0, #1
 80024fa:	fa00 f202 	lsl.w	r2, r0, r2
 80024fe:	3320      	adds	r3, #32
 8002500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002504:	f3bf 8f4f 	dsb	sy
}
 8002508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800250a:	f3bf 8f6f 	isb	sy
}
 800250e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002600:	f7ff ff8e 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff05 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff1a 	bl	8002480 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff8e 	bl	8002574 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5d 	bl	8002520 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff0d 	bl	800249c <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff1d 	bl	80024d8 <__NVIC_DisableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff94 	bl	80025dc <SysTick_Config>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff fea8 	bl	8002420 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e099      	b.n	8002810 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fc:	e00f      	b.n	800271e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026fe:	f7ff fe8f 	bl	8002420 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b05      	cmp	r3, #5
 800270a:	d908      	bls.n	800271e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2203      	movs	r2, #3
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e078      	b.n	8002810 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e8      	bne.n	80026fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4b38      	ldr	r3, [pc, #224]	; (8002818 <HAL_DMA_Init+0x158>)
 8002738:	4013      	ands	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800274a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2b04      	cmp	r3, #4
 8002776:	d107      	bne.n	8002788 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	4313      	orrs	r3, r2
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f023 0307 	bic.w	r3, r3, #7
 800279e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d117      	bne.n	80027e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00e      	beq.n	80027e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fa91 	bl	8002cec <DMA_CheckFifoParam>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2240      	movs	r2, #64	; 0x40
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027de:	2301      	movs	r3, #1
 80027e0:	e016      	b.n	8002810 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fa48 	bl	8002c80 <DMA_CalcBaseAndBitshift>
 80027f0:	4603      	mov	r3, r0
 80027f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	223f      	movs	r2, #63	; 0x3f
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	f010803f 	.word	0xf010803f

0800281c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_DMA_Start_IT+0x26>
 800283e:	2302      	movs	r3, #2
 8002840:	e040      	b.n	80028c4 <HAL_DMA_Start_IT+0xa8>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d12f      	bne.n	80028b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2202      	movs	r2, #2
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f9da 	bl	8002c24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	223f      	movs	r2, #63	; 0x3f
 8002876:	409a      	lsls	r2, r3
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0216 	orr.w	r2, r2, #22
 800288a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0208 	orr.w	r2, r2, #8
 80028a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e005      	b.n	80028c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d004      	beq.n	80028ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00c      	b.n	8002904 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2205      	movs	r2, #5
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800291c:	4b92      	ldr	r3, [pc, #584]	; (8002b68 <HAL_DMA_IRQHandler+0x258>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a92      	ldr	r2, [pc, #584]	; (8002b6c <HAL_DMA_IRQHandler+0x25c>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	0a9b      	lsrs	r3, r3, #10
 8002928:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	2208      	movs	r2, #8
 800293c:	409a      	lsls	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01a      	beq.n	800297c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0204 	bic.w	r2, r2, #4
 8002962:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	2208      	movs	r2, #8
 800296a:	409a      	lsls	r2, r3
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	2201      	movs	r2, #1
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d012      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	2201      	movs	r2, #1
 80029a0:	409a      	lsls	r2, r3
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f043 0202 	orr.w	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	2204      	movs	r2, #4
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d012      	beq.n	80029e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00b      	beq.n	80029e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2204      	movs	r2, #4
 80029d6:	409a      	lsls	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e0:	f043 0204 	orr.w	r2, r3, #4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2210      	movs	r2, #16
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d043      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d03c      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d018      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d108      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d024      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
 8002a3e:	e01f      	b.n	8002a80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
 8002a50:	e016      	b.n	8002a80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0208 	bic.w	r2, r2, #8
 8002a6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	2220      	movs	r2, #32
 8002a86:	409a      	lsls	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 808e 	beq.w	8002bae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8086 	beq.w	8002bae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d136      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0216 	bic.w	r2, r2, #22
 8002ac8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ad8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <HAL_DMA_IRQHandler+0x1da>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0208 	bic.w	r2, r2, #8
 8002af8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	223f      	movs	r2, #63	; 0x3f
 8002b00:	409a      	lsls	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d07d      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
        }
        return;
 8002b26:	e078      	b.n	8002c1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01c      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d108      	bne.n	8002b56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d030      	beq.n	8002bae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
 8002b54:	e02b      	b.n	8002bae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d027      	beq.n	8002bae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
 8002b66:	e022      	b.n	8002bae <HAL_DMA_IRQHandler+0x29e>
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0210 	bic.w	r2, r2, #16
 8002b8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d032      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d022      	beq.n	8002c08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2205      	movs	r2, #5
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d307      	bcc.n	8002bf6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f2      	bne.n	8002bda <HAL_DMA_IRQHandler+0x2ca>
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bf6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
 8002c18:	e000      	b.n	8002c1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c1a:	bf00      	nop
    }
  }
}
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop

08002c24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d108      	bne.n	8002c64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c62:	e007      	b.n	8002c74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	60da      	str	r2, [r3, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	3b10      	subs	r3, #16
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <DMA_CalcBaseAndBitshift+0x64>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	091b      	lsrs	r3, r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c9a:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d909      	bls.n	8002cc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	1d1a      	adds	r2, r3, #4
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc0:	e007      	b.n	8002cd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cca:	f023 0303 	bic.w	r3, r3, #3
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	aaaaaaab 	.word	0xaaaaaaab
 8002ce8:	08008758 	.word	0x08008758

08002cec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11f      	bne.n	8002d46 <DMA_CheckFifoParam+0x5a>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d856      	bhi.n	8002dba <DMA_CheckFifoParam+0xce>
 8002d0c:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <DMA_CheckFifoParam+0x28>)
 8002d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d12:	bf00      	nop
 8002d14:	08002d25 	.word	0x08002d25
 8002d18:	08002d37 	.word	0x08002d37
 8002d1c:	08002d25 	.word	0x08002d25
 8002d20:	08002dbb 	.word	0x08002dbb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d046      	beq.n	8002dbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d34:	e043      	b.n	8002dbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d3e:	d140      	bne.n	8002dc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d44:	e03d      	b.n	8002dc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4e:	d121      	bne.n	8002d94 <DMA_CheckFifoParam+0xa8>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d837      	bhi.n	8002dc6 <DMA_CheckFifoParam+0xda>
 8002d56:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <DMA_CheckFifoParam+0x70>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d73 	.word	0x08002d73
 8002d64:	08002d6d 	.word	0x08002d6d
 8002d68:	08002d85 	.word	0x08002d85
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d70:	e030      	b.n	8002dd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d025      	beq.n	8002dca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d82:	e022      	b.n	8002dca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d8c:	d11f      	bne.n	8002dce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d92:	e01c      	b.n	8002dce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d903      	bls.n	8002da2 <DMA_CheckFifoParam+0xb6>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d003      	beq.n	8002da8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002da0:	e018      	b.n	8002dd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
      break;
 8002da6:	e015      	b.n	8002dd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00e      	beq.n	8002dd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      break;
 8002db8:	e00b      	b.n	8002dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e00a      	b.n	8002dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e008      	b.n	8002dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e006      	b.n	8002dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e004      	b.n	8002dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e002      	b.n	8002dd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dce:	bf00      	nop
 8002dd0:	e000      	b.n	8002dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd2:	bf00      	nop
    }
  } 
  
  return status; 
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop

08002de4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b80      	cmp	r3, #128	; 0x80
 8002dfc:	d106      	bne.n	8002e0c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f001 b913 	b.w	8004032 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2240      	movs	r2, #64	; 0x40
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f001 b901 	b.w	8004032 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d102      	bne.n	8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	f001 b8f9 	b.w	8004032 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	f041 80e7 	bne.w	8004024 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e72:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f001 f8f6 	bl	8004074 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b99      	ldr	r3, [pc, #612]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d960      	bls.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a97      	ldr	r2, [pc, #604]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d057      	beq.n	8002f4e <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a96      	ldr	r2, [pc, #600]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d050      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a94      	ldr	r2, [pc, #592]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d049      	beq.n	8002f46 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a93      	ldr	r2, [pc, #588]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d042      	beq.n	8002f42 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a91      	ldr	r2, [pc, #580]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d03a      	beq.n	8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a90      	ldr	r2, [pc, #576]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d032      	beq.n	8002f36 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a8e      	ldr	r2, [pc, #568]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d02a      	beq.n	8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a8d      	ldr	r2, [pc, #564]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d022      	beq.n	8002f2a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a8b      	ldr	r2, [pc, #556]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01a      	beq.n	8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a8a      	ldr	r2, [pc, #552]	; (800311c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d012      	beq.n	8002f1e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a88      	ldr	r2, [pc, #544]	; (8003120 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00a      	beq.n	8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a87      	ldr	r2, [pc, #540]	; (8003124 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d102      	bne.n	8002f12 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002f0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f10:	e01e      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f16:	e01b      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f1c:	e018      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f22:	e015      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f28:	e012      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f2e:	e00f      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f34:	e00c      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f3a:	e009      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f40:	e006      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f42:	2320      	movs	r3, #32
 8002f44:	e004      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f46:	2320      	movs	r3, #32
 8002f48:	e002      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	e000      	b.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002f4e:	2320      	movs	r3, #32
 8002f50:	4a75      	ldr	r2, [pc, #468]	; (8003128 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002f52:	60d3      	str	r3, [r2, #12]
 8002f54:	e150      	b.n	80031f8 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d960      	bls.n	8003024 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a64      	ldr	r2, [pc, #400]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d057      	beq.n	800301c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a62      	ldr	r2, [pc, #392]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d050      	beq.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a61      	ldr	r2, [pc, #388]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d049      	beq.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a5f      	ldr	r2, [pc, #380]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d042      	beq.n	8003010 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a5e      	ldr	r2, [pc, #376]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d03a      	beq.n	800300a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5c      	ldr	r2, [pc, #368]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d032      	beq.n	8003004 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5b      	ldr	r2, [pc, #364]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d02a      	beq.n	8002ffe <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a59      	ldr	r2, [pc, #356]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d022      	beq.n	8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a58      	ldr	r2, [pc, #352]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d01a      	beq.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a56      	ldr	r2, [pc, #344]	; (800311c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d012      	beq.n	8002fec <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a55      	ldr	r2, [pc, #340]	; (8003120 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00a      	beq.n	8002fe6 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a53      	ldr	r2, [pc, #332]	; (8003124 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d102      	bne.n	8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002fda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fde:	e01e      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fe4:	e01b      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002fe6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fea:	e018      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002fec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ff0:	e015      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ff2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ff6:	e012      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ffc:	e00f      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ffe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003002:	e00c      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003008:	e009      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800300a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800300e:	e006      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003010:	2320      	movs	r3, #32
 8003012:	e004      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003014:	2320      	movs	r3, #32
 8003016:	e002      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003018:	2320      	movs	r3, #32
 800301a:	e000      	b.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800301c:	2320      	movs	r3, #32
 800301e:	4a42      	ldr	r2, [pc, #264]	; (8003128 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8003020:	6093      	str	r3, [r2, #8]
 8003022:	e0e9      	b.n	80031f8 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4b41      	ldr	r3, [pc, #260]	; (8003130 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 800302c:	429a      	cmp	r2, r3
 800302e:	f240 8083 	bls.w	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a30      	ldr	r2, [pc, #192]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d057      	beq.n	80030ec <HAL_DMAEx_MultiBufferStart_IT+0x308>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2e      	ldr	r2, [pc, #184]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d050      	beq.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2d      	ldr	r2, [pc, #180]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d049      	beq.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2b      	ldr	r2, [pc, #172]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d042      	beq.n	80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2a      	ldr	r2, [pc, #168]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d03a      	beq.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a28      	ldr	r2, [pc, #160]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d032      	beq.n	80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a27      	ldr	r2, [pc, #156]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d02a      	beq.n	80030ce <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a25      	ldr	r2, [pc, #148]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d022      	beq.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a24      	ldr	r2, [pc, #144]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d01a      	beq.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a22      	ldr	r2, [pc, #136]	; (800311c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d012      	beq.n	80030bc <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a21      	ldr	r2, [pc, #132]	; (8003120 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00a      	beq.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d102      	bne.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80030aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030ae:	e01e      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030b4:	e01b      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030ba:	e018      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030c0:	e015      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030c6:	e012      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030cc:	e00f      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030d2:	e00c      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030d8:	e009      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030de:	e006      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030e0:	2320      	movs	r3, #32
 80030e2:	e004      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030e4:	2320      	movs	r3, #32
 80030e6:	e002      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030e8:	2320      	movs	r3, #32
 80030ea:	e000      	b.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80030ec:	2320      	movs	r3, #32
 80030ee:	4a11      	ldr	r2, [pc, #68]	; (8003134 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 80030f0:	60d3      	str	r3, [r2, #12]
 80030f2:	e081      	b.n	80031f8 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80030f4:	40026458 	.word	0x40026458
 80030f8:	40026010 	.word	0x40026010
 80030fc:	40026410 	.word	0x40026410
 8003100:	40026070 	.word	0x40026070
 8003104:	40026470 	.word	0x40026470
 8003108:	40026028 	.word	0x40026028
 800310c:	40026428 	.word	0x40026428
 8003110:	40026088 	.word	0x40026088
 8003114:	40026488 	.word	0x40026488
 8003118:	40026040 	.word	0x40026040
 800311c:	40026440 	.word	0x40026440
 8003120:	400260a0 	.word	0x400260a0
 8003124:	400264a0 	.word	0x400264a0
 8003128:	40026400 	.word	0x40026400
 800312c:	400260b8 	.word	0x400260b8
 8003130:	40026058 	.word	0x40026058
 8003134:	40026000 	.word	0x40026000
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a96      	ldr	r2, [pc, #600]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d057      	beq.n	80031f2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a95      	ldr	r2, [pc, #596]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d050      	beq.n	80031ee <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a93      	ldr	r2, [pc, #588]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d049      	beq.n	80031ea <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a92      	ldr	r2, [pc, #584]	; (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d042      	beq.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a90      	ldr	r2, [pc, #576]	; (80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d03a      	beq.n	80031e0 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a8f      	ldr	r2, [pc, #572]	; (80033ac <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d032      	beq.n	80031da <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a8d      	ldr	r2, [pc, #564]	; (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d02a      	beq.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a8c      	ldr	r2, [pc, #560]	; (80033b4 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d022      	beq.n	80031ce <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a8a      	ldr	r2, [pc, #552]	; (80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01a      	beq.n	80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a89      	ldr	r2, [pc, #548]	; (80033bc <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d012      	beq.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a87      	ldr	r2, [pc, #540]	; (80033c0 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00a      	beq.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a86      	ldr	r2, [pc, #536]	; (80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d102      	bne.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 80031b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031b4:	e01e      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031ba:	e01b      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031c0:	e018      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031c6:	e015      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031cc:	e012      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031d2:	e00f      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031d8:	e00c      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031de:	e009      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031e4:	e006      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031e6:	2320      	movs	r3, #32
 80031e8:	e004      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031ea:	2320      	movs	r3, #32
 80031ec:	e002      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031ee:	2320      	movs	r3, #32
 80031f0:	e000      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80031f2:	2320      	movs	r3, #32
 80031f4:	4a74      	ldr	r2, [pc, #464]	; (80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 80031f6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b73      	ldr	r3, [pc, #460]	; (80033cc <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8003200:	429a      	cmp	r2, r3
 8003202:	d960      	bls.n	80032c6 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a63      	ldr	r2, [pc, #396]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d057      	beq.n	80032be <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a62      	ldr	r2, [pc, #392]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d050      	beq.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a60      	ldr	r2, [pc, #384]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d049      	beq.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5f      	ldr	r2, [pc, #380]	; (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d042      	beq.n	80032b2 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5d      	ldr	r2, [pc, #372]	; (80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d03a      	beq.n	80032ac <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a5c      	ldr	r2, [pc, #368]	; (80033ac <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d032      	beq.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a5a      	ldr	r2, [pc, #360]	; (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d02a      	beq.n	80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a59      	ldr	r2, [pc, #356]	; (80033b4 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d022      	beq.n	800329a <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a57      	ldr	r2, [pc, #348]	; (80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01a      	beq.n	8003294 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a56      	ldr	r2, [pc, #344]	; (80033bc <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d012      	beq.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a54      	ldr	r2, [pc, #336]	; (80033c0 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00a      	beq.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a53      	ldr	r2, [pc, #332]	; (80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d102      	bne.n	8003282 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 800327c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003280:	e01e      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003282:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003286:	e01b      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003288:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800328c:	e018      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800328e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003292:	e015      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003294:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003298:	e012      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800329a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800329e:	e00f      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80032a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a4:	e00c      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80032a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032aa:	e009      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80032ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b0:	e006      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80032b2:	2310      	movs	r3, #16
 80032b4:	e004      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80032b6:	2310      	movs	r3, #16
 80032b8:	e002      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80032ba:	2310      	movs	r3, #16
 80032bc:	e000      	b.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80032be:	2310      	movs	r3, #16
 80032c0:	4a43      	ldr	r2, [pc, #268]	; (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 80032c2:	60d3      	str	r3, [r2, #12]
 80032c4:	e14f      	b.n	8003566 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 80032ce:	429a      	cmp	r2, r3
 80032d0:	f240 8082 	bls.w	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2f      	ldr	r2, [pc, #188]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d057      	beq.n	800338e <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2e      	ldr	r2, [pc, #184]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d050      	beq.n	800338a <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d049      	beq.n	8003386 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d042      	beq.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a29      	ldr	r2, [pc, #164]	; (80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d03a      	beq.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a28      	ldr	r2, [pc, #160]	; (80033ac <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d032      	beq.n	8003376 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a26      	ldr	r2, [pc, #152]	; (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02a      	beq.n	8003370 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a25      	ldr	r2, [pc, #148]	; (80033b4 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01a      	beq.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d012      	beq.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a20      	ldr	r2, [pc, #128]	; (80033c0 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00a      	beq.n	8003358 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d102      	bne.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 800334c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003350:	e01e      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003352:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003356:	e01b      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003358:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800335c:	e018      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800335e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003362:	e015      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003364:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003368:	e012      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800336a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800336e:	e00f      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003374:	e00c      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800337a:	e009      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800337c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003380:	e006      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003382:	2310      	movs	r3, #16
 8003384:	e004      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003386:	2310      	movs	r3, #16
 8003388:	e002      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800338a:	2310      	movs	r3, #16
 800338c:	e000      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800338e:	2310      	movs	r3, #16
 8003390:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003392:	6093      	str	r3, [r2, #8]
 8003394:	e0e7      	b.n	8003566 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003396:	bf00      	nop
 8003398:	40026010 	.word	0x40026010
 800339c:	40026410 	.word	0x40026410
 80033a0:	40026070 	.word	0x40026070
 80033a4:	40026470 	.word	0x40026470
 80033a8:	40026028 	.word	0x40026028
 80033ac:	40026428 	.word	0x40026428
 80033b0:	40026088 	.word	0x40026088
 80033b4:	40026488 	.word	0x40026488
 80033b8:	40026040 	.word	0x40026040
 80033bc:	40026440 	.word	0x40026440
 80033c0:	400260a0 	.word	0x400260a0
 80033c4:	400264a0 	.word	0x400264a0
 80033c8:	40026000 	.word	0x40026000
 80033cc:	40026458 	.word	0x40026458
 80033d0:	40026400 	.word	0x40026400
 80033d4:	400260b8 	.word	0x400260b8
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b96      	ldr	r3, [pc, #600]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d960      	bls.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a94      	ldr	r2, [pc, #592]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d057      	beq.n	800349e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a93      	ldr	r2, [pc, #588]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d050      	beq.n	800349a <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a91      	ldr	r2, [pc, #580]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d049      	beq.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a90      	ldr	r2, [pc, #576]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d042      	beq.n	8003492 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a8e      	ldr	r2, [pc, #568]	; (800364c <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d03a      	beq.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a8d      	ldr	r2, [pc, #564]	; (8003650 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d032      	beq.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a8b      	ldr	r2, [pc, #556]	; (8003654 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02a      	beq.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a8a      	ldr	r2, [pc, #552]	; (8003658 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a88      	ldr	r2, [pc, #544]	; (800365c <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01a      	beq.n	8003474 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a87      	ldr	r2, [pc, #540]	; (8003660 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d012      	beq.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a85      	ldr	r2, [pc, #532]	; (8003664 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00a      	beq.n	8003468 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a84      	ldr	r2, [pc, #528]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d102      	bne.n	8003462 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 800345c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003460:	e01e      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003462:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003466:	e01b      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003468:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800346c:	e018      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800346e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003472:	e015      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003474:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003478:	e012      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800347a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800347e:	e00f      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003484:	e00c      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800348a:	e009      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800348c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003490:	e006      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003492:	2310      	movs	r3, #16
 8003494:	e004      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003496:	2310      	movs	r3, #16
 8003498:	e002      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800349a:	2310      	movs	r3, #16
 800349c:	e000      	b.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800349e:	2310      	movs	r3, #16
 80034a0:	4a72      	ldr	r2, [pc, #456]	; (800366c <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80034a2:	60d3      	str	r3, [r2, #12]
 80034a4:	e05f      	b.n	8003566 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a64      	ldr	r2, [pc, #400]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d057      	beq.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a62      	ldr	r2, [pc, #392]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d050      	beq.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x778>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a61      	ldr	r2, [pc, #388]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d049      	beq.n	8003558 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a5f      	ldr	r2, [pc, #380]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d042      	beq.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a5e      	ldr	r2, [pc, #376]	; (800364c <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d03a      	beq.n	800354e <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a5c      	ldr	r2, [pc, #368]	; (8003650 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d032      	beq.n	8003548 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a5b      	ldr	r2, [pc, #364]	; (8003654 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d02a      	beq.n	8003542 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a59      	ldr	r2, [pc, #356]	; (8003658 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d022      	beq.n	800353c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a58      	ldr	r2, [pc, #352]	; (800365c <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d01a      	beq.n	8003536 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a56      	ldr	r2, [pc, #344]	; (8003660 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d012      	beq.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a55      	ldr	r2, [pc, #340]	; (8003664 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00a      	beq.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a53      	ldr	r2, [pc, #332]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d102      	bne.n	8003524 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800351e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003522:	e01e      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003524:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003528:	e01b      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800352a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800352e:	e018      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003530:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003534:	e015      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003536:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800353a:	e012      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800353c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003540:	e00f      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003546:	e00c      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354c:	e009      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800354e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003552:	e006      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003554:	2310      	movs	r3, #16
 8003556:	e004      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003558:	2310      	movs	r3, #16
 800355a:	e002      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800355c:	2310      	movs	r3, #16
 800355e:	e000      	b.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003560:	2310      	movs	r3, #16
 8003562:	4a42      	ldr	r2, [pc, #264]	; (800366c <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003564:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	4b40      	ldr	r3, [pc, #256]	; (8003670 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 800356e:	429a      	cmp	r2, r3
 8003570:	f240 8082 	bls.w	8003678 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a30      	ldr	r2, [pc, #192]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d057      	beq.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2f      	ldr	r2, [pc, #188]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d050      	beq.n	800362a <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d049      	beq.n	8003626 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d042      	beq.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2a      	ldr	r2, [pc, #168]	; (800364c <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d03a      	beq.n	800361c <HAL_DMAEx_MultiBufferStart_IT+0x838>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a29      	ldr	r2, [pc, #164]	; (8003650 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d032      	beq.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a27      	ldr	r2, [pc, #156]	; (8003654 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02a      	beq.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a26      	ldr	r2, [pc, #152]	; (8003658 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_DMAEx_MultiBufferStart_IT+0x826>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a24      	ldr	r2, [pc, #144]	; (800365c <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01a      	beq.n	8003604 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a23      	ldr	r2, [pc, #140]	; (8003660 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d012      	beq.n	80035fe <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a21      	ldr	r2, [pc, #132]	; (8003664 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00a      	beq.n	80035f8 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a20      	ldr	r2, [pc, #128]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d102      	bne.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 80035ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035f0:	e01e      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80035f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035f6:	e01b      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80035f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035fc:	e018      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80035fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003602:	e015      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003604:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003608:	e012      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800360a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800360e:	e00f      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003614:	e00c      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800361a:	e009      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800361c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003620:	e006      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003622:	2308      	movs	r3, #8
 8003624:	e004      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003626:	2308      	movs	r3, #8
 8003628:	e002      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800362a:	2308      	movs	r3, #8
 800362c:	e000      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800362e:	2308      	movs	r3, #8
 8003630:	4a10      	ldr	r2, [pc, #64]	; (8003674 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8003632:	60d3      	str	r3, [r2, #12]
 8003634:	e16f      	b.n	8003916 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003636:	bf00      	nop
 8003638:	40026058 	.word	0x40026058
 800363c:	40026010 	.word	0x40026010
 8003640:	40026410 	.word	0x40026410
 8003644:	40026070 	.word	0x40026070
 8003648:	40026470 	.word	0x40026470
 800364c:	40026028 	.word	0x40026028
 8003650:	40026428 	.word	0x40026428
 8003654:	40026088 	.word	0x40026088
 8003658:	40026488 	.word	0x40026488
 800365c:	40026040 	.word	0x40026040
 8003660:	40026440 	.word	0x40026440
 8003664:	400260a0 	.word	0x400260a0
 8003668:	400264a0 	.word	0x400264a0
 800366c:	40026000 	.word	0x40026000
 8003670:	40026458 	.word	0x40026458
 8003674:	40026400 	.word	0x40026400
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	4b94      	ldr	r3, [pc, #592]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003680:	429a      	cmp	r2, r3
 8003682:	d960      	bls.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a92      	ldr	r2, [pc, #584]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d057      	beq.n	800373e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a91      	ldr	r2, [pc, #580]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d050      	beq.n	800373a <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a8f      	ldr	r2, [pc, #572]	; (80038dc <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d049      	beq.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a8e      	ldr	r2, [pc, #568]	; (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d042      	beq.n	8003732 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a8c      	ldr	r2, [pc, #560]	; (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d03a      	beq.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0x948>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a8b      	ldr	r2, [pc, #556]	; (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d032      	beq.n	8003726 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a89      	ldr	r2, [pc, #548]	; (80038ec <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d02a      	beq.n	8003720 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a88      	ldr	r2, [pc, #544]	; (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d022      	beq.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a86      	ldr	r2, [pc, #536]	; (80038f4 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01a      	beq.n	8003714 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a85      	ldr	r2, [pc, #532]	; (80038f8 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d012      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a83      	ldr	r2, [pc, #524]	; (80038fc <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00a      	beq.n	8003708 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a82      	ldr	r2, [pc, #520]	; (8003900 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d102      	bne.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 80036fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003700:	e01e      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003706:	e01b      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003708:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800370c:	e018      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800370e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003712:	e015      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003714:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003718:	e012      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800371a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800371e:	e00f      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003724:	e00c      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800372a:	e009      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800372c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003730:	e006      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003732:	2308      	movs	r3, #8
 8003734:	e004      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003736:	2308      	movs	r3, #8
 8003738:	e002      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800373a:	2308      	movs	r3, #8
 800373c:	e000      	b.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800373e:	2308      	movs	r3, #8
 8003740:	4a70      	ldr	r2, [pc, #448]	; (8003904 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 8003742:	6093      	str	r3, [r2, #8]
 8003744:	e0e7      	b.n	8003916 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	4b6e      	ldr	r3, [pc, #440]	; (8003908 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 800374e:	429a      	cmp	r2, r3
 8003750:	d960      	bls.n	8003814 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a5f      	ldr	r2, [pc, #380]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d057      	beq.n	800380c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a5d      	ldr	r2, [pc, #372]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d050      	beq.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a5c      	ldr	r2, [pc, #368]	; (80038dc <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d049      	beq.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a5a      	ldr	r2, [pc, #360]	; (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d042      	beq.n	8003800 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a59      	ldr	r2, [pc, #356]	; (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d03a      	beq.n	80037fa <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a57      	ldr	r2, [pc, #348]	; (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d032      	beq.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a56      	ldr	r2, [pc, #344]	; (80038ec <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d02a      	beq.n	80037ee <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a54      	ldr	r2, [pc, #336]	; (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d022      	beq.n	80037e8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a53      	ldr	r2, [pc, #332]	; (80038f4 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d01a      	beq.n	80037e2 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a51      	ldr	r2, [pc, #324]	; (80038f8 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d012      	beq.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a50      	ldr	r2, [pc, #320]	; (80038fc <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00a      	beq.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d102      	bne.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 80037ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037ce:	e01e      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80037d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d4:	e01b      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80037d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037da:	e018      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80037dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037e0:	e015      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80037e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037e6:	e012      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80037e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ec:	e00f      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80037ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f2:	e00c      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80037f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f8:	e009      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80037fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037fe:	e006      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003800:	2308      	movs	r3, #8
 8003802:	e004      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003804:	2308      	movs	r3, #8
 8003806:	e002      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003808:	2308      	movs	r3, #8
 800380a:	e000      	b.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800380c:	2308      	movs	r3, #8
 800380e:	4a3f      	ldr	r2, [pc, #252]	; (800390c <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8003810:	60d3      	str	r3, [r2, #12]
 8003812:	e080      	b.n	8003916 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a2e      	ldr	r2, [pc, #184]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d078      	beq.n	8003910 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2d      	ldr	r2, [pc, #180]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d050      	beq.n	80038ca <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2b      	ldr	r2, [pc, #172]	; (80038dc <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d049      	beq.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a2a      	ldr	r2, [pc, #168]	; (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d042      	beq.n	80038c2 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d03a      	beq.n	80038bc <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d032      	beq.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a25      	ldr	r2, [pc, #148]	; (80038ec <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d02a      	beq.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a24      	ldr	r2, [pc, #144]	; (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a22      	ldr	r2, [pc, #136]	; (80038f4 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01a      	beq.n	80038a4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d012      	beq.n	800389e <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00a      	beq.n	8003898 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d102      	bne.n	8003892 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 800388c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003890:	e03f      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003896:	e03c      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003898:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800389c:	e039      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800389e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038a2:	e036      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80038a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038a8:	e033      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80038aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ae:	e030      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80038b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038b4:	e02d      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80038b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ba:	e02a      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80038bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038c0:	e027      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80038c2:	2308      	movs	r3, #8
 80038c4:	e025      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80038c6:	2308      	movs	r3, #8
 80038c8:	e023      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80038ca:	2308      	movs	r3, #8
 80038cc:	e021      	b.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80038ce:	bf00      	nop
 80038d0:	400260b8 	.word	0x400260b8
 80038d4:	40026010 	.word	0x40026010
 80038d8:	40026410 	.word	0x40026410
 80038dc:	40026070 	.word	0x40026070
 80038e0:	40026470 	.word	0x40026470
 80038e4:	40026028 	.word	0x40026028
 80038e8:	40026428 	.word	0x40026428
 80038ec:	40026088 	.word	0x40026088
 80038f0:	40026488 	.word	0x40026488
 80038f4:	40026040 	.word	0x40026040
 80038f8:	40026440 	.word	0x40026440
 80038fc:	400260a0 	.word	0x400260a0
 8003900:	400264a0 	.word	0x400264a0
 8003904:	40026400 	.word	0x40026400
 8003908:	40026058 	.word	0x40026058
 800390c:	40026000 	.word	0x40026000
 8003910:	2308      	movs	r3, #8
 8003912:	4a9a      	ldr	r2, [pc, #616]	; (8003b7c <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003914:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	4b98      	ldr	r3, [pc, #608]	; (8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 800391e:	429a      	cmp	r2, r3
 8003920:	d960      	bls.n	80039e4 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a97      	ldr	r2, [pc, #604]	; (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d057      	beq.n	80039dc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a95      	ldr	r2, [pc, #596]	; (8003b88 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d050      	beq.n	80039d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a94      	ldr	r2, [pc, #592]	; (8003b8c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d049      	beq.n	80039d4 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a92      	ldr	r2, [pc, #584]	; (8003b90 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d042      	beq.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a91      	ldr	r2, [pc, #580]	; (8003b94 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d03a      	beq.n	80039ca <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a8f      	ldr	r2, [pc, #572]	; (8003b98 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d032      	beq.n	80039c4 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a8e      	ldr	r2, [pc, #568]	; (8003b9c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d02a      	beq.n	80039be <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a8c      	ldr	r2, [pc, #560]	; (8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d022      	beq.n	80039b8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a8b      	ldr	r2, [pc, #556]	; (8003ba4 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d01a      	beq.n	80039b2 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a89      	ldr	r2, [pc, #548]	; (8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d012      	beq.n	80039ac <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a88      	ldr	r2, [pc, #544]	; (8003bac <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00a      	beq.n	80039a6 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a86      	ldr	r2, [pc, #536]	; (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d102      	bne.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 800399a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800399e:	e01e      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a4:	e01b      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039aa:	e018      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039b0:	e015      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039b6:	e012      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039bc:	e00f      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039c2:	e00c      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039c8:	e009      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ce:	e006      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039d0:	2304      	movs	r3, #4
 80039d2:	e004      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039d4:	2304      	movs	r3, #4
 80039d6:	e002      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039d8:	2304      	movs	r3, #4
 80039da:	e000      	b.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80039dc:	2304      	movs	r3, #4
 80039de:	4a75      	ldr	r2, [pc, #468]	; (8003bb4 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 80039e0:	60d3      	str	r3, [r2, #12]
 80039e2:	e151      	b.n	8003c88 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	4b73      	ldr	r3, [pc, #460]	; (8003bb8 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d960      	bls.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a63      	ldr	r2, [pc, #396]	; (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d057      	beq.n	8003aaa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a62      	ldr	r2, [pc, #392]	; (8003b88 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d050      	beq.n	8003aa6 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a60      	ldr	r2, [pc, #384]	; (8003b8c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d049      	beq.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a5f      	ldr	r2, [pc, #380]	; (8003b90 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d042      	beq.n	8003a9e <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a5d      	ldr	r2, [pc, #372]	; (8003b94 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d03a      	beq.n	8003a98 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d032      	beq.n	8003a92 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a5a      	ldr	r2, [pc, #360]	; (8003b9c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d02a      	beq.n	8003a8c <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a59      	ldr	r2, [pc, #356]	; (8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d022      	beq.n	8003a86 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a57      	ldr	r2, [pc, #348]	; (8003ba4 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01a      	beq.n	8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a56      	ldr	r2, [pc, #344]	; (8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d012      	beq.n	8003a7a <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a54      	ldr	r2, [pc, #336]	; (8003bac <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00a      	beq.n	8003a74 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a53      	ldr	r2, [pc, #332]	; (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d102      	bne.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8003a68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a6c:	e01e      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a72:	e01b      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a78:	e018      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a7a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a7e:	e015      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a84:	e012      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a8a:	e00f      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a90:	e00c      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a96:	e009      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a9c:	e006      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	e004      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	e002      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	e000      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003aaa:	2304      	movs	r3, #4
 8003aac:	4a41      	ldr	r2, [pc, #260]	; (8003bb4 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003aae:	6093      	str	r3, [r2, #8]
 8003ab0:	e0ea      	b.n	8003c88 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4b40      	ldr	r3, [pc, #256]	; (8003bbc <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8003aba:	429a      	cmp	r2, r3
 8003abc:	f240 8084 	bls.w	8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2f      	ldr	r2, [pc, #188]	; (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d07a      	beq.n	8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2e      	ldr	r2, [pc, #184]	; (8003b88 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d050      	beq.n	8003b76 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2c      	ldr	r2, [pc, #176]	; (8003b8c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d049      	beq.n	8003b72 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2b      	ldr	r2, [pc, #172]	; (8003b90 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d042      	beq.n	8003b6e <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a29      	ldr	r2, [pc, #164]	; (8003b94 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d03a      	beq.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d032      	beq.n	8003b62 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a26      	ldr	r2, [pc, #152]	; (8003b9c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d02a      	beq.n	8003b5c <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a25      	ldr	r2, [pc, #148]	; (8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d022      	beq.n	8003b56 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01a      	beq.n	8003b50 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d012      	beq.n	8003b4a <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a20      	ldr	r2, [pc, #128]	; (8003bac <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00a      	beq.n	8003b44 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d102      	bne.n	8003b3e <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8003b38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b3c:	e041      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b42:	e03e      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b48:	e03b      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b4e:	e038      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b54:	e035      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b5a:	e032      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b60:	e02f      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b66:	e02c      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b6c:	e029      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b6e:	2304      	movs	r3, #4
 8003b70:	e027      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b72:	2304      	movs	r3, #4
 8003b74:	e025      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b76:	2304      	movs	r3, #4
 8003b78:	e023      	b.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003b7a:	bf00      	nop
 8003b7c:	40026000 	.word	0x40026000
 8003b80:	40026458 	.word	0x40026458
 8003b84:	40026010 	.word	0x40026010
 8003b88:	40026410 	.word	0x40026410
 8003b8c:	40026070 	.word	0x40026070
 8003b90:	40026470 	.word	0x40026470
 8003b94:	40026028 	.word	0x40026028
 8003b98:	40026428 	.word	0x40026428
 8003b9c:	40026088 	.word	0x40026088
 8003ba0:	40026488 	.word	0x40026488
 8003ba4:	40026040 	.word	0x40026040
 8003ba8:	40026440 	.word	0x40026440
 8003bac:	400260a0 	.word	0x400260a0
 8003bb0:	400264a0 	.word	0x400264a0
 8003bb4:	40026400 	.word	0x40026400
 8003bb8:	400260b8 	.word	0x400260b8
 8003bbc:	40026058 	.word	0x40026058
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	4a94      	ldr	r2, [pc, #592]	; (8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003bc4:	60d3      	str	r3, [r2, #12]
 8003bc6:	e05f      	b.n	8003c88 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a92      	ldr	r2, [pc, #584]	; (8003e18 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d057      	beq.n	8003c82 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a91      	ldr	r2, [pc, #580]	; (8003e1c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d050      	beq.n	8003c7e <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a8f      	ldr	r2, [pc, #572]	; (8003e20 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d049      	beq.n	8003c7a <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a8e      	ldr	r2, [pc, #568]	; (8003e24 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d042      	beq.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a8c      	ldr	r2, [pc, #560]	; (8003e28 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d03a      	beq.n	8003c70 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a8b      	ldr	r2, [pc, #556]	; (8003e2c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d032      	beq.n	8003c6a <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a89      	ldr	r2, [pc, #548]	; (8003e30 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02a      	beq.n	8003c64 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a88      	ldr	r2, [pc, #544]	; (8003e34 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d022      	beq.n	8003c5e <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a86      	ldr	r2, [pc, #536]	; (8003e38 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01a      	beq.n	8003c58 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a85      	ldr	r2, [pc, #532]	; (8003e3c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d012      	beq.n	8003c52 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a83      	ldr	r2, [pc, #524]	; (8003e40 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00a      	beq.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a82      	ldr	r2, [pc, #520]	; (8003e44 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d102      	bne.n	8003c46 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8003c40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c44:	e01e      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c4a:	e01b      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c50:	e018      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c56:	e015      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c5c:	e012      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c62:	e00f      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c68:	e00c      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c6e:	e009      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c74:	e006      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c76:	2304      	movs	r3, #4
 8003c78:	e004      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c7a:	2304      	movs	r3, #4
 8003c7c:	e002      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c7e:	2304      	movs	r3, #4
 8003c80:	e000      	b.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c82:	2304      	movs	r3, #4
 8003c84:	4a63      	ldr	r2, [pc, #396]	; (8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003c86:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b6e      	ldr	r3, [pc, #440]	; (8003e48 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d95c      	bls.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a5f      	ldr	r2, [pc, #380]	; (8003e18 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d053      	beq.n	8003d46 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a5e      	ldr	r2, [pc, #376]	; (8003e1c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d04c      	beq.n	8003d42 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a5c      	ldr	r2, [pc, #368]	; (8003e20 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d045      	beq.n	8003d3e <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a5b      	ldr	r2, [pc, #364]	; (8003e24 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d03e      	beq.n	8003d3a <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a59      	ldr	r2, [pc, #356]	; (8003e28 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d037      	beq.n	8003d36 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d030      	beq.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a56      	ldr	r2, [pc, #344]	; (8003e30 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d029      	beq.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a55      	ldr	r2, [pc, #340]	; (8003e34 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d022      	beq.n	8003d2a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a53      	ldr	r2, [pc, #332]	; (8003e38 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01a      	beq.n	8003d24 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a52      	ldr	r2, [pc, #328]	; (8003e3c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d012      	beq.n	8003d1e <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a50      	ldr	r2, [pc, #320]	; (8003e40 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00a      	beq.n	8003d18 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a4f      	ldr	r2, [pc, #316]	; (8003e44 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d102      	bne.n	8003d12 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8003d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d10:	e01a      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d16:	e017      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d1c:	e014      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d22:	e011      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d28:	e00e      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d2a:	2340      	movs	r3, #64	; 0x40
 8003d2c:	e00c      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d2e:	2340      	movs	r3, #64	; 0x40
 8003d30:	e00a      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d32:	2340      	movs	r3, #64	; 0x40
 8003d34:	e008      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d36:	2340      	movs	r3, #64	; 0x40
 8003d38:	e006      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e004      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e002      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003d46:	2301      	movs	r3, #1
 8003d48:	4a40      	ldr	r2, [pc, #256]	; (8003e4c <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003d4a:	60d3      	str	r3, [r2, #12]
 8003d4c:	e141      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	4b3e      	ldr	r3, [pc, #248]	; (8003e50 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d97c      	bls.n	8003e54 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2e      	ldr	r2, [pc, #184]	; (8003e18 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d053      	beq.n	8003e0c <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2c      	ldr	r2, [pc, #176]	; (8003e1c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d04c      	beq.n	8003e08 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d045      	beq.n	8003e04 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a29      	ldr	r2, [pc, #164]	; (8003e24 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d03e      	beq.n	8003e00 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d037      	beq.n	8003dfc <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d030      	beq.n	8003df8 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d029      	beq.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d022      	beq.n	8003df0 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d01a      	beq.n	8003dea <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a20      	ldr	r2, [pc, #128]	; (8003e3c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d012      	beq.n	8003de4 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00a      	beq.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d102      	bne.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dd6:	e01a      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003dd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ddc:	e017      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003de2:	e014      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003de8:	e011      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dee:	e00e      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003df0:	2340      	movs	r3, #64	; 0x40
 8003df2:	e00c      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003df4:	2340      	movs	r3, #64	; 0x40
 8003df6:	e00a      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003df8:	2340      	movs	r3, #64	; 0x40
 8003dfa:	e008      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003dfc:	2340      	movs	r3, #64	; 0x40
 8003dfe:	e006      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e004      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e002      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003e10:	6093      	str	r3, [r2, #8]
 8003e12:	e0de      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003e14:	40026000 	.word	0x40026000
 8003e18:	40026010 	.word	0x40026010
 8003e1c:	40026410 	.word	0x40026410
 8003e20:	40026070 	.word	0x40026070
 8003e24:	40026470 	.word	0x40026470
 8003e28:	40026028 	.word	0x40026028
 8003e2c:	40026428 	.word	0x40026428
 8003e30:	40026088 	.word	0x40026088
 8003e34:	40026488 	.word	0x40026488
 8003e38:	40026040 	.word	0x40026040
 8003e3c:	40026440 	.word	0x40026440
 8003e40:	400260a0 	.word	0x400260a0
 8003e44:	400264a0 	.word	0x400264a0
 8003e48:	40026458 	.word	0x40026458
 8003e4c:	40026400 	.word	0x40026400
 8003e50:	400260b8 	.word	0x400260b8
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4b78      	ldr	r3, [pc, #480]	; (800403c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d95c      	bls.n	8003f1a <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a76      	ldr	r2, [pc, #472]	; (8004040 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d053      	beq.n	8003f12 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a75      	ldr	r2, [pc, #468]	; (8004044 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d04c      	beq.n	8003f0e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a73      	ldr	r2, [pc, #460]	; (8004048 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d045      	beq.n	8003f0a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a72      	ldr	r2, [pc, #456]	; (800404c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d03e      	beq.n	8003f06 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a70      	ldr	r2, [pc, #448]	; (8004050 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d037      	beq.n	8003f02 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a6f      	ldr	r2, [pc, #444]	; (8004054 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d030      	beq.n	8003efe <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a6d      	ldr	r2, [pc, #436]	; (8004058 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d029      	beq.n	8003efa <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a6c      	ldr	r2, [pc, #432]	; (800405c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d022      	beq.n	8003ef6 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a6a      	ldr	r2, [pc, #424]	; (8004060 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01a      	beq.n	8003ef0 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a69      	ldr	r2, [pc, #420]	; (8004064 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d012      	beq.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a67      	ldr	r2, [pc, #412]	; (8004068 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a66      	ldr	r2, [pc, #408]	; (800406c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d102      	bne.n	8003ede <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003edc:	e01a      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ee2:	e017      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003ee4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ee8:	e014      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eee:	e011      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003ef0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ef4:	e00e      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003ef6:	2340      	movs	r3, #64	; 0x40
 8003ef8:	e00c      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003efa:	2340      	movs	r3, #64	; 0x40
 8003efc:	e00a      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003efe:	2340      	movs	r3, #64	; 0x40
 8003f00:	e008      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003f02:	2340      	movs	r3, #64	; 0x40
 8003f04:	e006      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e004      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e002      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003f12:	2301      	movs	r3, #1
 8003f14:	4a56      	ldr	r2, [pc, #344]	; (8004070 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003f16:	60d3      	str	r3, [r2, #12]
 8003f18:	e05b      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a48      	ldr	r2, [pc, #288]	; (8004040 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d053      	beq.n	8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a46      	ldr	r2, [pc, #280]	; (8004044 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d04c      	beq.n	8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a45      	ldr	r2, [pc, #276]	; (8004048 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d045      	beq.n	8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a43      	ldr	r2, [pc, #268]	; (800404c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d03e      	beq.n	8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a42      	ldr	r2, [pc, #264]	; (8004050 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d037      	beq.n	8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a40      	ldr	r2, [pc, #256]	; (8004054 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d030      	beq.n	8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3f      	ldr	r2, [pc, #252]	; (8004058 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d029      	beq.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3d      	ldr	r2, [pc, #244]	; (800405c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d022      	beq.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3c      	ldr	r2, [pc, #240]	; (8004060 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d01a      	beq.n	8003faa <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d012      	beq.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a39      	ldr	r2, [pc, #228]	; (8004068 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00a      	beq.n	8003f9e <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a37      	ldr	r2, [pc, #220]	; (800406c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d102      	bne.n	8003f98 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003f92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f96:	e01a      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f9c:	e017      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa2:	e014      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa8:	e011      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fae:	e00e      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003fb0:	2340      	movs	r3, #64	; 0x40
 8003fb2:	e00c      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003fb4:	2340      	movs	r3, #64	; 0x40
 8003fb6:	e00a      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003fb8:	2340      	movs	r3, #64	; 0x40
 8003fba:	e008      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003fbc:	2340      	movs	r3, #64	; 0x40
 8003fbe:	e006      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e004      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e002      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	4a28      	ldr	r2, [pc, #160]	; (8004070 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003fd0:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0216 	orr.w	r2, r2, #22
 8003fe0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ff0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0208 	orr.w	r2, r2, #8
 8004010:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0201 	orr.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e005      	b.n	8004030 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800402c:	2302      	movs	r3, #2
 800402e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8004030:	7dfb      	ldrb	r3, [r7, #23]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40026058 	.word	0x40026058
 8004040:	40026010 	.word	0x40026010
 8004044:	40026410 	.word	0x40026410
 8004048:	40026070 	.word	0x40026070
 800404c:	40026470 	.word	0x40026470
 8004050:	40026028 	.word	0x40026028
 8004054:	40026428 	.word	0x40026428
 8004058:	40026088 	.word	0x40026088
 800405c:	40026488 	.word	0x40026488
 8004060:	40026040 	.word	0x40026040
 8004064:	40026440 	.word	0x40026440
 8004068:	400260a0 	.word	0x400260a0
 800406c:	400264a0 	.word	0x400264a0
 8004070:	40026000 	.word	0x40026000

08004074 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b40      	cmp	r3, #64	; 0x40
 8004090:	d108      	bne.n	80040a4 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040a2:	e007      	b.n	80040b4 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	e159      	b.n	8004390 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040dc:	2201      	movs	r2, #1
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	f040 8148 	bne.w	800438a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d00b      	beq.n	800411a <HAL_GPIO_Init+0x5a>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d007      	beq.n	800411a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800410e:	2b11      	cmp	r3, #17
 8004110:	d003      	beq.n	800411a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b12      	cmp	r3, #18
 8004118:	d130      	bne.n	800417c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	2203      	movs	r2, #3
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004150:	2201      	movs	r2, #1
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 0201 	and.w	r2, r3, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	2203      	movs	r2, #3
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d003      	beq.n	80041bc <HAL_GPIO_Init+0xfc>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b12      	cmp	r3, #18
 80041ba:	d123      	bne.n	8004204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	08da      	lsrs	r2, r3, #3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3208      	adds	r2, #8
 80041c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	220f      	movs	r2, #15
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	08da      	lsrs	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3208      	adds	r2, #8
 80041fe:	69b9      	ldr	r1, [r7, #24]
 8004200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	2203      	movs	r2, #3
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 0203 	and.w	r2, r3, #3
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80a2 	beq.w	800438a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	4b57      	ldr	r3, [pc, #348]	; (80043a8 <HAL_GPIO_Init+0x2e8>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	4a56      	ldr	r2, [pc, #344]	; (80043a8 <HAL_GPIO_Init+0x2e8>)
 8004250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004254:	6453      	str	r3, [r2, #68]	; 0x44
 8004256:	4b54      	ldr	r3, [pc, #336]	; (80043a8 <HAL_GPIO_Init+0x2e8>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004262:	4a52      	ldr	r2, [pc, #328]	; (80043ac <HAL_GPIO_Init+0x2ec>)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	089b      	lsrs	r3, r3, #2
 8004268:	3302      	adds	r3, #2
 800426a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a49      	ldr	r2, [pc, #292]	; (80043b0 <HAL_GPIO_Init+0x2f0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d019      	beq.n	80042c2 <HAL_GPIO_Init+0x202>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a48      	ldr	r2, [pc, #288]	; (80043b4 <HAL_GPIO_Init+0x2f4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_GPIO_Init+0x1fe>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a47      	ldr	r2, [pc, #284]	; (80043b8 <HAL_GPIO_Init+0x2f8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00d      	beq.n	80042ba <HAL_GPIO_Init+0x1fa>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a46      	ldr	r2, [pc, #280]	; (80043bc <HAL_GPIO_Init+0x2fc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d007      	beq.n	80042b6 <HAL_GPIO_Init+0x1f6>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a45      	ldr	r2, [pc, #276]	; (80043c0 <HAL_GPIO_Init+0x300>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_GPIO_Init+0x1f2>
 80042ae:	2304      	movs	r3, #4
 80042b0:	e008      	b.n	80042c4 <HAL_GPIO_Init+0x204>
 80042b2:	2307      	movs	r3, #7
 80042b4:	e006      	b.n	80042c4 <HAL_GPIO_Init+0x204>
 80042b6:	2303      	movs	r3, #3
 80042b8:	e004      	b.n	80042c4 <HAL_GPIO_Init+0x204>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e002      	b.n	80042c4 <HAL_GPIO_Init+0x204>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <HAL_GPIO_Init+0x204>
 80042c2:	2300      	movs	r3, #0
 80042c4:	69fa      	ldr	r2, [r7, #28]
 80042c6:	f002 0203 	and.w	r2, r2, #3
 80042ca:	0092      	lsls	r2, r2, #2
 80042cc:	4093      	lsls	r3, r2
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042d4:	4935      	ldr	r1, [pc, #212]	; (80043ac <HAL_GPIO_Init+0x2ec>)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	089b      	lsrs	r3, r3, #2
 80042da:	3302      	adds	r3, #2
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042e2:	4b38      	ldr	r3, [pc, #224]	; (80043c4 <HAL_GPIO_Init+0x304>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4013      	ands	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004306:	4a2f      	ldr	r2, [pc, #188]	; (80043c4 <HAL_GPIO_Init+0x304>)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800430c:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_GPIO_Init+0x304>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004330:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <HAL_GPIO_Init+0x304>)
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004336:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <HAL_GPIO_Init+0x304>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800435a:	4a1a      	ldr	r2, [pc, #104]	; (80043c4 <HAL_GPIO_Init+0x304>)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004360:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <HAL_GPIO_Init+0x304>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004384:	4a0f      	ldr	r2, [pc, #60]	; (80043c4 <HAL_GPIO_Init+0x304>)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3301      	adds	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b0f      	cmp	r3, #15
 8004394:	f67f aea2 	bls.w	80040dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	3724      	adds	r7, #36	; 0x24
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40013800 	.word	0x40013800
 80043b0:	40020000 	.word	0x40020000
 80043b4:	40020400 	.word	0x40020400
 80043b8:	40020800 	.word	0x40020800
 80043bc:	40020c00 	.word	0x40020c00
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40013c00 	.word	0x40013c00

080043c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	807b      	strh	r3, [r7, #2]
 80043d4:	4613      	mov	r3, r2
 80043d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d8:	787b      	ldrb	r3, [r7, #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043e4:	e003      	b.n	80043ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043e6:	887b      	ldrh	r3, [r7, #2]
 80043e8:	041a      	lsls	r2, r3, #16
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	619a      	str	r2, [r3, #24]
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	4013      	ands	r3, r2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d006      	beq.n	8004420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004412:	4a05      	ldr	r2, [pc, #20]	; (8004428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	4618      	mov	r0, r3
 800441c:	f003 f98e 	bl	800773c <HAL_GPIO_EXTI_Callback>
  }
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40013c00 	.word	0x40013c00

0800442c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e25b      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d075      	beq.n	8004536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444a:	4ba3      	ldr	r3, [pc, #652]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d00c      	beq.n	8004470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004456:	4ba0      	ldr	r3, [pc, #640]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800445e:	2b08      	cmp	r3, #8
 8004460:	d112      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004462:	4b9d      	ldr	r3, [pc, #628]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446e:	d10b      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	4b99      	ldr	r3, [pc, #612]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d05b      	beq.n	8004534 <HAL_RCC_OscConfig+0x108>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d157      	bne.n	8004534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e236      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d106      	bne.n	80044a0 <HAL_RCC_OscConfig+0x74>
 8004492:	4b91      	ldr	r3, [pc, #580]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a90      	ldr	r2, [pc, #576]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x98>
 80044aa:	4b8b      	ldr	r3, [pc, #556]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a8a      	ldr	r2, [pc, #552]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b88      	ldr	r3, [pc, #544]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a87      	ldr	r2, [pc, #540]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044c4:	4b84      	ldr	r3, [pc, #528]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a83      	ldr	r2, [pc, #524]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b81      	ldr	r3, [pc, #516]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a80      	ldr	r2, [pc, #512]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fd ff9c 	bl	8002420 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fd ff98 	bl	8002420 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e1fb      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b76      	ldr	r3, [pc, #472]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xc0>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd ff88 	bl	8002420 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004514:	f7fd ff84 	bl	8002420 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1e7      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b6c      	ldr	r3, [pc, #432]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0xe8>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004542:	4b65      	ldr	r3, [pc, #404]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b62      	ldr	r3, [pc, #392]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455a:	4b5f      	ldr	r3, [pc, #380]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b5c      	ldr	r3, [pc, #368]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1bb      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b56      	ldr	r3, [pc, #344]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4952      	ldr	r1, [pc, #328]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e03a      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b4f      	ldr	r3, [pc, #316]	; (80046dc <HAL_RCC_OscConfig+0x2b0>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fd ff3d 	bl	8002420 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fd ff39 	bl	8002420 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e19c      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	4b46      	ldr	r3, [pc, #280]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b43      	ldr	r3, [pc, #268]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4940      	ldr	r1, [pc, #256]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e015      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_RCC_OscConfig+0x2b0>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd ff1c 	bl	8002420 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fd ff18 	bl	8002420 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e17b      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d030      	beq.n	8004678 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_RCC_OscConfig+0x2b4>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fd fefc 	bl	8002420 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462c:	f7fd fef8 	bl	8002420 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e15b      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x200>
 800464a:	e015      	b.n	8004678 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464c:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <HAL_RCC_OscConfig+0x2b4>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004652:	f7fd fee5 	bl	8002420 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465a:	f7fd fee1 	bl	8002420 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e144      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800466e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f0      	bne.n	800465a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80a0 	beq.w	80047c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10f      	bne.n	80046b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	4a0e      	ldr	r2, [pc, #56]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a4:	6413      	str	r3, [r2, #64]	; 0x40
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCC_OscConfig+0x2b8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d121      	bne.n	8004706 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <HAL_RCC_OscConfig+0x2b8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a07      	ldr	r2, [pc, #28]	; (80046e4 <HAL_RCC_OscConfig+0x2b8>)
 80046c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ce:	f7fd fea7 	bl	8002420 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	e011      	b.n	80046fa <HAL_RCC_OscConfig+0x2ce>
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800
 80046dc:	42470000 	.word	0x42470000
 80046e0:	42470e80 	.word	0x42470e80
 80046e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e8:	f7fd fe9a 	bl	8002420 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0fd      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b81      	ldr	r3, [pc, #516]	; (8004900 <HAL_RCC_OscConfig+0x4d4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d106      	bne.n	800471c <HAL_RCC_OscConfig+0x2f0>
 800470e:	4b7d      	ldr	r3, [pc, #500]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a7c      	ldr	r2, [pc, #496]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	e01c      	b.n	8004756 <HAL_RCC_OscConfig+0x32a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b05      	cmp	r3, #5
 8004722:	d10c      	bne.n	800473e <HAL_RCC_OscConfig+0x312>
 8004724:	4b77      	ldr	r3, [pc, #476]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	4a76      	ldr	r2, [pc, #472]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	6713      	str	r3, [r2, #112]	; 0x70
 8004730:	4b74      	ldr	r3, [pc, #464]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a73      	ldr	r2, [pc, #460]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
 800473c:	e00b      	b.n	8004756 <HAL_RCC_OscConfig+0x32a>
 800473e:	4b71      	ldr	r3, [pc, #452]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	4a70      	ldr	r2, [pc, #448]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	6713      	str	r3, [r2, #112]	; 0x70
 800474a:	4b6e      	ldr	r3, [pc, #440]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	4a6d      	ldr	r2, [pc, #436]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004750:	f023 0304 	bic.w	r3, r3, #4
 8004754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d015      	beq.n	800478a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475e:	f7fd fe5f 	bl	8002420 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004764:	e00a      	b.n	800477c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fd fe5b 	bl	8002420 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0bc      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477c:	4b61      	ldr	r3, [pc, #388]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ee      	beq.n	8004766 <HAL_RCC_OscConfig+0x33a>
 8004788:	e014      	b.n	80047b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7fd fe49 	bl	8002420 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004790:	e00a      	b.n	80047a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004792:	f7fd fe45 	bl	8002420 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0a6      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a8:	4b56      	ldr	r3, [pc, #344]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ee      	bne.n	8004792 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d105      	bne.n	80047c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ba:	4b52      	ldr	r3, [pc, #328]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8092 	beq.w	80048f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047d0:	4b4c      	ldr	r3, [pc, #304]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d05c      	beq.n	8004896 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d141      	bne.n	8004868 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4b48      	ldr	r3, [pc, #288]	; (8004908 <HAL_RCC_OscConfig+0x4dc>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ea:	f7fd fe19 	bl	8002420 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f2:	f7fd fe15 	bl	8002420 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e078      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004804:	4b3f      	ldr	r3, [pc, #252]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	019b      	lsls	r3, r3, #6
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	3b01      	subs	r3, #1
 800482a:	041b      	lsls	r3, r3, #16
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	061b      	lsls	r3, r3, #24
 8004834:	4933      	ldr	r1, [pc, #204]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800483a:	4b33      	ldr	r3, [pc, #204]	; (8004908 <HAL_RCC_OscConfig+0x4dc>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fd fdee 	bl	8002420 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004848:	f7fd fdea 	bl	8002420 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e04d      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485a:	4b2a      	ldr	r3, [pc, #168]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x41c>
 8004866:	e045      	b.n	80048f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004868:	4b27      	ldr	r3, [pc, #156]	; (8004908 <HAL_RCC_OscConfig+0x4dc>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fd fdd7 	bl	8002420 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004876:	f7fd fdd3 	bl	8002420 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e036      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004888:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x44a>
 8004894:	e02e      	b.n	80048f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e029      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d11c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d115      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048ca:	4013      	ands	r3, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10d      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d106      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40007000 	.word	0x40007000
 8004904:	40023800 	.word	0x40023800
 8004908:	42470060 	.word	0x42470060

0800490c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0cc      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b68      	ldr	r3, [pc, #416]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d90c      	bls.n	8004948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b65      	ldr	r3, [pc, #404]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b63      	ldr	r3, [pc, #396]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0b8      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004960:	4b59      	ldr	r3, [pc, #356]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a58      	ldr	r2, [pc, #352]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800496a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004978:	4b53      	ldr	r3, [pc, #332]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a52      	ldr	r2, [pc, #328]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	494d      	ldr	r1, [pc, #308]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d044      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	4b47      	ldr	r3, [pc, #284]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d119      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d003      	beq.n	80049ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	4b3f      	ldr	r3, [pc, #252]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e06f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	4b3b      	ldr	r3, [pc, #236]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e067      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4934      	ldr	r1, [pc, #208]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049fc:	f7fd fd10 	bl	8002420 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7fd fd0c 	bl	8002420 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e04f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d20c      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b22      	ldr	r3, [pc, #136]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e032      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4916      	ldr	r1, [pc, #88]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	490e      	ldr	r1, [pc, #56]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a92:	f000 f821 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	490a      	ldr	r1, [pc, #40]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	5ccb      	ldrb	r3, [r1, r3]
 8004aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fd fc70 	bl	8002398 <HAL_InitTick>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023c00 	.word	0x40023c00
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	08008740 	.word	0x08008740
 8004ad0:	20000000 	.word	0x20000000
 8004ad4:	20000004 	.word	0x20000004

08004ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	607b      	str	r3, [r7, #4]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af0:	4b67      	ldr	r3, [pc, #412]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 030c 	and.w	r3, r3, #12
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d00d      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0x40>
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	f200 80bd 	bhi.w	8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x34>
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d003      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b0a:	e0b7      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b0e:	60bb      	str	r3, [r7, #8]
       break;
 8004b10:	e0b7      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b12:	4b61      	ldr	r3, [pc, #388]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004b14:	60bb      	str	r3, [r7, #8]
      break;
 8004b16:	e0b4      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b18:	4b5d      	ldr	r3, [pc, #372]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b22:	4b5b      	ldr	r3, [pc, #364]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d04d      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2e:	4b58      	ldr	r3, [pc, #352]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	461a      	mov	r2, r3
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b3e:	f04f 0100 	mov.w	r1, #0
 8004b42:	ea02 0800 	and.w	r8, r2, r0
 8004b46:	ea03 0901 	and.w	r9, r3, r1
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	014b      	lsls	r3, r1, #5
 8004b58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b5c:	0142      	lsls	r2, r0, #5
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	ebb0 0008 	subs.w	r0, r0, r8
 8004b66:	eb61 0109 	sbc.w	r1, r1, r9
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	018b      	lsls	r3, r1, #6
 8004b74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b78:	0182      	lsls	r2, r0, #6
 8004b7a:	1a12      	subs	r2, r2, r0
 8004b7c:	eb63 0301 	sbc.w	r3, r3, r1
 8004b80:	f04f 0000 	mov.w	r0, #0
 8004b84:	f04f 0100 	mov.w	r1, #0
 8004b88:	00d9      	lsls	r1, r3, #3
 8004b8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b8e:	00d0      	lsls	r0, r2, #3
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	eb12 0208 	adds.w	r2, r2, r8
 8004b98:	eb43 0309 	adc.w	r3, r3, r9
 8004b9c:	f04f 0000 	mov.w	r0, #0
 8004ba0:	f04f 0100 	mov.w	r1, #0
 8004ba4:	0259      	lsls	r1, r3, #9
 8004ba6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004baa:	0250      	lsls	r0, r2, #9
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	f7fb fe30 	bl	8000820 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e04a      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bca:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	099b      	lsrs	r3, r3, #6
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bda:	f04f 0100 	mov.w	r1, #0
 8004bde:	ea02 0400 	and.w	r4, r2, r0
 8004be2:	ea03 0501 	and.w	r5, r3, r1
 8004be6:	4620      	mov	r0, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	014b      	lsls	r3, r1, #5
 8004bf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bf8:	0142      	lsls	r2, r0, #5
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	1b00      	subs	r0, r0, r4
 8004c00:	eb61 0105 	sbc.w	r1, r1, r5
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	018b      	lsls	r3, r1, #6
 8004c0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c12:	0182      	lsls	r2, r0, #6
 8004c14:	1a12      	subs	r2, r2, r0
 8004c16:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1a:	f04f 0000 	mov.w	r0, #0
 8004c1e:	f04f 0100 	mov.w	r1, #0
 8004c22:	00d9      	lsls	r1, r3, #3
 8004c24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c28:	00d0      	lsls	r0, r2, #3
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	1912      	adds	r2, r2, r4
 8004c30:	eb45 0303 	adc.w	r3, r5, r3
 8004c34:	f04f 0000 	mov.w	r0, #0
 8004c38:	f04f 0100 	mov.w	r1, #0
 8004c3c:	0299      	lsls	r1, r3, #10
 8004c3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c42:	0290      	lsls	r0, r2, #10
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4610      	mov	r0, r2
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	f7fb fde4 	bl	8000820 <__aeabi_uldivmod>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	60bb      	str	r3, [r7, #8]
      break;
 8004c7a:	e002      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c7e:	60bb      	str	r3, [r7, #8]
      break;
 8004c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c82:	68bb      	ldr	r3, [r7, #8]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800
 8004c94:	00f42400 	.word	0x00f42400
 8004c98:	007a1200 	.word	0x007a1200

08004c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000000 	.word	0x20000000

08004cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cb8:	f7ff fff0 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0a9b      	lsrs	r3, r3, #10
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4903      	ldr	r1, [pc, #12]	; (8004cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	08008750 	.word	0x08008750

08004cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ce0:	f7ff ffdc 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	0b5b      	lsrs	r3, r3, #13
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	4903      	ldr	r1, [pc, #12]	; (8004d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	08008750 	.word	0x08008750

08004d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e056      	b.n	8004dc4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7fd f8e1 	bl	8001ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	ea42 0103 	orr.w	r1, r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	f003 0104 	and.w	r1, r3, #4
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004db2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10f      	bne.n	8004e10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d004      	beq.n	8004e10 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
    return;
 8004e0e:	e0d7      	b.n	8004fc0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_SPI_IRQHandler+0x66>
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	09db      	lsrs	r3, r3, #7
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d004      	beq.n	8004e32 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
    return;
 8004e30:	e0c6      	b.n	8004fc0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10c      	bne.n	8004e58 <HAL_SPI_IRQHandler+0x8c>
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	099b      	lsrs	r3, r3, #6
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	0a1b      	lsrs	r3, r3, #8
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80b4 	beq.w	8004fc0 <HAL_SPI_IRQHandler+0x1f4>
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80ad 	beq.w	8004fc0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	099b      	lsrs	r3, r3, #6
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d023      	beq.n	8004eba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d011      	beq.n	8004ea2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e82:	f043 0204 	orr.w	r2, r3, #4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	e00b      	b.n	8004eba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	693b      	ldr	r3, [r7, #16]
        return;
 8004eb8:	e082      	b.n	8004fc0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d014      	beq.n	8004ef0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f043 0201 	orr.w	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00c      	beq.n	8004f16 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	f043 0208 	orr.w	r2, r3, #8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	60bb      	str	r3, [r7, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d04f      	beq.n	8004fbe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f2c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <HAL_SPI_IRQHandler+0x17e>
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d034      	beq.n	8004fb4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0203 	bic.w	r2, r2, #3
 8004f58:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d011      	beq.n	8004f86 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f66:	4a18      	ldr	r2, [pc, #96]	; (8004fc8 <HAL_SPI_IRQHandler+0x1fc>)
 8004f68:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd fcac 	bl	80028cc <HAL_DMA_Abort_IT>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d016      	beq.n	8004fbc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f92:	4a0d      	ldr	r2, [pc, #52]	; (8004fc8 <HAL_SPI_IRQHandler+0x1fc>)
 8004f94:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fd fc96 	bl	80028cc <HAL_DMA_Abort_IT>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004fb2:	e003      	b.n	8004fbc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f809 	bl	8004fcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004fba:	e000      	b.n	8004fbe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004fbc:	bf00      	nop
    return;
 8004fbe:	bf00      	nop
  }
}
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	08004fe1 	.word	0x08004fe1

08004fcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff ffe6 	bl	8004fcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b06      	cmp	r3, #6
 8005030:	d007      	beq.n	8005042 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0201 	orr.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0201 	bic.w	r2, r2, #1
 8005066:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6a1a      	ldr	r2, [r3, #32]
 800506e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005072:	4013      	ands	r3, r2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10f      	bne.n	8005098 <HAL_TIM_Base_Stop_IT+0x48>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6a1a      	ldr	r2, [r3, #32]
 800507e:	f240 4344 	movw	r3, #1092	; 0x444
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d107      	bne.n	8005098 <HAL_TIM_Base_Stop_IT+0x48>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e01d      	b.n	80050f4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fc ff95 	bl	8001ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f000 fa45 	bl	8005574 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e02d      	b.n	800516c <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f825 	bl	8005174 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f000 fa19 	bl	8005574 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0208 	bic.w	r2, r2, #8
 8005150:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6819      	ldr	r1, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b02      	cmp	r3, #2
 800519c:	d122      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d11b      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0202 	mvn.w	r2, #2
 80051b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f9b4 	bl	8005538 <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 f9a0 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f9b7 	bl	800554c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d11b      	bne.n	8005238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0204 	mvn.w	r2, #4
 8005208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f98a 	bl	8005538 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f001 f976 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f98d 	bl	800554c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b08      	cmp	r3, #8
 8005244:	d122      	bne.n	800528c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b08      	cmp	r3, #8
 8005252:	d11b      	bne.n	800528c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0208 	mvn.w	r2, #8
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2204      	movs	r2, #4
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f960 	bl	8005538 <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 f94c 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f963 	bl	800554c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b10      	cmp	r3, #16
 8005298:	d122      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	2b10      	cmp	r3, #16
 80052a6:	d11b      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0210 	mvn.w	r2, #16
 80052b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2208      	movs	r2, #8
 80052b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f936 	bl	8005538 <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f001 f922 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f939 	bl	800554c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d10e      	bne.n	800530c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0201 	mvn.w	r2, #1
 8005304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f90c 	bl	8005524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005316:	2b80      	cmp	r3, #128	; 0x80
 8005318:	d10e      	bne.n	8005338 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005324:	2b80      	cmp	r3, #128	; 0x80
 8005326:	d107      	bne.n	8005338 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fc1a 	bl	8005b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005342:	2b40      	cmp	r3, #64	; 0x40
 8005344:	d10e      	bne.n	8005364 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b40      	cmp	r3, #64	; 0x40
 8005352:	d107      	bne.n	8005364 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800535c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f8fe 	bl	8005560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b20      	cmp	r3, #32
 8005370:	d10e      	bne.n	8005390 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b20      	cmp	r3, #32
 800537e:	d107      	bne.n	8005390 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0220 	mvn.w	r2, #32
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fbe4 	bl	8005b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e0b4      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x184>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2202      	movs	r2, #2
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b0c      	cmp	r3, #12
 80053c6:	f200 809f 	bhi.w	8005508 <HAL_TIM_PWM_ConfigChannel+0x170>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	08005405 	.word	0x08005405
 80053d4:	08005509 	.word	0x08005509
 80053d8:	08005509 	.word	0x08005509
 80053dc:	08005509 	.word	0x08005509
 80053e0:	08005445 	.word	0x08005445
 80053e4:	08005509 	.word	0x08005509
 80053e8:	08005509 	.word	0x08005509
 80053ec:	08005509 	.word	0x08005509
 80053f0:	08005487 	.word	0x08005487
 80053f4:	08005509 	.word	0x08005509
 80053f8:	08005509 	.word	0x08005509
 80053fc:	08005509 	.word	0x08005509
 8005400:	080054c7 	.word	0x080054c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f932 	bl	8005674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0208 	orr.w	r2, r2, #8
 800541e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6999      	ldr	r1, [r3, #24]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	619a      	str	r2, [r3, #24]
      break;
 8005442:	e062      	b.n	800550a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f978 	bl	8005740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	021a      	lsls	r2, r3, #8
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	619a      	str	r2, [r3, #24]
      break;
 8005484:	e041      	b.n	800550a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f9c3 	bl	8005818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0208 	orr.w	r2, r2, #8
 80054a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0204 	bic.w	r2, r2, #4
 80054b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69d9      	ldr	r1, [r3, #28]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	61da      	str	r2, [r3, #28]
      break;
 80054c4:	e021      	b.n	800550a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fa0d 	bl	80058ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	021a      	lsls	r2, r3, #8
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	61da      	str	r2, [r3, #28]
      break;
 8005506:	e000      	b.n	800550a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005508:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a34      	ldr	r2, [pc, #208]	; (8005658 <TIM_Base_SetConfig+0xe4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00f      	beq.n	80055ac <TIM_Base_SetConfig+0x38>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005592:	d00b      	beq.n	80055ac <TIM_Base_SetConfig+0x38>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a31      	ldr	r2, [pc, #196]	; (800565c <TIM_Base_SetConfig+0xe8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_Base_SetConfig+0x38>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a30      	ldr	r2, [pc, #192]	; (8005660 <TIM_Base_SetConfig+0xec>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_Base_SetConfig+0x38>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a2f      	ldr	r2, [pc, #188]	; (8005664 <TIM_Base_SetConfig+0xf0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d108      	bne.n	80055be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a25      	ldr	r2, [pc, #148]	; (8005658 <TIM_Base_SetConfig+0xe4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01b      	beq.n	80055fe <TIM_Base_SetConfig+0x8a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055cc:	d017      	beq.n	80055fe <TIM_Base_SetConfig+0x8a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a22      	ldr	r2, [pc, #136]	; (800565c <TIM_Base_SetConfig+0xe8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <TIM_Base_SetConfig+0x8a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a21      	ldr	r2, [pc, #132]	; (8005660 <TIM_Base_SetConfig+0xec>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00f      	beq.n	80055fe <TIM_Base_SetConfig+0x8a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a20      	ldr	r2, [pc, #128]	; (8005664 <TIM_Base_SetConfig+0xf0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00b      	beq.n	80055fe <TIM_Base_SetConfig+0x8a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1f      	ldr	r2, [pc, #124]	; (8005668 <TIM_Base_SetConfig+0xf4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_Base_SetConfig+0x8a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1e      	ldr	r2, [pc, #120]	; (800566c <TIM_Base_SetConfig+0xf8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_Base_SetConfig+0x8a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1d      	ldr	r2, [pc, #116]	; (8005670 <TIM_Base_SetConfig+0xfc>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d108      	bne.n	8005610 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a08      	ldr	r2, [pc, #32]	; (8005658 <TIM_Base_SetConfig+0xe4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d103      	bne.n	8005644 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	615a      	str	r2, [r3, #20]
}
 800564a:	bf00      	nop
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40010000 	.word	0x40010000
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800
 8005664:	40000c00 	.word	0x40000c00
 8005668:	40014000 	.word	0x40014000
 800566c:	40014400 	.word	0x40014400
 8005670:	40014800 	.word	0x40014800

08005674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f023 0302 	bic.w	r3, r3, #2
 80056bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a1c      	ldr	r2, [pc, #112]	; (800573c <TIM_OC1_SetConfig+0xc8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10c      	bne.n	80056ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 0308 	bic.w	r3, r3, #8
 80056d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f023 0304 	bic.w	r3, r3, #4
 80056e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a13      	ldr	r2, [pc, #76]	; (800573c <TIM_OC1_SetConfig+0xc8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d111      	bne.n	8005716 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	621a      	str	r2, [r3, #32]
}
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	40010000 	.word	0x40010000

08005740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f023 0210 	bic.w	r2, r3, #16
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0320 	bic.w	r3, r3, #32
 800578a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <TIM_OC2_SetConfig+0xd4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d10d      	bne.n	80057bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a15      	ldr	r2, [pc, #84]	; (8005814 <TIM_OC2_SetConfig+0xd4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d113      	bne.n	80057ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000

08005818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0303 	bic.w	r3, r3, #3
 800584e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a1d      	ldr	r2, [pc, #116]	; (80058e8 <TIM_OC3_SetConfig+0xd0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d10d      	bne.n	8005892 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800587c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a14      	ldr	r2, [pc, #80]	; (80058e8 <TIM_OC3_SetConfig+0xd0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d113      	bne.n	80058c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	621a      	str	r2, [r3, #32]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	40010000 	.word	0x40010000

080058ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	031b      	lsls	r3, r3, #12
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a10      	ldr	r2, [pc, #64]	; (8005988 <TIM_OC4_SetConfig+0x9c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d109      	bne.n	8005960 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	019b      	lsls	r3, r3, #6
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40010000 	.word	0x40010000

0800598c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 031f 	and.w	r3, r3, #31
 800599e:	2201      	movs	r2, #1
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a1a      	ldr	r2, [r3, #32]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	43db      	mvns	r3, r3
 80059ae:	401a      	ands	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a1a      	ldr	r2, [r3, #32]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f003 031f 	and.w	r3, r3, #31
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	fa01 f303 	lsl.w	r3, r1, r3
 80059c4:	431a      	orrs	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e050      	b.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d018      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3c:	d013      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a18      	ldr	r2, [pc, #96]	; (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00e      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a16      	ldr	r2, [pc, #88]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d009      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a15      	ldr	r2, [pc, #84]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d004      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d10c      	bne.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40014000 	.word	0x40014000

08005ab4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e03d      	b.n	8005b4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e03f      	b.n	8005c12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fc fa9a 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2224      	movs	r2, #36	; 0x24
 8005bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f90b 	bl	8005de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695a      	ldr	r2, [r3, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b088      	sub	sp, #32
 8005c1e:	af02      	add	r7, sp, #8
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	603b      	str	r3, [r7, #0]
 8005c26:	4613      	mov	r3, r2
 8005c28:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	f040 8083 	bne.w	8005d42 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_UART_Transmit+0x2e>
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e07b      	b.n	8005d44 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Transmit+0x40>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e074      	b.n	8005d44 <HAL_UART_Transmit+0x12a>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2221      	movs	r2, #33	; 0x21
 8005c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c70:	f7fc fbd6 	bl	8002420 <HAL_GetTick>
 8005c74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	88fa      	ldrh	r2, [r7, #6]
 8005c80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005c8a:	e042      	b.n	8005d12 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca2:	d122      	bne.n	8005cea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2200      	movs	r2, #0
 8005cac:	2180      	movs	r1, #128	; 0x80
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f84c 	bl	8005d4c <UART_WaitOnFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e042      	b.n	8005d44 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cd0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	3302      	adds	r3, #2
 8005cde:	60bb      	str	r3, [r7, #8]
 8005ce0:	e017      	b.n	8005d12 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	e013      	b.n	8005d12 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2180      	movs	r1, #128	; 0x80
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f829 	bl	8005d4c <UART_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e01f      	b.n	8005d44 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	60ba      	str	r2, [r7, #8]
 8005d0a:	781a      	ldrb	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1b7      	bne.n	8005c8c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2200      	movs	r2, #0
 8005d24:	2140      	movs	r1, #64	; 0x40
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f810 	bl	8005d4c <UART_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e006      	b.n	8005d44 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e000      	b.n	8005d44 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005d42:	2302      	movs	r3, #2
  }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5c:	e02c      	b.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d64:	d028      	beq.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d007      	beq.n	8005d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d6c:	f7fc fb58 	bl	8002420 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d21d      	bcs.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695a      	ldr	r2, [r3, #20]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0201 	bic.w	r2, r2, #1
 8005d9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e00f      	b.n	8005dd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2301      	moveq	r3, #1
 8005dca:	2300      	movne	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	461a      	mov	r2, r3
 8005dd0:	79fb      	ldrb	r3, [r7, #7]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d0c3      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	b0bd      	sub	sp, #244	; 0xf4
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfc:	68d9      	ldr	r1, [r3, #12]
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	ea40 0301 	orr.w	r3, r0, r1
 8005e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e38:	f021 010c 	bic.w	r1, r1, #12
 8005e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e46:	430b      	orrs	r3, r1
 8005e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	6999      	ldr	r1, [r3, #24]
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	ea40 0301 	orr.w	r3, r0, r1
 8005e66:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e72:	f040 81a5 	bne.w	80061c0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	4bcd      	ldr	r3, [pc, #820]	; (80061b4 <UART_SetConfig+0x3d4>)
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d006      	beq.n	8005e90 <UART_SetConfig+0xb0>
 8005e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	4bcb      	ldr	r3, [pc, #812]	; (80061b8 <UART_SetConfig+0x3d8>)
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	f040 80cb 	bne.w	8006026 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e90:	f7fe ff24 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
 8005e94:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e9c:	461c      	mov	r4, r3
 8005e9e:	f04f 0500 	mov.w	r5, #0
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	462b      	mov	r3, r5
 8005ea6:	1891      	adds	r1, r2, r2
 8005ea8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005eac:	415b      	adcs	r3, r3
 8005eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005eb2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005eb6:	1912      	adds	r2, r2, r4
 8005eb8:	eb45 0303 	adc.w	r3, r5, r3
 8005ebc:	f04f 0000 	mov.w	r0, #0
 8005ec0:	f04f 0100 	mov.w	r1, #0
 8005ec4:	00d9      	lsls	r1, r3, #3
 8005ec6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eca:	00d0      	lsls	r0, r2, #3
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	1911      	adds	r1, r2, r4
 8005ed2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005ed6:	416b      	adcs	r3, r5
 8005ed8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	1891      	adds	r1, r2, r2
 8005eea:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005eee:	415b      	adcs	r3, r3
 8005ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ef4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005ef8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005efc:	f7fa fc90 	bl	8000820 <__aeabi_uldivmod>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4bad      	ldr	r3, [pc, #692]	; (80061bc <UART_SetConfig+0x3dc>)
 8005f06:	fba3 2302 	umull	r2, r3, r3, r2
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	011e      	lsls	r6, r3, #4
 8005f0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f12:	461c      	mov	r4, r3
 8005f14:	f04f 0500 	mov.w	r5, #0
 8005f18:	4622      	mov	r2, r4
 8005f1a:	462b      	mov	r3, r5
 8005f1c:	1891      	adds	r1, r2, r2
 8005f1e:	67b9      	str	r1, [r7, #120]	; 0x78
 8005f20:	415b      	adcs	r3, r3
 8005f22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f24:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005f28:	1912      	adds	r2, r2, r4
 8005f2a:	eb45 0303 	adc.w	r3, r5, r3
 8005f2e:	f04f 0000 	mov.w	r0, #0
 8005f32:	f04f 0100 	mov.w	r1, #0
 8005f36:	00d9      	lsls	r1, r3, #3
 8005f38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f3c:	00d0      	lsls	r0, r2, #3
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	1911      	adds	r1, r2, r4
 8005f44:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005f48:	416b      	adcs	r3, r5
 8005f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	461a      	mov	r2, r3
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	1891      	adds	r1, r2, r2
 8005f5c:	6739      	str	r1, [r7, #112]	; 0x70
 8005f5e:	415b      	adcs	r3, r3
 8005f60:	677b      	str	r3, [r7, #116]	; 0x74
 8005f62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005f66:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005f6a:	f7fa fc59 	bl	8000820 <__aeabi_uldivmod>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4b92      	ldr	r3, [pc, #584]	; (80061bc <UART_SetConfig+0x3dc>)
 8005f74:	fba3 1302 	umull	r1, r3, r3, r2
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	2164      	movs	r1, #100	; 0x64
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	3332      	adds	r3, #50	; 0x32
 8005f86:	4a8d      	ldr	r2, [pc, #564]	; (80061bc <UART_SetConfig+0x3dc>)
 8005f88:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f94:	441e      	add	r6, r3
 8005f96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	1894      	adds	r4, r2, r2
 8005fa6:	66bc      	str	r4, [r7, #104]	; 0x68
 8005fa8:	415b      	adcs	r3, r3
 8005faa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005fb0:	1812      	adds	r2, r2, r0
 8005fb2:	eb41 0303 	adc.w	r3, r1, r3
 8005fb6:	f04f 0400 	mov.w	r4, #0
 8005fba:	f04f 0500 	mov.w	r5, #0
 8005fbe:	00dd      	lsls	r5, r3, #3
 8005fc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fc4:	00d4      	lsls	r4, r2, #3
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	462b      	mov	r3, r5
 8005fca:	1814      	adds	r4, r2, r0
 8005fcc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005fd0:	414b      	adcs	r3, r1
 8005fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	1891      	adds	r1, r2, r2
 8005fe4:	6639      	str	r1, [r7, #96]	; 0x60
 8005fe6:	415b      	adcs	r3, r3
 8005fe8:	667b      	str	r3, [r7, #100]	; 0x64
 8005fea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ff2:	f7fa fc15 	bl	8000820 <__aeabi_uldivmod>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4b70      	ldr	r3, [pc, #448]	; (80061bc <UART_SetConfig+0x3dc>)
 8005ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	2164      	movs	r1, #100	; 0x64
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	3332      	adds	r3, #50	; 0x32
 800600e:	4a6b      	ldr	r2, [pc, #428]	; (80061bc <UART_SetConfig+0x3dc>)
 8006010:	fba2 2303 	umull	r2, r3, r2, r3
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	f003 0207 	and.w	r2, r3, #7
 800601a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4432      	add	r2, r6
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	e26d      	b.n	8006502 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006026:	f7fe fe45 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 800602a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800602e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006032:	461c      	mov	r4, r3
 8006034:	f04f 0500 	mov.w	r5, #0
 8006038:	4622      	mov	r2, r4
 800603a:	462b      	mov	r3, r5
 800603c:	1891      	adds	r1, r2, r2
 800603e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006040:	415b      	adcs	r3, r3
 8006042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006044:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006048:	1912      	adds	r2, r2, r4
 800604a:	eb45 0303 	adc.w	r3, r5, r3
 800604e:	f04f 0000 	mov.w	r0, #0
 8006052:	f04f 0100 	mov.w	r1, #0
 8006056:	00d9      	lsls	r1, r3, #3
 8006058:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800605c:	00d0      	lsls	r0, r2, #3
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	1911      	adds	r1, r2, r4
 8006064:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8006068:	416b      	adcs	r3, r5
 800606a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	461a      	mov	r2, r3
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	1891      	adds	r1, r2, r2
 800607c:	6539      	str	r1, [r7, #80]	; 0x50
 800607e:	415b      	adcs	r3, r3
 8006080:	657b      	str	r3, [r7, #84]	; 0x54
 8006082:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006086:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800608a:	f7fa fbc9 	bl	8000820 <__aeabi_uldivmod>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4b4a      	ldr	r3, [pc, #296]	; (80061bc <UART_SetConfig+0x3dc>)
 8006094:	fba3 2302 	umull	r2, r3, r3, r2
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	011e      	lsls	r6, r3, #4
 800609c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060a0:	461c      	mov	r4, r3
 80060a2:	f04f 0500 	mov.w	r5, #0
 80060a6:	4622      	mov	r2, r4
 80060a8:	462b      	mov	r3, r5
 80060aa:	1891      	adds	r1, r2, r2
 80060ac:	64b9      	str	r1, [r7, #72]	; 0x48
 80060ae:	415b      	adcs	r3, r3
 80060b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060b6:	1912      	adds	r2, r2, r4
 80060b8:	eb45 0303 	adc.w	r3, r5, r3
 80060bc:	f04f 0000 	mov.w	r0, #0
 80060c0:	f04f 0100 	mov.w	r1, #0
 80060c4:	00d9      	lsls	r1, r3, #3
 80060c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060ca:	00d0      	lsls	r0, r2, #3
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	1911      	adds	r1, r2, r4
 80060d2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80060d6:	416b      	adcs	r3, r5
 80060d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	1891      	adds	r1, r2, r2
 80060ea:	6439      	str	r1, [r7, #64]	; 0x40
 80060ec:	415b      	adcs	r3, r3
 80060ee:	647b      	str	r3, [r7, #68]	; 0x44
 80060f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060f4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80060f8:	f7fa fb92 	bl	8000820 <__aeabi_uldivmod>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4b2e      	ldr	r3, [pc, #184]	; (80061bc <UART_SetConfig+0x3dc>)
 8006102:	fba3 1302 	umull	r1, r3, r3, r2
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	2164      	movs	r1, #100	; 0x64
 800610a:	fb01 f303 	mul.w	r3, r1, r3
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	3332      	adds	r3, #50	; 0x32
 8006114:	4a29      	ldr	r2, [pc, #164]	; (80061bc <UART_SetConfig+0x3dc>)
 8006116:	fba2 2303 	umull	r2, r3, r2, r3
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006122:	441e      	add	r6, r3
 8006124:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006128:	4618      	mov	r0, r3
 800612a:	f04f 0100 	mov.w	r1, #0
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	1894      	adds	r4, r2, r2
 8006134:	63bc      	str	r4, [r7, #56]	; 0x38
 8006136:	415b      	adcs	r3, r3
 8006138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800613a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800613e:	1812      	adds	r2, r2, r0
 8006140:	eb41 0303 	adc.w	r3, r1, r3
 8006144:	f04f 0400 	mov.w	r4, #0
 8006148:	f04f 0500 	mov.w	r5, #0
 800614c:	00dd      	lsls	r5, r3, #3
 800614e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006152:	00d4      	lsls	r4, r2, #3
 8006154:	4622      	mov	r2, r4
 8006156:	462b      	mov	r3, r5
 8006158:	1814      	adds	r4, r2, r0
 800615a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800615e:	414b      	adcs	r3, r1
 8006160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	461a      	mov	r2, r3
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	1891      	adds	r1, r2, r2
 8006172:	6339      	str	r1, [r7, #48]	; 0x30
 8006174:	415b      	adcs	r3, r3
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
 8006178:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800617c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006180:	f7fa fb4e 	bl	8000820 <__aeabi_uldivmod>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <UART_SetConfig+0x3dc>)
 800618a:	fba3 1302 	umull	r1, r3, r3, r2
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	2164      	movs	r1, #100	; 0x64
 8006192:	fb01 f303 	mul.w	r3, r1, r3
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	3332      	adds	r3, #50	; 0x32
 800619c:	4a07      	ldr	r2, [pc, #28]	; (80061bc <UART_SetConfig+0x3dc>)
 800619e:	fba2 2303 	umull	r2, r3, r2, r3
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	f003 0207 	and.w	r2, r3, #7
 80061a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4432      	add	r2, r6
 80061b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80061b2:	e1a6      	b.n	8006502 <UART_SetConfig+0x722>
 80061b4:	40011000 	.word	0x40011000
 80061b8:	40011400 	.word	0x40011400
 80061bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4bd1      	ldr	r3, [pc, #836]	; (800650c <UART_SetConfig+0x72c>)
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d006      	beq.n	80061da <UART_SetConfig+0x3fa>
 80061cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4bcf      	ldr	r3, [pc, #828]	; (8006510 <UART_SetConfig+0x730>)
 80061d4:	429a      	cmp	r2, r3
 80061d6:	f040 80ca 	bne.w	800636e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80061da:	f7fe fd7f 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
 80061de:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061e6:	461c      	mov	r4, r3
 80061e8:	f04f 0500 	mov.w	r5, #0
 80061ec:	4622      	mov	r2, r4
 80061ee:	462b      	mov	r3, r5
 80061f0:	1891      	adds	r1, r2, r2
 80061f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80061f4:	415b      	adcs	r3, r3
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061fc:	1912      	adds	r2, r2, r4
 80061fe:	eb45 0303 	adc.w	r3, r5, r3
 8006202:	f04f 0000 	mov.w	r0, #0
 8006206:	f04f 0100 	mov.w	r1, #0
 800620a:	00d9      	lsls	r1, r3, #3
 800620c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006210:	00d0      	lsls	r0, r2, #3
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	eb12 0a04 	adds.w	sl, r2, r4
 800621a:	eb43 0b05 	adc.w	fp, r3, r5
 800621e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4618      	mov	r0, r3
 8006226:	f04f 0100 	mov.w	r1, #0
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	f04f 0300 	mov.w	r3, #0
 8006232:	008b      	lsls	r3, r1, #2
 8006234:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006238:	0082      	lsls	r2, r0, #2
 800623a:	4650      	mov	r0, sl
 800623c:	4659      	mov	r1, fp
 800623e:	f7fa faef 	bl	8000820 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4bb3      	ldr	r3, [pc, #716]	; (8006514 <UART_SetConfig+0x734>)
 8006248:	fba3 2302 	umull	r2, r3, r3, r2
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	011e      	lsls	r6, r3, #4
 8006250:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006254:	4618      	mov	r0, r3
 8006256:	f04f 0100 	mov.w	r1, #0
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	1894      	adds	r4, r2, r2
 8006260:	623c      	str	r4, [r7, #32]
 8006262:	415b      	adcs	r3, r3
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
 8006266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800626a:	1812      	adds	r2, r2, r0
 800626c:	eb41 0303 	adc.w	r3, r1, r3
 8006270:	f04f 0400 	mov.w	r4, #0
 8006274:	f04f 0500 	mov.w	r5, #0
 8006278:	00dd      	lsls	r5, r3, #3
 800627a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800627e:	00d4      	lsls	r4, r2, #3
 8006280:	4622      	mov	r2, r4
 8006282:	462b      	mov	r3, r5
 8006284:	1814      	adds	r4, r2, r0
 8006286:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800628a:	414b      	adcs	r3, r1
 800628c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4618      	mov	r0, r3
 8006298:	f04f 0100 	mov.w	r1, #0
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	008b      	lsls	r3, r1, #2
 80062a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062aa:	0082      	lsls	r2, r0, #2
 80062ac:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80062b0:	f7fa fab6 	bl	8000820 <__aeabi_uldivmod>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4b96      	ldr	r3, [pc, #600]	; (8006514 <UART_SetConfig+0x734>)
 80062ba:	fba3 1302 	umull	r1, r3, r3, r2
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	2164      	movs	r1, #100	; 0x64
 80062c2:	fb01 f303 	mul.w	r3, r1, r3
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	3332      	adds	r3, #50	; 0x32
 80062cc:	4a91      	ldr	r2, [pc, #580]	; (8006514 <UART_SetConfig+0x734>)
 80062ce:	fba2 2303 	umull	r2, r3, r2, r3
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062d8:	441e      	add	r6, r3
 80062da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062de:	4618      	mov	r0, r3
 80062e0:	f04f 0100 	mov.w	r1, #0
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	1894      	adds	r4, r2, r2
 80062ea:	61bc      	str	r4, [r7, #24]
 80062ec:	415b      	adcs	r3, r3
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062f4:	1812      	adds	r2, r2, r0
 80062f6:	eb41 0303 	adc.w	r3, r1, r3
 80062fa:	f04f 0400 	mov.w	r4, #0
 80062fe:	f04f 0500 	mov.w	r5, #0
 8006302:	00dd      	lsls	r5, r3, #3
 8006304:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006308:	00d4      	lsls	r4, r2, #3
 800630a:	4622      	mov	r2, r4
 800630c:	462b      	mov	r3, r5
 800630e:	1814      	adds	r4, r2, r0
 8006310:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8006314:	414b      	adcs	r3, r1
 8006316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800631a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	4618      	mov	r0, r3
 8006322:	f04f 0100 	mov.w	r1, #0
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	008b      	lsls	r3, r1, #2
 8006330:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006334:	0082      	lsls	r2, r0, #2
 8006336:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800633a:	f7fa fa71 	bl	8000820 <__aeabi_uldivmod>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4b74      	ldr	r3, [pc, #464]	; (8006514 <UART_SetConfig+0x734>)
 8006344:	fba3 1302 	umull	r1, r3, r3, r2
 8006348:	095b      	lsrs	r3, r3, #5
 800634a:	2164      	movs	r1, #100	; 0x64
 800634c:	fb01 f303 	mul.w	r3, r1, r3
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	3332      	adds	r3, #50	; 0x32
 8006356:	4a6f      	ldr	r2, [pc, #444]	; (8006514 <UART_SetConfig+0x734>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	f003 020f 	and.w	r2, r3, #15
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4432      	add	r2, r6
 800636a:	609a      	str	r2, [r3, #8]
 800636c:	e0c9      	b.n	8006502 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800636e:	f7fe fca1 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 8006372:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006376:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800637a:	461c      	mov	r4, r3
 800637c:	f04f 0500 	mov.w	r5, #0
 8006380:	4622      	mov	r2, r4
 8006382:	462b      	mov	r3, r5
 8006384:	1891      	adds	r1, r2, r2
 8006386:	6139      	str	r1, [r7, #16]
 8006388:	415b      	adcs	r3, r3
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006390:	1912      	adds	r2, r2, r4
 8006392:	eb45 0303 	adc.w	r3, r5, r3
 8006396:	f04f 0000 	mov.w	r0, #0
 800639a:	f04f 0100 	mov.w	r1, #0
 800639e:	00d9      	lsls	r1, r3, #3
 80063a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063a4:	00d0      	lsls	r0, r2, #3
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	eb12 0804 	adds.w	r8, r2, r4
 80063ae:	eb43 0905 	adc.w	r9, r3, r5
 80063b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f04f 0100 	mov.w	r1, #0
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	f04f 0300 	mov.w	r3, #0
 80063c6:	008b      	lsls	r3, r1, #2
 80063c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063cc:	0082      	lsls	r2, r0, #2
 80063ce:	4640      	mov	r0, r8
 80063d0:	4649      	mov	r1, r9
 80063d2:	f7fa fa25 	bl	8000820 <__aeabi_uldivmod>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4b4e      	ldr	r3, [pc, #312]	; (8006514 <UART_SetConfig+0x734>)
 80063dc:	fba3 2302 	umull	r2, r3, r3, r2
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	011e      	lsls	r6, r3, #4
 80063e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063e8:	4618      	mov	r0, r3
 80063ea:	f04f 0100 	mov.w	r1, #0
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	1894      	adds	r4, r2, r2
 80063f4:	60bc      	str	r4, [r7, #8]
 80063f6:	415b      	adcs	r3, r3
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063fe:	1812      	adds	r2, r2, r0
 8006400:	eb41 0303 	adc.w	r3, r1, r3
 8006404:	f04f 0400 	mov.w	r4, #0
 8006408:	f04f 0500 	mov.w	r5, #0
 800640c:	00dd      	lsls	r5, r3, #3
 800640e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006412:	00d4      	lsls	r4, r2, #3
 8006414:	4622      	mov	r2, r4
 8006416:	462b      	mov	r3, r5
 8006418:	1814      	adds	r4, r2, r0
 800641a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800641e:	414b      	adcs	r3, r1
 8006420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	4618      	mov	r0, r3
 800642c:	f04f 0100 	mov.w	r1, #0
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	008b      	lsls	r3, r1, #2
 800643a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800643e:	0082      	lsls	r2, r0, #2
 8006440:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006444:	f7fa f9ec 	bl	8000820 <__aeabi_uldivmod>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4b31      	ldr	r3, [pc, #196]	; (8006514 <UART_SetConfig+0x734>)
 800644e:	fba3 1302 	umull	r1, r3, r3, r2
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	2164      	movs	r1, #100	; 0x64
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	3332      	adds	r3, #50	; 0x32
 8006460:	4a2c      	ldr	r2, [pc, #176]	; (8006514 <UART_SetConfig+0x734>)
 8006462:	fba2 2303 	umull	r2, r3, r2, r3
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800646c:	441e      	add	r6, r3
 800646e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006472:	4618      	mov	r0, r3
 8006474:	f04f 0100 	mov.w	r1, #0
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	1894      	adds	r4, r2, r2
 800647e:	603c      	str	r4, [r7, #0]
 8006480:	415b      	adcs	r3, r3
 8006482:	607b      	str	r3, [r7, #4]
 8006484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006488:	1812      	adds	r2, r2, r0
 800648a:	eb41 0303 	adc.w	r3, r1, r3
 800648e:	f04f 0400 	mov.w	r4, #0
 8006492:	f04f 0500 	mov.w	r5, #0
 8006496:	00dd      	lsls	r5, r3, #3
 8006498:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800649c:	00d4      	lsls	r4, r2, #3
 800649e:	4622      	mov	r2, r4
 80064a0:	462b      	mov	r3, r5
 80064a2:	1814      	adds	r4, r2, r0
 80064a4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80064a8:	414b      	adcs	r3, r1
 80064aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f04f 0100 	mov.w	r1, #0
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	008b      	lsls	r3, r1, #2
 80064c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064c8:	0082      	lsls	r2, r0, #2
 80064ca:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80064ce:	f7fa f9a7 	bl	8000820 <__aeabi_uldivmod>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <UART_SetConfig+0x734>)
 80064d8:	fba3 1302 	umull	r1, r3, r3, r2
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	2164      	movs	r1, #100	; 0x64
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	3332      	adds	r3, #50	; 0x32
 80064ea:	4a0a      	ldr	r2, [pc, #40]	; (8006514 <UART_SetConfig+0x734>)
 80064ec:	fba2 2303 	umull	r2, r3, r2, r3
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	f003 020f 	and.w	r2, r3, #15
 80064f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4432      	add	r2, r6
 80064fe:	609a      	str	r2, [r3, #8]
}
 8006500:	e7ff      	b.n	8006502 <UART_SetConfig+0x722>
 8006502:	bf00      	nop
 8006504:	37f4      	adds	r7, #244	; 0xf4
 8006506:	46bd      	mov	sp, r7
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	40011000 	.word	0x40011000
 8006510:	40011400 	.word	0x40011400
 8006514:	51eb851f 	.word	0x51eb851f

08006518 <HAL_TIM_OC_DelayElapsedCallback>:
#define LEAD_IN 4
#define LEAD_OUT 4

LedSingleWire *instance;

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	instance->StartNextDma();
 8006520:	4b04      	ldr	r3, [pc, #16]	; (8006534 <HAL_TIM_OC_DelayElapsedCallback+0x1c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f000 f9e5 	bl	80068f4 <_ZN13LedSingleWire12StartNextDmaEv>
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000194 	.word	0x20000194

08006538 <_ZN13DisplayDriverC1Ev>:
#define INC_DISPLAYDRIVER_H_

#include <stdint.h>
#include "configuration.h"

class DisplayDriver {
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	4a04      	ldr	r2, [pc, #16]	; (8006554 <_ZN13DisplayDriverC1Ev+0x1c>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	08008780 	.word	0x08008780

08006558 <_ZN13LedSingleWireC1Ev>:

LedSingleWire::LedSingleWire() {
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff ffe8 	bl	8006538 <_ZN13DisplayDriverC1Ev>
 8006568:	4a05      	ldr	r2, [pc, #20]	; (8006580 <_ZN13LedSingleWireC1Ev+0x28>)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	601a      	str	r2, [r3, #0]
	instance = this;
 800656e:	4a05      	ldr	r2, [pc, #20]	; (8006584 <_ZN13LedSingleWireC1Ev+0x2c>)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6013      	str	r3, [r2, #0]
}
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	08008768 	.word	0x08008768
 8006584:	20000194 	.word	0x20000194

08006588 <_ZN13LedSingleWire4OpenEP13Configuration>:

void LedSingleWire::Open(Configuration *configuration) {
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b089      	sub	sp, #36	; 0x24
 800658c:	af04      	add	r7, sp, #16
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
	this->format = (LedSingleWire::Format) configuration->strandFormat;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	78da      	ldrb	r2, [r3, #3]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	711a      	strb	r2, [r3, #4]
	this->strandCount = configuration->elementCount;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	889b      	ldrh	r3, [r3, #4]
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	719a      	strb	r2, [r3, #6]

	switch (this->format) {
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	791b      	ldrb	r3, [r3, #4]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d803      	bhi.n	80065b4 <_ZN13LedSingleWire4OpenEP13Configuration+0x2c>
	case RGBW:
	case GRBW:
		this->bytesPerPixel = 4;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2204      	movs	r2, #4
 80065b0:	715a      	strb	r2, [r3, #5]
		break;
 80065b2:	bf00      	nop
	}

	//Each time division will be ~ 0.3uS.  0 looks like 0.3us/0.9us.  1 looks like 0.6us/0.6us so
	//each bit requires 4 time divisions
	this->pixelCount = configuration->elementWidth;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	88da      	ldrh	r2, [r3, #6]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	811a      	strh	r2, [r3, #8]
	this->bufferLength = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixelCount)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	795b      	ldrb	r3, [r3, #5]
			+ LEAD_IN + LEAD_OUT;
 80065c0:	b29a      	uxth	r2, r3
	this->bufferLength = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixelCount)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	891b      	ldrh	r3, [r3, #8]
			+ LEAD_IN + LEAD_OUT;
 80065c6:	fb12 f303 	smulbb	r3, r2, r3
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	015b      	lsls	r3, r3, #5
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3308      	adds	r3, #8
 80065d2:	b29a      	uxth	r2, r3
	this->bufferLength = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixelCount)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	815a      	strh	r2, [r3, #10]

	buffer = new uint16_t[this->bufferLength];
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	895b      	ldrh	r3, [r3, #10]
 80065dc:	4a3a      	ldr	r2, [pc, #232]	; (80066c8 <_ZN13LedSingleWire4OpenEP13Configuration+0x140>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d801      	bhi.n	80065e6 <_ZN13LedSingleWire4OpenEP13Configuration+0x5e>
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	e001      	b.n	80065ea <_ZN13LedSingleWire4OpenEP13Configuration+0x62>
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ea:	4618      	mov	r0, r3
 80065ec:	f001 fa9f 	bl	8007b2e <_Znaj>
 80065f0:	4603      	mov	r3, r0
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60da      	str	r2, [r3, #12]

	//Blanks the string

	for (uint16_t offset = 0; offset < bufferLength; offset++) {
 80065f8:	2300      	movs	r3, #0
 80065fa:	81fb      	strh	r3, [r7, #14]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	895b      	ldrh	r3, [r3, #10]
 8006600:	89fa      	ldrh	r2, [r7, #14]
 8006602:	429a      	cmp	r2, r3
 8006604:	d219      	bcs.n	800663a <_ZN13LedSingleWire4OpenEP13Configuration+0xb2>
		if (offset < LEAD_IN || offset > LEAD_OUT) {
 8006606:	89fb      	ldrh	r3, [r7, #14]
 8006608:	2b03      	cmp	r3, #3
 800660a:	d902      	bls.n	8006612 <_ZN13LedSingleWire4OpenEP13Configuration+0x8a>
 800660c:	89fb      	ldrh	r3, [r7, #14]
 800660e:	2b04      	cmp	r3, #4
 8006610:	d907      	bls.n	8006622 <_ZN13LedSingleWire4OpenEP13Configuration+0x9a>
			buffer[offset] = 0x0000;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	89fb      	ldrh	r3, [r7, #14]
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	4413      	add	r3, r2
 800661c:	2200      	movs	r2, #0
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e007      	b.n	8006632 <_ZN13LedSingleWire4OpenEP13Configuration+0xaa>
		} else {
			buffer[offset] = 0xFFFF;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	89fb      	ldrh	r3, [r7, #14]
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	4413      	add	r3, r2
 800662c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006630:	801a      	strh	r2, [r3, #0]
	for (uint16_t offset = 0; offset < bufferLength; offset++) {
 8006632:	89fb      	ldrh	r3, [r7, #14]
 8006634:	3301      	adds	r3, #1
 8006636:	81fb      	strh	r3, [r7, #14]
 8006638:	e7e0      	b.n	80065fc <_ZN13LedSingleWire4OpenEP13Configuration+0x74>
		}
	}

	for (uint8_t strand = 0; strand < strandCount; strand++) {
 800663a:	2300      	movs	r3, #0
 800663c:	737b      	strb	r3, [r7, #13]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	799b      	ldrb	r3, [r3, #6]
 8006642:	7b7a      	ldrb	r2, [r7, #13]
 8006644:	429a      	cmp	r2, r3
 8006646:	d21e      	bcs.n	8006686 <_ZN13LedSingleWire4OpenEP13Configuration+0xfe>
		for (uint16_t pixel = 0; pixel < pixelCount; pixel++) {
 8006648:	2300      	movs	r3, #0
 800664a:	817b      	strh	r3, [r7, #10]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	891b      	ldrh	r3, [r3, #8]
 8006650:	897a      	ldrh	r2, [r7, #10]
 8006652:	429a      	cmp	r2, r3
 8006654:	d213      	bcs.n	800667e <_ZN13LedSingleWire4OpenEP13Configuration+0xf6>
			SetPixel(pixel, strand, 0, 0, 0, 0);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3308      	adds	r3, #8
 800665c:	681c      	ldr	r4, [r3, #0]
 800665e:	7b7b      	ldrb	r3, [r7, #13]
 8006660:	b29a      	uxth	r2, r3
 8006662:	8979      	ldrh	r1, [r7, #10]
 8006664:	2300      	movs	r3, #0
 8006666:	9302      	str	r3, [sp, #8]
 8006668:	2300      	movs	r3, #0
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	2300      	movs	r3, #0
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	2300      	movs	r3, #0
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	47a0      	blx	r4
		for (uint16_t pixel = 0; pixel < pixelCount; pixel++) {
 8006676:	897b      	ldrh	r3, [r7, #10]
 8006678:	3301      	adds	r3, #1
 800667a:	817b      	strh	r3, [r7, #10]
 800667c:	e7e6      	b.n	800664c <_ZN13LedSingleWire4OpenEP13Configuration+0xc4>
	for (uint8_t strand = 0; strand < strandCount; strand++) {
 800667e:	7b7b      	ldrb	r3, [r7, #13]
 8006680:	3301      	adds	r3, #1
 8006682:	737b      	strb	r3, [r7, #13]
 8006684:	e7db      	b.n	800663e <_ZN13LedSingleWire4OpenEP13Configuration+0xb6>
		}
	}

	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 8006686:	4b11      	ldr	r3, [pc, #68]	; (80066cc <_ZN13LedSingleWire4OpenEP13Configuration+0x144>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <_ZN13LedSingleWire4OpenEP13Configuration+0x144>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006694:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006696:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <_ZN13LedSingleWire4OpenEP13Configuration+0x144>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2201      	movs	r2, #1
 800669c:	2100      	movs	r1, #0
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff f974 	bl	800598c <TIM_CCxChannelCmd>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80066a4:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <_ZN13LedSingleWire4OpenEP13Configuration+0x148>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <_ZN13LedSingleWire4OpenEP13Configuration+0x148>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0202 	orr.w	r2, r2, #2
 80066b2:	60da      	str	r2, [r3, #12]

//	htim3.OC_DelayElapsedCallback = ResetDelayElapsed;

	HAL_TIM_Base_Start_IT(&htim1);
 80066b4:	4805      	ldr	r0, [pc, #20]	; (80066cc <_ZN13LedSingleWire4OpenEP13Configuration+0x144>)
 80066b6:	f7fe fca7 	bl	8005008 <HAL_TIM_Base_Start_IT>

	SendStands();
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f904 	bl	80068c8 <_ZN13LedSingleWire10SendStandsEv>
}
 80066c0:	bf00      	nop
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd90      	pop	{r4, r7, pc}
 80066c8:	3ffffffc 	.word	0x3ffffffc
 80066cc:	20001f4c 	.word	0x20001f4c
 80066d0:	20001ecc 	.word	0x20001ecc

080066d4 <_ZN13LedSingleWire5CloseEv>:

void LedSingleWire::Close() {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	delete buffer;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <_ZN13LedSingleWire5CloseEv+0x18>
 80066e4:	2102      	movs	r1, #2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 fa0e 	bl	8007b08 <_ZdlPvj>
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <_ZN13LedSingleWire8SetPixelEtthhhh>:

void LedSingleWire::SetPixel(uint16_t pixel, uint16_t strand, uint8_t r,
		uint8_t g, uint8_t b, uint8_t w) {
 80066f4:	b480      	push	{r7}
 80066f6:	b089      	sub	sp, #36	; 0x24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	4608      	mov	r0, r1
 80066fe:	4611      	mov	r1, r2
 8006700:	461a      	mov	r2, r3
 8006702:	4603      	mov	r3, r0
 8006704:	817b      	strh	r3, [r7, #10]
 8006706:	460b      	mov	r3, r1
 8006708:	813b      	strh	r3, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	71fb      	strb	r3, [r7, #7]
	if (pixel >= pixelCount || strand >= strandCount) {
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	891b      	ldrh	r3, [r3, #8]
 8006712:	897a      	ldrh	r2, [r7, #10]
 8006714:	429a      	cmp	r2, r3
 8006716:	f080 80c4 	bcs.w	80068a2 <_ZN13LedSingleWire8SetPixelEtthhhh+0x1ae>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	799b      	ldrb	r3, [r3, #6]
 800671e:	b29b      	uxth	r3, r3
 8006720:	893a      	ldrh	r2, [r7, #8]
 8006722:	429a      	cmp	r2, r3
 8006724:	f080 80bd 	bcs.w	80068a2 <_ZN13LedSingleWire8SetPixelEtthhhh+0x1ae>
		return;
	}

	uint16_t strandMask = 0x00;
 8006728:	2300      	movs	r3, #0
 800672a:	82bb      	strh	r3, [r7, #20]

	uint16_t offset = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixel) + LEAD_IN;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	795b      	ldrb	r3, [r3, #5]
 8006730:	b29b      	uxth	r3, r3
 8006732:	897a      	ldrh	r2, [r7, #10]
 8006734:	fb12 f303 	smulbb	r3, r2, r3
 8006738:	b29b      	uxth	r3, r3
 800673a:	015b      	lsls	r3, r3, #5
 800673c:	b29b      	uxth	r3, r3
 800673e:	3304      	adds	r3, #4
 8006740:	83fb      	strh	r3, [r7, #30]

	switch (strand) {
 8006742:	893b      	ldrh	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	f040 80ae 	bne.w	80068a6 <_ZN13LedSingleWire8SetPixelEtthhhh+0x1b2>
	case 0:
		//Debugging - Mirror data onto LED 1
		strandMask = LED_0_Pin ;//| LED_1_Pin;
 800674a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800674e:	82bb      	strh	r3, [r7, #20]
		break;
 8006750:	bf00      	nop
	default:
		//Strand is not configured
		return;
	}

	uint32_t data = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	61bb      	str	r3, [r7, #24]

	switch (format) {
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	791b      	ldrb	r3, [r3, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <_ZN13LedSingleWire8SetPixelEtthhhh+0x70>
 800675e:	2b01      	cmp	r3, #1
 8006760:	d00f      	beq.n	8006782 <_ZN13LedSingleWire8SetPixelEtthhhh+0x8e>
 8006762:	e01d      	b.n	80067a0 <_ZN13LedSingleWire8SetPixelEtthhhh+0xac>
	case RGBW:
		data = r << 24 | g << 16 | b << 8 | w;
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	061a      	lsls	r2, r3, #24
 8006768:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800676c:	041b      	lsls	r3, r3, #16
 800676e:	431a      	orrs	r2, r3
 8006770:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	431a      	orrs	r2, r3
 8006778:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800677c:	4313      	orrs	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
		break;
 8006780:	e00e      	b.n	80067a0 <_ZN13LedSingleWire8SetPixelEtthhhh+0xac>
	case GRBW:
		data = g << 24 | r << 16 | b << 8 | w;
 8006782:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006786:	061a      	lsls	r2, r3, #24
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	041b      	lsls	r3, r3, #16
 800678c:	431a      	orrs	r2, r3
 800678e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	431a      	orrs	r2, r3
 8006796:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800679a:	4313      	orrs	r3, r2
 800679c:	61bb      	str	r3, [r7, #24]
		break;
 800679e:	bf00      	nop
	}

	for (int8_t bit = 31; bit >= 0; bit--) {
 80067a0:	231f      	movs	r3, #31
 80067a2:	75fb      	strb	r3, [r7, #23]
 80067a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	db7d      	blt.n	80068a8 <_ZN13LedSingleWire8SetPixelEtthhhh+0x1b4>
		buffer[offset] = buffer[offset] | strandMask;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	8bfb      	ldrh	r3, [r7, #30]
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	4413      	add	r3, r2
 80067b6:	8819      	ldrh	r1, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	8bfb      	ldrh	r3, [r7, #30]
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	4413      	add	r3, r2
 80067c2:	8aba      	ldrh	r2, [r7, #20]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	b292      	uxth	r2, r2
 80067c8:	801a      	strh	r2, [r3, #0]
		offset++;
 80067ca:	8bfb      	ldrh	r3, [r7, #30]
 80067cc:	3301      	adds	r3, #1
 80067ce:	83fb      	strh	r3, [r7, #30]
		if (data & (0x01 << bit)) {
 80067d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067d4:	2201      	movs	r2, #1
 80067d6:	fa02 f303 	lsl.w	r3, r2, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d012      	beq.n	800680a <_ZN13LedSingleWire8SetPixelEtthhhh+0x116>
			buffer[offset] = buffer[offset] | strandMask;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	8bfb      	ldrh	r3, [r7, #30]
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	4413      	add	r3, r2
 80067ee:	8819      	ldrh	r1, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	8bfb      	ldrh	r3, [r7, #30]
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	4413      	add	r3, r2
 80067fa:	8aba      	ldrh	r2, [r7, #20]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	b292      	uxth	r2, r2
 8006800:	801a      	strh	r2, [r3, #0]
			offset++;
 8006802:	8bfb      	ldrh	r3, [r7, #30]
 8006804:	3301      	adds	r3, #1
 8006806:	83fb      	strh	r3, [r7, #30]
 8006808:	e016      	b.n	8006838 <_ZN13LedSingleWire8SetPixelEtthhhh+0x144>
		} else {
			buffer[offset] = buffer[offset] & ~strandMask;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	8bfb      	ldrh	r3, [r7, #30]
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	4413      	add	r3, r2
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b21a      	sxth	r2, r3
 8006818:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800681c:	43db      	mvns	r3, r3
 800681e:	b21b      	sxth	r3, r3
 8006820:	4013      	ands	r3, r2
 8006822:	b219      	sxth	r1, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	8bfb      	ldrh	r3, [r7, #30]
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	4413      	add	r3, r2
 800682e:	b28a      	uxth	r2, r1
 8006830:	801a      	strh	r2, [r3, #0]
			offset++;
 8006832:	8bfb      	ldrh	r3, [r7, #30]
 8006834:	3301      	adds	r3, #1
 8006836:	83fb      	strh	r3, [r7, #30]
		}
		buffer[offset] = buffer[offset] & ~strandMask;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	8bfb      	ldrh	r3, [r7, #30]
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b21a      	sxth	r2, r3
 8006846:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800684a:	43db      	mvns	r3, r3
 800684c:	b21b      	sxth	r3, r3
 800684e:	4013      	ands	r3, r2
 8006850:	b219      	sxth	r1, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	8bfb      	ldrh	r3, [r7, #30]
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	4413      	add	r3, r2
 800685c:	b28a      	uxth	r2, r1
 800685e:	801a      	strh	r2, [r3, #0]
		offset++;
 8006860:	8bfb      	ldrh	r3, [r7, #30]
 8006862:	3301      	adds	r3, #1
 8006864:	83fb      	strh	r3, [r7, #30]
		buffer[offset] = buffer[offset] & ~strandMask;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	8bfb      	ldrh	r3, [r7, #30]
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	4413      	add	r3, r2
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b21a      	sxth	r2, r3
 8006874:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006878:	43db      	mvns	r3, r3
 800687a:	b21b      	sxth	r3, r3
 800687c:	4013      	ands	r3, r2
 800687e:	b219      	sxth	r1, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	8bfb      	ldrh	r3, [r7, #30]
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	4413      	add	r3, r2
 800688a:	b28a      	uxth	r2, r1
 800688c:	801a      	strh	r2, [r3, #0]
		offset++;
 800688e:	8bfb      	ldrh	r3, [r7, #30]
 8006890:	3301      	adds	r3, #1
 8006892:	83fb      	strh	r3, [r7, #30]
	for (int8_t bit = 31; bit >= 0; bit--) {
 8006894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b2db      	uxtb	r3, r3
 800689e:	75fb      	strb	r3, [r7, #23]
 80068a0:	e780      	b.n	80067a4 <_ZN13LedSingleWire8SetPixelEtthhhh+0xb0>
		return;
 80068a2:	bf00      	nop
 80068a4:	e000      	b.n	80068a8 <_ZN13LedSingleWire8SetPixelEtthhhh+0x1b4>
		return;
 80068a6:	bf00      	nop
	}
}
 80068a8:	3724      	adds	r7, #36	; 0x24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <_ZN13LedSingleWire10SwapBufferEv>:

void LedSingleWire::SwapBuffer() {
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
	SendStands();
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f804 	bl	80068c8 <_ZN13LedSingleWire10SendStandsEv>
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <_ZN13LedSingleWire10SendStandsEv>:

void LedSingleWire::SendStands() {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
	//Reset signal
	LED_CLK_GPIO_Port->ODR = 0x00;
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <_ZN13LedSingleWire10SendStandsEv+0x24>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	615a      	str	r2, [r3, #20]

	htim3.Instance->EGR = TIM_EGR_UG;
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <_ZN13LedSingleWire10SendStandsEv+0x28>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2201      	movs	r2, #1
 80068dc:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(&htim3);
 80068de:	4804      	ldr	r0, [pc, #16]	; (80068f0 <_ZN13LedSingleWire10SendStandsEv+0x28>)
 80068e0:	f7fe fb92 	bl	8005008 <HAL_TIM_Base_Start_IT>
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40020800 	.word	0x40020800
 80068f0:	20001ecc 	.word	0x20001ecc

080068f4 <_ZN13LedSingleWire12StartNextDmaEv>:

void LedSingleWire::StartNextDma() {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
	//14 is 300nS
	htim1.Instance->ARR = 30;	//17;//18
 80068fc:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <_ZN13LedSingleWire12StartNextDmaEv+0x34>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	221e      	movs	r2, #30
 8006902:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->EGR = TIM_EGR_UG;
 8006904:	4b08      	ldr	r3, [pc, #32]	; (8006928 <_ZN13LedSingleWire12StartNextDmaEv+0x34>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2201      	movs	r2, #1
 800690a:	615a      	str	r2, [r3, #20]

	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) buffer,
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	4619      	mov	r1, r3
			(uint32_t) &(LED_CLK_GPIO_Port->ODR), bufferLength);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	895b      	ldrh	r3, [r3, #10]
	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) buffer,
 8006916:	4a05      	ldr	r2, [pc, #20]	; (800692c <_ZN13LedSingleWire12StartNextDmaEv+0x38>)
 8006918:	4805      	ldr	r0, [pc, #20]	; (8006930 <_ZN13LedSingleWire12StartNextDmaEv+0x3c>)
 800691a:	f7fb ff7f 	bl	800281c <HAL_DMA_Start_IT>
}
 800691e:	bf00      	nop
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20001f4c 	.word	0x20001f4c
 800692c:	40020814 	.word	0x40020814
 8006930:	20001e6c 	.word	0x20001e6c

08006934 <_Z12DMA_CompleteP19__DMA_HandleTypeDef>:
//		instance->handleNeeded = true;
//		instance->Handle();
//	}
//}

void DMA_Complete(DMA_HandleTypeDef *hdma) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
	instance->Handle();
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x1c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f000 fb5f 	bl	8007004 <_ZN12MatrixDriver6HandleEv>
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000198 	.word	0x20000198

08006954 <_Z9DMA_AbortP19__DMA_HandleTypeDef>:

void DMA_Abort(DMA_HandleTypeDef *hdma) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	instance->Handle();
 800695c:	4b04      	ldr	r3, [pc, #16]	; (8006970 <_Z9DMA_AbortP19__DMA_HandleTypeDef+0x1c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fb4f 	bl	8007004 <_ZN12MatrixDriver6HandleEv>
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000198 	.word	0x20000198

08006974 <_Z9DMA_ErrorP19__DMA_HandleTypeDef>:

void DMA_Error(DMA_HandleTypeDef *hdma) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_LOGGING
	sprintf(buffer, "DE - %d %d\n", hdma_tim1_ch1.State,
			hdma_tim1_ch1.ErrorCode);
#endif

	HAL_UART_Transmit(&huart1, (uint8_t*) stringBuffer, strlen(stringBuffer), 10);
 800697c:	4806      	ldr	r0, [pc, #24]	; (8006998 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x24>)
 800697e:	f7f9 fef7 	bl	8000770 <strlen>
 8006982:	4603      	mov	r3, r0
 8006984:	b29a      	uxth	r2, r3
 8006986:	230a      	movs	r3, #10
 8006988:	4903      	ldr	r1, [pc, #12]	; (8006998 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x24>)
 800698a:	4804      	ldr	r0, [pc, #16]	; (800699c <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x28>)
 800698c:	f7ff f945 	bl	8005c1a <HAL_UART_Transmit>
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	200001fc 	.word	0x200001fc
 800699c:	20001f0c 	.word	0x20001f0c

080069a0 <_ZN12MatrixDriver12BufferOffsetEtth>:
// -- Row - y % (height / 2) - Top and bottom half of the panel are in the same output cycle
// ---- Pixel - 0 and 1 data lines, select lines for previously sent row (to keep it displaying while new data is clocked in to the shift registers)
// ------ Offset - Set data
// ------ Offset + 1 - Clock data
// ---- OE & Latch
uint16_t MatrixDriver::BufferOffset(uint16_t x, uint16_t y, uint8_t plane) {
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	4608      	mov	r0, r1
 80069aa:	4611      	mov	r1, r2
 80069ac:	461a      	mov	r2, r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	817b      	strh	r3, [r7, #10]
 80069b2:	460b      	mov	r3, r1
 80069b4:	813b      	strh	r3, [r7, #8]
 80069b6:	4613      	mov	r3, r2
 80069b8:	71fb      	strb	r3, [r7, #7]
	uint16_t rowEntry = y % (height / 2);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	88db      	ldrh	r3, [r3, #6]
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	893b      	ldrh	r3, [r7, #8]
 80069c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80069c8:	fb02 f201 	mul.w	r2, r2, r1
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	82fb      	strh	r3, [r7, #22]
	uint16_t rowOffset = rowEntry
			* ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	889b      	ldrh	r3, [r3, #4]
	uint16_t rowOffset = rowEntry
 80069d4:	3302      	adds	r3, #2
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	8afa      	ldrh	r2, [r7, #22]
 80069da:	fb12 f303 	smulbb	r3, r2, r3
 80069de:	b29b      	uxth	r3, r3
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	82bb      	strh	r3, [r7, #20]
	uint16_t offsetInRow = ((width - 1) - x) * CYCLES_PER_PIXEL;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	889b      	ldrh	r3, [r3, #4]
 80069e8:	1e5a      	subs	r2, r3, #1
 80069ea:	897b      	ldrh	r3, [r7, #10]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	827b      	strh	r3, [r7, #18]

	return (plane * planeSize) + rowOffset + offsetInRow;
 80069f4:	79fb      	ldrb	r3, [r7, #7]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	899b      	ldrh	r3, [r3, #12]
 80069fc:	fb12 f303 	smulbb	r3, r2, r3
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	8abb      	ldrh	r3, [r7, #20]
 8006a04:	4413      	add	r3, r2
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	8a7b      	ldrh	r3, [r7, #18]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	b29b      	uxth	r3, r3
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <_ZN12MatrixDriverC1Ev>:

#define MIN(a,b) (((a)<(b))?(a):(b))

MatrixDriver::MatrixDriver() {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff fd86 	bl	8006538 <_ZN13DisplayDriverC1Ev>
 8006a2c:	4a06      	ldr	r2, [pc, #24]	; (8006a48 <_ZN12MatrixDriverC1Ev+0x2c>)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	72da      	strb	r2, [r3, #11]
	instance = this;
 8006a38:	4a04      	ldr	r2, [pc, #16]	; (8006a4c <_ZN12MatrixDriverC1Ev+0x30>)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6013      	str	r3, [r2, #0]
}
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	0800879c 	.word	0x0800879c
 8006a4c:	20000198 	.word	0x20000198

08006a50 <_ZN12MatrixDriver4OpenEP13Configuration>:

void MatrixDriver::Open(Configuration *configuration) {
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b08b      	sub	sp, #44	; 0x2c
 8006a54:	af04      	add	r7, sp, #16
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
	this->width = configuration->elementWidth * configuration->elementCount;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	88da      	ldrh	r2, [r3, #6]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	889b      	ldrh	r3, [r3, #4]
 8006a62:	fb12 f303 	smulbb	r3, r2, r3
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	809a      	strh	r2, [r3, #4]
	this->height = configuration->elementHeight;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	891a      	ldrh	r2, [r3, #8]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	80da      	strh	r2, [r3, #6]
	this->scanType = (MatrixDriver::ScanType) configuration->matrixFormat;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	785a      	ldrb	r2, [r3, #1]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	725a      	strb	r2, [r3, #9]
	this->planes = PLANES;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2204      	movs	r2, #4
 8006a80:	721a      	strb	r2, [r3, #8]

	this->planeSize = ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	889b      	ldrh	r3, [r3, #4]
 8006a86:	3302      	adds	r3, #2
 8006a88:	b29a      	uxth	r2, r3
			* (height / 2);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	88db      	ldrh	r3, [r3, #6]
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	b29b      	uxth	r3, r3
	this->planeSize = ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES)
 8006a92:	fb12 f303 	smulbb	r3, r2, r3
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	819a      	strh	r2, [r3, #12]
	this->bufferSize = planeSize * planes;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	899a      	ldrh	r2, [r3, #12]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	7a1b      	ldrb	r3, [r3, #8]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	fb12 f303 	smulbb	r3, r2, r3
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	81da      	strh	r2, [r3, #14]

	this->sendBufferA = true;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	729a      	strb	r2, [r3, #10]

	this->bufferA = new uint16_t[bufferSize];
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	89db      	ldrh	r3, [r3, #14]
 8006abe:	4a8f      	ldr	r2, [pc, #572]	; (8006cfc <_ZN12MatrixDriver4OpenEP13Configuration+0x2ac>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d801      	bhi.n	8006ac8 <_ZN12MatrixDriver4OpenEP13Configuration+0x78>
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	e001      	b.n	8006acc <_ZN12MatrixDriver4OpenEP13Configuration+0x7c>
 8006ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 f82e 	bl	8007b2e <_Znaj>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	611a      	str	r2, [r3, #16]
	this->bufferB = new uint16_t[bufferSize];
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	89db      	ldrh	r3, [r3, #14]
 8006ade:	4a87      	ldr	r2, [pc, #540]	; (8006cfc <_ZN12MatrixDriver4OpenEP13Configuration+0x2ac>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d801      	bhi.n	8006ae8 <_ZN12MatrixDriver4OpenEP13Configuration+0x98>
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	e001      	b.n	8006aec <_ZN12MatrixDriver4OpenEP13Configuration+0x9c>
 8006ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 f81e 	bl	8007b2e <_Znaj>
 8006af2:	4603      	mov	r3, r0
 8006af4:	461a      	mov	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	615a      	str	r2, [r3, #20]

	for (uint8_t y = 0; y < height / 2; y++) {
 8006afa:	2300      	movs	r3, #0
 8006afc:	75fb      	strb	r3, [r7, #23]
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	88d2      	ldrh	r2, [r2, #6]
 8006b04:	0852      	lsrs	r2, r2, #1
 8006b06:	b292      	uxth	r2, r2
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	f280 80f9 	bge.w	8006d00 <_ZN12MatrixDriver4OpenEP13Configuration+0x2b0>

		uint8_t previousRow = y == 0 ? (height / 2) - 1 : y - 1;
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d107      	bne.n	8006b24 <_ZN12MatrixDriver4OpenEP13Configuration+0xd4>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	88db      	ldrh	r3, [r3, #6]
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	e002      	b.n	8006b2a <_ZN12MatrixDriver4OpenEP13Configuration+0xda>
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	753b      	strb	r3, [r7, #20]

		uint16_t rowSelects =
		SET_IF(previousRow & 0x01,
 8006b2c:	7d3b      	ldrb	r3, [r7, #20]
 8006b2e:	015b      	lsls	r3, r3, #5
 8006b30:	b21b      	sxth	r3, r3
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	b21a      	sxth	r2, r3
				Matrix_A_Pin) |SET_IF(previousRow & 0x02, Matrix_B_Pin)
 8006b38:	7d3b      	ldrb	r3, [r7, #20]
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	b21b      	sxth	r3, r3
 8006b3e:	f003 0310 	and.w	r3, r3, #16
 8006b42:	b21b      	sxth	r3, r3
 8006b44:	4313      	orrs	r3, r2
 8006b46:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x04, Matrix_C_Pin)
 8006b48:	7d3b      	ldrb	r3, [r7, #20]
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	b21b      	sxth	r3, r3
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	b21b      	sxth	r3, r3
 8006b54:	4313      	orrs	r3, r2
 8006b56:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x08, Matrix_D_Pin)
 8006b58:	7d3b      	ldrb	r3, [r7, #20]
 8006b5a:	01db      	lsls	r3, r3, #7
 8006b5c:	b21b      	sxth	r3, r3
 8006b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b62:	b21b      	sxth	r3, r3
 8006b64:	4313      	orrs	r3, r2
 8006b66:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x10, Matrix_E_Pin);
 8006b68:	7d3b      	ldrb	r3, [r7, #20]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	b21b      	sxth	r3, r3
 8006b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b72:	b21b      	sxth	r3, r3
 8006b74:	4313      	orrs	r3, r2
 8006b76:	b21b      	sxth	r3, r3
		uint16_t rowSelects =
 8006b78:	827b      	strh	r3, [r7, #18]

		for (uint8_t plane = 0; plane < planes; plane++) {
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	75bb      	strb	r3, [r7, #22]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	7a1b      	ldrb	r3, [r3, #8]
 8006b82:	7dba      	ldrb	r2, [r7, #22]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	f080 80b5 	bcs.w	8006cf4 <_ZN12MatrixDriver4OpenEP13Configuration+0x2a4>
			for (uint8_t x = 0; x < width; x++) {
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	757b      	strb	r3, [r7, #21]
 8006b8e:	7d7b      	ldrb	r3, [r7, #21]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	8892      	ldrh	r2, [r2, #4]
 8006b94:	4293      	cmp	r3, r2
 8006b96:	da31      	bge.n	8006bfc <_ZN12MatrixDriver4OpenEP13Configuration+0x1ac>

				uint16_t offset = BufferOffset(x, y, plane);
 8006b98:	7d7b      	ldrb	r3, [r7, #21]
 8006b9a:	b299      	uxth	r1, r3
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	7dbb      	ldrb	r3, [r7, #22]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff fefc 	bl	80069a0 <_ZN12MatrixDriver12BufferOffsetEtth>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	823b      	strh	r3, [r7, #16]

				bufferA[offset] = rowSelects;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	8a3b      	ldrh	r3, [r7, #16]
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	8a7a      	ldrh	r2, [r7, #18]
 8006bb8:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = rowSelects;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	8a3b      	ldrh	r3, [r7, #16]
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	4413      	add	r3, r2
 8006bc4:	8a7a      	ldrh	r2, [r7, #18]
 8006bc6:	801a      	strh	r2, [r3, #0]
				bufferA[offset + 1] = rowSelects | Matrix_CLK_Pin;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	8a3b      	ldrh	r3, [r7, #16]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	8a7a      	ldrh	r2, [r7, #18]
 8006bd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bda:	b292      	uxth	r2, r2
 8006bdc:	801a      	strh	r2, [r3, #0]
				bufferB[offset + 1] = rowSelects | Matrix_CLK_Pin;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695a      	ldr	r2, [r3, #20]
 8006be2:	8a3b      	ldrh	r3, [r7, #16]
 8006be4:	3301      	adds	r3, #1
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	4413      	add	r3, r2
 8006bea:	8a7a      	ldrh	r2, [r7, #18]
 8006bec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bf0:	b292      	uxth	r2, r2
 8006bf2:	801a      	strh	r2, [r3, #0]
			for (uint8_t x = 0; x < width; x++) {
 8006bf4:	7d7b      	ldrb	r3, [r7, #21]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	757b      	strb	r3, [r7, #21]
 8006bfa:	e7c8      	b.n	8006b8e <_ZN12MatrixDriver4OpenEP13Configuration+0x13e>
			}

			//Setup the final bytes for the row, staring with the output after the last pixel on the current row & plane
			//Disable outputs
			uint16_t offset = BufferOffset(0, y,
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	7dbb      	ldrb	r3, [r7, #22]
 8006c02:	2100      	movs	r1, #0
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff fecb 	bl	80069a0 <_ZN12MatrixDriver12BufferOffsetEtth>
 8006c0a:	4603      	mov	r3, r0
					plane) + CYCLES_PER_PIXEL;
 8006c0c:	3302      	adds	r3, #2
 8006c0e:	81fb      	strh	r3, [r7, #14]

			bufferA[offset] = bufferB[offset] = Matrix_OE_Pin | rowSelects;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	695a      	ldr	r2, [r3, #20]
 8006c14:	89fb      	ldrh	r3, [r7, #14]
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	4413      	add	r3, r2
 8006c1a:	8a7a      	ldrh	r2, [r7, #18]
 8006c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c20:	b292      	uxth	r2, r2
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6911      	ldr	r1, [r2, #16]
 8006c28:	89fa      	ldrh	r2, [r7, #14]
 8006c2a:	0052      	lsls	r2, r2, #1
 8006c2c:	440a      	add	r2, r1
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	8013      	strh	r3, [r2, #0]
			offset++;
 8006c32:	89fb      	ldrh	r3, [r7, #14]
 8006c34:	3301      	adds	r3, #1
 8006c36:	81fb      	strh	r3, [r7, #14]

			uint16_t currentRowSelects =
			SET_IF(y & 0x01, Matrix_A_Pin) |SET_IF(y & 0x02, Matrix_B_Pin)
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	015b      	lsls	r3, r3, #5
 8006c3c:	b21b      	sxth	r3, r3
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	b21a      	sxth	r2, r3
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	b21b      	sxth	r3, r3
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	b21b      	sxth	r3, r3
 8006c50:	4313      	orrs	r3, r2
 8006c52:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x04, Matrix_C_Pin)
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	b21b      	sxth	r3, r3
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	b21b      	sxth	r3, r3
 8006c60:	4313      	orrs	r3, r2
 8006c62:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x08, Matrix_D_Pin)
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	01db      	lsls	r3, r3, #7
 8006c68:	b21b      	sxth	r3, r3
 8006c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c6e:	b21b      	sxth	r3, r3
 8006c70:	4313      	orrs	r3, r2
 8006c72:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x10, Matrix_E_Pin);
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	b21b      	sxth	r3, r3
 8006c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7e:	b21b      	sxth	r3, r3
 8006c80:	4313      	orrs	r3, r2
 8006c82:	b21b      	sxth	r3, r3
			uint16_t currentRowSelects =
 8006c84:	81bb      	strh	r3, [r7, #12]

			//Latch data, select next row, outputs still off
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin | Matrix_OE_Pin
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695a      	ldr	r2, [r3, #20]
 8006c8a:	89fb      	ldrh	r3, [r7, #14]
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4413      	add	r3, r2
					| currentRowSelects;
 8006c90:	89ba      	ldrh	r2, [r7, #12]
 8006c92:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8006c96:	b292      	uxth	r2, r2
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin | Matrix_OE_Pin
 8006c98:	801a      	strh	r2, [r3, #0]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	6911      	ldr	r1, [r2, #16]
 8006c9e:	89fa      	ldrh	r2, [r7, #14]
 8006ca0:	0052      	lsls	r2, r2, #1
 8006ca2:	440a      	add	r2, r1
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	8013      	strh	r3, [r2, #0]

			offset++;
 8006ca8:	89fb      	ldrh	r3, [r7, #14]
 8006caa:	3301      	adds	r3, #1
 8006cac:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695a      	ldr	r2, [r3, #20]
 8006cb2:	89fb      	ldrh	r3, [r7, #14]
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	89ba      	ldrh	r2, [r7, #12]
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6911      	ldr	r1, [r2, #16]
 8006cc0:	89fa      	ldrh	r2, [r7, #14]
 8006cc2:	0052      	lsls	r2, r2, #1
 8006cc4:	440a      	add	r2, r1
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	8013      	strh	r3, [r2, #0]

			//Bonus cycle to settle.  Probably not necessary but 3 trailing cycles feels odd
			offset++;
 8006cca:	89fb      	ldrh	r3, [r7, #14]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695a      	ldr	r2, [r3, #20]
 8006cd4:	89fb      	ldrh	r3, [r7, #14]
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	4413      	add	r3, r2
 8006cda:	89ba      	ldrh	r2, [r7, #12]
 8006cdc:	801a      	strh	r2, [r3, #0]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6911      	ldr	r1, [r2, #16]
 8006ce2:	89fa      	ldrh	r2, [r7, #14]
 8006ce4:	0052      	lsls	r2, r2, #1
 8006ce6:	440a      	add	r2, r1
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	8013      	strh	r3, [r2, #0]
		for (uint8_t plane = 0; plane < planes; plane++) {
 8006cec:	7dbb      	ldrb	r3, [r7, #22]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	75bb      	strb	r3, [r7, #22]
 8006cf2:	e744      	b.n	8006b7e <_ZN12MatrixDriver4OpenEP13Configuration+0x12e>
	for (uint8_t y = 0; y < height / 2; y++) {
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	75fb      	strb	r3, [r7, #23]
 8006cfa:	e700      	b.n	8006afe <_ZN12MatrixDriver4OpenEP13Configuration+0xae>
 8006cfc:	3ffffffc 	.word	0x3ffffffc
		}
	}

	sprintf(stringBuffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	889b      	ldrh	r3, [r3, #4]
 8006d04:	4618      	mov	r0, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	88db      	ldrh	r3, [r3, #6]
 8006d0a:	461c      	mov	r4, r3
			bufferSize, planes, planeSize);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	89db      	ldrh	r3, [r3, #14]
	sprintf(stringBuffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8006d10:	461a      	mov	r2, r3
			bufferSize, planes, planeSize);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(stringBuffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8006d16:	4619      	mov	r1, r3
			bufferSize, planes, planeSize);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	899b      	ldrh	r3, [r3, #12]
	sprintf(stringBuffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8006d1c:	9302      	str	r3, [sp, #8]
 8006d1e:	9101      	str	r1, [sp, #4]
 8006d20:	9200      	str	r2, [sp, #0]
 8006d22:	4623      	mov	r3, r4
 8006d24:	4602      	mov	r2, r0
 8006d26:	4919      	ldr	r1, [pc, #100]	; (8006d8c <_ZN12MatrixDriver4OpenEP13Configuration+0x33c>)
 8006d28:	4819      	ldr	r0, [pc, #100]	; (8006d90 <_ZN12MatrixDriver4OpenEP13Configuration+0x340>)
 8006d2a:	f001 f90f 	bl	8007f4c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) stringBuffer, strlen(stringBuffer), 10);
 8006d2e:	4818      	ldr	r0, [pc, #96]	; (8006d90 <_ZN12MatrixDriver4OpenEP13Configuration+0x340>)
 8006d30:	f7f9 fd1e 	bl	8000770 <strlen>
 8006d34:	4603      	mov	r3, r0
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	230a      	movs	r3, #10
 8006d3a:	4915      	ldr	r1, [pc, #84]	; (8006d90 <_ZN12MatrixDriver4OpenEP13Configuration+0x340>)
 8006d3c:	4815      	ldr	r0, [pc, #84]	; (8006d94 <_ZN12MatrixDriver4OpenEP13Configuration+0x344>)
 8006d3e:	f7fe ff6c 	bl	8005c1a <HAL_UART_Transmit>

	hdma_tim1_ch1.XferAbortCallback = DMA_Abort;
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <_ZN12MatrixDriver4OpenEP13Configuration+0x348>)
 8006d44:	4a15      	ldr	r2, [pc, #84]	; (8006d9c <_ZN12MatrixDriver4OpenEP13Configuration+0x34c>)
 8006d46:	651a      	str	r2, [r3, #80]	; 0x50
	hdma_tim1_ch1.XferCpltCallback = DMA_Complete;
 8006d48:	4b13      	ldr	r3, [pc, #76]	; (8006d98 <_ZN12MatrixDriver4OpenEP13Configuration+0x348>)
 8006d4a:	4a15      	ldr	r2, [pc, #84]	; (8006da0 <_ZN12MatrixDriver4OpenEP13Configuration+0x350>)
 8006d4c:	63da      	str	r2, [r3, #60]	; 0x3c
	hdma_tim1_ch1.XferErrorCallback = DMA_Error;
 8006d4e:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <_ZN12MatrixDriver4OpenEP13Configuration+0x348>)
 8006d50:	4a14      	ldr	r2, [pc, #80]	; (8006da4 <_ZN12MatrixDriver4OpenEP13Configuration+0x354>)
 8006d52:	64da      	str	r2, [r3, #76]	; 0x4c

	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 8006d54:	4b14      	ldr	r3, [pc, #80]	; (8006da8 <_ZN12MatrixDriver4OpenEP13Configuration+0x358>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <_ZN12MatrixDriver4OpenEP13Configuration+0x358>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d62:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d64:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <_ZN12MatrixDriver4OpenEP13Configuration+0x358>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe fe0d 	bl	800598c <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start_IT(&htim1);
 8006d72:	480d      	ldr	r0, [pc, #52]	; (8006da8 <_ZN12MatrixDriver4OpenEP13Configuration+0x358>)
 8006d74:	f7fe f948 	bl	8005008 <HAL_TIM_Base_Start_IT>

	nextDmaOffset = 0;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	831a      	strh	r2, [r3, #24]

	StartNextDma();
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f95c 	bl	800703c <_ZN12MatrixDriver12StartNextDmaEv>
}
 8006d84:	bf00      	nop
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd90      	pop	{r4, r7, pc}
 8006d8c:	08008630 	.word	0x08008630
 8006d90:	200001fc 	.word	0x200001fc
 8006d94:	20001f0c 	.word	0x20001f0c
 8006d98:	20001e6c 	.word	0x20001e6c
 8006d9c:	08006955 	.word	0x08006955
 8006da0:	08006935 	.word	0x08006935
 8006da4:	08006975 	.word	0x08006975
 8006da8:	20001f4c 	.word	0x20001f4c

08006dac <_ZN12MatrixDriver5CloseEv>:

void MatrixDriver::Close() {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	HAL_DMA_Abort_IT(&hdma_tim1_ch1);
 8006db4:	480e      	ldr	r0, [pc, #56]	; (8006df0 <_ZN12MatrixDriver5CloseEv+0x44>)
 8006db6:	f7fb fd89 	bl	80028cc <HAL_DMA_Abort_IT>

	HAL_TIM_Base_Stop_IT(&htim1);
 8006dba:	480e      	ldr	r0, [pc, #56]	; (8006df4 <_ZN12MatrixDriver5CloseEv+0x48>)
 8006dbc:	f7fe f948 	bl	8005050 <HAL_TIM_Base_Stop_IT>

	nextDmaOffset = 0;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	831a      	strh	r2, [r3, #24]

	delete this->bufferA;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <_ZN12MatrixDriver5CloseEv+0x2a>
 8006dce:	2102      	movs	r1, #2
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fe99 	bl	8007b08 <_ZdlPvj>
	delete this->bufferB;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <_ZN12MatrixDriver5CloseEv+0x3a>
 8006dde:	2102      	movs	r1, #2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fe91 	bl	8007b08 <_ZdlPvj>
}
 8006de6:	bf00      	nop
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20001e6c 	.word	0x20001e6c
 8006df4:	20001f4c 	.word	0x20001f4c

08006df8 <_ZN12MatrixDriver9PlaneBitsEh>:
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
	value = gamma8[value];
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <_ZN12MatrixDriver9PlaneBitsEh+0x70>)
 8006e08:	5cd3      	ldrb	r3, [r2, r3]
 8006e0a:	70fb      	strb	r3, [r7, #3]

#if PLANES == 8
	return value;
#elif PLANES == 4
	uint8_t result = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]

	if(value > 128) {
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	d906      	bls.n	8006e24 <_ZN12MatrixDriver9PlaneBitsEh+0x2c>
		result |= 0x08;
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	f043 0308 	orr.w	r3, r3, #8
 8006e1c:	73fb      	strb	r3, [r7, #15]
		value -=128;
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	3b80      	subs	r3, #128	; 0x80
 8006e22:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 64) {
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d906      	bls.n	8006e38 <_ZN12MatrixDriver9PlaneBitsEh+0x40>
		result |= 0x03;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	f043 0303 	orr.w	r3, r3, #3
 8006e30:	73fb      	strb	r3, [r7, #15]
		value -=128;
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	3b80      	subs	r3, #128	; 0x80
 8006e36:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 32) {
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	2b20      	cmp	r3, #32
 8006e3c:	d906      	bls.n	8006e4c <_ZN12MatrixDriver9PlaneBitsEh+0x54>
		result |= 0x02;
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	f043 0302 	orr.w	r3, r3, #2
 8006e44:	73fb      	strb	r3, [r7, #15]
		value -=128;
 8006e46:	78fb      	ldrb	r3, [r7, #3]
 8006e48:	3b80      	subs	r3, #128	; 0x80
 8006e4a:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 8) {
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d903      	bls.n	8006e5a <_ZN12MatrixDriver9PlaneBitsEh+0x62>
		result |= 0x01;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]

	return result;
#elif PLANES == 1
	return value > 0 ? 0x01 : 0x00;
#endif
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	2000000c 	.word	0x2000000c

08006e6c <_ZN12MatrixDriver8SetPixelEtthhhh>:
//
//		}
//	}
}

void MatrixDriver::SetPixel(uint16_t x, uint16_t y, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08c      	sub	sp, #48	; 0x30
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	4608      	mov	r0, r1
 8006e76:	4611      	mov	r1, r2
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	817b      	strh	r3, [r7, #10]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	813b      	strh	r3, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	71fb      	strb	r3, [r7, #7]
	uint16_t rBit, gBit, bBit;

//Set data into the buffer we aren't sending at the moment
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	7a9b      	ldrb	r3, [r3, #10]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <_ZN12MatrixDriver8SetPixelEtthhhh+0x28>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	e001      	b.n	8006e98 <_ZN12MatrixDriver8SetPixelEtthhhh+0x2c>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	623b      	str	r3, [r7, #32]

	if (y < (height / 2)) {
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	88db      	ldrh	r3, [r3, #6]
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	893a      	ldrh	r2, [r7, #8]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d206      	bcs.n	8006eb6 <_ZN12MatrixDriver8SetPixelEtthhhh+0x4a>
		rBit = Matrix_R0_Pin;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gBit = Matrix_G0_Pin;
 8006eac:	2302      	movs	r3, #2
 8006eae:	85bb      	strh	r3, [r7, #44]	; 0x2c
		bBit = Matrix_B0_Pin;
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006eb4:	e007      	b.n	8006ec6 <_ZN12MatrixDriver8SetPixelEtthhhh+0x5a>
	} else {
		rBit = Matrix_R1_Pin;
 8006eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eba:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gBit = Matrix_G1_Pin;
 8006ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ec0:	85bb      	strh	r3, [r7, #44]	; 0x2c
		bBit = Matrix_B1_Pin;
 8006ec2:	2380      	movs	r3, #128	; 0x80
 8006ec4:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint16_t pixelMask = rBit | gBit | bBit;
 8006ec6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ec8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	83fb      	strh	r3, [r7, #30]

	uint8_t rPlanes = PlaneBits(r);
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff ff8d 	bl	8006df8 <_ZN12MatrixDriver9PlaneBitsEh>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	777b      	strb	r3, [r7, #29]
	uint8_t gPlanes = PlaneBits(g);
 8006ee2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f7ff ff85 	bl	8006df8 <_ZN12MatrixDriver9PlaneBitsEh>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	773b      	strb	r3, [r7, #28]
	uint8_t bPlanes = PlaneBits(b);
 8006ef2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff ff7d 	bl	8006df8 <_ZN12MatrixDriver9PlaneBitsEh>
 8006efe:	4603      	mov	r3, r0
 8006f00:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
			10);
#endif

	for (int plane = 0; plane < planes; plane++) {
 8006f02:	2300      	movs	r3, #0
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	7a1b      	ldrb	r3, [r3, #8]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	da63      	bge.n	8006fda <_ZN12MatrixDriver8SetPixelEtthhhh+0x16e>
		uint16_t planePixelBits = ((rPlanes & (0x01 << plane)) ? rBit : 0)
 8006f12:	7f7a      	ldrb	r2, [r7, #29]
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	fa42 f303 	asr.w	r3, r2, r3
 8006f1a:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & (0x01 << plane)) ? gBit : 0)
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <_ZN12MatrixDriver8SetPixelEtthhhh+0xbc>
 8006f22:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006f26:	e000      	b.n	8006f2a <_ZN12MatrixDriver8SetPixelEtthhhh+0xbe>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	7f39      	ldrb	r1, [r7, #28]
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	fa41 f303 	asr.w	r3, r1, r3
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <_ZN12MatrixDriver8SetPixelEtthhhh+0xd4>
 8006f3a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006f3e:	e000      	b.n	8006f42 <_ZN12MatrixDriver8SetPixelEtthhhh+0xd6>
 8006f40:	2300      	movs	r3, #0
 8006f42:	4313      	orrs	r3, r2
 8006f44:	b21a      	sxth	r2, r3
				| ((bPlanes & (0x01 << plane)) ? bBit : 0);
 8006f46:	7ef9      	ldrb	r1, [r7, #27]
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	fa41 f303 	asr.w	r3, r1, r3
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <_ZN12MatrixDriver8SetPixelEtthhhh+0xf0>
 8006f56:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006f5a:	e000      	b.n	8006f5e <_ZN12MatrixDriver8SetPixelEtthhhh+0xf2>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = ((rPlanes & (0x01 << plane)) ? rBit : 0)
 8006f62:	833b      	strh	r3, [r7, #24]

		uint16_t offset = BufferOffset(x, y, plane);
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	893a      	ldrh	r2, [r7, #8]
 8006f6a:	8979      	ldrh	r1, [r7, #10]
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7ff fd17 	bl	80069a0 <_ZN12MatrixDriver12BufferOffsetEtth>
 8006f72:	4603      	mov	r3, r0
 8006f74:	82fb      	strh	r3, [r7, #22]

		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8006f76:	8afb      	ldrh	r3, [r7, #22]
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	6a3a      	ldr	r2, [r7, #32]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b21a      	sxth	r2, r3
 8006f82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006f86:	43db      	mvns	r3, r3
 8006f88:	b21b      	sxth	r3, r3
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	b21a      	sxth	r2, r3
				| planePixelBits;
 8006f8e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	b219      	sxth	r1, r3
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8006f96:	8afb      	ldrh	r3, [r7, #22]
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	6a3a      	ldr	r2, [r7, #32]
 8006f9c:	4413      	add	r3, r2
				| planePixelBits;
 8006f9e:	b28a      	uxth	r2, r1
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8006fa0:	801a      	strh	r2, [r3, #0]
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8006fa2:	8afb      	ldrh	r3, [r7, #22]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	6a3a      	ldr	r2, [r7, #32]
 8006faa:	4413      	add	r3, r2
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	b21a      	sxth	r2, r3
 8006fb0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006fb4:	43db      	mvns	r3, r3
 8006fb6:	b21b      	sxth	r3, r3
 8006fb8:	4013      	ands	r3, r2
 8006fba:	b21a      	sxth	r2, r3
				| planePixelBits;
 8006fbc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	b219      	sxth	r1, r3
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8006fc4:	8afb      	ldrh	r3, [r7, #22]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	6a3a      	ldr	r2, [r7, #32]
 8006fcc:	4413      	add	r3, r2
				| planePixelBits;
 8006fce:	b28a      	uxth	r2, r1
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8006fd0:	801a      	strh	r2, [r3, #0]
	for (int plane = 0; plane < planes; plane++) {
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd8:	e795      	b.n	8006f06 <_ZN12MatrixDriver8SetPixelEtthhhh+0x9a>
	}
}
 8006fda:	bf00      	nop
 8006fdc:	3730      	adds	r7, #48	; 0x30
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	completeSwap = true;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	72da      	strb	r2, [r3, #11]

	HAL_DMA_Abort_IT(&hdma_tim1_ch1);
 8006ff2:	4803      	ldr	r0, [pc, #12]	; (8007000 <_ZN12MatrixDriver10SwapBufferEv+0x1c>)
 8006ff4:	f7fb fc6a 	bl	80028cc <HAL_DMA_Abort_IT>
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20001e6c 	.word	0x20001e6c

08007004 <_ZN12MatrixDriver6HandleEv>:

void MatrixDriver::Handle() {
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	if (completeSwap) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7adb      	ldrb	r3, [r3, #11]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00c      	beq.n	800702e <_ZN12MatrixDriver6HandleEv+0x2a>
		completeSwap = false;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	72da      	strb	r2, [r3, #11]
		sendBufferA = !sendBufferA;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7a9b      	ldrb	r3, [r3, #10]
 800701e:	f083 0301 	eor.w	r3, r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	729a      	strb	r2, [r3, #10]
		nextDmaOffset = 0;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	831a      	strh	r2, [r3, #24]
	}

	StartNextDma();
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f804 	bl	800703c <_ZN12MatrixDriver12StartNextDmaEv>
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <_ZN12MatrixDriver12StartNextDmaEv>:
uint8_t const AAR_BY_PLANE[] = { 1, 2, 4, 8, 16, 32, 64 };
#elif PLANES == 4
uint8_t const AAR_BY_PLANE[] = { 1, 8, 16, 28 };
#endif

void MatrixDriver::StartNextDma() {
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	uint16_t plane = nextDmaOffset / planeSize;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8b1a      	ldrh	r2, [r3, #24]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	899b      	ldrh	r3, [r3, #12]
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	82fb      	strh	r3, [r7, #22]
	uint16_t *outputBuffer = (sendBufferA ? bufferA : bufferB);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	7a9b      	ldrb	r3, [r3, #10]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <_ZN12MatrixDriver12StartNextDmaEv+0x24>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	e001      	b.n	8007064 <_ZN12MatrixDriver12StartNextDmaEv+0x28>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	613b      	str	r3, [r7, #16]
	uint16_t *ouputOffset = outputBuffer + (plane * planeSize);
 8007066:	8afb      	ldrh	r3, [r7, #22]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	8992      	ldrh	r2, [r2, #12]
 800706c:	fb02 f303 	mul.w	r3, r2, r3
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4413      	add	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]

	htim1.Instance->ARR = AAR_BY_PLANE[plane];
 8007078:	8afb      	ldrh	r3, [r7, #22]
 800707a:	4a12      	ldr	r2, [pc, #72]	; (80070c4 <_ZN12MatrixDriver12StartNextDmaEv+0x88>)
 800707c:	5cd2      	ldrb	r2, [r2, r3]
 800707e:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <_ZN12MatrixDriver12StartNextDmaEv+0x8c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->EGR = TIM_EGR_UG;
 8007084:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <_ZN12MatrixDriver12StartNextDmaEv+0x8c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2201      	movs	r2, #1
 800708a:	615a      	str	r2, [r3, #20]

		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
	}
#endif

	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) ouputOffset,
 800708c:	68f9      	ldr	r1, [r7, #12]
			(uint32_t) &(GPIOB->ODR), planeSize);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	899b      	ldrh	r3, [r3, #12]
	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) ouputOffset,
 8007092:	4a0e      	ldr	r2, [pc, #56]	; (80070cc <_ZN12MatrixDriver12StartNextDmaEv+0x90>)
 8007094:	480e      	ldr	r0, [pc, #56]	; (80070d0 <_ZN12MatrixDriver12StartNextDmaEv+0x94>)
 8007096:	f7fb fbc1 	bl	800281c <HAL_DMA_Start_IT>

	nextDmaOffset += planeSize;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	8b1a      	ldrh	r2, [r3, #24]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	899b      	ldrh	r3, [r3, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	831a      	strh	r2, [r3, #24]

	if (nextDmaOffset >= bufferSize) {
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	8b1a      	ldrh	r2, [r3, #24]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	89db      	ldrh	r3, [r3, #14]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d302      	bcc.n	80070bc <_ZN12MatrixDriver12StartNextDmaEv+0x80>
		nextDmaOffset = 0;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	831a      	strh	r2, [r3, #24]

#ifdef DebugPin_GPIO_Port
	HAL_GPIO_WritePin(DebugPin_GPIO_Port, DebugPin_Pin,
			plane & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
#endif
}
 80070bc:	bf00      	nop
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	08008790 	.word	0x08008790
 80070c8:	20001f4c 	.word	0x20001f4c
 80070cc:	40020414 	.word	0x40020414
 80070d0:	20001e6c 	.word	0x20001e6c

080070d4 <_ZN12PixelMapping5PixelC1Ett>:
#define INC_PIXELMAPPING_H_

class PixelMapping {
public:
	struct Pixel {
		Pixel(uint16_t x, uint16_t y) {
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
 80070e0:	4613      	mov	r3, r2
 80070e2:	803b      	strh	r3, [r7, #0]
			this->x = x;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	887a      	ldrh	r2, [r7, #2]
 80070e8:	801a      	strh	r2, [r3, #0]
			this->y = y;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	883a      	ldrh	r2, [r7, #0]
 80070ee:	805a      	strh	r2, [r3, #2]
		}
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
	...

08007100 <_ZN12PixelMappingC1Ev>:
class PixelMapping {
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	4a04      	ldr	r2, [pc, #16]	; (800711c <_ZN12PixelMappingC1Ev+0x1c>)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4618      	mov	r0, r3
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	080087d8 	.word	0x080087d8

08007120 <_ZN18SimplePixelMappingC1Ehtt>:
	virtual Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) = 0;
};

class SimplePixelMapping : public PixelMapping {
public:
	SimplePixelMapping(uint8_t panelCount, uint16_t panelWidth, uint16_t panelHeight) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	4608      	mov	r0, r1
 800712a:	4611      	mov	r1, r2
 800712c:	461a      	mov	r2, r3
 800712e:	4603      	mov	r3, r0
 8007130:	72fb      	strb	r3, [r7, #11]
 8007132:	460b      	mov	r3, r1
 8007134:	813b      	strh	r3, [r7, #8]
 8007136:	4613      	mov	r3, r2
 8007138:	80fb      	strh	r3, [r7, #6]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff ffdf 	bl	8007100 <_ZN12PixelMappingC1Ev>
 8007142:	4a08      	ldr	r2, [pc, #32]	; (8007164 <_ZN18SimplePixelMappingC1Ehtt+0x44>)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	601a      	str	r2, [r3, #0]
		this->panelCount = panelCount;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	7afa      	ldrb	r2, [r7, #11]
 800714c:	711a      	strb	r2, [r3, #4]
		this->panelWidth = panelWidth;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	893a      	ldrh	r2, [r7, #8]
 8007152:	80da      	strh	r2, [r3, #6]
		this->panelHeight = panelHeight;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	811a      	strh	r2, [r3, #8]
	}
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	080087cc 	.word	0x080087cc

08007168 <_ZN18SimplePixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:

	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
		input.y += input.x / panelWidth;
 8007172:	887a      	ldrh	r2, [r7, #2]
 8007174:	8839      	ldrh	r1, [r7, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	88db      	ldrh	r3, [r3, #6]
 800717a:	fbb1 f3f3 	udiv	r3, r1, r3
 800717e:	b29b      	uxth	r3, r3
 8007180:	4413      	add	r3, r2
 8007182:	b29b      	uxth	r3, r3
 8007184:	807b      	strh	r3, [r7, #2]
		input.x = input.x % panelWidth;
 8007186:	883b      	ldrh	r3, [r7, #0]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	88d2      	ldrh	r2, [r2, #6]
 800718c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007190:	fb02 f201 	mul.w	r2, r2, r1
 8007194:	1a9b      	subs	r3, r3, r2
 8007196:	b29b      	uxth	r3, r3
 8007198:	803b      	strh	r3, [r7, #0]

		return input;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	2300      	movs	r3, #0
 80071a0:	89ba      	ldrh	r2, [r7, #12]
 80071a2:	f362 030f 	bfi	r3, r2, #0, #16
 80071a6:	89fa      	ldrh	r2, [r7, #14]
 80071a8:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <_ZN23LeftToRightPixelMappingC1Ehtt>:
	uint16_t panelHeight;
};

class LeftToRightPixelMapping : public PixelMapping {
public:
	LeftToRightPixelMapping(uint8_t panelCount, uint16_t panelWidth, uint16_t panelHeight) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	4608      	mov	r0, r1
 80071c2:	4611      	mov	r1, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	72fb      	strb	r3, [r7, #11]
 80071ca:	460b      	mov	r3, r1
 80071cc:	813b      	strh	r3, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80fb      	strh	r3, [r7, #6]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff ff93 	bl	8007100 <_ZN12PixelMappingC1Ev>
 80071da:	4a08      	ldr	r2, [pc, #32]	; (80071fc <_ZN23LeftToRightPixelMappingC1Ehtt+0x44>)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]
		this->panelCount = panelCount;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	7afa      	ldrb	r2, [r7, #11]
 80071e4:	711a      	strb	r2, [r3, #4]
		this->panelWidth = panelWidth;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	893a      	ldrh	r2, [r7, #8]
 80071ea:	80da      	strh	r2, [r3, #6]
		this->panelHeight = panelHeight;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	811a      	strh	r2, [r3, #8]
	}
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	080087c0 	.word	0x080087c0

08007200 <_ZN23LeftToRightPixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:

	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
		input.y += input.x / panelWidth;
 800720a:	887a      	ldrh	r2, [r7, #2]
 800720c:	8839      	ldrh	r1, [r7, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	88db      	ldrh	r3, [r3, #6]
 8007212:	fbb1 f3f3 	udiv	r3, r1, r3
 8007216:	b29b      	uxth	r3, r3
 8007218:	4413      	add	r3, r2
 800721a:	b29b      	uxth	r3, r3
 800721c:	807b      	strh	r3, [r7, #2]
		input.x = input.x % panelWidth;
 800721e:	883b      	ldrh	r3, [r7, #0]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	88d2      	ldrh	r2, [r2, #6]
 8007224:	fbb3 f1f2 	udiv	r1, r3, r2
 8007228:	fb02 f201 	mul.w	r2, r2, r1
 800722c:	1a9b      	subs	r3, r3, r2
 800722e:	b29b      	uxth	r3, r3
 8007230:	803b      	strh	r3, [r7, #0]

		//Panel counted from top-left
		uint16_t panel = input.y / panelHeight;
 8007232:	887a      	ldrh	r2, [r7, #2]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	891b      	ldrh	r3, [r3, #8]
 8007238:	fbb2 f3f3 	udiv	r3, r2, r3
 800723c:	82bb      	strh	r3, [r7, #20]
		uint16_t lineOnPanel = input.y % panelHeight;
 800723e:	887b      	ldrh	r3, [r7, #2]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	8912      	ldrh	r2, [r2, #8]
 8007244:	fbb3 f1f2 	udiv	r1, r3, r2
 8007248:	fb02 f201 	mul.w	r2, r2, r1
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	82fb      	strh	r3, [r7, #22]

		if(panel % 2 == 1) {
 8007250:	8abb      	ldrh	r3, [r7, #20]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d004      	beq.n	8007264 <_ZN23LeftToRightPixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x64>
			//Odd panels are vertically reversed
			lineOnPanel = panelHeight - lineOnPanel;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	891a      	ldrh	r2, [r3, #8]
 800725e:	8afb      	ldrh	r3, [r7, #22]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	82fb      	strh	r3, [r7, #22]
		}

		uint16_t xOffset = (panelCount - 1) - panel * panelWidth;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	791b      	ldrb	r3, [r3, #4]
 8007268:	b29a      	uxth	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	88db      	ldrh	r3, [r3, #6]
 800726e:	8ab9      	ldrh	r1, [r7, #20]
 8007270:	fb11 f303 	smulbb	r3, r1, r3
 8007274:	b29b      	uxth	r3, r3
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b01      	subs	r3, #1
 800727c:	827b      	strh	r3, [r7, #18]

		PixelMapping::Pixel output {
			.x= (uint16_t) (xOffset + input.x),
 800727e:	883a      	ldrh	r2, [r7, #0]
			.y = lineOnPanel
		};
 8007280:	8a7b      	ldrh	r3, [r7, #18]
 8007282:	4413      	add	r3, r2
 8007284:	b299      	uxth	r1, r3
 8007286:	8afa      	ldrh	r2, [r7, #22]
 8007288:	f107 0308 	add.w	r3, r7, #8
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff ff21 	bl	80070d4 <_ZN12PixelMapping5PixelC1Ett>

		return output;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	2300      	movs	r3, #0
 8007298:	89ba      	ldrh	r2, [r7, #12]
 800729a:	f362 030f 	bfi	r3, r2, #0, #16
 800729e:	89fa      	ldrh	r2, [r7, #14]
 80072a0:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <_ZN31SnakePixelMappingFedBottomRightC1Ehtt>:
	uint16_t panelHeight;
};

class SnakePixelMappingFedBottomRight : public PixelMapping {
public:
	SnakePixelMappingFedBottomRight(uint8_t panelCount, uint16_t panelWidth, uint16_t panelHeight) {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	4608      	mov	r0, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	461a      	mov	r2, r3
 80072ba:	4603      	mov	r3, r0
 80072bc:	72fb      	strb	r3, [r7, #11]
 80072be:	460b      	mov	r3, r1
 80072c0:	813b      	strh	r3, [r7, #8]
 80072c2:	4613      	mov	r3, r2
 80072c4:	80fb      	strh	r3, [r7, #6]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff ff19 	bl	8007100 <_ZN12PixelMappingC1Ev>
 80072ce:	4a08      	ldr	r2, [pc, #32]	; (80072f0 <_ZN31SnakePixelMappingFedBottomRightC1Ehtt+0x44>)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	601a      	str	r2, [r3, #0]
		this->panelCount = panelCount;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	7afa      	ldrb	r2, [r7, #11]
 80072d8:	711a      	strb	r2, [r3, #4]
		this->panelWidth = panelWidth;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	893a      	ldrh	r2, [r7, #8]
 80072de:	80da      	strh	r2, [r3, #6]
		this->panelHeight = panelHeight;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	88fa      	ldrh	r2, [r7, #6]
 80072e4:	811a      	strh	r2, [r3, #8]
	}
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	080087b4 	.word	0x080087b4

080072f4 <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:

	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
		//Panel counted from top-left
		input.y += input.x / panelWidth;
 80072fe:	887a      	ldrh	r2, [r7, #2]
 8007300:	8839      	ldrh	r1, [r7, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	88db      	ldrh	r3, [r3, #6]
 8007306:	fbb1 f3f3 	udiv	r3, r1, r3
 800730a:	b29b      	uxth	r3, r3
 800730c:	4413      	add	r3, r2
 800730e:	b29b      	uxth	r3, r3
 8007310:	807b      	strh	r3, [r7, #2]
		input.x = input.x % panelWidth;
 8007312:	883b      	ldrh	r3, [r7, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	88d2      	ldrh	r2, [r2, #6]
 8007318:	fbb3 f1f2 	udiv	r1, r3, r2
 800731c:	fb02 f201 	mul.w	r2, r2, r1
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	b29b      	uxth	r3, r3
 8007324:	803b      	strh	r3, [r7, #0]

		uint16_t panel = input.y / panelHeight;
 8007326:	887a      	ldrh	r2, [r7, #2]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	891b      	ldrh	r3, [r3, #8]
 800732c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007330:	827b      	strh	r3, [r7, #18]
		uint16_t lineOnPanel = input.y % panelHeight;
 8007332:	887b      	ldrh	r3, [r7, #2]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	8912      	ldrh	r2, [r2, #8]
 8007338:	fbb3 f1f2 	udiv	r1, r3, r2
 800733c:	fb02 f201 	mul.w	r2, r2, r1
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	82fb      	strh	r3, [r7, #22]

		uint16_t xOffset = ((panelCount - 1) - panel) * panelWidth;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	791b      	ldrb	r3, [r3, #4]
 8007348:	1e5a      	subs	r2, r3, #1
 800734a:	8a7b      	ldrh	r3, [r7, #18]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	b29a      	uxth	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	88db      	ldrh	r3, [r3, #6]
 8007354:	fb12 f303 	smulbb	r3, r2, r3
 8007358:	823b      	strh	r3, [r7, #16]
		uint16_t x;

		if(((panelCount - 1) - panel) % 2 == 1) {
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	791b      	ldrb	r3, [r3, #4]
 800735e:	1e5a      	subs	r2, r3, #1
 8007360:	8a7b      	ldrh	r3, [r7, #18]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	bfb8      	it	lt
 800736c:	425b      	neglt	r3, r3
 800736e:	2b01      	cmp	r3, #1
 8007370:	d10b      	bne.n	800738a <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x96>
			//Even panels (from feedpoint) are vertically reversed
			lineOnPanel = (panelHeight - 1) - lineOnPanel;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	891a      	ldrh	r2, [r3, #8]
 8007376:	8afb      	ldrh	r3, [r7, #22]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	82fb      	strh	r3, [r7, #22]
			x = xOffset + input.x;
 8007380:	883a      	ldrh	r2, [r7, #0]
 8007382:	8a3b      	ldrh	r3, [r7, #16]
 8007384:	4413      	add	r3, r2
 8007386:	82bb      	strh	r3, [r7, #20]
 8007388:	e009      	b.n	800739e <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0xaa>
		} else {
			x= xOffset + ((panelWidth -1) - input.x);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	88da      	ldrh	r2, [r3, #6]
 800738e:	883b      	ldrh	r3, [r7, #0]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	b29a      	uxth	r2, r3
 8007394:	8a3b      	ldrh	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	82bb      	strh	r3, [r7, #20]
		}

		Pixel output {
			.x= x,
			.y = lineOnPanel
		};
 800739e:	8afa      	ldrh	r2, [r7, #22]
 80073a0:	8ab9      	ldrh	r1, [r7, #20]
 80073a2:	f107 0308 	add.w	r3, r7, #8
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fe94 	bl	80070d4 <_ZN12PixelMapping5PixelC1Ett>

		return output;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	2300      	movs	r3, #0
 80073b2:	89ba      	ldrh	r2, [r7, #12]
 80073b4:	f362 030f 	bfi	r3, r2, #0, #16
 80073b8:	89fa      	ldrh	r2, [r7, #14]
 80073ba:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <_ZN13ConfigurationC1Ev>:
#ifndef INC_CONFIGURATION_H_
#define INC_CONFIGURATION_H_

#include <stdint.h>

struct Configuration {
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	729a      	strb	r2, [r3, #10]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	72da      	strb	r2, [r3, #11]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <_Z17readConfigurationv>:
DisplayDriver *display = NULL;

Configuration configuration;
PixelMapping *pixelMapping = NULL;

void readConfiguration() {
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
	configuration.useMatrix = false;
 80073ec:	4b17      	ldr	r3, [pc, #92]	; (800744c <_Z17readConfigurationv+0x64>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]
	configuration.useStrands = true;
 80073f2:	4b16      	ldr	r3, [pc, #88]	; (800744c <_Z17readConfigurationv+0x64>)
 80073f4:	2201      	movs	r2, #1
 80073f6:	709a      	strb	r2, [r3, #2]

	if (configuration.useMatrix) {
 80073f8:	4b14      	ldr	r3, [pc, #80]	; (800744c <_Z17readConfigurationv+0x64>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00c      	beq.n	800741a <_Z17readConfigurationv+0x32>
		configuration.matrixFormat = MatrixDriver::SCAN_16;
 8007400:	4b12      	ldr	r3, [pc, #72]	; (800744c <_Z17readConfigurationv+0x64>)
 8007402:	2200      	movs	r2, #0
 8007404:	705a      	strb	r2, [r3, #1]
		configuration.elementWidth = PANEL_WIDTH;
 8007406:	4b11      	ldr	r3, [pc, #68]	; (800744c <_Z17readConfigurationv+0x64>)
 8007408:	2240      	movs	r2, #64	; 0x40
 800740a:	80da      	strh	r2, [r3, #6]
		configuration.elementHeight = PANEL_HEIGHT;
 800740c:	4b0f      	ldr	r3, [pc, #60]	; (800744c <_Z17readConfigurationv+0x64>)
 800740e:	2220      	movs	r2, #32
 8007410:	811a      	strh	r2, [r3, #8]
		configuration.elementCount = 2;
 8007412:	4b0e      	ldr	r3, [pc, #56]	; (800744c <_Z17readConfigurationv+0x64>)
 8007414:	2202      	movs	r2, #2
 8007416:	809a      	strh	r2, [r3, #4]
 8007418:	e010      	b.n	800743c <_Z17readConfigurationv+0x54>
	} else if (configuration.useStrands) {
 800741a:	4b0c      	ldr	r3, [pc, #48]	; (800744c <_Z17readConfigurationv+0x64>)
 800741c:	789b      	ldrb	r3, [r3, #2]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00c      	beq.n	800743c <_Z17readConfigurationv+0x54>
		configuration.strandFormat = LedSingleWire::GRBW;
 8007422:	4b0a      	ldr	r3, [pc, #40]	; (800744c <_Z17readConfigurationv+0x64>)
 8007424:	2201      	movs	r2, #1
 8007426:	70da      	strb	r2, [r3, #3]
		configuration.elementWidth = 300;
 8007428:	4b08      	ldr	r3, [pc, #32]	; (800744c <_Z17readConfigurationv+0x64>)
 800742a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800742e:	80da      	strh	r2, [r3, #6]
		configuration.elementHeight = 1;
 8007430:	4b06      	ldr	r3, [pc, #24]	; (800744c <_Z17readConfigurationv+0x64>)
 8007432:	2201      	movs	r2, #1
 8007434:	811a      	strh	r2, [r3, #8]
		configuration.elementCount = 1;
 8007436:	4b05      	ldr	r3, [pc, #20]	; (800744c <_Z17readConfigurationv+0x64>)
 8007438:	2201      	movs	r2, #1
 800743a:	809a      	strh	r2, [r3, #4]
	}

	configuration.pixelConfiguration =
 800743c:	4b03      	ldr	r3, [pc, #12]	; (800744c <_Z17readConfigurationv+0x64>)
 800743e:	2202      	movs	r2, #2
 8007440:	729a      	strb	r2, [r3, #10]
			Configuration::PixelConfiguration::SnakeStartBottomRight;
}
 8007442:	bf00      	nop
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	20000630 	.word	0x20000630

08007450 <_Z9configurev>:

void configure() {
 8007450:	b598      	push	{r3, r4, r7, lr}
 8007452:	af00      	add	r7, sp, #0
	if(display != NULL) {
 8007454:	4b36      	ldr	r3, [pc, #216]	; (8007530 <_Z9configurev+0xe0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <_Z9configurev+0x24>
		display->Close();
 800745c:	4b34      	ldr	r3, [pc, #208]	; (8007530 <_Z9configurev+0xe0>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	4b33      	ldr	r3, [pc, #204]	; (8007530 <_Z9configurev+0xe0>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3304      	adds	r3, #4
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4610      	mov	r0, r2
 800746c:	4798      	blx	r3
		display = NULL;
 800746e:	4b30      	ldr	r3, [pc, #192]	; (8007530 <_Z9configurev+0xe0>)
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
	}

	if (configuration.useMatrix) {
 8007474:	4b2f      	ldr	r3, [pc, #188]	; (8007534 <_Z9configurev+0xe4>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <_Z9configurev+0x34>
		display = &matrixDisplay;
 800747c:	4b2c      	ldr	r3, [pc, #176]	; (8007530 <_Z9configurev+0xe0>)
 800747e:	4a2e      	ldr	r2, [pc, #184]	; (8007538 <_Z9configurev+0xe8>)
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	e006      	b.n	8007492 <_Z9configurev+0x42>
	} else if (configuration.useStrands) {
 8007484:	4b2b      	ldr	r3, [pc, #172]	; (8007534 <_Z9configurev+0xe4>)
 8007486:	789b      	ldrb	r3, [r3, #2]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <_Z9configurev+0x42>

		display = &ledSingleWireDisplay;
 800748c:	4b28      	ldr	r3, [pc, #160]	; (8007530 <_Z9configurev+0xe0>)
 800748e:	4a2b      	ldr	r2, [pc, #172]	; (800753c <_Z9configurev+0xec>)
 8007490:	601a      	str	r2, [r3, #0]
	}

	if(pixelMapping != NULL) {
 8007492:	4b2b      	ldr	r3, [pc, #172]	; (8007540 <_Z9configurev+0xf0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <_Z9configurev+0x60>
		delete pixelMapping;
 800749a:	4b29      	ldr	r3, [pc, #164]	; (8007540 <_Z9configurev+0xf0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <_Z9configurev+0x5a>
 80074a2:	2104      	movs	r1, #4
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fb2f 	bl	8007b08 <_ZdlPvj>
		pixelMapping = NULL;
 80074aa:	4b25      	ldr	r3, [pc, #148]	; (8007540 <_Z9configurev+0xf0>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	601a      	str	r2, [r3, #0]
	}

	switch (configuration.pixelConfiguration) {
 80074b0:	4b20      	ldr	r3, [pc, #128]	; (8007534 <_Z9configurev+0xe4>)
 80074b2:	7a9b      	ldrb	r3, [r3, #10]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d002      	beq.n	80074be <_Z9configurev+0x6e>
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d012      	beq.n	80074e2 <_Z9configurev+0x92>
 80074bc:	e023      	b.n	8007506 <_Z9configurev+0xb6>
	case Configuration::PixelConfiguration::LeftToRight:
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
				configuration.elementWidth, configuration.elementHeight);
 80074be:	200c      	movs	r0, #12
 80074c0:	f000 fb24 	bl	8007b0c <_Znwj>
 80074c4:	4603      	mov	r3, r0
 80074c6:	461c      	mov	r4, r3
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
 80074c8:	4b1a      	ldr	r3, [pc, #104]	; (8007534 <_Z9configurev+0xe4>)
 80074ca:	889b      	ldrh	r3, [r3, #4]
				configuration.elementWidth, configuration.elementHeight);
 80074cc:	b2d9      	uxtb	r1, r3
 80074ce:	4b19      	ldr	r3, [pc, #100]	; (8007534 <_Z9configurev+0xe4>)
 80074d0:	88da      	ldrh	r2, [r3, #6]
 80074d2:	4b18      	ldr	r3, [pc, #96]	; (8007534 <_Z9configurev+0xe4>)
 80074d4:	891b      	ldrh	r3, [r3, #8]
 80074d6:	4620      	mov	r0, r4
 80074d8:	f7ff fe6e 	bl	80071b8 <_ZN23LeftToRightPixelMappingC1Ehtt>
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
 80074dc:	4b18      	ldr	r3, [pc, #96]	; (8007540 <_Z9configurev+0xf0>)
 80074de:	601c      	str	r4, [r3, #0]
		break;
 80074e0:	e023      	b.n	800752a <_Z9configurev+0xda>
	case Configuration::PixelConfiguration::SnakeStartBottomRight:
		pixelMapping = new SnakePixelMappingFedBottomRight(
				configuration.elementCount, configuration.elementWidth,
				configuration.elementHeight);
 80074e2:	200c      	movs	r0, #12
 80074e4:	f000 fb12 	bl	8007b0c <_Znwj>
 80074e8:	4603      	mov	r3, r0
 80074ea:	461c      	mov	r4, r3
				configuration.elementCount, configuration.elementWidth,
 80074ec:	4b11      	ldr	r3, [pc, #68]	; (8007534 <_Z9configurev+0xe4>)
 80074ee:	889b      	ldrh	r3, [r3, #4]
				configuration.elementHeight);
 80074f0:	b2d9      	uxtb	r1, r3
 80074f2:	4b10      	ldr	r3, [pc, #64]	; (8007534 <_Z9configurev+0xe4>)
 80074f4:	88da      	ldrh	r2, [r3, #6]
 80074f6:	4b0f      	ldr	r3, [pc, #60]	; (8007534 <_Z9configurev+0xe4>)
 80074f8:	891b      	ldrh	r3, [r3, #8]
 80074fa:	4620      	mov	r0, r4
 80074fc:	f7ff fed6 	bl	80072ac <_ZN31SnakePixelMappingFedBottomRightC1Ehtt>
		pixelMapping = new SnakePixelMappingFedBottomRight(
 8007500:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <_Z9configurev+0xf0>)
 8007502:	601c      	str	r4, [r3, #0]
		break;
 8007504:	e011      	b.n	800752a <_Z9configurev+0xda>
	default:
		pixelMapping = new SimplePixelMapping(configuration.elementCount,
				configuration.elementWidth, configuration.elementHeight);
 8007506:	200c      	movs	r0, #12
 8007508:	f000 fb00 	bl	8007b0c <_Znwj>
 800750c:	4603      	mov	r3, r0
 800750e:	461c      	mov	r4, r3
		pixelMapping = new SimplePixelMapping(configuration.elementCount,
 8007510:	4b08      	ldr	r3, [pc, #32]	; (8007534 <_Z9configurev+0xe4>)
 8007512:	889b      	ldrh	r3, [r3, #4]
				configuration.elementWidth, configuration.elementHeight);
 8007514:	b2d9      	uxtb	r1, r3
 8007516:	4b07      	ldr	r3, [pc, #28]	; (8007534 <_Z9configurev+0xe4>)
 8007518:	88da      	ldrh	r2, [r3, #6]
 800751a:	4b06      	ldr	r3, [pc, #24]	; (8007534 <_Z9configurev+0xe4>)
 800751c:	891b      	ldrh	r3, [r3, #8]
 800751e:	4620      	mov	r0, r4
 8007520:	f7ff fdfe 	bl	8007120 <_ZN18SimplePixelMappingC1Ehtt>
		pixelMapping = new SimplePixelMapping(configuration.elementCount,
 8007524:	4b06      	ldr	r3, [pc, #24]	; (8007540 <_Z9configurev+0xf0>)
 8007526:	601c      	str	r4, [r3, #0]
		break;
 8007528:	bf00      	nop
	}
}
 800752a:	bf00      	nop
 800752c:	bd98      	pop	{r3, r4, r7, pc}
 800752e:	bf00      	nop
 8007530:	2000062c 	.word	0x2000062c
 8007534:	20000630 	.word	0x20000630
 8007538:	20000600 	.word	0x20000600
 800753c:	2000061c 	.word	0x2000061c
 8007540:	2000063c 	.word	0x2000063c

08007544 <_Z4openv>:

void open() {
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
	if (display != NULL) {
 8007548:	4b08      	ldr	r3, [pc, #32]	; (800756c <_Z4openv+0x28>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <_Z4openv+0x1e>
		display->Open(&configuration);
 8007550:	4b06      	ldr	r3, [pc, #24]	; (800756c <_Z4openv+0x28>)
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	4b05      	ldr	r3, [pc, #20]	; (800756c <_Z4openv+0x28>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4904      	ldr	r1, [pc, #16]	; (8007570 <_Z4openv+0x2c>)
 800755e:	4610      	mov	r0, r2
 8007560:	4798      	blx	r3
	}

	configuration.status = Configuration::Status::Ready;
 8007562:	4b03      	ldr	r3, [pc, #12]	; (8007570 <_Z4openv+0x2c>)
 8007564:	2201      	movs	r2, #1
 8007566:	72da      	strb	r2, [r3, #11]
}
 8007568:	bf00      	nop
 800756a:	bd80      	pop	{r7, pc}
 800756c:	2000062c 	.word	0x2000062c
 8007570:	20000630 	.word	0x20000630

08007574 <_ZN8RxBufferC1Ev>:

Request request;
CommandProcessor commandProcessor;

struct RxBuffer {
	RxBuffer() {
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	701a      	strb	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	705a      	strb	r2, [r3, #1]
		for (int c = 0; c < NETWORK_PACKET_SIZE; c++) {
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007592:	da09      	bge.n	80075a8 <_ZN8RxBufferC1Ev+0x34>
			buffer[c] = 0x00;
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	3302      	adds	r3, #2
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]
		for (int c = 0; c < NETWORK_PACKET_SIZE; c++) {
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3301      	adds	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e7f1      	b.n	800758c <_ZN8RxBufferC1Ev+0x18>
		}
	}
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
	...

080075b8 <_Z22DmaTransactionCompleteP19__DMA_HandleTypeDef>:

SystemStatus systemStatus;

//uint8_t state = 0;

void DmaTransactionComplete(DMA_HandleTypeDef *hdma) {
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	currentBuffer->ready = true;
 80075c0:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <_Z22DmaTransactionCompleteP19__DMA_HandleTypeDef+0x44>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2201      	movs	r2, #1
 80075c6:	705a      	strb	r2, [r3, #1]
	currentBuffer->inUse = false;
 80075c8:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <_Z22DmaTransactionCompleteP19__DMA_HandleTypeDef+0x44>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2200      	movs	r2, #0
 80075ce:	701a      	strb	r2, [r3, #0]
	currentBuffer =
			(hdma_spi1_rx.Instance->CR & DMA_SxCR_CT_Msk) ?
 80075d0:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <_Z22DmaTransactionCompleteP19__DMA_HandleTypeDef+0x48>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
	currentBuffer =
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <_Z22DmaTransactionCompleteP19__DMA_HandleTypeDef+0x2a>
 80075de:	4b09      	ldr	r3, [pc, #36]	; (8007604 <_Z22DmaTransactionCompleteP19__DMA_HandleTypeDef+0x4c>)
 80075e0:	e000      	b.n	80075e4 <_Z22DmaTransactionCompleteP19__DMA_HandleTypeDef+0x2c>
 80075e2:	4b09      	ldr	r3, [pc, #36]	; (8007608 <_Z22DmaTransactionCompleteP19__DMA_HandleTypeDef+0x50>)
 80075e4:	4a05      	ldr	r2, [pc, #20]	; (80075fc <_Z22DmaTransactionCompleteP19__DMA_HandleTypeDef+0x44>)
 80075e6:	6013      	str	r3, [r2, #0]
					&receiveBuffers[1] : &receiveBuffers[0];
	currentBuffer->inUse = true;
 80075e8:	4b04      	ldr	r3, [pc, #16]	; (80075fc <_Z22DmaTransactionCompleteP19__DMA_HandleTypeDef+0x44>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2201      	movs	r2, #1
 80075ee:	701a      	strb	r2, [r3, #0]
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	20001e50 	.word	0x20001e50
 8007600:	2000019c 	.word	0x2000019c
 8007604:	2000164e 	.word	0x2000164e
 8007608:	20000e4c 	.word	0x20000e4c

0800760c <_Z9DmaErrorsP19__DMA_HandleTypeDef>:

void DmaErrors(DMA_HandleTypeDef *hdma) {
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	sprintf((char*) stringBuffer, "DMA Error %x\n", hdma->ErrorCode);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007618:	461a      	mov	r2, r3
 800761a:	4909      	ldr	r1, [pc, #36]	; (8007640 <_Z9DmaErrorsP19__DMA_HandleTypeDef+0x34>)
 800761c:	4809      	ldr	r0, [pc, #36]	; (8007644 <_Z9DmaErrorsP19__DMA_HandleTypeDef+0x38>)
 800761e:	f000 fc95 	bl	8007f4c <siprintf>

	HAL_UART_Transmit(&huart1, stringBuffer, strlen((char*) stringBuffer),
 8007622:	4808      	ldr	r0, [pc, #32]	; (8007644 <_Z9DmaErrorsP19__DMA_HandleTypeDef+0x38>)
 8007624:	f7f9 f8a4 	bl	8000770 <strlen>
 8007628:	4603      	mov	r3, r0
 800762a:	b29a      	uxth	r2, r3
 800762c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007630:	4904      	ldr	r1, [pc, #16]	; (8007644 <_Z9DmaErrorsP19__DMA_HandleTypeDef+0x38>)
 8007632:	4805      	ldr	r0, [pc, #20]	; (8007648 <_Z9DmaErrorsP19__DMA_HandleTypeDef+0x3c>)
 8007634:	f7fe faf1 	bl	8005c1a <HAL_UART_Transmit>
			2000);
}
 8007638:	bf00      	nop
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	080086a0 	.word	0x080086a0
 8007644:	200001fc 	.word	0x200001fc
 8007648:	20001f0c 	.word	0x20001f0c

0800764c <_Z12BeginReceivev>:

	HAL_UART_Transmit(&huart1, stringBuffer, strlen((char*) stringBuffer),
			2000);
}

void BeginReceive() {
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af02      	add	r7, sp, #8
	hdma_spi1_rx.XferCpltCallback = DmaTransactionComplete;
 8007652:	4b2e      	ldr	r3, [pc, #184]	; (800770c <_Z12BeginReceivev+0xc0>)
 8007654:	4a2e      	ldr	r2, [pc, #184]	; (8007710 <_Z12BeginReceivev+0xc4>)
 8007656:	63da      	str	r2, [r3, #60]	; 0x3c
	hdma_spi1_rx.XferM1CpltCallback = DmaTransactionComplete;
 8007658:	4b2c      	ldr	r3, [pc, #176]	; (800770c <_Z12BeginReceivev+0xc0>)
 800765a:	4a2d      	ldr	r2, [pc, #180]	; (8007710 <_Z12BeginReceivev+0xc4>)
 800765c:	645a      	str	r2, [r3, #68]	; 0x44
	hdma_spi1_rx.XferErrorCallback = DmaErrors;
 800765e:	4b2b      	ldr	r3, [pc, #172]	; (800770c <_Z12BeginReceivev+0xc0>)
 8007660:	4a2c      	ldr	r2, [pc, #176]	; (8007714 <_Z12BeginReceivev+0xc8>)
 8007662:	64da      	str	r2, [r3, #76]	; 0x4c

	HAL_StatusTypeDef result;

	currentBuffer =
			(hdma_spi1_rx.Instance->CR & DMA_SxCR_CT_Msk) ?
 8007664:	4b29      	ldr	r3, [pc, #164]	; (800770c <_Z12BeginReceivev+0xc0>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
	currentBuffer =
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <_Z12BeginReceivev+0x2a>
 8007672:	4b29      	ldr	r3, [pc, #164]	; (8007718 <_Z12BeginReceivev+0xcc>)
 8007674:	e000      	b.n	8007678 <_Z12BeginReceivev+0x2c>
 8007676:	4b29      	ldr	r3, [pc, #164]	; (800771c <_Z12BeginReceivev+0xd0>)
 8007678:	4a29      	ldr	r2, [pc, #164]	; (8007720 <_Z12BeginReceivev+0xd4>)
 800767a:	6013      	str	r3, [r2, #0]
					&receiveBuffers[1] : &receiveBuffers[0];
	currentBuffer->ready = false;
 800767c:	4b28      	ldr	r3, [pc, #160]	; (8007720 <_Z12BeginReceivev+0xd4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2200      	movs	r2, #0
 8007682:	705a      	strb	r2, [r3, #1]
	currentBuffer->inUse = true;
 8007684:	4b26      	ldr	r3, [pc, #152]	; (8007720 <_Z12BeginReceivev+0xd4>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2201      	movs	r2, #1
 800768a:	701a      	strb	r2, [r3, #0]

	result = HAL_DMAEx_MultiBufferStart_IT(&hdma_spi1_rx,
			(uint32_t) &hspi1.Instance->DR, (uint32_t) receiveBuffers[0].buffer,
 800768c:	4b25      	ldr	r3, [pc, #148]	; (8007724 <_Z12BeginReceivev+0xd8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	330c      	adds	r3, #12
	result = HAL_DMAEx_MultiBufferStart_IT(&hdma_spi1_rx,
 8007692:	4618      	mov	r0, r3
 8007694:	4a24      	ldr	r2, [pc, #144]	; (8007728 <_Z12BeginReceivev+0xdc>)
 8007696:	4925      	ldr	r1, [pc, #148]	; (800772c <_Z12BeginReceivev+0xe0>)
 8007698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	460b      	mov	r3, r1
 80076a0:	4601      	mov	r1, r0
 80076a2:	481a      	ldr	r0, [pc, #104]	; (800770c <_Z12BeginReceivev+0xc0>)
 80076a4:	f7fb fb9e 	bl	8002de4 <HAL_DMAEx_MultiBufferStart_IT>
 80076a8:	4603      	mov	r3, r0
 80076aa:	71fb      	strb	r3, [r7, #7]
			(uint32_t) receiveBuffers[1].buffer, NETWORK_PACKET_SIZE);

	if (result != HAL_OK) {
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d010      	beq.n	80076d4 <_Z12BeginReceivev+0x88>
		sprintf((char*) stringBuffer, "DMA Start Failure: %lu\n", result);
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	461a      	mov	r2, r3
 80076b6:	491e      	ldr	r1, [pc, #120]	; (8007730 <_Z12BeginReceivev+0xe4>)
 80076b8:	481e      	ldr	r0, [pc, #120]	; (8007734 <_Z12BeginReceivev+0xe8>)
 80076ba:	f000 fc47 	bl	8007f4c <siprintf>

		HAL_UART_Transmit(&huart1, stringBuffer, strlen((char*) stringBuffer),
 80076be:	481d      	ldr	r0, [pc, #116]	; (8007734 <_Z12BeginReceivev+0xe8>)
 80076c0:	f7f9 f856 	bl	8000770 <strlen>
 80076c4:	4603      	mov	r3, r0
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80076cc:	4919      	ldr	r1, [pc, #100]	; (8007734 <_Z12BeginReceivev+0xe8>)
 80076ce:	481a      	ldr	r0, [pc, #104]	; (8007738 <_Z12BeginReceivev+0xec>)
 80076d0:	f7fe faa3 	bl	8005c1a <HAL_UART_Transmit>
				500);
	}

	//Turn on the SPI peripheral and interrupt
	__HAL_SPI_ENABLE(&hspi1);
 80076d4:	4b13      	ldr	r3, [pc, #76]	; (8007724 <_Z12BeginReceivev+0xd8>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	4b12      	ldr	r3, [pc, #72]	; (8007724 <_Z12BeginReceivev+0xd8>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076e2:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_ERR));
 80076e4:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <_Z12BeginReceivev+0xd8>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <_Z12BeginReceivev+0xd8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0220 	orr.w	r2, r2, #32
 80076f2:	605a      	str	r2, [r3, #4]

	/* Enable RX DMA Request */
	SET_BIT((&hspi1)->Instance->CR2, SPI_CR2_RXDMAEN);
 80076f4:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <_Z12BeginReceivev+0xd8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <_Z12BeginReceivev+0xd8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0201 	orr.w	r2, r2, #1
 8007702:	605a      	str	r2, [r3, #4]
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	2000019c 	.word	0x2000019c
 8007710:	080075b9 	.word	0x080075b9
 8007714:	0800760d 	.word	0x0800760d
 8007718:	2000164e 	.word	0x2000164e
 800771c:	20000e4c 	.word	0x20000e4c
 8007720:	20001e50 	.word	0x20001e50
 8007724:	20001f8c 	.word	0x20001f8c
 8007728:	20000e4e 	.word	0x20000e4e
 800772c:	20001650 	.word	0x20001650
 8007730:	080086b8 	.word	0x080086b8
 8007734:	200001fc 	.word	0x200001fc
 8007738:	20001f0c 	.word	0x20001f0c

0800773c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	4603      	mov	r3, r0
 8007744:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SPI1_NCS_Pin) {
 8007746:	88fb      	ldrh	r3, [r7, #6]
 8007748:	2b10      	cmp	r3, #16
 800774a:	d10f      	bne.n	800776c <HAL_GPIO_EXTI_Callback+0x30>
		if (SPI1_NCS_GPIO_Port->IDR & SPI1_NCS_Pin) {
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <HAL_GPIO_EXTI_Callback+0x38>)
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf14      	ite	ne
 8007758:	2301      	movne	r3, #1
 800775a:	2300      	moveq	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <HAL_GPIO_EXTI_Callback+0x30>
			HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8007762:	200a      	movs	r0, #10
 8007764:	f7fa ff91 	bl	800268a <HAL_NVIC_DisableIRQ>
			BeginReceive();
 8007768:	f7ff ff70 	bl	800764c <_Z12BeginReceivev>
		}
	}
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	40020000 	.word	0x40020000

08007778 <cpp_main>:

extern "C" int cpp_main(void) {
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af02      	add	r7, sp, #8
	__HAL_DBGMCU_FREEZE_IWDG();
 800777e:	4b57      	ldr	r3, [pc, #348]	; (80078dc <cpp_main+0x164>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	4a56      	ldr	r2, [pc, #344]	; (80078dc <cpp_main+0x164>)
 8007784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007788:	6093      	str	r3, [r2, #8]

	readConfiguration();
 800778a:	f7ff fe2d 	bl	80073e8 <_Z17readConfigurationv>

	configure();
 800778e:	f7ff fe5f 	bl	8007450 <_Z9configurev>

	open();
 8007792:	f7ff fed7 	bl	8007544 <_Z4openv>

	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007796:	2023      	movs	r0, #35	; 0x23
 8007798:	f7fa ff69 	bl	800266e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800779c:	200a      	movs	r0, #10
 800779e:	f7fa ff66 	bl	800266e <HAL_NVIC_EnableIRQ>

//	BeginReceive();

	uint16_t color_shift = 1;
 80077a2:	2301      	movs	r3, #1
 80077a4:	827b      	strh	r3, [r7, #18]

	uint32_t start = HAL_GetTick();
 80077a6:	f7fa fe3b 	bl	8002420 <HAL_GetTick>
 80077aa:	60f8      	str	r0, [r7, #12]

	uint16_t pos = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	817b      	strh	r3, [r7, #10]
	input.bodyLength = 0;

	commandProcessor.ProcessRequest(&input, display);
#endif

	lastUpdate = HAL_GetTick();
 80077b0:	f7fa fe36 	bl	8002420 <HAL_GetTick>
 80077b4:	4603      	mov	r3, r0
 80077b6:	4a4a      	ldr	r2, [pc, #296]	; (80078e0 <cpp_main+0x168>)
 80077b8:	6013      	str	r3, [r2, #0]

	color_shift++;
 80077ba:	8a7b      	ldrh	r3, [r7, #18]
 80077bc:	3301      	adds	r3, #1
 80077be:	827b      	strh	r3, [r7, #18]

	uint32_t duration = HAL_GetTick() - start;
 80077c0:	f7fa fe2e 	bl	8002420 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	607b      	str	r3, [r7, #4]

	sprintf((char*) stringBuffer, "Setup Duration: %lu\n", duration);
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	4945      	ldr	r1, [pc, #276]	; (80078e4 <cpp_main+0x16c>)
 80077d0:	4845      	ldr	r0, [pc, #276]	; (80078e8 <cpp_main+0x170>)
 80077d2:	f000 fbbb 	bl	8007f4c <siprintf>

	HAL_UART_Transmit(&huart1, stringBuffer, strlen((char*) stringBuffer), 500);
 80077d6:	4844      	ldr	r0, [pc, #272]	; (80078e8 <cpp_main+0x170>)
 80077d8:	f7f8 ffca 	bl	8000770 <strlen>
 80077dc:	4603      	mov	r3, r0
 80077de:	b29a      	uxth	r2, r3
 80077e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80077e4:	4940      	ldr	r1, [pc, #256]	; (80078e8 <cpp_main+0x170>)
 80077e6:	4841      	ldr	r0, [pc, #260]	; (80078ec <cpp_main+0x174>)
 80077e8:	f7fe fa17 	bl	8005c1a <HAL_UART_Transmit>

	while (1) {
#ifndef DRAW

		for (int i = 0; i < RX_BUFFERS; i++) {
 80077ec:	2300      	movs	r3, #0
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	dcfa      	bgt.n	80077ec <cpp_main+0x74>
//			start = HAL_GetTick();

			if (receiveBuffers[i].ready && !receiveBuffers[i].inUse) {
 80077f6:	493e      	ldr	r1, [pc, #248]	; (80078f0 <cpp_main+0x178>)
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4613      	mov	r3, r2
 80077fc:	029b      	lsls	r3, r3, #10
 80077fe:	4413      	add	r3, r2
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	440b      	add	r3, r1
 8007804:	3301      	adds	r3, #1
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00f      	beq.n	800782e <cpp_main+0xb6>
 800780e:	4938      	ldr	r1, [pc, #224]	; (80078f0 <cpp_main+0x178>)
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4613      	mov	r3, r2
 8007814:	029b      	lsls	r3, r3, #10
 8007816:	4413      	add	r3, r2
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	440b      	add	r3, r1
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f083 0301 	eor.w	r3, r3, #1
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <cpp_main+0xb6>
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <cpp_main+0xb8>
 800782e:	2300      	movs	r3, #0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d04f      	beq.n	80078d4 <cpp_main+0x15c>

#ifdef STATE_GPIO_Port
				HAL_GPIO_WritePin(STATE_GPIO_Port, STATE_Pin, GPIO_PIN_SET);
 8007834:	2201      	movs	r2, #1
 8007836:	2101      	movs	r1, #1
 8007838:	482e      	ldr	r0, [pc, #184]	; (80078f4 <cpp_main+0x17c>)
 800783a:	f7fc fdc5 	bl	80043c8 <HAL_GPIO_WritePin>
#endif

				if (!request.Parse(receiveBuffers[i].buffer, MESSAGE_BODY_BYTES)) {
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4613      	mov	r3, r2
 8007842:	029b      	lsls	r3, r3, #10
 8007844:	4413      	add	r3, r2
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	4a29      	ldr	r2, [pc, #164]	; (80078f0 <cpp_main+0x178>)
 800784a:	4413      	add	r3, r2
 800784c:	3302      	adds	r3, #2
 800784e:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8007852:	4619      	mov	r1, r3
 8007854:	4828      	ldr	r0, [pc, #160]	; (80078f8 <cpp_main+0x180>)
 8007856:	f7f8 fd04 	bl	8000262 <_ZN7Request5ParseEPht>
 800785a:	4603      	mov	r3, r0
 800785c:	f083 0301 	eor.w	r3, r3, #1
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d010      	beq.n	8007888 <cpp_main+0x110>
					systemStatus.invalidCommands++;
 8007866:	4b25      	ldr	r3, [pc, #148]	; (80078fc <cpp_main+0x184>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3301      	adds	r3, #1
 800786c:	4a23      	ldr	r2, [pc, #140]	; (80078fc <cpp_main+0x184>)
 800786e:	6013      	str	r3, [r2, #0]
					systemStatus.lastInvalidCommand = receiveBuffers[i].buffer[0];
 8007870:	491f      	ldr	r1, [pc, #124]	; (80078f0 <cpp_main+0x178>)
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4613      	mov	r3, r2
 8007876:	029b      	lsls	r3, r3, #10
 8007878:	4413      	add	r3, r2
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	440b      	add	r3, r1
 800787e:	3302      	adds	r3, #2
 8007880:	781a      	ldrb	r2, [r3, #0]
 8007882:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <cpp_main+0x184>)
 8007884:	721a      	strb	r2, [r3, #8]
 8007886:	e016      	b.n	80078b6 <cpp_main+0x13e>
//							request.type, request.bodyLength);
//
//					HAL_UART_Transmit(&huart1, stringBuffer, strlen((char*) stringBuffer),
//							100);
				} else {
					systemStatus.invalidCommands++;
 8007888:	4b1c      	ldr	r3, [pc, #112]	; (80078fc <cpp_main+0x184>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3301      	adds	r3, #1
 800788e:	4a1b      	ldr	r2, [pc, #108]	; (80078fc <cpp_main+0x184>)
 8007890:	6013      	str	r3, [r2, #0]

					commandProcessor.ProcessRequest(&request, display,
 8007892:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <cpp_main+0x188>)
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <cpp_main+0x18c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <cpp_main+0x190>)
 800789e:	4916      	ldr	r1, [pc, #88]	; (80078f8 <cpp_main+0x180>)
 80078a0:	481a      	ldr	r0, [pc, #104]	; (800790c <cpp_main+0x194>)
 80078a2:	f7f8 ff03 	bl	80006ac <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13ConfigurationP12PixelMapping>
							&configuration, pixelMapping);

					if(request.type == RequestType::Configure) {
 80078a6:	4b14      	ldr	r3, [pc, #80]	; (80078f8 <cpp_main+0x180>)
 80078a8:	791b      	ldrb	r3, [r3, #4]
 80078aa:	2b80      	cmp	r3, #128	; 0x80
 80078ac:	d103      	bne.n	80078b6 <cpp_main+0x13e>
						//Reconfigure the display to match the new information
						configure();
 80078ae:	f7ff fdcf 	bl	8007450 <_Z9configurev>

						open();
 80078b2:	f7ff fe47 	bl	8007544 <_Z4openv>
					}
				}

				receiveBuffers[i].ready = false;
 80078b6:	490e      	ldr	r1, [pc, #56]	; (80078f0 <cpp_main+0x178>)
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4613      	mov	r3, r2
 80078bc:	029b      	lsls	r3, r3, #10
 80078be:	4413      	add	r3, r2
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	440b      	add	r3, r1
 80078c4:	3301      	adds	r3, #1
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]

#ifdef STATE_GPIO_Port
				HAL_GPIO_WritePin(STATE_GPIO_Port, STATE_Pin, GPIO_PIN_RESET);
 80078ca:	2200      	movs	r2, #0
 80078cc:	2101      	movs	r1, #1
 80078ce:	4809      	ldr	r0, [pc, #36]	; (80078f4 <cpp_main+0x17c>)
 80078d0:	f7fc fd7a 	bl	80043c8 <HAL_GPIO_WritePin>
		for (int i = 0; i < RX_BUFFERS; i++) {
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	3301      	adds	r3, #1
 80078d8:	617b      	str	r3, [r7, #20]
 80078da:	e789      	b.n	80077f0 <cpp_main+0x78>
 80078dc:	e0042000 	.word	0xe0042000
 80078e0:	200005fc 	.word	0x200005fc
 80078e4:	080086d0 	.word	0x080086d0
 80078e8:	200001fc 	.word	0x200001fc
 80078ec:	20001f0c 	.word	0x20001f0c
 80078f0:	20000e4c 	.word	0x20000e4c
 80078f4:	40020800 	.word	0x40020800
 80078f8:	20000640 	.word	0x20000640
 80078fc:	20001e54 	.word	0x20001e54
 8007900:	2000062c 	.word	0x2000062c
 8007904:	2000063c 	.word	0x2000063c
 8007908:	20000630 	.word	0x20000630
 800790c:	20000e48 	.word	0x20000e48

08007910 <_Z41__static_initialization_and_destruction_0ii>:
//		commit();
//
//		HAL_Delay(10);
#endif
	}
}
 8007910:	b5b0      	push	{r4, r5, r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d11f      	bne.n	8007960 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007926:	4293      	cmp	r3, r2
 8007928:	d11a      	bne.n	8007960 <_Z41__static_initialization_and_destruction_0ii+0x50>
MatrixDriver matrixDisplay;
 800792a:	4816      	ldr	r0, [pc, #88]	; (8007984 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800792c:	f7ff f876 	bl	8006a1c <_ZN12MatrixDriverC1Ev>
LedSingleWire ledSingleWireDisplay;
 8007930:	4815      	ldr	r0, [pc, #84]	; (8007988 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007932:	f7fe fe11 	bl	8006558 <_ZN13LedSingleWireC1Ev>
Configuration configuration;
 8007936:	4815      	ldr	r0, [pc, #84]	; (800798c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007938:	f7ff fd45 	bl	80073c6 <_ZN13ConfigurationC1Ev>
Request request;
 800793c:	4814      	ldr	r0, [pc, #80]	; (8007990 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800793e:	f7f8 fc4f 	bl	80001e0 <_ZN7RequestC1Ev>
CommandProcessor commandProcessor;
 8007942:	4814      	ldr	r0, [pc, #80]	; (8007994 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007944:	f7f8 fd04 	bl	8000350 <_ZN16CommandProcessorC1Ev>
RxBuffer receiveBuffers[RX_BUFFERS];
 8007948:	4b13      	ldr	r3, [pc, #76]	; (8007998 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800794a:	2401      	movs	r4, #1
 800794c:	461d      	mov	r5, r3
 800794e:	2c00      	cmp	r4, #0
 8007950:	db06      	blt.n	8007960 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8007952:	4628      	mov	r0, r5
 8007954:	f7ff fe0e 	bl	8007574 <_ZN8RxBufferC1Ev>
 8007958:	f605 0502 	addw	r5, r5, #2050	; 0x802
 800795c:	3c01      	subs	r4, #1
 800795e:	e7f6      	b.n	800794e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10a      	bne.n	800797c <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800796c:	4293      	cmp	r3, r2
 800796e:	d105      	bne.n	800797c <_Z41__static_initialization_and_destruction_0ii+0x6c>
CommandProcessor commandProcessor;
 8007970:	4808      	ldr	r0, [pc, #32]	; (8007994 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007972:	f7f8 fcfd 	bl	8000370 <_ZN16CommandProcessorD1Ev>
Request request;
 8007976:	4806      	ldr	r0, [pc, #24]	; (8007990 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007978:	f7f8 fc52 	bl	8000220 <_ZN7RequestD1Ev>
}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bdb0      	pop	{r4, r5, r7, pc}
 8007984:	20000600 	.word	0x20000600
 8007988:	2000061c 	.word	0x2000061c
 800798c:	20000630 	.word	0x20000630
 8007990:	20000640 	.word	0x20000640
 8007994:	20000e48 	.word	0x20000e48
 8007998:	20000e4c 	.word	0x20000e4c

0800799c <_GLOBAL__sub_I_hdma_spi1_rx>:
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
 80079a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80079a4:	2001      	movs	r0, #1
 80079a6:	f7ff ffb3 	bl	8007910 <_Z41__static_initialization_and_destruction_0ii>
 80079aa:	bd80      	pop	{r7, pc}

080079ac <_GLOBAL__sub_D_hdma_spi1_rx>:
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80079b4:	2000      	movs	r0, #0
 80079b6:	f7ff ffab 	bl	8007910 <_Z41__static_initialization_and_destruction_0ii>
 80079ba:	bd80      	pop	{r7, pc}

080079bc <_ZN13Configuration8getWidthEv>:
		Uninitialized = 0, Ready = 1
	};

	Status status = Uninitialized;

	uint16_t getWidth() {
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
		switch (pixelConfiguration) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7a9b      	ldrb	r3, [r3, #10]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d107      	bne.n	80079dc <_ZN13Configuration8getWidthEv+0x20>
		case Simple:
			return elementWidth * elementCount;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	88da      	ldrh	r2, [r3, #6]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	889b      	ldrh	r3, [r3, #4]
 80079d4:	fb12 f303 	smulbb	r3, r2, r3
 80079d8:	b29b      	uxth	r3, r3
 80079da:	e001      	b.n	80079e0 <_ZN13Configuration8getWidthEv+0x24>
		default:
			return elementWidth;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	88db      	ldrh	r3, [r3, #6]
		}
	}
 80079e0:	4618      	mov	r0, r3
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <_ZN13Configuration9getHeightEv>:

	uint16_t getHeight() {
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
		switch (pixelConfiguration) {
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7a9b      	ldrb	r3, [r3, #10]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d807      	bhi.n	8007a0e <_ZN13Configuration9getHeightEv+0x22>
		case LeftToRight:
		case SnakeStartBottomRight:
			return elementHeight * elementCount;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	891a      	ldrh	r2, [r3, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	889b      	ldrh	r3, [r3, #4]
 8007a06:	fb12 f303 	smulbb	r3, r2, r3
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	e001      	b.n	8007a12 <_ZN13Configuration9getHeightEv+0x26>
		default:
			return elementHeight;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	891b      	ldrh	r3, [r3, #8]
		}
	}
 8007a12:	4618      	mov	r0, r3
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8007a1e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007a20:	2400      	movs	r4, #0
 8007a22:	2310      	movs	r3, #16
 8007a24:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007a28:	6803      	ldr	r3, [r0, #0]
 8007a2a:	9400      	str	r4, [sp, #0]
 8007a2c:	699e      	ldr	r6, [r3, #24]
 8007a2e:	f88d 4004 	strb.w	r4, [sp, #4]
 8007a32:	4615      	mov	r5, r2
 8007a34:	466b      	mov	r3, sp
 8007a36:	6812      	ldr	r2, [r2, #0]
 8007a38:	47b0      	blx	r6
 8007a3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007a3e:	f003 0306 	and.w	r3, r3, #6
 8007a42:	2b06      	cmp	r3, #6
 8007a44:	bf03      	ittte	eq
 8007a46:	9b00      	ldreq	r3, [sp, #0]
 8007a48:	602b      	streq	r3, [r5, #0]
 8007a4a:	2001      	moveq	r0, #1
 8007a4c:	4620      	movne	r0, r4
 8007a4e:	b004      	add	sp, #16
 8007a50:	bd70      	pop	{r4, r5, r6, pc}

08007a52 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8007a52:	9800      	ldr	r0, [sp, #0]
 8007a54:	4290      	cmp	r0, r2
 8007a56:	bf14      	ite	ne
 8007a58:	2001      	movne	r0, #1
 8007a5a:	2006      	moveq	r0, #6
 8007a5c:	4770      	bx	lr
	...

08007a60 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8007a60:	b510      	push	{r4, lr}
 8007a62:	4b03      	ldr	r3, [pc, #12]	; (8007a70 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8007a64:	6003      	str	r3, [r0, #0]
 8007a66:	4604      	mov	r4, r0
 8007a68:	f000 f8e5 	bl	8007c36 <_ZNSt9type_infoD1Ev>
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	bd10      	pop	{r4, pc}
 8007a70:	08008814 	.word	0x08008814

08007a74 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	4604      	mov	r4, r0
 8007a78:	f7ff fff2 	bl	8007a60 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	2108      	movs	r1, #8
 8007a80:	f000 f842 	bl	8007b08 <_ZdlPvj>
 8007a84:	4620      	mov	r0, r4
 8007a86:	bd10      	pop	{r4, pc}

08007a88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8007a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8c:	461f      	mov	r7, r3
 8007a8e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8007a92:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007a96:	4598      	cmp	r8, r3
 8007a98:	4606      	mov	r6, r0
 8007a9a:	4615      	mov	r5, r2
 8007a9c:	d107      	bne.n	8007aae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8007a9e:	9907      	ldr	r1, [sp, #28]
 8007aa0:	f000 f8cc 	bl	8007c3c <_ZNKSt9type_infoeqERKS_>
 8007aa4:	b118      	cbz	r0, 8007aae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8007aa6:	7165      	strb	r5, [r4, #5]
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aae:	4639      	mov	r1, r7
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f000 f8c3 	bl	8007c3c <_ZNKSt9type_infoeqERKS_>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d0f6      	beq.n	8007aa8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8007aba:	2301      	movs	r3, #1
 8007abc:	f8c4 8000 	str.w	r8, [r4]
 8007ac0:	7125      	strb	r5, [r4, #4]
 8007ac2:	71a3      	strb	r3, [r4, #6]
 8007ac4:	e7f0      	b.n	8007aa8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08007ac6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8007ac6:	b538      	push	{r3, r4, r5, lr}
 8007ac8:	4615      	mov	r5, r2
 8007aca:	461c      	mov	r4, r3
 8007acc:	f000 f8b6 	bl	8007c3c <_ZNKSt9type_infoeqERKS_>
 8007ad0:	b120      	cbz	r0, 8007adc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8007ad2:	2308      	movs	r3, #8
 8007ad4:	60e3      	str	r3, [r4, #12]
 8007ad6:	2306      	movs	r3, #6
 8007ad8:	6025      	str	r5, [r4, #0]
 8007ada:	7123      	strb	r3, [r4, #4]
 8007adc:	bd38      	pop	{r3, r4, r5, pc}

08007ade <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8007ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	9201      	str	r2, [sp, #4]
 8007ae6:	461e      	mov	r6, r3
 8007ae8:	f000 f8a8 	bl	8007c3c <_ZNKSt9type_infoeqERKS_>
 8007aec:	b950      	cbnz	r0, 8007b04 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8007aee:	2e03      	cmp	r6, #3
 8007af0:	d808      	bhi.n	8007b04 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	9a01      	ldr	r2, [sp, #4]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	4629      	mov	r1, r5
 8007afa:	4620      	mov	r0, r4
 8007afc:	b002      	add	sp, #8
 8007afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b02:	4718      	bx	r3
 8007b04:	b002      	add	sp, #8
 8007b06:	bd70      	pop	{r4, r5, r6, pc}

08007b08 <_ZdlPvj>:
 8007b08:	f000 b8ae 	b.w	8007c68 <_ZdlPv>

08007b0c <_Znwj>:
 8007b0c:	2801      	cmp	r0, #1
 8007b0e:	bf38      	it	cc
 8007b10:	2001      	movcc	r0, #1
 8007b12:	b510      	push	{r4, lr}
 8007b14:	4604      	mov	r4, r0
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 f8f4 	bl	8007d04 <malloc>
 8007b1c:	b930      	cbnz	r0, 8007b2c <_Znwj+0x20>
 8007b1e:	f000 f8b7 	bl	8007c90 <_ZSt15get_new_handlerv>
 8007b22:	b908      	cbnz	r0, 8007b28 <_Znwj+0x1c>
 8007b24:	f000 f8bc 	bl	8007ca0 <abort>
 8007b28:	4780      	blx	r0
 8007b2a:	e7f4      	b.n	8007b16 <_Znwj+0xa>
 8007b2c:	bd10      	pop	{r4, pc}

08007b2e <_Znaj>:
 8007b2e:	f7ff bfed 	b.w	8007b0c <_Znwj>

08007b32 <__cxa_pure_virtual>:
 8007b32:	b508      	push	{r3, lr}
 8007b34:	f000 f8a6 	bl	8007c84 <_ZSt9terminatev>

08007b38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8007b38:	b510      	push	{r4, lr}
 8007b3a:	4b03      	ldr	r3, [pc, #12]	; (8007b48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8007b3c:	6003      	str	r3, [r0, #0]
 8007b3e:	4604      	mov	r4, r0
 8007b40:	f7ff ff8e 	bl	8007a60 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007b44:	4620      	mov	r0, r4
 8007b46:	bd10      	pop	{r4, pc}
 8007b48:	08008874 	.word	0x08008874

08007b4c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	4604      	mov	r4, r0
 8007b50:	f7ff fff2 	bl	8007b38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8007b54:	4620      	mov	r0, r4
 8007b56:	210c      	movs	r1, #12
 8007b58:	f7ff ffd6 	bl	8007b08 <_ZdlPvj>
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	bd10      	pop	{r4, pc}

08007b60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8007b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b62:	9f08      	ldr	r7, [sp, #32]
 8007b64:	4297      	cmp	r7, r2
 8007b66:	4605      	mov	r5, r0
 8007b68:	460e      	mov	r6, r1
 8007b6a:	4614      	mov	r4, r2
 8007b6c:	d00a      	beq.n	8007b84 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8007b6e:	68a8      	ldr	r0, [r5, #8]
 8007b70:	6802      	ldr	r2, [r0, #0]
 8007b72:	9708      	str	r7, [sp, #32]
 8007b74:	6a15      	ldr	r5, [r2, #32]
 8007b76:	4631      	mov	r1, r6
 8007b78:	4622      	mov	r2, r4
 8007b7a:	46ac      	mov	ip, r5
 8007b7c:	b003      	add	sp, #12
 8007b7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007b82:	4760      	bx	ip
 8007b84:	4619      	mov	r1, r3
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	f000 f858 	bl	8007c3c <_ZNKSt9type_infoeqERKS_>
 8007b8c:	9b01      	ldr	r3, [sp, #4]
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d0ed      	beq.n	8007b6e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8007b92:	2006      	movs	r0, #6
 8007b94:	b003      	add	sp, #12
 8007b96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8007b98:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8007ba4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8007ba8:	4681      	mov	r9, r0
 8007baa:	4617      	mov	r7, r2
 8007bac:	4698      	mov	r8, r3
 8007bae:	f000 f845 	bl	8007c3c <_ZNKSt9type_infoeqERKS_>
 8007bb2:	b190      	cbz	r0, 8007bda <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8007bb4:	2d00      	cmp	r5, #0
 8007bb6:	6034      	str	r4, [r6, #0]
 8007bb8:	7137      	strb	r7, [r6, #4]
 8007bba:	db09      	blt.n	8007bd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8007bbc:	1961      	adds	r1, r4, r5
 8007bbe:	458a      	cmp	sl, r1
 8007bc0:	bf0c      	ite	eq
 8007bc2:	2106      	moveq	r1, #6
 8007bc4:	2101      	movne	r1, #1
 8007bc6:	71b1      	strb	r1, [r6, #6]
 8007bc8:	2000      	movs	r0, #0
 8007bca:	b001      	add	sp, #4
 8007bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd0:	3502      	adds	r5, #2
 8007bd2:	d1f9      	bne.n	8007bc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	71b3      	strb	r3, [r6, #6]
 8007bd8:	e7f6      	b.n	8007bc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007bda:	4554      	cmp	r4, sl
 8007bdc:	d106      	bne.n	8007bec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8007bde:	4659      	mov	r1, fp
 8007be0:	4648      	mov	r0, r9
 8007be2:	f000 f82b 	bl	8007c3c <_ZNKSt9type_infoeqERKS_>
 8007be6:	b108      	cbz	r0, 8007bec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8007be8:	7177      	strb	r7, [r6, #5]
 8007bea:	e7ed      	b.n	8007bc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007bec:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8007bf0:	6803      	ldr	r3, [r0, #0]
 8007bf2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8007bf6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8007bfa:	69dc      	ldr	r4, [r3, #28]
 8007bfc:	463a      	mov	r2, r7
 8007bfe:	4643      	mov	r3, r8
 8007c00:	4629      	mov	r1, r5
 8007c02:	46a4      	mov	ip, r4
 8007c04:	b001      	add	sp, #4
 8007c06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	4760      	bx	ip

08007c0c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8007c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c10:	4607      	mov	r7, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	4615      	mov	r5, r2
 8007c16:	461e      	mov	r6, r3
 8007c18:	f7ff ff55 	bl	8007ac6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8007c1c:	b948      	cbnz	r0, 8007c32 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8007c1e:	68b8      	ldr	r0, [r7, #8]
 8007c20:	6803      	ldr	r3, [r0, #0]
 8007c22:	699f      	ldr	r7, [r3, #24]
 8007c24:	462a      	mov	r2, r5
 8007c26:	4633      	mov	r3, r6
 8007c28:	4621      	mov	r1, r4
 8007c2a:	46bc      	mov	ip, r7
 8007c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	4760      	bx	ip
 8007c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c36 <_ZNSt9type_infoD1Ev>:
 8007c36:	4770      	bx	lr

08007c38 <_ZNKSt9type_info14__is_pointer_pEv>:
 8007c38:	2000      	movs	r0, #0
 8007c3a:	4770      	bx	lr

08007c3c <_ZNKSt9type_infoeqERKS_>:
 8007c3c:	4281      	cmp	r1, r0
 8007c3e:	b508      	push	{r3, lr}
 8007c40:	d00e      	beq.n	8007c60 <_ZNKSt9type_infoeqERKS_+0x24>
 8007c42:	6840      	ldr	r0, [r0, #4]
 8007c44:	7803      	ldrb	r3, [r0, #0]
 8007c46:	2b2a      	cmp	r3, #42	; 0x2a
 8007c48:	d00c      	beq.n	8007c64 <_ZNKSt9type_infoeqERKS_+0x28>
 8007c4a:	6849      	ldr	r1, [r1, #4]
 8007c4c:	780b      	ldrb	r3, [r1, #0]
 8007c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c50:	bf08      	it	eq
 8007c52:	3101      	addeq	r1, #1
 8007c54:	f7f8 fd82 	bl	800075c <strcmp>
 8007c58:	fab0 f080 	clz	r0, r0
 8007c5c:	0940      	lsrs	r0, r0, #5
 8007c5e:	bd08      	pop	{r3, pc}
 8007c60:	2001      	movs	r0, #1
 8007c62:	e7fc      	b.n	8007c5e <_ZNKSt9type_infoeqERKS_+0x22>
 8007c64:	2000      	movs	r0, #0
 8007c66:	e7fa      	b.n	8007c5e <_ZNKSt9type_infoeqERKS_+0x22>

08007c68 <_ZdlPv>:
 8007c68:	f000 b854 	b.w	8007d14 <free>

08007c6c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007c6c:	b508      	push	{r3, lr}
 8007c6e:	4780      	blx	r0
 8007c70:	f000 f816 	bl	8007ca0 <abort>

08007c74 <_ZSt13get_terminatev>:
 8007c74:	4b02      	ldr	r3, [pc, #8]	; (8007c80 <_ZSt13get_terminatev+0xc>)
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	f3bf 8f5b 	dmb	ish
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	2000010c 	.word	0x2000010c

08007c84 <_ZSt9terminatev>:
 8007c84:	b508      	push	{r3, lr}
 8007c86:	f7ff fff5 	bl	8007c74 <_ZSt13get_terminatev>
 8007c8a:	f7ff ffef 	bl	8007c6c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08007c90 <_ZSt15get_new_handlerv>:
 8007c90:	4b02      	ldr	r3, [pc, #8]	; (8007c9c <_ZSt15get_new_handlerv+0xc>)
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	f3bf 8f5b 	dmb	ish
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	20001e60 	.word	0x20001e60

08007ca0 <abort>:
 8007ca0:	b508      	push	{r3, lr}
 8007ca2:	2006      	movs	r0, #6
 8007ca4:	f000 f936 	bl	8007f14 <raise>
 8007ca8:	2001      	movs	r0, #1
 8007caa:	f7fa fad3 	bl	8002254 <_exit>
	...

08007cb0 <__errno>:
 8007cb0:	4b01      	ldr	r3, [pc, #4]	; (8007cb8 <__errno+0x8>)
 8007cb2:	6818      	ldr	r0, [r3, #0]
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20000110 	.word	0x20000110

08007cbc <__libc_init_array>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	4d0d      	ldr	r5, [pc, #52]	; (8007cf4 <__libc_init_array+0x38>)
 8007cc0:	4c0d      	ldr	r4, [pc, #52]	; (8007cf8 <__libc_init_array+0x3c>)
 8007cc2:	1b64      	subs	r4, r4, r5
 8007cc4:	10a4      	asrs	r4, r4, #2
 8007cc6:	2600      	movs	r6, #0
 8007cc8:	42a6      	cmp	r6, r4
 8007cca:	d109      	bne.n	8007ce0 <__libc_init_array+0x24>
 8007ccc:	4d0b      	ldr	r5, [pc, #44]	; (8007cfc <__libc_init_array+0x40>)
 8007cce:	4c0c      	ldr	r4, [pc, #48]	; (8007d00 <__libc_init_array+0x44>)
 8007cd0:	f000 fca2 	bl	8008618 <_init>
 8007cd4:	1b64      	subs	r4, r4, r5
 8007cd6:	10a4      	asrs	r4, r4, #2
 8007cd8:	2600      	movs	r6, #0
 8007cda:	42a6      	cmp	r6, r4
 8007cdc:	d105      	bne.n	8007cea <__libc_init_array+0x2e>
 8007cde:	bd70      	pop	{r4, r5, r6, pc}
 8007ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce4:	4798      	blx	r3
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	e7ee      	b.n	8007cc8 <__libc_init_array+0xc>
 8007cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cee:	4798      	blx	r3
 8007cf0:	3601      	adds	r6, #1
 8007cf2:	e7f2      	b.n	8007cda <__libc_init_array+0x1e>
 8007cf4:	08008a24 	.word	0x08008a24
 8007cf8:	08008a24 	.word	0x08008a24
 8007cfc:	08008a24 	.word	0x08008a24
 8007d00:	08008a2c 	.word	0x08008a2c

08007d04 <malloc>:
 8007d04:	4b02      	ldr	r3, [pc, #8]	; (8007d10 <malloc+0xc>)
 8007d06:	4601      	mov	r1, r0
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	f000 b871 	b.w	8007df0 <_malloc_r>
 8007d0e:	bf00      	nop
 8007d10:	20000110 	.word	0x20000110

08007d14 <free>:
 8007d14:	4b02      	ldr	r3, [pc, #8]	; (8007d20 <free+0xc>)
 8007d16:	4601      	mov	r1, r0
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	f000 b819 	b.w	8007d50 <_free_r>
 8007d1e:	bf00      	nop
 8007d20:	20000110 	.word	0x20000110

08007d24 <memcpy>:
 8007d24:	440a      	add	r2, r1
 8007d26:	4291      	cmp	r1, r2
 8007d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d2c:	d100      	bne.n	8007d30 <memcpy+0xc>
 8007d2e:	4770      	bx	lr
 8007d30:	b510      	push	{r4, lr}
 8007d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d3a:	4291      	cmp	r1, r2
 8007d3c:	d1f9      	bne.n	8007d32 <memcpy+0xe>
 8007d3e:	bd10      	pop	{r4, pc}

08007d40 <memset>:
 8007d40:	4402      	add	r2, r0
 8007d42:	4603      	mov	r3, r0
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d100      	bne.n	8007d4a <memset+0xa>
 8007d48:	4770      	bx	lr
 8007d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4e:	e7f9      	b.n	8007d44 <memset+0x4>

08007d50 <_free_r>:
 8007d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d52:	2900      	cmp	r1, #0
 8007d54:	d048      	beq.n	8007de8 <_free_r+0x98>
 8007d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d5a:	9001      	str	r0, [sp, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f1a1 0404 	sub.w	r4, r1, #4
 8007d62:	bfb8      	it	lt
 8007d64:	18e4      	addlt	r4, r4, r3
 8007d66:	f000 f911 	bl	8007f8c <__malloc_lock>
 8007d6a:	4a20      	ldr	r2, [pc, #128]	; (8007dec <_free_r+0x9c>)
 8007d6c:	9801      	ldr	r0, [sp, #4]
 8007d6e:	6813      	ldr	r3, [r2, #0]
 8007d70:	4615      	mov	r5, r2
 8007d72:	b933      	cbnz	r3, 8007d82 <_free_r+0x32>
 8007d74:	6063      	str	r3, [r4, #4]
 8007d76:	6014      	str	r4, [r2, #0]
 8007d78:	b003      	add	sp, #12
 8007d7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d7e:	f000 b90b 	b.w	8007f98 <__malloc_unlock>
 8007d82:	42a3      	cmp	r3, r4
 8007d84:	d90b      	bls.n	8007d9e <_free_r+0x4e>
 8007d86:	6821      	ldr	r1, [r4, #0]
 8007d88:	1862      	adds	r2, r4, r1
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	bf04      	itt	eq
 8007d8e:	681a      	ldreq	r2, [r3, #0]
 8007d90:	685b      	ldreq	r3, [r3, #4]
 8007d92:	6063      	str	r3, [r4, #4]
 8007d94:	bf04      	itt	eq
 8007d96:	1852      	addeq	r2, r2, r1
 8007d98:	6022      	streq	r2, [r4, #0]
 8007d9a:	602c      	str	r4, [r5, #0]
 8007d9c:	e7ec      	b.n	8007d78 <_free_r+0x28>
 8007d9e:	461a      	mov	r2, r3
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	b10b      	cbz	r3, 8007da8 <_free_r+0x58>
 8007da4:	42a3      	cmp	r3, r4
 8007da6:	d9fa      	bls.n	8007d9e <_free_r+0x4e>
 8007da8:	6811      	ldr	r1, [r2, #0]
 8007daa:	1855      	adds	r5, r2, r1
 8007dac:	42a5      	cmp	r5, r4
 8007dae:	d10b      	bne.n	8007dc8 <_free_r+0x78>
 8007db0:	6824      	ldr	r4, [r4, #0]
 8007db2:	4421      	add	r1, r4
 8007db4:	1854      	adds	r4, r2, r1
 8007db6:	42a3      	cmp	r3, r4
 8007db8:	6011      	str	r1, [r2, #0]
 8007dba:	d1dd      	bne.n	8007d78 <_free_r+0x28>
 8007dbc:	681c      	ldr	r4, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	6053      	str	r3, [r2, #4]
 8007dc2:	4421      	add	r1, r4
 8007dc4:	6011      	str	r1, [r2, #0]
 8007dc6:	e7d7      	b.n	8007d78 <_free_r+0x28>
 8007dc8:	d902      	bls.n	8007dd0 <_free_r+0x80>
 8007dca:	230c      	movs	r3, #12
 8007dcc:	6003      	str	r3, [r0, #0]
 8007dce:	e7d3      	b.n	8007d78 <_free_r+0x28>
 8007dd0:	6825      	ldr	r5, [r4, #0]
 8007dd2:	1961      	adds	r1, r4, r5
 8007dd4:	428b      	cmp	r3, r1
 8007dd6:	bf04      	itt	eq
 8007dd8:	6819      	ldreq	r1, [r3, #0]
 8007dda:	685b      	ldreq	r3, [r3, #4]
 8007ddc:	6063      	str	r3, [r4, #4]
 8007dde:	bf04      	itt	eq
 8007de0:	1949      	addeq	r1, r1, r5
 8007de2:	6021      	streq	r1, [r4, #0]
 8007de4:	6054      	str	r4, [r2, #4]
 8007de6:	e7c7      	b.n	8007d78 <_free_r+0x28>
 8007de8:	b003      	add	sp, #12
 8007dea:	bd30      	pop	{r4, r5, pc}
 8007dec:	20001e64 	.word	0x20001e64

08007df0 <_malloc_r>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	1ccd      	adds	r5, r1, #3
 8007df4:	f025 0503 	bic.w	r5, r5, #3
 8007df8:	3508      	adds	r5, #8
 8007dfa:	2d0c      	cmp	r5, #12
 8007dfc:	bf38      	it	cc
 8007dfe:	250c      	movcc	r5, #12
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	4606      	mov	r6, r0
 8007e04:	db01      	blt.n	8007e0a <_malloc_r+0x1a>
 8007e06:	42a9      	cmp	r1, r5
 8007e08:	d903      	bls.n	8007e12 <_malloc_r+0x22>
 8007e0a:	230c      	movs	r3, #12
 8007e0c:	6033      	str	r3, [r6, #0]
 8007e0e:	2000      	movs	r0, #0
 8007e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e12:	f000 f8bb 	bl	8007f8c <__malloc_lock>
 8007e16:	4921      	ldr	r1, [pc, #132]	; (8007e9c <_malloc_r+0xac>)
 8007e18:	680a      	ldr	r2, [r1, #0]
 8007e1a:	4614      	mov	r4, r2
 8007e1c:	b99c      	cbnz	r4, 8007e46 <_malloc_r+0x56>
 8007e1e:	4f20      	ldr	r7, [pc, #128]	; (8007ea0 <_malloc_r+0xb0>)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	b923      	cbnz	r3, 8007e2e <_malloc_r+0x3e>
 8007e24:	4621      	mov	r1, r4
 8007e26:	4630      	mov	r0, r6
 8007e28:	f000 f83c 	bl	8007ea4 <_sbrk_r>
 8007e2c:	6038      	str	r0, [r7, #0]
 8007e2e:	4629      	mov	r1, r5
 8007e30:	4630      	mov	r0, r6
 8007e32:	f000 f837 	bl	8007ea4 <_sbrk_r>
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	d123      	bne.n	8007e82 <_malloc_r+0x92>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	6033      	str	r3, [r6, #0]
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f000 f8aa 	bl	8007f98 <__malloc_unlock>
 8007e44:	e7e3      	b.n	8007e0e <_malloc_r+0x1e>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	1b5b      	subs	r3, r3, r5
 8007e4a:	d417      	bmi.n	8007e7c <_malloc_r+0x8c>
 8007e4c:	2b0b      	cmp	r3, #11
 8007e4e:	d903      	bls.n	8007e58 <_malloc_r+0x68>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	441c      	add	r4, r3
 8007e54:	6025      	str	r5, [r4, #0]
 8007e56:	e004      	b.n	8007e62 <_malloc_r+0x72>
 8007e58:	6863      	ldr	r3, [r4, #4]
 8007e5a:	42a2      	cmp	r2, r4
 8007e5c:	bf0c      	ite	eq
 8007e5e:	600b      	streq	r3, [r1, #0]
 8007e60:	6053      	strne	r3, [r2, #4]
 8007e62:	4630      	mov	r0, r6
 8007e64:	f000 f898 	bl	8007f98 <__malloc_unlock>
 8007e68:	f104 000b 	add.w	r0, r4, #11
 8007e6c:	1d23      	adds	r3, r4, #4
 8007e6e:	f020 0007 	bic.w	r0, r0, #7
 8007e72:	1ac2      	subs	r2, r0, r3
 8007e74:	d0cc      	beq.n	8007e10 <_malloc_r+0x20>
 8007e76:	1a1b      	subs	r3, r3, r0
 8007e78:	50a3      	str	r3, [r4, r2]
 8007e7a:	e7c9      	b.n	8007e10 <_malloc_r+0x20>
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	6864      	ldr	r4, [r4, #4]
 8007e80:	e7cc      	b.n	8007e1c <_malloc_r+0x2c>
 8007e82:	1cc4      	adds	r4, r0, #3
 8007e84:	f024 0403 	bic.w	r4, r4, #3
 8007e88:	42a0      	cmp	r0, r4
 8007e8a:	d0e3      	beq.n	8007e54 <_malloc_r+0x64>
 8007e8c:	1a21      	subs	r1, r4, r0
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 f808 	bl	8007ea4 <_sbrk_r>
 8007e94:	3001      	adds	r0, #1
 8007e96:	d1dd      	bne.n	8007e54 <_malloc_r+0x64>
 8007e98:	e7cf      	b.n	8007e3a <_malloc_r+0x4a>
 8007e9a:	bf00      	nop
 8007e9c:	20001e64 	.word	0x20001e64
 8007ea0:	20001e68 	.word	0x20001e68

08007ea4 <_sbrk_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4d06      	ldr	r5, [pc, #24]	; (8007ec0 <_sbrk_r+0x1c>)
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4604      	mov	r4, r0
 8007eac:	4608      	mov	r0, r1
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	f7fa f9da 	bl	8002268 <_sbrk>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d102      	bne.n	8007ebe <_sbrk_r+0x1a>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	b103      	cbz	r3, 8007ebe <_sbrk_r+0x1a>
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	20001fe8 	.word	0x20001fe8

08007ec4 <_raise_r>:
 8007ec4:	291f      	cmp	r1, #31
 8007ec6:	b538      	push	{r3, r4, r5, lr}
 8007ec8:	4604      	mov	r4, r0
 8007eca:	460d      	mov	r5, r1
 8007ecc:	d904      	bls.n	8007ed8 <_raise_r+0x14>
 8007ece:	2316      	movs	r3, #22
 8007ed0:	6003      	str	r3, [r0, #0]
 8007ed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007eda:	b112      	cbz	r2, 8007ee2 <_raise_r+0x1e>
 8007edc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ee0:	b94b      	cbnz	r3, 8007ef6 <_raise_r+0x32>
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 f830 	bl	8007f48 <_getpid_r>
 8007ee8:	462a      	mov	r2, r5
 8007eea:	4601      	mov	r1, r0
 8007eec:	4620      	mov	r0, r4
 8007eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ef2:	f000 b817 	b.w	8007f24 <_kill_r>
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d00a      	beq.n	8007f10 <_raise_r+0x4c>
 8007efa:	1c59      	adds	r1, r3, #1
 8007efc:	d103      	bne.n	8007f06 <_raise_r+0x42>
 8007efe:	2316      	movs	r3, #22
 8007f00:	6003      	str	r3, [r0, #0]
 8007f02:	2001      	movs	r0, #1
 8007f04:	e7e7      	b.n	8007ed6 <_raise_r+0x12>
 8007f06:	2400      	movs	r4, #0
 8007f08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	4798      	blx	r3
 8007f10:	2000      	movs	r0, #0
 8007f12:	e7e0      	b.n	8007ed6 <_raise_r+0x12>

08007f14 <raise>:
 8007f14:	4b02      	ldr	r3, [pc, #8]	; (8007f20 <raise+0xc>)
 8007f16:	4601      	mov	r1, r0
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	f7ff bfd3 	b.w	8007ec4 <_raise_r>
 8007f1e:	bf00      	nop
 8007f20:	20000110 	.word	0x20000110

08007f24 <_kill_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d07      	ldr	r5, [pc, #28]	; (8007f44 <_kill_r+0x20>)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	4611      	mov	r1, r2
 8007f30:	602b      	str	r3, [r5, #0]
 8007f32:	f7fa f97f 	bl	8002234 <_kill>
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	d102      	bne.n	8007f40 <_kill_r+0x1c>
 8007f3a:	682b      	ldr	r3, [r5, #0]
 8007f3c:	b103      	cbz	r3, 8007f40 <_kill_r+0x1c>
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	bd38      	pop	{r3, r4, r5, pc}
 8007f42:	bf00      	nop
 8007f44:	20001fe8 	.word	0x20001fe8

08007f48 <_getpid_r>:
 8007f48:	f7fa b96c 	b.w	8002224 <_getpid>

08007f4c <siprintf>:
 8007f4c:	b40e      	push	{r1, r2, r3}
 8007f4e:	b500      	push	{lr}
 8007f50:	b09c      	sub	sp, #112	; 0x70
 8007f52:	ab1d      	add	r3, sp, #116	; 0x74
 8007f54:	9002      	str	r0, [sp, #8]
 8007f56:	9006      	str	r0, [sp, #24]
 8007f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f5c:	4809      	ldr	r0, [pc, #36]	; (8007f84 <siprintf+0x38>)
 8007f5e:	9107      	str	r1, [sp, #28]
 8007f60:	9104      	str	r1, [sp, #16]
 8007f62:	4909      	ldr	r1, [pc, #36]	; (8007f88 <siprintf+0x3c>)
 8007f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f68:	9105      	str	r1, [sp, #20]
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	a902      	add	r1, sp, #8
 8007f70:	f000 f874 	bl	800805c <_svfiprintf_r>
 8007f74:	9b02      	ldr	r3, [sp, #8]
 8007f76:	2200      	movs	r2, #0
 8007f78:	701a      	strb	r2, [r3, #0]
 8007f7a:	b01c      	add	sp, #112	; 0x70
 8007f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f80:	b003      	add	sp, #12
 8007f82:	4770      	bx	lr
 8007f84:	20000110 	.word	0x20000110
 8007f88:	ffff0208 	.word	0xffff0208

08007f8c <__malloc_lock>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__malloc_lock+0x8>)
 8007f8e:	f000 baf9 	b.w	8008584 <__retarget_lock_acquire_recursive>
 8007f92:	bf00      	nop
 8007f94:	20001ff0 	.word	0x20001ff0

08007f98 <__malloc_unlock>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__malloc_unlock+0x8>)
 8007f9a:	f000 baf4 	b.w	8008586 <__retarget_lock_release_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	20001ff0 	.word	0x20001ff0

08007fa4 <__ssputs_r>:
 8007fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa8:	688e      	ldr	r6, [r1, #8]
 8007faa:	429e      	cmp	r6, r3
 8007fac:	4682      	mov	sl, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	4690      	mov	r8, r2
 8007fb2:	461f      	mov	r7, r3
 8007fb4:	d838      	bhi.n	8008028 <__ssputs_r+0x84>
 8007fb6:	898a      	ldrh	r2, [r1, #12]
 8007fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fbc:	d032      	beq.n	8008024 <__ssputs_r+0x80>
 8007fbe:	6825      	ldr	r5, [r4, #0]
 8007fc0:	6909      	ldr	r1, [r1, #16]
 8007fc2:	eba5 0901 	sub.w	r9, r5, r1
 8007fc6:	6965      	ldr	r5, [r4, #20]
 8007fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	444b      	add	r3, r9
 8007fd4:	106d      	asrs	r5, r5, #1
 8007fd6:	429d      	cmp	r5, r3
 8007fd8:	bf38      	it	cc
 8007fda:	461d      	movcc	r5, r3
 8007fdc:	0553      	lsls	r3, r2, #21
 8007fde:	d531      	bpl.n	8008044 <__ssputs_r+0xa0>
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	f7ff ff05 	bl	8007df0 <_malloc_r>
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	b950      	cbnz	r0, 8008000 <__ssputs_r+0x5c>
 8007fea:	230c      	movs	r3, #12
 8007fec:	f8ca 3000 	str.w	r3, [sl]
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008000:	6921      	ldr	r1, [r4, #16]
 8008002:	464a      	mov	r2, r9
 8008004:	f7ff fe8e 	bl	8007d24 <memcpy>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800800e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008012:	81a3      	strh	r3, [r4, #12]
 8008014:	6126      	str	r6, [r4, #16]
 8008016:	6165      	str	r5, [r4, #20]
 8008018:	444e      	add	r6, r9
 800801a:	eba5 0509 	sub.w	r5, r5, r9
 800801e:	6026      	str	r6, [r4, #0]
 8008020:	60a5      	str	r5, [r4, #8]
 8008022:	463e      	mov	r6, r7
 8008024:	42be      	cmp	r6, r7
 8008026:	d900      	bls.n	800802a <__ssputs_r+0x86>
 8008028:	463e      	mov	r6, r7
 800802a:	4632      	mov	r2, r6
 800802c:	6820      	ldr	r0, [r4, #0]
 800802e:	4641      	mov	r1, r8
 8008030:	f000 faaa 	bl	8008588 <memmove>
 8008034:	68a3      	ldr	r3, [r4, #8]
 8008036:	6822      	ldr	r2, [r4, #0]
 8008038:	1b9b      	subs	r3, r3, r6
 800803a:	4432      	add	r2, r6
 800803c:	60a3      	str	r3, [r4, #8]
 800803e:	6022      	str	r2, [r4, #0]
 8008040:	2000      	movs	r0, #0
 8008042:	e7db      	b.n	8007ffc <__ssputs_r+0x58>
 8008044:	462a      	mov	r2, r5
 8008046:	f000 fab9 	bl	80085bc <_realloc_r>
 800804a:	4606      	mov	r6, r0
 800804c:	2800      	cmp	r0, #0
 800804e:	d1e1      	bne.n	8008014 <__ssputs_r+0x70>
 8008050:	6921      	ldr	r1, [r4, #16]
 8008052:	4650      	mov	r0, sl
 8008054:	f7ff fe7c 	bl	8007d50 <_free_r>
 8008058:	e7c7      	b.n	8007fea <__ssputs_r+0x46>
	...

0800805c <_svfiprintf_r>:
 800805c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	4698      	mov	r8, r3
 8008062:	898b      	ldrh	r3, [r1, #12]
 8008064:	061b      	lsls	r3, r3, #24
 8008066:	b09d      	sub	sp, #116	; 0x74
 8008068:	4607      	mov	r7, r0
 800806a:	460d      	mov	r5, r1
 800806c:	4614      	mov	r4, r2
 800806e:	d50e      	bpl.n	800808e <_svfiprintf_r+0x32>
 8008070:	690b      	ldr	r3, [r1, #16]
 8008072:	b963      	cbnz	r3, 800808e <_svfiprintf_r+0x32>
 8008074:	2140      	movs	r1, #64	; 0x40
 8008076:	f7ff febb 	bl	8007df0 <_malloc_r>
 800807a:	6028      	str	r0, [r5, #0]
 800807c:	6128      	str	r0, [r5, #16]
 800807e:	b920      	cbnz	r0, 800808a <_svfiprintf_r+0x2e>
 8008080:	230c      	movs	r3, #12
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008088:	e0d1      	b.n	800822e <_svfiprintf_r+0x1d2>
 800808a:	2340      	movs	r3, #64	; 0x40
 800808c:	616b      	str	r3, [r5, #20]
 800808e:	2300      	movs	r3, #0
 8008090:	9309      	str	r3, [sp, #36]	; 0x24
 8008092:	2320      	movs	r3, #32
 8008094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008098:	f8cd 800c 	str.w	r8, [sp, #12]
 800809c:	2330      	movs	r3, #48	; 0x30
 800809e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008248 <_svfiprintf_r+0x1ec>
 80080a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080a6:	f04f 0901 	mov.w	r9, #1
 80080aa:	4623      	mov	r3, r4
 80080ac:	469a      	mov	sl, r3
 80080ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b2:	b10a      	cbz	r2, 80080b8 <_svfiprintf_r+0x5c>
 80080b4:	2a25      	cmp	r2, #37	; 0x25
 80080b6:	d1f9      	bne.n	80080ac <_svfiprintf_r+0x50>
 80080b8:	ebba 0b04 	subs.w	fp, sl, r4
 80080bc:	d00b      	beq.n	80080d6 <_svfiprintf_r+0x7a>
 80080be:	465b      	mov	r3, fp
 80080c0:	4622      	mov	r2, r4
 80080c2:	4629      	mov	r1, r5
 80080c4:	4638      	mov	r0, r7
 80080c6:	f7ff ff6d 	bl	8007fa4 <__ssputs_r>
 80080ca:	3001      	adds	r0, #1
 80080cc:	f000 80aa 	beq.w	8008224 <_svfiprintf_r+0x1c8>
 80080d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d2:	445a      	add	r2, fp
 80080d4:	9209      	str	r2, [sp, #36]	; 0x24
 80080d6:	f89a 3000 	ldrb.w	r3, [sl]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 80a2 	beq.w	8008224 <_svfiprintf_r+0x1c8>
 80080e0:	2300      	movs	r3, #0
 80080e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ea:	f10a 0a01 	add.w	sl, sl, #1
 80080ee:	9304      	str	r3, [sp, #16]
 80080f0:	9307      	str	r3, [sp, #28]
 80080f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080f6:	931a      	str	r3, [sp, #104]	; 0x68
 80080f8:	4654      	mov	r4, sl
 80080fa:	2205      	movs	r2, #5
 80080fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008100:	4851      	ldr	r0, [pc, #324]	; (8008248 <_svfiprintf_r+0x1ec>)
 8008102:	f7f8 fb3d 	bl	8000780 <memchr>
 8008106:	9a04      	ldr	r2, [sp, #16]
 8008108:	b9d8      	cbnz	r0, 8008142 <_svfiprintf_r+0xe6>
 800810a:	06d0      	lsls	r0, r2, #27
 800810c:	bf44      	itt	mi
 800810e:	2320      	movmi	r3, #32
 8008110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008114:	0711      	lsls	r1, r2, #28
 8008116:	bf44      	itt	mi
 8008118:	232b      	movmi	r3, #43	; 0x2b
 800811a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800811e:	f89a 3000 	ldrb.w	r3, [sl]
 8008122:	2b2a      	cmp	r3, #42	; 0x2a
 8008124:	d015      	beq.n	8008152 <_svfiprintf_r+0xf6>
 8008126:	9a07      	ldr	r2, [sp, #28]
 8008128:	4654      	mov	r4, sl
 800812a:	2000      	movs	r0, #0
 800812c:	f04f 0c0a 	mov.w	ip, #10
 8008130:	4621      	mov	r1, r4
 8008132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008136:	3b30      	subs	r3, #48	; 0x30
 8008138:	2b09      	cmp	r3, #9
 800813a:	d94e      	bls.n	80081da <_svfiprintf_r+0x17e>
 800813c:	b1b0      	cbz	r0, 800816c <_svfiprintf_r+0x110>
 800813e:	9207      	str	r2, [sp, #28]
 8008140:	e014      	b.n	800816c <_svfiprintf_r+0x110>
 8008142:	eba0 0308 	sub.w	r3, r0, r8
 8008146:	fa09 f303 	lsl.w	r3, r9, r3
 800814a:	4313      	orrs	r3, r2
 800814c:	9304      	str	r3, [sp, #16]
 800814e:	46a2      	mov	sl, r4
 8008150:	e7d2      	b.n	80080f8 <_svfiprintf_r+0x9c>
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	1d19      	adds	r1, r3, #4
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	9103      	str	r1, [sp, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	bfbb      	ittet	lt
 800815e:	425b      	neglt	r3, r3
 8008160:	f042 0202 	orrlt.w	r2, r2, #2
 8008164:	9307      	strge	r3, [sp, #28]
 8008166:	9307      	strlt	r3, [sp, #28]
 8008168:	bfb8      	it	lt
 800816a:	9204      	strlt	r2, [sp, #16]
 800816c:	7823      	ldrb	r3, [r4, #0]
 800816e:	2b2e      	cmp	r3, #46	; 0x2e
 8008170:	d10c      	bne.n	800818c <_svfiprintf_r+0x130>
 8008172:	7863      	ldrb	r3, [r4, #1]
 8008174:	2b2a      	cmp	r3, #42	; 0x2a
 8008176:	d135      	bne.n	80081e4 <_svfiprintf_r+0x188>
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	1d1a      	adds	r2, r3, #4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	9203      	str	r2, [sp, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	bfb8      	it	lt
 8008184:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008188:	3402      	adds	r4, #2
 800818a:	9305      	str	r3, [sp, #20]
 800818c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008258 <_svfiprintf_r+0x1fc>
 8008190:	7821      	ldrb	r1, [r4, #0]
 8008192:	2203      	movs	r2, #3
 8008194:	4650      	mov	r0, sl
 8008196:	f7f8 faf3 	bl	8000780 <memchr>
 800819a:	b140      	cbz	r0, 80081ae <_svfiprintf_r+0x152>
 800819c:	2340      	movs	r3, #64	; 0x40
 800819e:	eba0 000a 	sub.w	r0, r0, sl
 80081a2:	fa03 f000 	lsl.w	r0, r3, r0
 80081a6:	9b04      	ldr	r3, [sp, #16]
 80081a8:	4303      	orrs	r3, r0
 80081aa:	3401      	adds	r4, #1
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b2:	4826      	ldr	r0, [pc, #152]	; (800824c <_svfiprintf_r+0x1f0>)
 80081b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081b8:	2206      	movs	r2, #6
 80081ba:	f7f8 fae1 	bl	8000780 <memchr>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d038      	beq.n	8008234 <_svfiprintf_r+0x1d8>
 80081c2:	4b23      	ldr	r3, [pc, #140]	; (8008250 <_svfiprintf_r+0x1f4>)
 80081c4:	bb1b      	cbnz	r3, 800820e <_svfiprintf_r+0x1b2>
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	3307      	adds	r3, #7
 80081ca:	f023 0307 	bic.w	r3, r3, #7
 80081ce:	3308      	adds	r3, #8
 80081d0:	9303      	str	r3, [sp, #12]
 80081d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d4:	4433      	add	r3, r6
 80081d6:	9309      	str	r3, [sp, #36]	; 0x24
 80081d8:	e767      	b.n	80080aa <_svfiprintf_r+0x4e>
 80081da:	fb0c 3202 	mla	r2, ip, r2, r3
 80081de:	460c      	mov	r4, r1
 80081e0:	2001      	movs	r0, #1
 80081e2:	e7a5      	b.n	8008130 <_svfiprintf_r+0xd4>
 80081e4:	2300      	movs	r3, #0
 80081e6:	3401      	adds	r4, #1
 80081e8:	9305      	str	r3, [sp, #20]
 80081ea:	4619      	mov	r1, r3
 80081ec:	f04f 0c0a 	mov.w	ip, #10
 80081f0:	4620      	mov	r0, r4
 80081f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081f6:	3a30      	subs	r2, #48	; 0x30
 80081f8:	2a09      	cmp	r2, #9
 80081fa:	d903      	bls.n	8008204 <_svfiprintf_r+0x1a8>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0c5      	beq.n	800818c <_svfiprintf_r+0x130>
 8008200:	9105      	str	r1, [sp, #20]
 8008202:	e7c3      	b.n	800818c <_svfiprintf_r+0x130>
 8008204:	fb0c 2101 	mla	r1, ip, r1, r2
 8008208:	4604      	mov	r4, r0
 800820a:	2301      	movs	r3, #1
 800820c:	e7f0      	b.n	80081f0 <_svfiprintf_r+0x194>
 800820e:	ab03      	add	r3, sp, #12
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	462a      	mov	r2, r5
 8008214:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <_svfiprintf_r+0x1f8>)
 8008216:	a904      	add	r1, sp, #16
 8008218:	4638      	mov	r0, r7
 800821a:	f3af 8000 	nop.w
 800821e:	1c42      	adds	r2, r0, #1
 8008220:	4606      	mov	r6, r0
 8008222:	d1d6      	bne.n	80081d2 <_svfiprintf_r+0x176>
 8008224:	89ab      	ldrh	r3, [r5, #12]
 8008226:	065b      	lsls	r3, r3, #25
 8008228:	f53f af2c 	bmi.w	8008084 <_svfiprintf_r+0x28>
 800822c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800822e:	b01d      	add	sp, #116	; 0x74
 8008230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008234:	ab03      	add	r3, sp, #12
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	462a      	mov	r2, r5
 800823a:	4b06      	ldr	r3, [pc, #24]	; (8008254 <_svfiprintf_r+0x1f8>)
 800823c:	a904      	add	r1, sp, #16
 800823e:	4638      	mov	r0, r7
 8008240:	f000 f87a 	bl	8008338 <_printf_i>
 8008244:	e7eb      	b.n	800821e <_svfiprintf_r+0x1c2>
 8008246:	bf00      	nop
 8008248:	080088ad 	.word	0x080088ad
 800824c:	080088b7 	.word	0x080088b7
 8008250:	00000000 	.word	0x00000000
 8008254:	08007fa5 	.word	0x08007fa5
 8008258:	080088b3 	.word	0x080088b3

0800825c <_printf_common>:
 800825c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	4616      	mov	r6, r2
 8008262:	4699      	mov	r9, r3
 8008264:	688a      	ldr	r2, [r1, #8]
 8008266:	690b      	ldr	r3, [r1, #16]
 8008268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800826c:	4293      	cmp	r3, r2
 800826e:	bfb8      	it	lt
 8008270:	4613      	movlt	r3, r2
 8008272:	6033      	str	r3, [r6, #0]
 8008274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008278:	4607      	mov	r7, r0
 800827a:	460c      	mov	r4, r1
 800827c:	b10a      	cbz	r2, 8008282 <_printf_common+0x26>
 800827e:	3301      	adds	r3, #1
 8008280:	6033      	str	r3, [r6, #0]
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	0699      	lsls	r1, r3, #26
 8008286:	bf42      	ittt	mi
 8008288:	6833      	ldrmi	r3, [r6, #0]
 800828a:	3302      	addmi	r3, #2
 800828c:	6033      	strmi	r3, [r6, #0]
 800828e:	6825      	ldr	r5, [r4, #0]
 8008290:	f015 0506 	ands.w	r5, r5, #6
 8008294:	d106      	bne.n	80082a4 <_printf_common+0x48>
 8008296:	f104 0a19 	add.w	sl, r4, #25
 800829a:	68e3      	ldr	r3, [r4, #12]
 800829c:	6832      	ldr	r2, [r6, #0]
 800829e:	1a9b      	subs	r3, r3, r2
 80082a0:	42ab      	cmp	r3, r5
 80082a2:	dc26      	bgt.n	80082f2 <_printf_common+0x96>
 80082a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082a8:	1e13      	subs	r3, r2, #0
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	bf18      	it	ne
 80082ae:	2301      	movne	r3, #1
 80082b0:	0692      	lsls	r2, r2, #26
 80082b2:	d42b      	bmi.n	800830c <_printf_common+0xb0>
 80082b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082b8:	4649      	mov	r1, r9
 80082ba:	4638      	mov	r0, r7
 80082bc:	47c0      	blx	r8
 80082be:	3001      	adds	r0, #1
 80082c0:	d01e      	beq.n	8008300 <_printf_common+0xa4>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	68e5      	ldr	r5, [r4, #12]
 80082c6:	6832      	ldr	r2, [r6, #0]
 80082c8:	f003 0306 	and.w	r3, r3, #6
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	bf08      	it	eq
 80082d0:	1aad      	subeq	r5, r5, r2
 80082d2:	68a3      	ldr	r3, [r4, #8]
 80082d4:	6922      	ldr	r2, [r4, #16]
 80082d6:	bf0c      	ite	eq
 80082d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082dc:	2500      	movne	r5, #0
 80082de:	4293      	cmp	r3, r2
 80082e0:	bfc4      	itt	gt
 80082e2:	1a9b      	subgt	r3, r3, r2
 80082e4:	18ed      	addgt	r5, r5, r3
 80082e6:	2600      	movs	r6, #0
 80082e8:	341a      	adds	r4, #26
 80082ea:	42b5      	cmp	r5, r6
 80082ec:	d11a      	bne.n	8008324 <_printf_common+0xc8>
 80082ee:	2000      	movs	r0, #0
 80082f0:	e008      	b.n	8008304 <_printf_common+0xa8>
 80082f2:	2301      	movs	r3, #1
 80082f4:	4652      	mov	r2, sl
 80082f6:	4649      	mov	r1, r9
 80082f8:	4638      	mov	r0, r7
 80082fa:	47c0      	blx	r8
 80082fc:	3001      	adds	r0, #1
 80082fe:	d103      	bne.n	8008308 <_printf_common+0xac>
 8008300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008308:	3501      	adds	r5, #1
 800830a:	e7c6      	b.n	800829a <_printf_common+0x3e>
 800830c:	18e1      	adds	r1, r4, r3
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	2030      	movs	r0, #48	; 0x30
 8008312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008316:	4422      	add	r2, r4
 8008318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800831c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008320:	3302      	adds	r3, #2
 8008322:	e7c7      	b.n	80082b4 <_printf_common+0x58>
 8008324:	2301      	movs	r3, #1
 8008326:	4622      	mov	r2, r4
 8008328:	4649      	mov	r1, r9
 800832a:	4638      	mov	r0, r7
 800832c:	47c0      	blx	r8
 800832e:	3001      	adds	r0, #1
 8008330:	d0e6      	beq.n	8008300 <_printf_common+0xa4>
 8008332:	3601      	adds	r6, #1
 8008334:	e7d9      	b.n	80082ea <_printf_common+0x8e>
	...

08008338 <_printf_i>:
 8008338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800833c:	460c      	mov	r4, r1
 800833e:	4691      	mov	r9, r2
 8008340:	7e27      	ldrb	r7, [r4, #24]
 8008342:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008344:	2f78      	cmp	r7, #120	; 0x78
 8008346:	4680      	mov	r8, r0
 8008348:	469a      	mov	sl, r3
 800834a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800834e:	d807      	bhi.n	8008360 <_printf_i+0x28>
 8008350:	2f62      	cmp	r7, #98	; 0x62
 8008352:	d80a      	bhi.n	800836a <_printf_i+0x32>
 8008354:	2f00      	cmp	r7, #0
 8008356:	f000 80d8 	beq.w	800850a <_printf_i+0x1d2>
 800835a:	2f58      	cmp	r7, #88	; 0x58
 800835c:	f000 80a3 	beq.w	80084a6 <_printf_i+0x16e>
 8008360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008368:	e03a      	b.n	80083e0 <_printf_i+0xa8>
 800836a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800836e:	2b15      	cmp	r3, #21
 8008370:	d8f6      	bhi.n	8008360 <_printf_i+0x28>
 8008372:	a001      	add	r0, pc, #4	; (adr r0, 8008378 <_printf_i+0x40>)
 8008374:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008378:	080083d1 	.word	0x080083d1
 800837c:	080083e5 	.word	0x080083e5
 8008380:	08008361 	.word	0x08008361
 8008384:	08008361 	.word	0x08008361
 8008388:	08008361 	.word	0x08008361
 800838c:	08008361 	.word	0x08008361
 8008390:	080083e5 	.word	0x080083e5
 8008394:	08008361 	.word	0x08008361
 8008398:	08008361 	.word	0x08008361
 800839c:	08008361 	.word	0x08008361
 80083a0:	08008361 	.word	0x08008361
 80083a4:	080084f1 	.word	0x080084f1
 80083a8:	08008415 	.word	0x08008415
 80083ac:	080084d3 	.word	0x080084d3
 80083b0:	08008361 	.word	0x08008361
 80083b4:	08008361 	.word	0x08008361
 80083b8:	08008513 	.word	0x08008513
 80083bc:	08008361 	.word	0x08008361
 80083c0:	08008415 	.word	0x08008415
 80083c4:	08008361 	.word	0x08008361
 80083c8:	08008361 	.word	0x08008361
 80083cc:	080084db 	.word	0x080084db
 80083d0:	680b      	ldr	r3, [r1, #0]
 80083d2:	1d1a      	adds	r2, r3, #4
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	600a      	str	r2, [r1, #0]
 80083d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083e0:	2301      	movs	r3, #1
 80083e2:	e0a3      	b.n	800852c <_printf_i+0x1f4>
 80083e4:	6825      	ldr	r5, [r4, #0]
 80083e6:	6808      	ldr	r0, [r1, #0]
 80083e8:	062e      	lsls	r6, r5, #24
 80083ea:	f100 0304 	add.w	r3, r0, #4
 80083ee:	d50a      	bpl.n	8008406 <_printf_i+0xce>
 80083f0:	6805      	ldr	r5, [r0, #0]
 80083f2:	600b      	str	r3, [r1, #0]
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	da03      	bge.n	8008400 <_printf_i+0xc8>
 80083f8:	232d      	movs	r3, #45	; 0x2d
 80083fa:	426d      	negs	r5, r5
 80083fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008400:	485e      	ldr	r0, [pc, #376]	; (800857c <_printf_i+0x244>)
 8008402:	230a      	movs	r3, #10
 8008404:	e019      	b.n	800843a <_printf_i+0x102>
 8008406:	f015 0f40 	tst.w	r5, #64	; 0x40
 800840a:	6805      	ldr	r5, [r0, #0]
 800840c:	600b      	str	r3, [r1, #0]
 800840e:	bf18      	it	ne
 8008410:	b22d      	sxthne	r5, r5
 8008412:	e7ef      	b.n	80083f4 <_printf_i+0xbc>
 8008414:	680b      	ldr	r3, [r1, #0]
 8008416:	6825      	ldr	r5, [r4, #0]
 8008418:	1d18      	adds	r0, r3, #4
 800841a:	6008      	str	r0, [r1, #0]
 800841c:	0628      	lsls	r0, r5, #24
 800841e:	d501      	bpl.n	8008424 <_printf_i+0xec>
 8008420:	681d      	ldr	r5, [r3, #0]
 8008422:	e002      	b.n	800842a <_printf_i+0xf2>
 8008424:	0669      	lsls	r1, r5, #25
 8008426:	d5fb      	bpl.n	8008420 <_printf_i+0xe8>
 8008428:	881d      	ldrh	r5, [r3, #0]
 800842a:	4854      	ldr	r0, [pc, #336]	; (800857c <_printf_i+0x244>)
 800842c:	2f6f      	cmp	r7, #111	; 0x6f
 800842e:	bf0c      	ite	eq
 8008430:	2308      	moveq	r3, #8
 8008432:	230a      	movne	r3, #10
 8008434:	2100      	movs	r1, #0
 8008436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800843a:	6866      	ldr	r6, [r4, #4]
 800843c:	60a6      	str	r6, [r4, #8]
 800843e:	2e00      	cmp	r6, #0
 8008440:	bfa2      	ittt	ge
 8008442:	6821      	ldrge	r1, [r4, #0]
 8008444:	f021 0104 	bicge.w	r1, r1, #4
 8008448:	6021      	strge	r1, [r4, #0]
 800844a:	b90d      	cbnz	r5, 8008450 <_printf_i+0x118>
 800844c:	2e00      	cmp	r6, #0
 800844e:	d04d      	beq.n	80084ec <_printf_i+0x1b4>
 8008450:	4616      	mov	r6, r2
 8008452:	fbb5 f1f3 	udiv	r1, r5, r3
 8008456:	fb03 5711 	mls	r7, r3, r1, r5
 800845a:	5dc7      	ldrb	r7, [r0, r7]
 800845c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008460:	462f      	mov	r7, r5
 8008462:	42bb      	cmp	r3, r7
 8008464:	460d      	mov	r5, r1
 8008466:	d9f4      	bls.n	8008452 <_printf_i+0x11a>
 8008468:	2b08      	cmp	r3, #8
 800846a:	d10b      	bne.n	8008484 <_printf_i+0x14c>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	07df      	lsls	r7, r3, #31
 8008470:	d508      	bpl.n	8008484 <_printf_i+0x14c>
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	6861      	ldr	r1, [r4, #4]
 8008476:	4299      	cmp	r1, r3
 8008478:	bfde      	ittt	le
 800847a:	2330      	movle	r3, #48	; 0x30
 800847c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008480:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008484:	1b92      	subs	r2, r2, r6
 8008486:	6122      	str	r2, [r4, #16]
 8008488:	f8cd a000 	str.w	sl, [sp]
 800848c:	464b      	mov	r3, r9
 800848e:	aa03      	add	r2, sp, #12
 8008490:	4621      	mov	r1, r4
 8008492:	4640      	mov	r0, r8
 8008494:	f7ff fee2 	bl	800825c <_printf_common>
 8008498:	3001      	adds	r0, #1
 800849a:	d14c      	bne.n	8008536 <_printf_i+0x1fe>
 800849c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a0:	b004      	add	sp, #16
 80084a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a6:	4835      	ldr	r0, [pc, #212]	; (800857c <_printf_i+0x244>)
 80084a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	680e      	ldr	r6, [r1, #0]
 80084b0:	061f      	lsls	r7, r3, #24
 80084b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80084b6:	600e      	str	r6, [r1, #0]
 80084b8:	d514      	bpl.n	80084e4 <_printf_i+0x1ac>
 80084ba:	07d9      	lsls	r1, r3, #31
 80084bc:	bf44      	itt	mi
 80084be:	f043 0320 	orrmi.w	r3, r3, #32
 80084c2:	6023      	strmi	r3, [r4, #0]
 80084c4:	b91d      	cbnz	r5, 80084ce <_printf_i+0x196>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	f023 0320 	bic.w	r3, r3, #32
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	2310      	movs	r3, #16
 80084d0:	e7b0      	b.n	8008434 <_printf_i+0xfc>
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	f043 0320 	orr.w	r3, r3, #32
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	2378      	movs	r3, #120	; 0x78
 80084dc:	4828      	ldr	r0, [pc, #160]	; (8008580 <_printf_i+0x248>)
 80084de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084e2:	e7e3      	b.n	80084ac <_printf_i+0x174>
 80084e4:	065e      	lsls	r6, r3, #25
 80084e6:	bf48      	it	mi
 80084e8:	b2ad      	uxthmi	r5, r5
 80084ea:	e7e6      	b.n	80084ba <_printf_i+0x182>
 80084ec:	4616      	mov	r6, r2
 80084ee:	e7bb      	b.n	8008468 <_printf_i+0x130>
 80084f0:	680b      	ldr	r3, [r1, #0]
 80084f2:	6826      	ldr	r6, [r4, #0]
 80084f4:	6960      	ldr	r0, [r4, #20]
 80084f6:	1d1d      	adds	r5, r3, #4
 80084f8:	600d      	str	r5, [r1, #0]
 80084fa:	0635      	lsls	r5, r6, #24
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	d501      	bpl.n	8008504 <_printf_i+0x1cc>
 8008500:	6018      	str	r0, [r3, #0]
 8008502:	e002      	b.n	800850a <_printf_i+0x1d2>
 8008504:	0671      	lsls	r1, r6, #25
 8008506:	d5fb      	bpl.n	8008500 <_printf_i+0x1c8>
 8008508:	8018      	strh	r0, [r3, #0]
 800850a:	2300      	movs	r3, #0
 800850c:	6123      	str	r3, [r4, #16]
 800850e:	4616      	mov	r6, r2
 8008510:	e7ba      	b.n	8008488 <_printf_i+0x150>
 8008512:	680b      	ldr	r3, [r1, #0]
 8008514:	1d1a      	adds	r2, r3, #4
 8008516:	600a      	str	r2, [r1, #0]
 8008518:	681e      	ldr	r6, [r3, #0]
 800851a:	6862      	ldr	r2, [r4, #4]
 800851c:	2100      	movs	r1, #0
 800851e:	4630      	mov	r0, r6
 8008520:	f7f8 f92e 	bl	8000780 <memchr>
 8008524:	b108      	cbz	r0, 800852a <_printf_i+0x1f2>
 8008526:	1b80      	subs	r0, r0, r6
 8008528:	6060      	str	r0, [r4, #4]
 800852a:	6863      	ldr	r3, [r4, #4]
 800852c:	6123      	str	r3, [r4, #16]
 800852e:	2300      	movs	r3, #0
 8008530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008534:	e7a8      	b.n	8008488 <_printf_i+0x150>
 8008536:	6923      	ldr	r3, [r4, #16]
 8008538:	4632      	mov	r2, r6
 800853a:	4649      	mov	r1, r9
 800853c:	4640      	mov	r0, r8
 800853e:	47d0      	blx	sl
 8008540:	3001      	adds	r0, #1
 8008542:	d0ab      	beq.n	800849c <_printf_i+0x164>
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	079b      	lsls	r3, r3, #30
 8008548:	d413      	bmi.n	8008572 <_printf_i+0x23a>
 800854a:	68e0      	ldr	r0, [r4, #12]
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	4298      	cmp	r0, r3
 8008550:	bfb8      	it	lt
 8008552:	4618      	movlt	r0, r3
 8008554:	e7a4      	b.n	80084a0 <_printf_i+0x168>
 8008556:	2301      	movs	r3, #1
 8008558:	4632      	mov	r2, r6
 800855a:	4649      	mov	r1, r9
 800855c:	4640      	mov	r0, r8
 800855e:	47d0      	blx	sl
 8008560:	3001      	adds	r0, #1
 8008562:	d09b      	beq.n	800849c <_printf_i+0x164>
 8008564:	3501      	adds	r5, #1
 8008566:	68e3      	ldr	r3, [r4, #12]
 8008568:	9903      	ldr	r1, [sp, #12]
 800856a:	1a5b      	subs	r3, r3, r1
 800856c:	42ab      	cmp	r3, r5
 800856e:	dcf2      	bgt.n	8008556 <_printf_i+0x21e>
 8008570:	e7eb      	b.n	800854a <_printf_i+0x212>
 8008572:	2500      	movs	r5, #0
 8008574:	f104 0619 	add.w	r6, r4, #25
 8008578:	e7f5      	b.n	8008566 <_printf_i+0x22e>
 800857a:	bf00      	nop
 800857c:	080088be 	.word	0x080088be
 8008580:	080088cf 	.word	0x080088cf

08008584 <__retarget_lock_acquire_recursive>:
 8008584:	4770      	bx	lr

08008586 <__retarget_lock_release_recursive>:
 8008586:	4770      	bx	lr

08008588 <memmove>:
 8008588:	4288      	cmp	r0, r1
 800858a:	b510      	push	{r4, lr}
 800858c:	eb01 0402 	add.w	r4, r1, r2
 8008590:	d902      	bls.n	8008598 <memmove+0x10>
 8008592:	4284      	cmp	r4, r0
 8008594:	4623      	mov	r3, r4
 8008596:	d807      	bhi.n	80085a8 <memmove+0x20>
 8008598:	1e43      	subs	r3, r0, #1
 800859a:	42a1      	cmp	r1, r4
 800859c:	d008      	beq.n	80085b0 <memmove+0x28>
 800859e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085a6:	e7f8      	b.n	800859a <memmove+0x12>
 80085a8:	4402      	add	r2, r0
 80085aa:	4601      	mov	r1, r0
 80085ac:	428a      	cmp	r2, r1
 80085ae:	d100      	bne.n	80085b2 <memmove+0x2a>
 80085b0:	bd10      	pop	{r4, pc}
 80085b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085ba:	e7f7      	b.n	80085ac <memmove+0x24>

080085bc <_realloc_r>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	4607      	mov	r7, r0
 80085c0:	4614      	mov	r4, r2
 80085c2:	460e      	mov	r6, r1
 80085c4:	b921      	cbnz	r1, 80085d0 <_realloc_r+0x14>
 80085c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085ca:	4611      	mov	r1, r2
 80085cc:	f7ff bc10 	b.w	8007df0 <_malloc_r>
 80085d0:	b922      	cbnz	r2, 80085dc <_realloc_r+0x20>
 80085d2:	f7ff fbbd 	bl	8007d50 <_free_r>
 80085d6:	4625      	mov	r5, r4
 80085d8:	4628      	mov	r0, r5
 80085da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085dc:	f000 f814 	bl	8008608 <_malloc_usable_size_r>
 80085e0:	42a0      	cmp	r0, r4
 80085e2:	d20f      	bcs.n	8008604 <_realloc_r+0x48>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4638      	mov	r0, r7
 80085e8:	f7ff fc02 	bl	8007df0 <_malloc_r>
 80085ec:	4605      	mov	r5, r0
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d0f2      	beq.n	80085d8 <_realloc_r+0x1c>
 80085f2:	4631      	mov	r1, r6
 80085f4:	4622      	mov	r2, r4
 80085f6:	f7ff fb95 	bl	8007d24 <memcpy>
 80085fa:	4631      	mov	r1, r6
 80085fc:	4638      	mov	r0, r7
 80085fe:	f7ff fba7 	bl	8007d50 <_free_r>
 8008602:	e7e9      	b.n	80085d8 <_realloc_r+0x1c>
 8008604:	4635      	mov	r5, r6
 8008606:	e7e7      	b.n	80085d8 <_realloc_r+0x1c>

08008608 <_malloc_usable_size_r>:
 8008608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800860c:	1f18      	subs	r0, r3, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	bfbc      	itt	lt
 8008612:	580b      	ldrlt	r3, [r1, r0]
 8008614:	18c0      	addlt	r0, r0, r3
 8008616:	4770      	bx	lr

08008618 <_init>:
 8008618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861a:	bf00      	nop
 800861c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861e:	bc08      	pop	{r3}
 8008620:	469e      	mov	lr, r3
 8008622:	4770      	bx	lr

08008624 <_fini>:
 8008624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008626:	bf00      	nop
 8008628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800862a:	bc08      	pop	{r3}
 800862c:	469e      	mov	lr, r3
 800862e:	4770      	bx	lr
