
GraphicsDriver_STM32F411CEU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e158  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080237b4  080237b4  00040174  2**0
                  CONTENTS
  4 .ARM          00000008  080237b4  080237b4  000337b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080237bc  080237bc  00040174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080237bc  080237bc  000337bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080237c4  080237c4  000337c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  080237c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000174  0802393c  00040174  2**2
                  ALLOC
 10 ._user_heap_stack 00008400  20000708  0802393c  00040708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a3b  00000000  00000000  000401a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d73  00000000  00000000  00052bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00055958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00056918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a041  00000000  00000000  000577b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010155  00000000  00000000  000717f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ac0  00000000  00000000  00081946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c8  00000000  00000000  0011345c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005644 	.word	0x08005644

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	08005644 	.word	0x08005644

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint32_t reset_reason = RCC->CSR;
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <main+0x30>)
 8000590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000592:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fbe6 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f810 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f98e 	bl	80008bc <MX_GPIO_Init>
  MX_DMA_Init();
 80005a0:	f000 f96c 	bl	800087c <MX_DMA_Init>
  MX_TIM1_Init();
 80005a4:	f000 f8a4 	bl	80006f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f93e 	bl	8000828 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005ac:	f000 f86e 	bl	800068c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 80005b0:	f004 f9ea 	bl	8004988 <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x2c>
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fbc0 	bl	8004d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <SystemClock_Config+0xc8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a26      	ldr	r2, [pc, #152]	; (8000684 <SystemClock_Config+0xc8>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <SystemClock_Config+0xc8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <SystemClock_Config+0xcc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <SystemClock_Config+0xcc>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800062c:	230c      	movs	r3, #12
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000630:	2360      	movs	r3, #96	; 0x60
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000634:	2304      	movs	r3, #4
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fa67 	bl	8001b14 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f9a6 	bl	800099c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2101      	movs	r1, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fcc1 	bl	8001ff4 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000678:	f000 f990 	bl	800099c <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_SPI1_Init+0x5c>)
 8000692:	4a16      	ldr	r2, [pc, #88]	; (80006ec <MX_SPI1_Init+0x60>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_SPI1_Init+0x5c>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_SPI1_Init+0x5c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_SPI1_Init+0x5c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_SPI1_Init+0x5c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_SPI1_Init+0x5c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_SPI1_Init+0x5c>)
 80006b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_SPI1_Init+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_SPI1_Init+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_SPI1_Init+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_SPI1_Init+0x5c>)
 80006d0:	220a      	movs	r2, #10
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_SPI1_Init+0x5c>)
 80006d6:	f001 fe5d 	bl	8002394 <HAL_SPI_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80006e0:	f000 f95c 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000069c 	.word	0x2000069c
 80006ec:	40013000 	.word	0x40013000

080006f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b096      	sub	sp, #88	; 0x58
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2220      	movs	r2, #32
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f004 fb11 	bl	8004d50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800072e:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <MX_TIM1_Init+0x130>)
 8000730:	4a3c      	ldr	r2, [pc, #240]	; (8000824 <MX_TIM1_Init+0x134>)
 8000732:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000734:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <MX_TIM1_Init+0x130>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b39      	ldr	r3, [pc, #228]	; (8000820 <MX_TIM1_Init+0x130>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8000740:	4b37      	ldr	r3, [pc, #220]	; (8000820 <MX_TIM1_Init+0x130>)
 8000742:	2201      	movs	r2, #1
 8000744:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b36      	ldr	r3, [pc, #216]	; (8000820 <MX_TIM1_Init+0x130>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800074c:	4b34      	ldr	r3, [pc, #208]	; (8000820 <MX_TIM1_Init+0x130>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b33      	ldr	r3, [pc, #204]	; (8000820 <MX_TIM1_Init+0x130>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000758:	4831      	ldr	r0, [pc, #196]	; (8000820 <MX_TIM1_Init+0x130>)
 800075a:	f001 fe7f 	bl	800245c <HAL_TIM_Base_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000764:	f000 f91a 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800076e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000772:	4619      	mov	r1, r3
 8000774:	482a      	ldr	r0, [pc, #168]	; (8000820 <MX_TIM1_Init+0x130>)
 8000776:	f001 ffe7 	bl	8002748 <HAL_TIM_ConfigClockSource>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000780:	f000 f90c 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000784:	4826      	ldr	r0, [pc, #152]	; (8000820 <MX_TIM1_Init+0x130>)
 8000786:	f001 fee3 	bl	8002550 <HAL_TIM_PWM_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000790:	f000 f904 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800079c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a0:	4619      	mov	r1, r3
 80007a2:	481f      	ldr	r0, [pc, #124]	; (8000820 <MX_TIM1_Init+0x130>)
 80007a4:	f002 fb60 	bl	8002e68 <HAL_TIMEx_MasterConfigSynchronization>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80007ae:	f000 f8f5 	bl	800099c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b2:	2360      	movs	r3, #96	; 0x60
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007be:	2300      	movs	r3, #0
 80007c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	4812      	ldr	r0, [pc, #72]	; (8000820 <MX_TIM1_Init+0x130>)
 80007d8:	f001 fef0 	bl	80025bc <HAL_TIM_PWM_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80007e2:	f000 f8db 	bl	800099c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_TIM1_Init+0x130>)
 800080a:	f002 fb9b 	bl	8002f44 <HAL_TIMEx_ConfigBreakDeadTime>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000814:	f000 f8c2 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	3758      	adds	r7, #88	; 0x58
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000065c 	.word	0x2000065c
 8000824:	40010000 	.word	0x40010000

08000828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART1_UART_Init+0x4c>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_USART1_UART_Init+0x50>)
 8000830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_USART1_UART_Init+0x4c>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART1_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART1_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART1_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART1_UART_Init+0x4c>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART1_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART1_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART1_UART_Init+0x4c>)
 8000860:	f002 fbc2 	bl	8002fe8 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800086a:	f000 f897 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000061c 	.word	0x2000061c
 8000878:	40011000 	.word	0x40011000

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_DMA_Init+0x3c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <MX_DMA_Init+0x3c>)
 800088c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_DMA_Init+0x3c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2039      	movs	r0, #57	; 0x39
 80008a4:	f000 fbcf 	bl	8001046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	; 0x39
 80008aa:	f000 fbe8 	bl	800107e <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <MX_GPIO_Init+0xd4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a2d      	ldr	r2, [pc, #180]	; (8000990 <MX_GPIO_Init+0xd4>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <MX_GPIO_Init+0xd4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_GPIO_Init+0xd4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a26      	ldr	r2, [pc, #152]	; (8000990 <MX_GPIO_Init+0xd4>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <MX_GPIO_Init+0xd4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_GPIO_Init+0xd4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <MX_GPIO_Init+0xd4>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_GPIO_Init+0xd4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CLK_Pin|LED_0_Pin|LED_1_Pin|DebugPin_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f640 0107 	movw	r1, #2055	; 0x807
 800092c:	4819      	ldr	r0, [pc, #100]	; (8000994 <MX_GPIO_Init+0xd8>)
 800092e:	f001 f8d7 	bl	8001ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 8000932:	2200      	movs	r2, #0
 8000934:	f245 71ff 	movw	r1, #22527	; 0x57ff
 8000938:	4817      	ldr	r0, [pc, #92]	; (8000998 <MX_GPIO_Init+0xdc>)
 800093a:	f001 f8d1 	bl	8001ae0 <HAL_GPIO_WritePin>
                          |Matrix_CLK_Pin|Matrix_OE_Pin|Matrix_C_Pin|Matrix_B_Pin
                          |Matrix_A_Pin|Matrix_E_Pin|Matrix_B1_Pin|Matrix_G1_Pin
                          |Matrix_R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Matrix_LAT_GPIO_Port, Matrix_LAT_Pin, GPIO_PIN_SET);
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000944:	4814      	ldr	r0, [pc, #80]	; (8000998 <MX_GPIO_Init+0xdc>)
 8000946:	f001 f8cb 	bl	8001ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CLK_Pin LED_0_Pin LED_1_Pin DebugPin_Pin */
  GPIO_InitStruct.Pin = LED_CLK_Pin|LED_0_Pin|LED_1_Pin|DebugPin_Pin;
 800094a:	f640 0307 	movw	r3, #2055	; 0x807
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_GPIO_Init+0xd8>)
 8000964:	f000 ff38 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B0_Pin Matrix_D_Pin
                           Matrix_CLK_Pin Matrix_LAT_Pin Matrix_OE_Pin Matrix_C_Pin
                           Matrix_B_Pin Matrix_A_Pin Matrix_E_Pin Matrix_B1_Pin
                           Matrix_G1_Pin Matrix_R1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 8000968:	f247 73ff 	movw	r3, #30719	; 0x77ff
 800096c:	60fb      	str	r3, [r7, #12]
                          |Matrix_CLK_Pin|Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_C_Pin
                          |Matrix_B_Pin|Matrix_A_Pin|Matrix_E_Pin|Matrix_B1_Pin
                          |Matrix_G1_Pin|Matrix_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_GPIO_Init+0xdc>)
 8000982:	f000 ff29 	bl	80017d8 <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000
 8000998:	40020400 	.word	0x40020400

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <HAL_SPI_MspInit+0x84>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d12b      	bne.n	8000a76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_SPI_MspInit+0x88>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_SPI_MspInit+0x88>)
 8000a28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_SPI_MspInit+0x88>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_SPI_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <HAL_SPI_MspInit+0x88>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_SPI_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a56:	23e0      	movs	r3, #224	; 0xe0
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a66:	2305      	movs	r3, #5
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_SPI_MspInit+0x8c>)
 8000a72:	f000 feb1 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40013000 	.word	0x40013000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <HAL_TIM_Base_MspInit+0x98>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d13d      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <HAL_TIM_Base_MspInit+0x9c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <HAL_TIM_Base_MspInit+0x9c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <HAL_TIM_Base_MspInit+0x9c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000abc:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <HAL_TIM_Base_MspInit+0xa4>)
 8000abe:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ac2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000ac6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000aca:	2240      	movs	r2, #64	; 0x40
 8000acc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ada:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ae2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000b00:	f000 fad8 	bl	80010b4 <HAL_DMA_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000b0a:	f7ff ff47 	bl	800099c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
 8000b14:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40010000 	.word	0x40010000
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	200005bc 	.word	0x200005bc
 8000b30:	40026428 	.word	0x40026428

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <HAL_UART_MspInit+0x84>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d12c      	bne.n	8000bb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_UART_MspInit+0x8c>)
 8000bac:	f000 fe14 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	; 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40011000 	.word	0x40011000
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f8f6 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <DMA2_Stream1_IRQHandler+0x10>)
 8000c26:	f000 fb6d 	bl	8001304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200005bc 	.word	0x200005bc

08000c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	return 1;
 8000c38:	2301      	movs	r3, #1
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <_kill>:

int _kill(int pid, int sig)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c4e:	f004 f845 	bl	8004cdc <__errno>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2216      	movs	r2, #22
 8000c56:	601a      	str	r2, [r3, #0]
	return -1;
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_exit>:

void _exit (int status)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ffe7 	bl	8000c44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c76:	e7fe      	b.n	8000c76 <_exit+0x12>

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f004 f818 	bl	8004cdc <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20020000 	.word	0x20020000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	20000190 	.word	0x20000190
 8000ce0:	20000708 	.word	0x20000708

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <SystemInit+0x28>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <SystemInit+0x28>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SystemInit+0x28>)
 8000cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d16:	e003      	b.n	8000d20 <LoopCopyDataInit>

08000d18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d1e:	3104      	adds	r1, #4

08000d20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d20:	480b      	ldr	r0, [pc, #44]	; (8000d50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d28:	d3f6      	bcc.n	8000d18 <CopyDataInit>
  ldr  r2, =_sbss
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d2c:	e002      	b.n	8000d34 <LoopFillZerobss>

08000d2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d30:	f842 3b04 	str.w	r3, [r2], #4

08000d34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d38:	d3f9      	bcc.n	8000d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d3a:	f7ff ffd3 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f003 ffd3 	bl	8004ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fc21 	bl	8000588 <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d4c:	080237c8 	.word	0x080237c8
  ldr  r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d54:	20000174 	.word	0x20000174
  ldr  r2, =_sbss
 8000d58:	20000174 	.word	0x20000174
  ldr  r3, = _ebss
 8000d5c:	20000708 	.word	0x20000708

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <HAL_Init+0x40>)
 8000d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_Init+0x40>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x40>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f94f 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f808 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fe08 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023c00 	.word	0x40023c00

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x54>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x58>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f967 	bl	800109a <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00e      	b.n	8000df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d80a      	bhi.n	8000df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de4:	f000 f92f 	bl	8001046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <HAL_InitTick+0x5c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000004 	.word	0x20000004

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	200006f4 	.word	0x200006f4

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200006f4 	.word	0x200006f4

08000e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff ffee 	bl	8000e30 <HAL_GetTick>
 8000e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e60:	d005      	beq.n	8000e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_Delay+0x44>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e6e:	bf00      	nop
 8000e70:	f7ff ffde 	bl	8000e30 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d8f7      	bhi.n	8000e70 <HAL_Delay+0x28>
  {
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001010:	f7ff ff8e 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff29 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff3e 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff8e 	bl	8000f84 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5d 	bl	8000f30 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff31 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffa2 	bl	8000fec <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff feb6 	bl	8000e30 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e099      	b.n	8001204 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2202      	movs	r2, #2
 80010dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010f0:	e00f      	b.n	8001112 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010f2:	f7ff fe9d 	bl	8000e30 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d908      	bls.n	8001112 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2220      	movs	r2, #32
 8001104:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2203      	movs	r2, #3
 800110a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e078      	b.n	8001204 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e8      	bne.n	80010f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_DMA_Init+0x158>)
 800112c:	4013      	ands	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800113e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800114a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001156:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4313      	orrs	r3, r2
 8001162:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	2b04      	cmp	r3, #4
 800116a:	d107      	bne.n	800117c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4313      	orrs	r3, r2
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4313      	orrs	r3, r2
 800117a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f023 0307 	bic.w	r3, r3, #7
 8001192:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	4313      	orrs	r3, r2
 800119c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d117      	bne.n	80011d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00e      	beq.n	80011d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fa91 	bl	80016e0 <DMA_CheckFifoParam>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2240      	movs	r2, #64	; 0x40
 80011c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011d2:	2301      	movs	r3, #1
 80011d4:	e016      	b.n	8001204 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 fa48 	bl	8001674 <DMA_CalcBaseAndBitshift>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ec:	223f      	movs	r2, #63	; 0x3f
 80011ee:	409a      	lsls	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	f010803f 	.word	0xf010803f

08001210 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_DMA_Start_IT+0x26>
 8001232:	2302      	movs	r3, #2
 8001234:	e040      	b.n	80012b8 <HAL_DMA_Start_IT+0xa8>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d12f      	bne.n	80012aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2202      	movs	r2, #2
 800124e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 f9da 	bl	8001618 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001268:	223f      	movs	r2, #63	; 0x3f
 800126a:	409a      	lsls	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0216 	orr.w	r2, r2, #22
 800127e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0208 	orr.w	r2, r2, #8
 8001296:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0201 	orr.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	e005      	b.n	80012b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012b2:	2302      	movs	r3, #2
 80012b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d004      	beq.n	80012de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00c      	b.n	80012f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2205      	movs	r2, #5
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001310:	4b92      	ldr	r3, [pc, #584]	; (800155c <HAL_DMA_IRQHandler+0x258>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a92      	ldr	r2, [pc, #584]	; (8001560 <HAL_DMA_IRQHandler+0x25c>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	0a9b      	lsrs	r3, r3, #10
 800131c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132e:	2208      	movs	r2, #8
 8001330:	409a      	lsls	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d01a      	beq.n	8001370 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0204 	bic.w	r2, r2, #4
 8001356:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135c:	2208      	movs	r2, #8
 800135e:	409a      	lsls	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001368:	f043 0201 	orr.w	r2, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001374:	2201      	movs	r2, #1
 8001376:	409a      	lsls	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d012      	beq.n	80013a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001392:	2201      	movs	r2, #1
 8001394:	409a      	lsls	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139e:	f043 0202 	orr.w	r2, r3, #2
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013aa:	2204      	movs	r2, #4
 80013ac:	409a      	lsls	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d012      	beq.n	80013dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00b      	beq.n	80013dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c8:	2204      	movs	r2, #4
 80013ca:	409a      	lsls	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	f043 0204 	orr.w	r2, r3, #4
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e0:	2210      	movs	r2, #16
 80013e2:	409a      	lsls	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d043      	beq.n	8001474 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d03c      	beq.n	8001474 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fe:	2210      	movs	r2, #16
 8001400:	409a      	lsls	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d018      	beq.n	8001446 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d108      	bne.n	8001434 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d024      	beq.n	8001474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	4798      	blx	r3
 8001432:	e01f      	b.n	8001474 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001438:	2b00      	cmp	r3, #0
 800143a:	d01b      	beq.n	8001474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	4798      	blx	r3
 8001444:	e016      	b.n	8001474 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d107      	bne.n	8001464 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0208 	bic.w	r2, r2, #8
 8001462:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001478:	2220      	movs	r2, #32
 800147a:	409a      	lsls	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 808e 	beq.w	80015a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8086 	beq.w	80015a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149a:	2220      	movs	r2, #32
 800149c:	409a      	lsls	r2, r3
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	d136      	bne.n	800151c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0216 	bic.w	r2, r2, #22
 80014bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d103      	bne.n	80014de <HAL_DMA_IRQHandler+0x1da>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0208 	bic.w	r2, r2, #8
 80014ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f2:	223f      	movs	r2, #63	; 0x3f
 80014f4:	409a      	lsls	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800150e:	2b00      	cmp	r3, #0
 8001510:	d07d      	beq.n	800160e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	4798      	blx	r3
        }
        return;
 800151a:	e078      	b.n	800160e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d01c      	beq.n	8001564 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d108      	bne.n	800154a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153c:	2b00      	cmp	r3, #0
 800153e:	d030      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
 8001548:	e02b      	b.n	80015a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154e:	2b00      	cmp	r3, #0
 8001550:	d027      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	4798      	blx	r3
 800155a:	e022      	b.n	80015a2 <HAL_DMA_IRQHandler+0x29e>
 800155c:	20000000 	.word	0x20000000
 8001560:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10f      	bne.n	8001592 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0210 	bic.w	r2, r2, #16
 8001580:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d032      	beq.n	8001610 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d022      	beq.n	80015fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2205      	movs	r2, #5
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	3301      	adds	r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d307      	bcc.n	80015ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f2      	bne.n	80015ce <HAL_DMA_IRQHandler+0x2ca>
 80015e8:	e000      	b.n	80015ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4798      	blx	r3
 800160c:	e000      	b.n	8001610 <HAL_DMA_IRQHandler+0x30c>
        return;
 800160e:	bf00      	nop
    }
  }
}
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop

08001618 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001634:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b40      	cmp	r3, #64	; 0x40
 8001644:	d108      	bne.n	8001658 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001656:	e007      	b.n	8001668 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	60da      	str	r2, [r3, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3b10      	subs	r3, #16
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <DMA_CalcBaseAndBitshift+0x64>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800168e:	4a13      	ldr	r2, [pc, #76]	; (80016dc <DMA_CalcBaseAndBitshift+0x68>)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d909      	bls.n	80016b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016aa:	f023 0303 	bic.w	r3, r3, #3
 80016ae:	1d1a      	adds	r2, r3, #4
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	659a      	str	r2, [r3, #88]	; 0x58
 80016b4:	e007      	b.n	80016c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016be:	f023 0303 	bic.w	r3, r3, #3
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	aaaaaaab 	.word	0xaaaaaaab
 80016dc:	080056fc 	.word	0x080056fc

080016e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d11f      	bne.n	800173a <DMA_CheckFifoParam+0x5a>
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d856      	bhi.n	80017ae <DMA_CheckFifoParam+0xce>
 8001700:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <DMA_CheckFifoParam+0x28>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	08001719 	.word	0x08001719
 800170c:	0800172b 	.word	0x0800172b
 8001710:	08001719 	.word	0x08001719
 8001714:	080017af 	.word	0x080017af
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d046      	beq.n	80017b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001728:	e043      	b.n	80017b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001732:	d140      	bne.n	80017b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001738:	e03d      	b.n	80017b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001742:	d121      	bne.n	8001788 <DMA_CheckFifoParam+0xa8>
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d837      	bhi.n	80017ba <DMA_CheckFifoParam+0xda>
 800174a:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <DMA_CheckFifoParam+0x70>)
 800174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001750:	08001761 	.word	0x08001761
 8001754:	08001767 	.word	0x08001767
 8001758:	08001761 	.word	0x08001761
 800175c:	08001779 	.word	0x08001779
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
      break;
 8001764:	e030      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d025      	beq.n	80017be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001776:	e022      	b.n	80017be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001780:	d11f      	bne.n	80017c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001786:	e01c      	b.n	80017c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d903      	bls.n	8001796 <DMA_CheckFifoParam+0xb6>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d003      	beq.n	800179c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001794:	e018      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
      break;
 800179a:	e015      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
      break;
 80017ac:	e00b      	b.n	80017c6 <DMA_CheckFifoParam+0xe6>
      break;
 80017ae:	bf00      	nop
 80017b0:	e00a      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;
 80017b2:	bf00      	nop
 80017b4:	e008      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;
 80017b6:	bf00      	nop
 80017b8:	e006      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;
 80017ba:	bf00      	nop
 80017bc:	e004      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;
 80017be:	bf00      	nop
 80017c0:	e002      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80017c2:	bf00      	nop
 80017c4:	e000      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;
 80017c6:	bf00      	nop
    }
  } 
  
  return status; 
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e159      	b.n	8001aa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8148 	bne.w	8001aa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d00b      	beq.n	8001832 <HAL_GPIO_Init+0x5a>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d007      	beq.n	8001832 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001826:	2b11      	cmp	r3, #17
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b12      	cmp	r3, #18
 8001830:	d130      	bne.n	8001894 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0xfc>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b12      	cmp	r3, #18
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a2 	beq.w	8001aa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b57      	ldr	r3, [pc, #348]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a56      	ldr	r2, [pc, #344]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b54      	ldr	r3, [pc, #336]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_GPIO_Init+0x2ec>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a49      	ldr	r2, [pc, #292]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x202>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a48      	ldr	r2, [pc, #288]	; (8001acc <HAL_GPIO_Init+0x2f4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x1fe>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a47      	ldr	r2, [pc, #284]	; (8001ad0 <HAL_GPIO_Init+0x2f8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a46      	ldr	r2, [pc, #280]	; (8001ad4 <HAL_GPIO_Init+0x2fc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x1f6>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a45      	ldr	r2, [pc, #276]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x1f2>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019ca:	2307      	movs	r3, #7
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4935      	ldr	r1, [pc, #212]	; (8001ac4 <HAL_GPIO_Init+0x2ec>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019fa:	4b38      	ldr	r3, [pc, #224]	; (8001adc <HAL_GPIO_Init+0x304>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1e:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a48:	4a24      	ldr	r2, [pc, #144]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a72:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f aea2 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40013c00 	.word	0x40013c00

08001ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	807b      	strh	r3, [r7, #2]
 8001aec:	4613      	mov	r3, r2
 8001aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af0:	787b      	ldrb	r3, [r7, #1]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001afc:	e003      	b.n	8001b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001afe:	887b      	ldrh	r3, [r7, #2]
 8001b00:	041a      	lsls	r2, r3, #16
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	619a      	str	r2, [r3, #24]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e25b      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d075      	beq.n	8001c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b32:	4ba3      	ldr	r3, [pc, #652]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d00c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3e:	4ba0      	ldr	r3, [pc, #640]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d112      	bne.n	8001b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4a:	4b9d      	ldr	r3, [pc, #628]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b56:	d10b      	bne.n	8001b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	4b99      	ldr	r3, [pc, #612]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d05b      	beq.n	8001c1c <HAL_RCC_OscConfig+0x108>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d157      	bne.n	8001c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e236      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b78:	d106      	bne.n	8001b88 <HAL_RCC_OscConfig+0x74>
 8001b7a:	4b91      	ldr	r3, [pc, #580]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a90      	ldr	r2, [pc, #576]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e01d      	b.n	8001bc4 <HAL_RCC_OscConfig+0xb0>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x98>
 8001b92:	4b8b      	ldr	r3, [pc, #556]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a8a      	ldr	r2, [pc, #552]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a87      	ldr	r2, [pc, #540]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0xb0>
 8001bac:	4b84      	ldr	r3, [pc, #528]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a83      	ldr	r2, [pc, #524]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b81      	ldr	r3, [pc, #516]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a80      	ldr	r2, [pc, #512]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f930 	bl	8000e30 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f92c 	bl	8000e30 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1fb      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0xc0>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f91c 	bl	8000e30 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f918 	bl	8000e30 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1e7      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	4b6c      	ldr	r3, [pc, #432]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0xe8>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2a:	4b65      	ldr	r3, [pc, #404]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00b      	beq.n	8001c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c36:	4b62      	ldr	r3, [pc, #392]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d11c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c42:	4b5f      	ldr	r3, [pc, #380]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d116      	bne.n	8001c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_RCC_OscConfig+0x152>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e1bb      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4952      	ldr	r1, [pc, #328]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	e03a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c84:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <HAL_RCC_OscConfig+0x2b0>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f8d1 	bl	8000e30 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c92:	f7ff f8cd 	bl	8000e30 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e19c      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b43      	ldr	r3, [pc, #268]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4940      	ldr	r1, [pc, #256]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
 8001cc4:	e015      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc6:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_RCC_OscConfig+0x2b0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f8b0 	bl	8000e30 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f8ac 	bl	8000e30 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e17b      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d030      	beq.n	8001d60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d016      	beq.n	8001d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCC_OscConfig+0x2b4>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f890 	bl	8000e30 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff f88c 	bl	8000e30 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e15b      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x200>
 8001d32:	e015      	b.n	8001d60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_OscConfig+0x2b4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f879 	bl	8000e30 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d42:	f7ff f875 	bl	8000e30 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e144      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80a0 	beq.w	8001eae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10f      	bne.n	8001d9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_OscConfig+0x2b8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d121      	bne.n	8001dee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_RCC_OscConfig+0x2b8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <HAL_RCC_OscConfig+0x2b8>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db6:	f7ff f83b 	bl	8000e30 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	e011      	b.n	8001de2 <HAL_RCC_OscConfig+0x2ce>
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	42470000 	.word	0x42470000
 8001dc8:	42470e80 	.word	0x42470e80
 8001dcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd0:	f7ff f82e 	bl	8000e30 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e0fd      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	4b81      	ldr	r3, [pc, #516]	; (8001fe8 <HAL_RCC_OscConfig+0x4d4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d106      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2f0>
 8001df6:	4b7d      	ldr	r3, [pc, #500]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a7c      	ldr	r2, [pc, #496]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70
 8001e02:	e01c      	b.n	8001e3e <HAL_RCC_OscConfig+0x32a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_OscConfig+0x312>
 8001e0c:	4b77      	ldr	r3, [pc, #476]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	4a76      	ldr	r2, [pc, #472]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6713      	str	r3, [r2, #112]	; 0x70
 8001e18:	4b74      	ldr	r3, [pc, #464]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a73      	ldr	r2, [pc, #460]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
 8001e24:	e00b      	b.n	8001e3e <HAL_RCC_OscConfig+0x32a>
 8001e26:	4b71      	ldr	r3, [pc, #452]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	4a70      	ldr	r2, [pc, #448]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6713      	str	r3, [r2, #112]	; 0x70
 8001e32:	4b6e      	ldr	r3, [pc, #440]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a6d      	ldr	r2, [pc, #436]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d015      	beq.n	8001e72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7fe fff3 	bl	8000e30 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7fe ffef 	bl	8000e30 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0bc      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	4b61      	ldr	r3, [pc, #388]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ee      	beq.n	8001e4e <HAL_RCC_OscConfig+0x33a>
 8001e70:	e014      	b.n	8001e9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7fe ffdd 	bl	8000e30 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7fe ffd9 	bl	8000e30 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0a6      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	4b56      	ldr	r3, [pc, #344]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ee      	bne.n	8001e7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d105      	bne.n	8001eae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	4b52      	ldr	r3, [pc, #328]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a51      	ldr	r2, [pc, #324]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8092 	beq.w	8001fdc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d05c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d141      	bne.n	8001f50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ecc:	4b48      	ldr	r3, [pc, #288]	; (8001ff0 <HAL_RCC_OscConfig+0x4dc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7fe ffad 	bl	8000e30 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eda:	f7fe ffa9 	bl	8000e30 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e078      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eec:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69da      	ldr	r2, [r3, #28]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	019b      	lsls	r3, r3, #6
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	085b      	lsrs	r3, r3, #1
 8001f10:	3b01      	subs	r3, #1
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	061b      	lsls	r3, r3, #24
 8001f1c:	4933      	ldr	r1, [pc, #204]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f22:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <HAL_RCC_OscConfig+0x4dc>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7fe ff82 	bl	8000e30 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe ff7e 	bl	8000e30 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e04d      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x41c>
 8001f4e:	e045      	b.n	8001fdc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_RCC_OscConfig+0x4dc>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe ff6b 	bl	8000e30 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7fe ff67 	bl	8000e30 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e036      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f70:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x44a>
 8001f7c:	e02e      	b.n	8001fdc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e029      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_RCC_OscConfig+0x4d8>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d11c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d115      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d10d      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d106      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	42470060 	.word	0x42470060

08001ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0cc      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b68      	ldr	r3, [pc, #416]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d90c      	bls.n	8002030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b65      	ldr	r3, [pc, #404]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b63      	ldr	r3, [pc, #396]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0b8      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002048:	4b59      	ldr	r3, [pc, #356]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002060:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a52      	ldr	r2, [pc, #328]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800206a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206c:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	494d      	ldr	r1, [pc, #308]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d044      	beq.n	8002114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d119      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e07f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d003      	beq.n	80020b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4b3f      	ldr	r3, [pc, #252]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e06f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e067      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d2:	4b37      	ldr	r3, [pc, #220]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f023 0203 	bic.w	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4934      	ldr	r1, [pc, #208]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e4:	f7fe fea4 	bl	8000e30 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ec:	f7fe fea0 	bl	8000e30 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e04f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 020c 	and.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d1eb      	bne.n	80020ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d20c      	bcs.n	800213c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e032      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4916      	ldr	r1, [pc, #88]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	490e      	ldr	r1, [pc, #56]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800217a:	f000 f821 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 800217e:	4602      	mov	r2, r0
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	490a      	ldr	r1, [pc, #40]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	5ccb      	ldrb	r3, [r1, r3]
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fe04 	bl	8000da8 <HAL_InitTick>

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40023c00 	.word	0x40023c00
 80021b0:	40023800 	.word	0x40023800
 80021b4:	080056e4 	.word	0x080056e4
 80021b8:	20000000 	.word	0x20000000
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021c6:	2100      	movs	r1, #0
 80021c8:	6079      	str	r1, [r7, #4]
 80021ca:	2100      	movs	r1, #0
 80021cc:	60f9      	str	r1, [r7, #12]
 80021ce:	2100      	movs	r1, #0
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021d2:	2100      	movs	r1, #0
 80021d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d6:	4952      	ldr	r1, [pc, #328]	; (8002320 <HAL_RCC_GetSysClockFreq+0x160>)
 80021d8:	6889      	ldr	r1, [r1, #8]
 80021da:	f001 010c 	and.w	r1, r1, #12
 80021de:	2908      	cmp	r1, #8
 80021e0:	d00d      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x3e>
 80021e2:	2908      	cmp	r1, #8
 80021e4:	f200 8094 	bhi.w	8002310 <HAL_RCC_GetSysClockFreq+0x150>
 80021e8:	2900      	cmp	r1, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0x32>
 80021ec:	2904      	cmp	r1, #4
 80021ee:	d003      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x38>
 80021f0:	e08e      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f2:	4b4c      	ldr	r3, [pc, #304]	; (8002324 <HAL_RCC_GetSysClockFreq+0x164>)
 80021f4:	60bb      	str	r3, [r7, #8]
       break;
 80021f6:	e08e      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f8:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <HAL_RCC_GetSysClockFreq+0x168>)
 80021fa:	60bb      	str	r3, [r7, #8]
      break;
 80021fc:	e08b      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fe:	4948      	ldr	r1, [pc, #288]	; (8002320 <HAL_RCC_GetSysClockFreq+0x160>)
 8002200:	6849      	ldr	r1, [r1, #4]
 8002202:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002206:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002208:	4945      	ldr	r1, [pc, #276]	; (8002320 <HAL_RCC_GetSysClockFreq+0x160>)
 800220a:	6849      	ldr	r1, [r1, #4]
 800220c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002210:	2900      	cmp	r1, #0
 8002212:	d024      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002214:	4942      	ldr	r1, [pc, #264]	; (8002320 <HAL_RCC_GetSysClockFreq+0x160>)
 8002216:	6849      	ldr	r1, [r1, #4]
 8002218:	0989      	lsrs	r1, r1, #6
 800221a:	4608      	mov	r0, r1
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002224:	f04f 0500 	mov.w	r5, #0
 8002228:	ea00 0204 	and.w	r2, r0, r4
 800222c:	ea01 0305 	and.w	r3, r1, r5
 8002230:	493d      	ldr	r1, [pc, #244]	; (8002328 <HAL_RCC_GetSysClockFreq+0x168>)
 8002232:	fb01 f003 	mul.w	r0, r1, r3
 8002236:	2100      	movs	r1, #0
 8002238:	fb01 f102 	mul.w	r1, r1, r2
 800223c:	1844      	adds	r4, r0, r1
 800223e:	493a      	ldr	r1, [pc, #232]	; (8002328 <HAL_RCC_GetSysClockFreq+0x168>)
 8002240:	fba2 0101 	umull	r0, r1, r2, r1
 8002244:	1863      	adds	r3, r4, r1
 8002246:	4619      	mov	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	461a      	mov	r2, r3
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	f7fe f81e 	bl	8000290 <__aeabi_uldivmod>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4613      	mov	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e04a      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225e:	4b30      	ldr	r3, [pc, #192]	; (8002320 <HAL_RCC_GetSysClockFreq+0x160>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	099b      	lsrs	r3, r3, #6
 8002264:	461a      	mov	r2, r3
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800226e:	f04f 0100 	mov.w	r1, #0
 8002272:	ea02 0400 	and.w	r4, r2, r0
 8002276:	ea03 0501 	and.w	r5, r3, r1
 800227a:	4620      	mov	r0, r4
 800227c:	4629      	mov	r1, r5
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	014b      	lsls	r3, r1, #5
 8002288:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800228c:	0142      	lsls	r2, r0, #5
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	1b00      	subs	r0, r0, r4
 8002294:	eb61 0105 	sbc.w	r1, r1, r5
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	018b      	lsls	r3, r1, #6
 80022a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022a6:	0182      	lsls	r2, r0, #6
 80022a8:	1a12      	subs	r2, r2, r0
 80022aa:	eb63 0301 	sbc.w	r3, r3, r1
 80022ae:	f04f 0000 	mov.w	r0, #0
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	00d9      	lsls	r1, r3, #3
 80022b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022bc:	00d0      	lsls	r0, r2, #3
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	1912      	adds	r2, r2, r4
 80022c4:	eb45 0303 	adc.w	r3, r5, r3
 80022c8:	f04f 0000 	mov.w	r0, #0
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	0299      	lsls	r1, r3, #10
 80022d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022d6:	0290      	lsls	r0, r2, #10
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	f7fd ffd2 	bl	8000290 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4613      	mov	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_RCC_GetSysClockFreq+0x160>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	3301      	adds	r3, #1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	60bb      	str	r3, [r7, #8]
      break;
 800230e:	e002      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <HAL_RCC_GetSysClockFreq+0x164>)
 8002312:	60bb      	str	r3, [r7, #8]
      break;
 8002314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002316:	68bb      	ldr	r3, [r7, #8]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bdb0      	pop	{r4, r5, r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	00f42400 	.word	0x00f42400
 8002328:	017d7840 	.word	0x017d7840

0800232c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_RCC_GetHCLKFreq+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000000 	.word	0x20000000

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002348:	f7ff fff0 	bl	800232c <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0a9b      	lsrs	r3, r3, #10
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4903      	ldr	r1, [pc, #12]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	080056f4 	.word	0x080056f4

0800236c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002370:	f7ff ffdc 	bl	800232c <HAL_RCC_GetHCLKFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	0b5b      	lsrs	r3, r3, #13
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	4903      	ldr	r1, [pc, #12]	; (8002390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002388:	4618      	mov	r0, r3
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	080056f4 	.word	0x080056f4

08002394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e056      	b.n	8002454 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7fe fb1b 	bl	80009fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	ea42 0103 	orr.w	r1, r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	f003 0104 	and.w	r1, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002442:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e01d      	b.n	80024aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fb02 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3304      	adds	r3, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f000 fa18 	bl	80028d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 0201 	orr.w	r2, r2, #1
 80024c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b06      	cmp	r3, #6
 80024da:	d007      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0201 	bic.w	r2, r2, #1
 8002510:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a1a      	ldr	r2, [r3, #32]
 8002518:	f241 1311 	movw	r3, #4369	; 0x1111
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <HAL_TIM_Base_Stop_IT+0x48>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6a1a      	ldr	r2, [r3, #32]
 8002528:	f240 4344 	movw	r3, #1092	; 0x444
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_TIM_Base_Stop_IT+0x48>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e01d      	b.n	800259e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d106      	bne.n	800257c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f815 	bl	80025a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3304      	adds	r3, #4
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f000 f99e 	bl	80028d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0b4      	b.n	8002740 <HAL_TIM_PWM_ConfigChannel+0x184>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b0c      	cmp	r3, #12
 80025ea:	f200 809f 	bhi.w	800272c <HAL_TIM_PWM_ConfigChannel+0x170>
 80025ee:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80025f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f4:	08002629 	.word	0x08002629
 80025f8:	0800272d 	.word	0x0800272d
 80025fc:	0800272d 	.word	0x0800272d
 8002600:	0800272d 	.word	0x0800272d
 8002604:	08002669 	.word	0x08002669
 8002608:	0800272d 	.word	0x0800272d
 800260c:	0800272d 	.word	0x0800272d
 8002610:	0800272d 	.word	0x0800272d
 8002614:	080026ab 	.word	0x080026ab
 8002618:	0800272d 	.word	0x0800272d
 800261c:	0800272d 	.word	0x0800272d
 8002620:	0800272d 	.word	0x0800272d
 8002624:	080026eb 	.word	0x080026eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f9ce 	bl	80029d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0208 	orr.w	r2, r2, #8
 8002642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0204 	bic.w	r2, r2, #4
 8002652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6999      	ldr	r1, [r3, #24]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	619a      	str	r2, [r3, #24]
      break;
 8002666:	e062      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fa14 	bl	8002a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6999      	ldr	r1, [r3, #24]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	021a      	lsls	r2, r3, #8
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	619a      	str	r2, [r3, #24]
      break;
 80026a8:	e041      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fa5f 	bl	8002b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0208 	orr.w	r2, r2, #8
 80026c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0204 	bic.w	r2, r2, #4
 80026d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69d9      	ldr	r1, [r3, #28]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	61da      	str	r2, [r3, #28]
      break;
 80026e8:	e021      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 faa9 	bl	8002c48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69d9      	ldr	r1, [r3, #28]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	021a      	lsls	r2, r3, #8
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	61da      	str	r2, [r3, #28]
      break;
 800272a:	e000      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800272c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIM_ConfigClockSource+0x18>
 800275c:	2302      	movs	r3, #2
 800275e:	e0b3      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x180>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002786:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002798:	d03e      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0xd0>
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279e:	f200 8087 	bhi.w	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a6:	f000 8085 	beq.w	80028b4 <HAL_TIM_ConfigClockSource+0x16c>
 80027aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ae:	d87f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d01a      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0xa2>
 80027b4:	2b70      	cmp	r3, #112	; 0x70
 80027b6:	d87b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027b8:	2b60      	cmp	r3, #96	; 0x60
 80027ba:	d050      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x116>
 80027bc:	2b60      	cmp	r3, #96	; 0x60
 80027be:	d877      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027c0:	2b50      	cmp	r3, #80	; 0x50
 80027c2:	d03c      	beq.n	800283e <HAL_TIM_ConfigClockSource+0xf6>
 80027c4:	2b50      	cmp	r3, #80	; 0x50
 80027c6:	d873      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d058      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x136>
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d86f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d064      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027d4:	2b30      	cmp	r3, #48	; 0x30
 80027d6:	d86b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d060      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d867      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05c      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d05a      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80027e8:	e062      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f000 faef 	bl	8002ddc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800280c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	609a      	str	r2, [r3, #8]
      break;
 8002816:	e04e      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f000 fad8 	bl	8002ddc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800283a:	609a      	str	r2, [r3, #8]
      break;
 800283c:	e03b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	461a      	mov	r2, r3
 800284c:	f000 fa4c 	bl	8002ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2150      	movs	r1, #80	; 0x50
 8002856:	4618      	mov	r0, r3
 8002858:	f000 faa5 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 800285c:	e02b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	461a      	mov	r2, r3
 800286c:	f000 fa6b 	bl	8002d46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2160      	movs	r1, #96	; 0x60
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fa95 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 800287c:	e01b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	461a      	mov	r2, r3
 800288c:	f000 fa2c 	bl	8002ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fa85 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 800289c:	e00b      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f000 fa7c 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 80028ae:	e002      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b0:	bf00      	nop
 80028b2:	e000      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <TIM_Base_SetConfig+0xe4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00f      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ee:	d00b      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a31      	ldr	r2, [pc, #196]	; (80029b8 <TIM_Base_SetConfig+0xe8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d007      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a30      	ldr	r2, [pc, #192]	; (80029bc <TIM_Base_SetConfig+0xec>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a2f      	ldr	r2, [pc, #188]	; (80029c0 <TIM_Base_SetConfig+0xf0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d108      	bne.n	800291a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a25      	ldr	r2, [pc, #148]	; (80029b4 <TIM_Base_SetConfig+0xe4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01b      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002928:	d017      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <TIM_Base_SetConfig+0xe8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a21      	ldr	r2, [pc, #132]	; (80029bc <TIM_Base_SetConfig+0xec>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00f      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a20      	ldr	r2, [pc, #128]	; (80029c0 <TIM_Base_SetConfig+0xf0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <TIM_Base_SetConfig+0xf4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <TIM_Base_SetConfig+0xf8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <TIM_Base_SetConfig+0xfc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a08      	ldr	r2, [pc, #32]	; (80029b4 <TIM_Base_SetConfig+0xe4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d103      	bne.n	80029a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	615a      	str	r2, [r3, #20]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40000800 	.word	0x40000800
 80029c0:	40000c00 	.word	0x40000c00
 80029c4:	40014000 	.word	0x40014000
 80029c8:	40014400 	.word	0x40014400
 80029cc:	40014800 	.word	0x40014800

080029d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f023 0201 	bic.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f023 0302 	bic.w	r3, r3, #2
 8002a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <TIM_OC1_SetConfig+0xc8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d10c      	bne.n	8002a46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f023 0308 	bic.w	r3, r3, #8
 8002a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f023 0304 	bic.w	r3, r3, #4
 8002a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <TIM_OC1_SetConfig+0xc8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d111      	bne.n	8002a72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	621a      	str	r2, [r3, #32]
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40010000 	.word	0x40010000

08002a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f023 0210 	bic.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0320 	bic.w	r3, r3, #32
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <TIM_OC2_SetConfig+0xd4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10d      	bne.n	8002b18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <TIM_OC2_SetConfig+0xd4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d113      	bne.n	8002b48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40010000 	.word	0x40010000

08002b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0303 	bic.w	r3, r3, #3
 8002baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <TIM_OC3_SetConfig+0xd0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10d      	bne.n	8002bee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <TIM_OC3_SetConfig+0xd0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d113      	bne.n	8002c1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	621a      	str	r2, [r3, #32]
}
 8002c38:	bf00      	nop
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	40010000 	.word	0x40010000

08002c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	031b      	lsls	r3, r3, #12
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <TIM_OC4_SetConfig+0x9c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d109      	bne.n	8002cbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	621a      	str	r2, [r3, #32]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40010000 	.word	0x40010000

08002ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f023 0201 	bic.w	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f023 030a 	bic.w	r3, r3, #10
 8002d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	621a      	str	r2, [r3, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b087      	sub	sp, #28
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f023 0210 	bic.w	r2, r3, #16
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f043 0307 	orr.w	r3, r3, #7
 8002dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	021a      	lsls	r2, r3, #8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	371c      	adds	r7, #28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2201      	movs	r2, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	401a      	ands	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	621a      	str	r2, [r3, #32]
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e050      	b.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ecc:	d013      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10c      	bne.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800
 8002f3c:	40000c00 	.word	0x40000c00
 8002f40:	40014000 	.word	0x40014000

08002f44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e03d      	b.n	8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e03f      	b.n	800307a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd fd90 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800302a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f90b 	bl	8003248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b088      	sub	sp, #32
 8003086:	af02      	add	r7, sp, #8
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b20      	cmp	r3, #32
 80030a0:	f040 8083 	bne.w	80031aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_UART_Transmit+0x2e>
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e07b      	b.n	80031ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Transmit+0x40>
 80030be:	2302      	movs	r3, #2
 80030c0:	e074      	b.n	80031ac <HAL_UART_Transmit+0x12a>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2221      	movs	r2, #33	; 0x21
 80030d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80030d8:	f7fd feaa 	bl	8000e30 <HAL_GetTick>
 80030dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	88fa      	ldrh	r2, [r7, #6]
 80030e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	88fa      	ldrh	r2, [r7, #6]
 80030e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80030f2:	e042      	b.n	800317a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310a:	d122      	bne.n	8003152 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2200      	movs	r2, #0
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f84c 	bl	80031b4 <UART_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e042      	b.n	80031ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003138:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3302      	adds	r3, #2
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	e017      	b.n	800317a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3301      	adds	r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	e013      	b.n	800317a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2200      	movs	r2, #0
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f829 	bl	80031b4 <UART_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e01f      	b.n	80031ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	60ba      	str	r2, [r7, #8]
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1b7      	bne.n	80030f4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	2140      	movs	r1, #64	; 0x40
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f810 	bl	80031b4 <UART_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e006      	b.n	80031ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e000      	b.n	80031ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
  }
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c4:	e02c      	b.n	8003220 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031cc:	d028      	beq.n	8003220 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80031d4:	f7fd fe2c 	bl	8000e30 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d21d      	bcs.n	8003220 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e00f      	b.n	8003240 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	4013      	ands	r3, r2
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	429a      	cmp	r2, r3
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	429a      	cmp	r2, r3
 800323c:	d0c3      	beq.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324c:	b0bd      	sub	sp, #244	; 0xf4
 800324e:	af00      	add	r7, sp, #0
 8003250:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003264:	68d9      	ldr	r1, [r3, #12]
 8003266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	ea40 0301 	orr.w	r3, r0, r1
 8003270:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	431a      	orrs	r2, r3
 8003280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	431a      	orrs	r2, r3
 8003288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032a0:	f021 010c 	bic.w	r1, r1, #12
 80032a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80032ae:	430b      	orrs	r3, r1
 80032b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c2:	6999      	ldr	r1, [r3, #24]
 80032c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	ea40 0301 	orr.w	r3, r0, r1
 80032ce:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032da:	f040 81a5 	bne.w	8003628 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4bcd      	ldr	r3, [pc, #820]	; (800361c <UART_SetConfig+0x3d4>)
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d006      	beq.n	80032f8 <UART_SetConfig+0xb0>
 80032ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4bcb      	ldr	r3, [pc, #812]	; (8003620 <UART_SetConfig+0x3d8>)
 80032f2:	429a      	cmp	r2, r3
 80032f4:	f040 80cb 	bne.w	800348e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032f8:	f7ff f838 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 80032fc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003300:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003304:	461c      	mov	r4, r3
 8003306:	f04f 0500 	mov.w	r5, #0
 800330a:	4622      	mov	r2, r4
 800330c:	462b      	mov	r3, r5
 800330e:	1891      	adds	r1, r2, r2
 8003310:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003314:	415b      	adcs	r3, r3
 8003316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800331a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800331e:	1912      	adds	r2, r2, r4
 8003320:	eb45 0303 	adc.w	r3, r5, r3
 8003324:	f04f 0000 	mov.w	r0, #0
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	00d9      	lsls	r1, r3, #3
 800332e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003332:	00d0      	lsls	r0, r2, #3
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	1911      	adds	r1, r2, r4
 800333a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800333e:	416b      	adcs	r3, r5
 8003340:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	461a      	mov	r2, r3
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	1891      	adds	r1, r2, r2
 8003352:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003356:	415b      	adcs	r3, r3
 8003358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800335c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003360:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003364:	f7fc ff94 	bl	8000290 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4bad      	ldr	r3, [pc, #692]	; (8003624 <UART_SetConfig+0x3dc>)
 800336e:	fba3 2302 	umull	r2, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	011e      	lsls	r6, r3, #4
 8003376:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800337a:	461c      	mov	r4, r3
 800337c:	f04f 0500 	mov.w	r5, #0
 8003380:	4622      	mov	r2, r4
 8003382:	462b      	mov	r3, r5
 8003384:	1891      	adds	r1, r2, r2
 8003386:	67b9      	str	r1, [r7, #120]	; 0x78
 8003388:	415b      	adcs	r3, r3
 800338a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800338c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003390:	1912      	adds	r2, r2, r4
 8003392:	eb45 0303 	adc.w	r3, r5, r3
 8003396:	f04f 0000 	mov.w	r0, #0
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	00d9      	lsls	r1, r3, #3
 80033a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033a4:	00d0      	lsls	r0, r2, #3
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	1911      	adds	r1, r2, r4
 80033ac:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80033b0:	416b      	adcs	r3, r5
 80033b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80033b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	461a      	mov	r2, r3
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	1891      	adds	r1, r2, r2
 80033c4:	6739      	str	r1, [r7, #112]	; 0x70
 80033c6:	415b      	adcs	r3, r3
 80033c8:	677b      	str	r3, [r7, #116]	; 0x74
 80033ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033ce:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80033d2:	f7fc ff5d 	bl	8000290 <__aeabi_uldivmod>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4b92      	ldr	r3, [pc, #584]	; (8003624 <UART_SetConfig+0x3dc>)
 80033dc:	fba3 1302 	umull	r1, r3, r3, r2
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	2164      	movs	r1, #100	; 0x64
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	3332      	adds	r3, #50	; 0x32
 80033ee:	4a8d      	ldr	r2, [pc, #564]	; (8003624 <UART_SetConfig+0x3dc>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033fc:	441e      	add	r6, r3
 80033fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003402:	4618      	mov	r0, r3
 8003404:	f04f 0100 	mov.w	r1, #0
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	1894      	adds	r4, r2, r2
 800340e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003410:	415b      	adcs	r3, r3
 8003412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003414:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003418:	1812      	adds	r2, r2, r0
 800341a:	eb41 0303 	adc.w	r3, r1, r3
 800341e:	f04f 0400 	mov.w	r4, #0
 8003422:	f04f 0500 	mov.w	r5, #0
 8003426:	00dd      	lsls	r5, r3, #3
 8003428:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800342c:	00d4      	lsls	r4, r2, #3
 800342e:	4622      	mov	r2, r4
 8003430:	462b      	mov	r3, r5
 8003432:	1814      	adds	r4, r2, r0
 8003434:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003438:	414b      	adcs	r3, r1
 800343a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	461a      	mov	r2, r3
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	1891      	adds	r1, r2, r2
 800344c:	6639      	str	r1, [r7, #96]	; 0x60
 800344e:	415b      	adcs	r3, r3
 8003450:	667b      	str	r3, [r7, #100]	; 0x64
 8003452:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003456:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800345a:	f7fc ff19 	bl	8000290 <__aeabi_uldivmod>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4b70      	ldr	r3, [pc, #448]	; (8003624 <UART_SetConfig+0x3dc>)
 8003464:	fba3 1302 	umull	r1, r3, r3, r2
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	2164      	movs	r1, #100	; 0x64
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	3332      	adds	r3, #50	; 0x32
 8003476:	4a6b      	ldr	r2, [pc, #428]	; (8003624 <UART_SetConfig+0x3dc>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	f003 0207 	and.w	r2, r3, #7
 8003482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4432      	add	r2, r6
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	e26d      	b.n	800396a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800348e:	f7fe ff59 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003492:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003496:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800349a:	461c      	mov	r4, r3
 800349c:	f04f 0500 	mov.w	r5, #0
 80034a0:	4622      	mov	r2, r4
 80034a2:	462b      	mov	r3, r5
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80034a8:	415b      	adcs	r3, r3
 80034aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034b0:	1912      	adds	r2, r2, r4
 80034b2:	eb45 0303 	adc.w	r3, r5, r3
 80034b6:	f04f 0000 	mov.w	r0, #0
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	00d9      	lsls	r1, r3, #3
 80034c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034c4:	00d0      	lsls	r0, r2, #3
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	1911      	adds	r1, r2, r4
 80034cc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80034d0:	416b      	adcs	r3, r5
 80034d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	461a      	mov	r2, r3
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	1891      	adds	r1, r2, r2
 80034e4:	6539      	str	r1, [r7, #80]	; 0x50
 80034e6:	415b      	adcs	r3, r3
 80034e8:	657b      	str	r3, [r7, #84]	; 0x54
 80034ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034ee:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80034f2:	f7fc fecd 	bl	8000290 <__aeabi_uldivmod>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <UART_SetConfig+0x3dc>)
 80034fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	011e      	lsls	r6, r3, #4
 8003504:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003508:	461c      	mov	r4, r3
 800350a:	f04f 0500 	mov.w	r5, #0
 800350e:	4622      	mov	r2, r4
 8003510:	462b      	mov	r3, r5
 8003512:	1891      	adds	r1, r2, r2
 8003514:	64b9      	str	r1, [r7, #72]	; 0x48
 8003516:	415b      	adcs	r3, r3
 8003518:	64fb      	str	r3, [r7, #76]	; 0x4c
 800351a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800351e:	1912      	adds	r2, r2, r4
 8003520:	eb45 0303 	adc.w	r3, r5, r3
 8003524:	f04f 0000 	mov.w	r0, #0
 8003528:	f04f 0100 	mov.w	r1, #0
 800352c:	00d9      	lsls	r1, r3, #3
 800352e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003532:	00d0      	lsls	r0, r2, #3
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	1911      	adds	r1, r2, r4
 800353a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800353e:	416b      	adcs	r3, r5
 8003540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	461a      	mov	r2, r3
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	1891      	adds	r1, r2, r2
 8003552:	6439      	str	r1, [r7, #64]	; 0x40
 8003554:	415b      	adcs	r3, r3
 8003556:	647b      	str	r3, [r7, #68]	; 0x44
 8003558:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800355c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003560:	f7fc fe96 	bl	8000290 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <UART_SetConfig+0x3dc>)
 800356a:	fba3 1302 	umull	r1, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2164      	movs	r1, #100	; 0x64
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	3332      	adds	r3, #50	; 0x32
 800357c:	4a29      	ldr	r2, [pc, #164]	; (8003624 <UART_SetConfig+0x3dc>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800358a:	441e      	add	r6, r3
 800358c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003590:	4618      	mov	r0, r3
 8003592:	f04f 0100 	mov.w	r1, #0
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	1894      	adds	r4, r2, r2
 800359c:	63bc      	str	r4, [r7, #56]	; 0x38
 800359e:	415b      	adcs	r3, r3
 80035a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035a6:	1812      	adds	r2, r2, r0
 80035a8:	eb41 0303 	adc.w	r3, r1, r3
 80035ac:	f04f 0400 	mov.w	r4, #0
 80035b0:	f04f 0500 	mov.w	r5, #0
 80035b4:	00dd      	lsls	r5, r3, #3
 80035b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035ba:	00d4      	lsls	r4, r2, #3
 80035bc:	4622      	mov	r2, r4
 80035be:	462b      	mov	r3, r5
 80035c0:	1814      	adds	r4, r2, r0
 80035c2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80035c6:	414b      	adcs	r3, r1
 80035c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	1891      	adds	r1, r2, r2
 80035da:	6339      	str	r1, [r7, #48]	; 0x30
 80035dc:	415b      	adcs	r3, r3
 80035de:	637b      	str	r3, [r7, #52]	; 0x34
 80035e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035e4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035e8:	f7fc fe52 	bl	8000290 <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <UART_SetConfig+0x3dc>)
 80035f2:	fba3 1302 	umull	r1, r3, r3, r2
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2164      	movs	r1, #100	; 0x64
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	3332      	adds	r3, #50	; 0x32
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <UART_SetConfig+0x3dc>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	f003 0207 	and.w	r2, r3, #7
 8003610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4432      	add	r2, r6
 8003618:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800361a:	e1a6      	b.n	800396a <UART_SetConfig+0x722>
 800361c:	40011000 	.word	0x40011000
 8003620:	40011400 	.word	0x40011400
 8003624:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4bd1      	ldr	r3, [pc, #836]	; (8003974 <UART_SetConfig+0x72c>)
 8003630:	429a      	cmp	r2, r3
 8003632:	d006      	beq.n	8003642 <UART_SetConfig+0x3fa>
 8003634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4bcf      	ldr	r3, [pc, #828]	; (8003978 <UART_SetConfig+0x730>)
 800363c:	429a      	cmp	r2, r3
 800363e:	f040 80ca 	bne.w	80037d6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003642:	f7fe fe93 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 8003646:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800364a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800364e:	461c      	mov	r4, r3
 8003650:	f04f 0500 	mov.w	r5, #0
 8003654:	4622      	mov	r2, r4
 8003656:	462b      	mov	r3, r5
 8003658:	1891      	adds	r1, r2, r2
 800365a:	62b9      	str	r1, [r7, #40]	; 0x28
 800365c:	415b      	adcs	r3, r3
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003664:	1912      	adds	r2, r2, r4
 8003666:	eb45 0303 	adc.w	r3, r5, r3
 800366a:	f04f 0000 	mov.w	r0, #0
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	00d9      	lsls	r1, r3, #3
 8003674:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003678:	00d0      	lsls	r0, r2, #3
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	eb12 0a04 	adds.w	sl, r2, r4
 8003682:	eb43 0b05 	adc.w	fp, r3, r5
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4618      	mov	r0, r3
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	008b      	lsls	r3, r1, #2
 800369c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036a0:	0082      	lsls	r2, r0, #2
 80036a2:	4650      	mov	r0, sl
 80036a4:	4659      	mov	r1, fp
 80036a6:	f7fc fdf3 	bl	8000290 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4bb3      	ldr	r3, [pc, #716]	; (800397c <UART_SetConfig+0x734>)
 80036b0:	fba3 2302 	umull	r2, r3, r3, r2
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	011e      	lsls	r6, r3, #4
 80036b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036bc:	4618      	mov	r0, r3
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	1894      	adds	r4, r2, r2
 80036c8:	623c      	str	r4, [r7, #32]
 80036ca:	415b      	adcs	r3, r3
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
 80036ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036d2:	1812      	adds	r2, r2, r0
 80036d4:	eb41 0303 	adc.w	r3, r1, r3
 80036d8:	f04f 0400 	mov.w	r4, #0
 80036dc:	f04f 0500 	mov.w	r5, #0
 80036e0:	00dd      	lsls	r5, r3, #3
 80036e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036e6:	00d4      	lsls	r4, r2, #3
 80036e8:	4622      	mov	r2, r4
 80036ea:	462b      	mov	r3, r5
 80036ec:	1814      	adds	r4, r2, r0
 80036ee:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80036f2:	414b      	adcs	r3, r1
 80036f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	008b      	lsls	r3, r1, #2
 800370e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003712:	0082      	lsls	r2, r0, #2
 8003714:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003718:	f7fc fdba 	bl	8000290 <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4b96      	ldr	r3, [pc, #600]	; (800397c <UART_SetConfig+0x734>)
 8003722:	fba3 1302 	umull	r1, r3, r3, r2
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	2164      	movs	r1, #100	; 0x64
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	3332      	adds	r3, #50	; 0x32
 8003734:	4a91      	ldr	r2, [pc, #580]	; (800397c <UART_SetConfig+0x734>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003740:	441e      	add	r6, r3
 8003742:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003746:	4618      	mov	r0, r3
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	1894      	adds	r4, r2, r2
 8003752:	61bc      	str	r4, [r7, #24]
 8003754:	415b      	adcs	r3, r3
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375c:	1812      	adds	r2, r2, r0
 800375e:	eb41 0303 	adc.w	r3, r1, r3
 8003762:	f04f 0400 	mov.w	r4, #0
 8003766:	f04f 0500 	mov.w	r5, #0
 800376a:	00dd      	lsls	r5, r3, #3
 800376c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003770:	00d4      	lsls	r4, r2, #3
 8003772:	4622      	mov	r2, r4
 8003774:	462b      	mov	r3, r5
 8003776:	1814      	adds	r4, r2, r0
 8003778:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800377c:	414b      	adcs	r3, r1
 800377e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4618      	mov	r0, r3
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	008b      	lsls	r3, r1, #2
 8003798:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800379c:	0082      	lsls	r2, r0, #2
 800379e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80037a2:	f7fc fd75 	bl	8000290 <__aeabi_uldivmod>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4b74      	ldr	r3, [pc, #464]	; (800397c <UART_SetConfig+0x734>)
 80037ac:	fba3 1302 	umull	r1, r3, r3, r2
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	2164      	movs	r1, #100	; 0x64
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	3332      	adds	r3, #50	; 0x32
 80037be:	4a6f      	ldr	r2, [pc, #444]	; (800397c <UART_SetConfig+0x734>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	f003 020f 	and.w	r2, r3, #15
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4432      	add	r2, r6
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	e0c9      	b.n	800396a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80037d6:	f7fe fdb5 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 80037da:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80037e2:	461c      	mov	r4, r3
 80037e4:	f04f 0500 	mov.w	r5, #0
 80037e8:	4622      	mov	r2, r4
 80037ea:	462b      	mov	r3, r5
 80037ec:	1891      	adds	r1, r2, r2
 80037ee:	6139      	str	r1, [r7, #16]
 80037f0:	415b      	adcs	r3, r3
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037f8:	1912      	adds	r2, r2, r4
 80037fa:	eb45 0303 	adc.w	r3, r5, r3
 80037fe:	f04f 0000 	mov.w	r0, #0
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	00d9      	lsls	r1, r3, #3
 8003808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800380c:	00d0      	lsls	r0, r2, #3
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	eb12 0804 	adds.w	r8, r2, r4
 8003816:	eb43 0905 	adc.w	r9, r3, r5
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4618      	mov	r0, r3
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	008b      	lsls	r3, r1, #2
 8003830:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003834:	0082      	lsls	r2, r0, #2
 8003836:	4640      	mov	r0, r8
 8003838:	4649      	mov	r1, r9
 800383a:	f7fc fd29 	bl	8000290 <__aeabi_uldivmod>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4b4e      	ldr	r3, [pc, #312]	; (800397c <UART_SetConfig+0x734>)
 8003844:	fba3 2302 	umull	r2, r3, r3, r2
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	011e      	lsls	r6, r3, #4
 800384c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003850:	4618      	mov	r0, r3
 8003852:	f04f 0100 	mov.w	r1, #0
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	1894      	adds	r4, r2, r2
 800385c:	60bc      	str	r4, [r7, #8]
 800385e:	415b      	adcs	r3, r3
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003866:	1812      	adds	r2, r2, r0
 8003868:	eb41 0303 	adc.w	r3, r1, r3
 800386c:	f04f 0400 	mov.w	r4, #0
 8003870:	f04f 0500 	mov.w	r5, #0
 8003874:	00dd      	lsls	r5, r3, #3
 8003876:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800387a:	00d4      	lsls	r4, r2, #3
 800387c:	4622      	mov	r2, r4
 800387e:	462b      	mov	r3, r5
 8003880:	1814      	adds	r4, r2, r0
 8003882:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003886:	414b      	adcs	r3, r1
 8003888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800388c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4618      	mov	r0, r3
 8003894:	f04f 0100 	mov.w	r1, #0
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	008b      	lsls	r3, r1, #2
 80038a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038a6:	0082      	lsls	r2, r0, #2
 80038a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038ac:	f7fc fcf0 	bl	8000290 <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4b31      	ldr	r3, [pc, #196]	; (800397c <UART_SetConfig+0x734>)
 80038b6:	fba3 1302 	umull	r1, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2164      	movs	r1, #100	; 0x64
 80038be:	fb01 f303 	mul.w	r3, r1, r3
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	3332      	adds	r3, #50	; 0x32
 80038c8:	4a2c      	ldr	r2, [pc, #176]	; (800397c <UART_SetConfig+0x734>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d4:	441e      	add	r6, r3
 80038d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80038da:	4618      	mov	r0, r3
 80038dc:	f04f 0100 	mov.w	r1, #0
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	1894      	adds	r4, r2, r2
 80038e6:	603c      	str	r4, [r7, #0]
 80038e8:	415b      	adcs	r3, r3
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038f0:	1812      	adds	r2, r2, r0
 80038f2:	eb41 0303 	adc.w	r3, r1, r3
 80038f6:	f04f 0400 	mov.w	r4, #0
 80038fa:	f04f 0500 	mov.w	r5, #0
 80038fe:	00dd      	lsls	r5, r3, #3
 8003900:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003904:	00d4      	lsls	r4, r2, #3
 8003906:	4622      	mov	r2, r4
 8003908:	462b      	mov	r3, r5
 800390a:	1814      	adds	r4, r2, r0
 800390c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8003910:	414b      	adcs	r3, r1
 8003912:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4618      	mov	r0, r3
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	008b      	lsls	r3, r1, #2
 800392c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003930:	0082      	lsls	r2, r0, #2
 8003932:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003936:	f7fc fcab 	bl	8000290 <__aeabi_uldivmod>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <UART_SetConfig+0x734>)
 8003940:	fba3 1302 	umull	r1, r3, r3, r2
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	2164      	movs	r1, #100	; 0x64
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	3332      	adds	r3, #50	; 0x32
 8003952:	4a0a      	ldr	r2, [pc, #40]	; (800397c <UART_SetConfig+0x734>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	f003 020f 	and.w	r2, r3, #15
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4432      	add	r2, r6
 8003966:	609a      	str	r2, [r3, #8]
}
 8003968:	e7ff      	b.n	800396a <UART_SetConfig+0x722>
 800396a:	bf00      	nop
 800396c:	37f4      	adds	r7, #244	; 0xf4
 800396e:	46bd      	mov	sp, r7
 8003970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003974:	40011000 	.word	0x40011000
 8003978:	40011400 	.word	0x40011400
 800397c:	51eb851f 	.word	0x51eb851f

08003980 <_ZN13DisplayDriverC1Ev>:
#ifndef INC_DISPLAYDRIVER_H_
#define INC_DISPLAYDRIVER_H_

#include <stdint.h>

class DisplayDriver {
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	4a04      	ldr	r2, [pc, #16]	; (800399c <_ZN13DisplayDriverC1Ev+0x1c>)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	08005724 	.word	0x08005724

080039a0 <_ZN13LedSingleWireC1ENS_6FormatEht>:

#define LEAD_IN 4
#define LEAD_OUT 4


LedSingleWire::LedSingleWire(Format format, uint8_t strandCount,
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	70fb      	strb	r3, [r7, #3]
 80039b2:	460b      	mov	r3, r1
 80039b4:	70bb      	strb	r3, [r7, #2]
 80039b6:	4613      	mov	r3, r2
 80039b8:	803b      	strh	r3, [r7, #0]
		uint16_t pixelCount) {
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ffdf 	bl	8003980 <_ZN13DisplayDriverC1Ev>
 80039c2:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <_ZN13LedSingleWireC1ENS_6FormatEht+0x70>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	601a      	str	r2, [r3, #0]
	this->format = format;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	711a      	strb	r2, [r3, #4]
	this->strandCount = strandCount;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	78ba      	ldrb	r2, [r7, #2]
 80039d2:	719a      	strb	r2, [r3, #6]

	switch (this->format) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	791b      	ldrb	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <_ZN13LedSingleWireC1ENS_6FormatEht+0x44>
	case RGBW:
		this->bytesPerPixel = 4;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2204      	movs	r2, #4
 80039e0:	715a      	strb	r2, [r3, #5]
		break;
 80039e2:	bf00      	nop
	}

	//Each time division will be ~ 0.3uS.  0 looks like 0.3us/0.9us.  1 looks like 0.6us/0.6us so
	//each bit requires 4 time divisions
	this->pixelCount = pixelCount;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	883a      	ldrh	r2, [r7, #0]
 80039e8:	811a      	strh	r2, [r3, #8]
	this->bufferLength = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixelCount) + LEAD_IN + LEAD_OUT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	795b      	ldrb	r3, [r3, #5]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	883a      	ldrh	r2, [r7, #0]
 80039f2:	fb12 f303 	smulbb	r3, r2, r3
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	015b      	lsls	r3, r3, #5
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3308      	adds	r3, #8
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	815a      	strh	r2, [r3, #10]
}
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	0800570c 	.word	0x0800570c

08003a14 <_ZN13LedSingleWire4OpenEv>:

void LedSingleWire::Open() {
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b089      	sub	sp, #36	; 0x24
 8003a18:	af04      	add	r7, sp, #16
 8003a1a:	6078      	str	r0, [r7, #4]
	buffer = new uint16_t[this->bufferLength];
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	895b      	ldrh	r3, [r3, #10]
 8003a20:	4a36      	ldr	r2, [pc, #216]	; (8003afc <_ZN13LedSingleWire4OpenEv+0xe8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d801      	bhi.n	8003a2a <_ZN13LedSingleWire4OpenEv+0x16>
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	e001      	b.n	8003a2e <_ZN13LedSingleWire4OpenEv+0x1a>
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 f92b 	bl	8004c8a <_Znaj>
 8003a34:	4603      	mov	r3, r0
 8003a36:	461a      	mov	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	60da      	str	r2, [r3, #12]

	//Blanks the string

	for (uint16_t offset = 0; offset < bufferLength; offset++) {
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	81fb      	strh	r3, [r7, #14]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	895b      	ldrh	r3, [r3, #10]
 8003a44:	89fa      	ldrh	r2, [r7, #14]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d219      	bcs.n	8003a7e <_ZN13LedSingleWire4OpenEv+0x6a>
		if(offset < LEAD_IN || offset > LEAD_OUT) {
 8003a4a:	89fb      	ldrh	r3, [r7, #14]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d902      	bls.n	8003a56 <_ZN13LedSingleWire4OpenEv+0x42>
 8003a50:	89fb      	ldrh	r3, [r7, #14]
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d907      	bls.n	8003a66 <_ZN13LedSingleWire4OpenEv+0x52>
			buffer[offset] = 0x0000;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	2200      	movs	r2, #0
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	e007      	b.n	8003a76 <_ZN13LedSingleWire4OpenEv+0x62>
		} else {
			buffer[offset] = 0xFFFF;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	89fb      	ldrh	r3, [r7, #14]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a74:	801a      	strh	r2, [r3, #0]
	for (uint16_t offset = 0; offset < bufferLength; offset++) {
 8003a76:	89fb      	ldrh	r3, [r7, #14]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	81fb      	strh	r3, [r7, #14]
 8003a7c:	e7e0      	b.n	8003a40 <_ZN13LedSingleWire4OpenEv+0x2c>
		}
	}

	for (uint8_t strand = 0; strand < strandCount; strand++) {
 8003a7e:	2300      	movs	r3, #0
 8003a80:	737b      	strb	r3, [r7, #13]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	799b      	ldrb	r3, [r3, #6]
 8003a86:	7b7a      	ldrb	r2, [r7, #13]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d21e      	bcs.n	8003aca <_ZN13LedSingleWire4OpenEv+0xb6>
		for (uint16_t pixel = 0; pixel < pixelCount; pixel++) {
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	817b      	strh	r3, [r7, #10]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	891b      	ldrh	r3, [r3, #8]
 8003a94:	897a      	ldrh	r2, [r7, #10]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d213      	bcs.n	8003ac2 <_ZN13LedSingleWire4OpenEv+0xae>
			SetPixel(strand, pixel, 0, 0, 0, 0);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	681c      	ldr	r4, [r3, #0]
 8003aa2:	7b7b      	ldrb	r3, [r7, #13]
 8003aa4:	b299      	uxth	r1, r3
 8003aa6:	897a      	ldrh	r2, [r7, #10]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9302      	str	r3, [sp, #8]
 8003aac:	2300      	movs	r3, #0
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	47a0      	blx	r4
		for (uint16_t pixel = 0; pixel < pixelCount; pixel++) {
 8003aba:	897b      	ldrh	r3, [r7, #10]
 8003abc:	3301      	adds	r3, #1
 8003abe:	817b      	strh	r3, [r7, #10]
 8003ac0:	e7e6      	b.n	8003a90 <_ZN13LedSingleWire4OpenEv+0x7c>
	for (uint8_t strand = 0; strand < strandCount; strand++) {
 8003ac2:	7b7b      	ldrb	r3, [r7, #13]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	737b      	strb	r3, [r7, #13]
 8003ac8:	e7db      	b.n	8003a82 <_ZN13LedSingleWire4OpenEv+0x6e>
		}
	}

	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 8003aca:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <_ZN13LedSingleWire4OpenEv+0xec>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <_ZN13LedSingleWire4OpenEv+0xec>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad8:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <_ZN13LedSingleWire4OpenEv+0xec>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff f99a 	bl	8002e1c <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start_IT(&htim1);
 8003ae8:	4805      	ldr	r0, [pc, #20]	; (8003b00 <_ZN13LedSingleWire4OpenEv+0xec>)
 8003aea:	f7fe fce2 	bl	80024b2 <HAL_TIM_Base_Start_IT>

	StartNextDma();
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f8da 	bl	8003ca8 <_ZN13LedSingleWire12StartNextDmaEv>
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	3ffffffc 	.word	0x3ffffffc
 8003b00:	2000065c 	.word	0x2000065c

08003b04 <_ZN13LedSingleWire5CloseEv>:

void LedSingleWire::Close() {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	delete buffer;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <_ZN13LedSingleWire5CloseEv+0x18>
 8003b14:	2102      	movs	r1, #2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 f8a4 	bl	8004c64 <_ZdlPvj>
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <_ZN13LedSingleWire8SetPixelEtthhhh>:

void LedSingleWire::SetPixel(uint16_t pixel, uint16_t strand, uint8_t r,
		uint8_t g, uint8_t b, uint8_t w) {
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	4611      	mov	r1, r2
 8003b30:	461a      	mov	r2, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	817b      	strh	r3, [r7, #10]
 8003b36:	460b      	mov	r3, r1
 8003b38:	813b      	strh	r3, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	71fb      	strb	r3, [r7, #7]
	uint16_t strandMask = 0x00;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	837b      	strh	r3, [r7, #26]

	uint16_t offset = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixel) + LEAD_IN;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	795b      	ldrb	r3, [r3, #5]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	897a      	ldrh	r2, [r7, #10]
 8003b4a:	fb12 f303 	smulbb	r3, r2, r3
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	015b      	lsls	r3, r3, #5
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3304      	adds	r3, #4
 8003b56:	83fb      	strh	r3, [r7, #30]

	switch (strand) {
 8003b58:	893b      	ldrh	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f040 8092 	bne.w	8003c84 <_ZN13LedSingleWire8SetPixelEtthhhh+0x160>
	case 0:
		strandMask = LED_0_Pin;
 8003b60:	2302      	movs	r3, #2
 8003b62:	837b      	strh	r3, [r7, #26]
		break;
 8003b64:	bf00      	nop
	default:
		//Strand is not configured
		return;
	}

	uint32_t data = r << 24
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	061a      	lsls	r2, r3, #24
			| g << 16
 8003b6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b6e:	041b      	lsls	r3, r3, #16
 8003b70:	431a      	orrs	r2, r3
			| b << 8
 8003b72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	431a      	orrs	r2, r3
			| w ; //w
 8003b7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b7e:	4313      	orrs	r3, r2
	uint32_t data = r << 24
 8003b80:	617b      	str	r3, [r7, #20]

	for (int8_t bit = 31; bit >= 0; bit--) {
 8003b82:	231f      	movs	r3, #31
 8003b84:	777b      	strb	r3, [r7, #29]
 8003b86:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	db7b      	blt.n	8003c86 <_ZN13LedSingleWire8SetPixelEtthhhh+0x162>
		buffer[offset] = buffer[offset] | strandMask;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	8bfb      	ldrh	r3, [r7, #30]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	8819      	ldrh	r1, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	8bfb      	ldrh	r3, [r7, #30]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	8b7a      	ldrh	r2, [r7, #26]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	801a      	strh	r2, [r3, #0]
		offset++;
 8003bac:	8bfb      	ldrh	r3, [r7, #30]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	83fb      	strh	r3, [r7, #30]
		if (data & (0x01 << bit)) {
 8003bb2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d012      	beq.n	8003bec <_ZN13LedSingleWire8SetPixelEtthhhh+0xc8>
			buffer[offset] = buffer[offset] | strandMask;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	8bfb      	ldrh	r3, [r7, #30]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	8819      	ldrh	r1, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	8bfb      	ldrh	r3, [r7, #30]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	8b7a      	ldrh	r2, [r7, #26]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	b292      	uxth	r2, r2
 8003be2:	801a      	strh	r2, [r3, #0]
			offset++;
 8003be4:	8bfb      	ldrh	r3, [r7, #30]
 8003be6:	3301      	adds	r3, #1
 8003be8:	83fb      	strh	r3, [r7, #30]
 8003bea:	e016      	b.n	8003c1a <_ZN13LedSingleWire8SetPixelEtthhhh+0xf6>
		} else {
			buffer[offset] = buffer[offset] & ~strandMask;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	8bfb      	ldrh	r3, [r7, #30]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	b21a      	sxth	r2, r3
 8003bfa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4013      	ands	r3, r2
 8003c04:	b219      	sxth	r1, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	8bfb      	ldrh	r3, [r7, #30]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	b28a      	uxth	r2, r1
 8003c12:	801a      	strh	r2, [r3, #0]
			offset++;
 8003c14:	8bfb      	ldrh	r3, [r7, #30]
 8003c16:	3301      	adds	r3, #1
 8003c18:	83fb      	strh	r3, [r7, #30]
		}
		buffer[offset] = buffer[offset] & ~strandMask;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	8bfb      	ldrh	r3, [r7, #30]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4413      	add	r3, r2
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b21a      	sxth	r2, r3
 8003c28:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	b21b      	sxth	r3, r3
 8003c30:	4013      	ands	r3, r2
 8003c32:	b219      	sxth	r1, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	8bfb      	ldrh	r3, [r7, #30]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	b28a      	uxth	r2, r1
 8003c40:	801a      	strh	r2, [r3, #0]
		offset++;
 8003c42:	8bfb      	ldrh	r3, [r7, #30]
 8003c44:	3301      	adds	r3, #1
 8003c46:	83fb      	strh	r3, [r7, #30]
		buffer[offset] = buffer[offset] & ~strandMask;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	8bfb      	ldrh	r3, [r7, #30]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b21a      	sxth	r2, r3
 8003c56:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	b21b      	sxth	r3, r3
 8003c5e:	4013      	ands	r3, r2
 8003c60:	b219      	sxth	r1, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	8bfb      	ldrh	r3, [r7, #30]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	b28a      	uxth	r2, r1
 8003c6e:	801a      	strh	r2, [r3, #0]
		offset++;
 8003c70:	8bfb      	ldrh	r3, [r7, #30]
 8003c72:	3301      	adds	r3, #1
 8003c74:	83fb      	strh	r3, [r7, #30]
	for (int8_t bit = 31; bit >= 0; bit--) {
 8003c76:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	777b      	strb	r3, [r7, #29]
 8003c82:	e780      	b.n	8003b86 <_ZN13LedSingleWire8SetPixelEtthhhh+0x62>
		return;
 8003c84:	bf00      	nop
	}
}
 8003c86:	3724      	adds	r7, #36	; 0x24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <_ZN13LedSingleWire10SwapBufferEv>:

void LedSingleWire::SwapBuffer() {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	StartNextDma();
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f805 	bl	8003ca8 <_ZN13LedSingleWire12StartNextDmaEv>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <_ZN13LedSingleWire12StartNextDmaEv>:

void LedSingleWire::StartNextDma() {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	//Reset signal
	LED_CLK_GPIO_Port->ODR = 0x00;
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <_ZN13LedSingleWire12StartNextDmaEv+0x40>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	615a      	str	r2, [r3, #20]
	HAL_Delay(80);
 8003cb6:	2050      	movs	r0, #80	; 0x50
 8003cb8:	f7fd f8c6 	bl	8000e48 <HAL_Delay>

	//14 is 300nS
	htim1.Instance->ARR = 18;
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <_ZN13LedSingleWire12StartNextDmaEv+0x44>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2212      	movs	r2, #18
 8003cc2:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->EGR = TIM_EGR_UG;
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <_ZN13LedSingleWire12StartNextDmaEv+0x44>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	615a      	str	r2, [r3, #20]

	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) buffer,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4619      	mov	r1, r3
			(uint32_t) &(LED_CLK_GPIO_Port->ODR), bufferLength);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	895b      	ldrh	r3, [r3, #10]
	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) buffer,
 8003cd6:	4a06      	ldr	r2, [pc, #24]	; (8003cf0 <_ZN13LedSingleWire12StartNextDmaEv+0x48>)
 8003cd8:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <_ZN13LedSingleWire12StartNextDmaEv+0x4c>)
 8003cda:	f7fd fa99 	bl	8001210 <HAL_DMA_Start_IT>
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40020000 	.word	0x40020000
 8003cec:	2000065c 	.word	0x2000065c
 8003cf0:	40020014 	.word	0x40020014
 8003cf4:	200005bc 	.word	0x200005bc

08003cf8 <_Z12DMA_CompleteP19__DMA_HandleTypeDef>:
//		instance->handleNeeded = true;
//		instance->Handle();
//	}
//}

void DMA_Complete(DMA_HandleTypeDef *hdma) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
	instance->Handle();
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x1c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fb5f 	bl	80043c8 <_ZN12MatrixDriver6HandleEv>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000194 	.word	0x20000194

08003d18 <_Z9DMA_AbortP19__DMA_HandleTypeDef>:

void DMA_Abort(DMA_HandleTypeDef *hdma) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	instance->Handle();
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <_Z9DMA_AbortP19__DMA_HandleTypeDef+0x1c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fb4f 	bl	80043c8 <_ZN12MatrixDriver6HandleEv>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000194 	.word	0x20000194

08003d38 <_Z9DMA_ErrorP19__DMA_HandleTypeDef>:

void DMA_Error(DMA_HandleTypeDef *hdma) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_LOGGING
	sprintf(buffer, "DE - %d %d\n", hdma_tim1_ch1.State,
			hdma_tim1_ch1.ErrorCode);
#endif

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
 8003d40:	4806      	ldr	r0, [pc, #24]	; (8003d5c <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x24>)
 8003d42:	f7fc fa4d 	bl	80001e0 <strlen>
 8003d46:	4603      	mov	r3, r0
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	230a      	movs	r3, #10
 8003d4c:	4903      	ldr	r1, [pc, #12]	; (8003d5c <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x24>)
 8003d4e:	4804      	ldr	r0, [pc, #16]	; (8003d60 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x28>)
 8003d50:	f7ff f997 	bl	8003082 <HAL_UART_Transmit>
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20000198 	.word	0x20000198
 8003d60:	2000061c 	.word	0x2000061c

08003d64 <_ZN12MatrixDriver12BufferOffsetEtth>:
// -- Row - y % (height / 2) - Top and bottom half of the panel are in the same output cycle
// ---- Pixel - 0 and 1 data lines, select lines for previously sent row (to keep it displaying while new data is clocked in to the shift registers)
// ------ Offset - Set data
// ------ Offset + 1 - Clock data
// ---- OE & Latch
uint16_t MatrixDriver::BufferOffset(uint16_t x, uint16_t y, uint8_t plane) {
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4611      	mov	r1, r2
 8003d70:	461a      	mov	r2, r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	817b      	strh	r3, [r7, #10]
 8003d76:	460b      	mov	r3, r1
 8003d78:	813b      	strh	r3, [r7, #8]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	71fb      	strb	r3, [r7, #7]
	uint16_t rowEntry = y % (height / 2);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	88db      	ldrh	r3, [r3, #6]
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	893b      	ldrh	r3, [r7, #8]
 8003d88:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d8c:	fb02 f201 	mul.w	r2, r2, r1
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	82fb      	strh	r3, [r7, #22]
	uint16_t rowOffset = rowEntry
			* ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	889b      	ldrh	r3, [r3, #4]
	uint16_t rowOffset = rowEntry
 8003d98:	3302      	adds	r3, #2
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	8afa      	ldrh	r2, [r7, #22]
 8003d9e:	fb12 f303 	smulbb	r3, r2, r3
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	82bb      	strh	r3, [r7, #20]
	uint16_t offsetInRow = ((width - 1) - x) * CYCLES_PER_PIXEL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	889b      	ldrh	r3, [r3, #4]
 8003dac:	1e5a      	subs	r2, r3, #1
 8003dae:	897b      	ldrh	r3, [r7, #10]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	827b      	strh	r3, [r7, #18]

	return (plane * planeSize) + rowOffset + offsetInRow;
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	899b      	ldrh	r3, [r3, #12]
 8003dc0:	fb12 f303 	smulbb	r3, r2, r3
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	8abb      	ldrh	r3, [r7, #20]
 8003dc8:	4413      	add	r3, r2
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	8a7b      	ldrh	r3, [r7, #18]
 8003dce:	4413      	add	r3, r2
 8003dd0:	b29b      	uxth	r3, r3
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <_ZN12MatrixDriverC1EttNS_8ScanTypeE>:

#define MIN(a,b) (((a)<(b))?(a):(b))

MatrixDriver::MatrixDriver(uint16_t width, uint16_t height, ScanType scanType) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	461a      	mov	r2, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	817b      	strh	r3, [r7, #10]
 8003df2:	460b      	mov	r3, r1
 8003df4:	813b      	strh	r3, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	71fb      	strb	r3, [r7, #7]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fdbf 	bl	8003980 <_ZN13DisplayDriverC1Ev>
 8003e02:	4a1a      	ldr	r2, [pc, #104]	; (8003e6c <_ZN12MatrixDriverC1EttNS_8ScanTypeE+0x8c>)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	72da      	strb	r2, [r3, #11]
	this->width = width;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	897a      	ldrh	r2, [r7, #10]
 8003e12:	809a      	strh	r2, [r3, #4]
	this->height = height;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	893a      	ldrh	r2, [r7, #8]
 8003e18:	80da      	strh	r2, [r3, #6]
	this->scanType = scanType;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	79fa      	ldrb	r2, [r7, #7]
 8003e1e:	725a      	strb	r2, [r3, #9]
	this->planes = PLANES;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2204      	movs	r2, #4
 8003e24:	721a      	strb	r2, [r3, #8]

	this->planeSize = ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES)
 8003e26:	897b      	ldrh	r3, [r7, #10]
 8003e28:	3302      	adds	r3, #2
 8003e2a:	b29a      	uxth	r2, r3
			* (height / 2);
 8003e2c:	893b      	ldrh	r3, [r7, #8]
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	b29b      	uxth	r3, r3
	this->planeSize = ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES)
 8003e32:	fb12 f303 	smulbb	r3, r2, r3
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	819a      	strh	r2, [r3, #12]
	this->bufferSize = planeSize * planes;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	899a      	ldrh	r2, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	7a1b      	ldrb	r3, [r3, #8]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	fb12 f303 	smulbb	r3, r2, r3
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	81da      	strh	r2, [r3, #14]

	this->sendBufferA = true;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	729a      	strb	r2, [r3, #10]

	instance = this;
 8003e5a:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <_ZN12MatrixDriverC1EttNS_8ScanTypeE+0x90>)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6013      	str	r3, [r2, #0]
}
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	08005740 	.word	0x08005740
 8003e70:	20000194 	.word	0x20000194

08003e74 <_ZN12MatrixDriver4OpenEv>:

void MatrixDriver::Open() {
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b08b      	sub	sp, #44	; 0x2c
 8003e78:	af04      	add	r7, sp, #16
 8003e7a:	6078      	str	r0, [r7, #4]
	this->bufferA = new uint16_t[bufferSize];
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	89db      	ldrh	r3, [r3, #14]
 8003e80:	4a8f      	ldr	r2, [pc, #572]	; (80040c0 <_ZN12MatrixDriver4OpenEv+0x24c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d801      	bhi.n	8003e8a <_ZN12MatrixDriver4OpenEv+0x16>
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	e001      	b.n	8003e8e <_ZN12MatrixDriver4OpenEv+0x1a>
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fefb 	bl	8004c8a <_Znaj>
 8003e94:	4603      	mov	r3, r0
 8003e96:	461a      	mov	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	611a      	str	r2, [r3, #16]
	this->bufferB = new uint16_t[bufferSize];
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	89db      	ldrh	r3, [r3, #14]
 8003ea0:	4a87      	ldr	r2, [pc, #540]	; (80040c0 <_ZN12MatrixDriver4OpenEv+0x24c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d801      	bhi.n	8003eaa <_ZN12MatrixDriver4OpenEv+0x36>
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	e001      	b.n	8003eae <_ZN12MatrixDriver4OpenEv+0x3a>
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 feeb 	bl	8004c8a <_Znaj>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	615a      	str	r2, [r3, #20]

	for (uint8_t y = 0; y < height / 2; y++) {
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	75fb      	strb	r3, [r7, #23]
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	88d2      	ldrh	r2, [r2, #6]
 8003ec6:	0852      	lsrs	r2, r2, #1
 8003ec8:	b292      	uxth	r2, r2
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	f280 80fa 	bge.w	80040c4 <_ZN12MatrixDriver4OpenEv+0x250>

		uint8_t previousRow = y == 0 ? (height / 2) - 1 : y - 1;
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d107      	bne.n	8003ee6 <_ZN12MatrixDriver4OpenEv+0x72>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	88db      	ldrh	r3, [r3, #6]
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	e002      	b.n	8003eec <_ZN12MatrixDriver4OpenEv+0x78>
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	753b      	strb	r3, [r7, #20]

		uint16_t rowSelects =
		SET_IF(previousRow & 0x01,
 8003eee:	7d3b      	ldrb	r3, [r7, #20]
 8003ef0:	015b      	lsls	r3, r3, #5
 8003ef2:	b21b      	sxth	r3, r3
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	b21a      	sxth	r2, r3
				Matrix_A_Pin) |SET_IF(previousRow & 0x02, Matrix_B_Pin)
 8003efa:	7d3b      	ldrb	r3, [r7, #20]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	b21b      	sxth	r3, r3
 8003f06:	4313      	orrs	r3, r2
 8003f08:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x04, Matrix_C_Pin)
 8003f0a:	7d3b      	ldrb	r3, [r7, #20]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	b21b      	sxth	r3, r3
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	b21b      	sxth	r3, r3
 8003f16:	4313      	orrs	r3, r2
 8003f18:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x08, Matrix_D_Pin)
 8003f1a:	7d3b      	ldrb	r3, [r7, #20]
 8003f1c:	01db      	lsls	r3, r3, #7
 8003f1e:	b21b      	sxth	r3, r3
 8003f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f24:	b21b      	sxth	r3, r3
 8003f26:	4313      	orrs	r3, r2
 8003f28:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x10, Matrix_E_Pin);
 8003f2a:	7d3b      	ldrb	r3, [r7, #20]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	b21b      	sxth	r3, r3
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	b21b      	sxth	r3, r3
 8003f36:	4313      	orrs	r3, r2
 8003f38:	b21b      	sxth	r3, r3
		uint16_t rowSelects =
 8003f3a:	827b      	strh	r3, [r7, #18]

		for (uint8_t plane = 0; plane < planes; plane++) {
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	75bb      	strb	r3, [r7, #22]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7a1b      	ldrb	r3, [r3, #8]
 8003f44:	7dba      	ldrb	r2, [r7, #22]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	f080 80b5 	bcs.w	80040b6 <_ZN12MatrixDriver4OpenEv+0x242>
			for (uint8_t x = 0; x < width; x++) {
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	757b      	strb	r3, [r7, #21]
 8003f50:	7d7b      	ldrb	r3, [r7, #21]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	8892      	ldrh	r2, [r2, #4]
 8003f56:	4293      	cmp	r3, r2
 8003f58:	da31      	bge.n	8003fbe <_ZN12MatrixDriver4OpenEv+0x14a>

				uint16_t offset = BufferOffset(x, y, plane);
 8003f5a:	7d7b      	ldrb	r3, [r7, #21]
 8003f5c:	b299      	uxth	r1, r3
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	7dbb      	ldrb	r3, [r7, #22]
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff fefd 	bl	8003d64 <_ZN12MatrixDriver12BufferOffsetEtth>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	823b      	strh	r3, [r7, #16]

				bufferA[offset] = rowSelects;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	8a3b      	ldrh	r3, [r7, #16]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4413      	add	r3, r2
 8003f78:	8a7a      	ldrh	r2, [r7, #18]
 8003f7a:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = rowSelects;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	8a3b      	ldrh	r3, [r7, #16]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	8a7a      	ldrh	r2, [r7, #18]
 8003f88:	801a      	strh	r2, [r3, #0]
				bufferA[offset + 1] = rowSelects | Matrix_CLK_Pin;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	8a3b      	ldrh	r3, [r7, #16]
 8003f90:	3301      	adds	r3, #1
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	8a7a      	ldrh	r2, [r7, #18]
 8003f98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f9c:	b292      	uxth	r2, r2
 8003f9e:	801a      	strh	r2, [r3, #0]
				bufferB[offset + 1] = rowSelects | Matrix_CLK_Pin;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	8a3b      	ldrh	r3, [r7, #16]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	8a7a      	ldrh	r2, [r7, #18]
 8003fae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fb2:	b292      	uxth	r2, r2
 8003fb4:	801a      	strh	r2, [r3, #0]
			for (uint8_t x = 0; x < width; x++) {
 8003fb6:	7d7b      	ldrb	r3, [r7, #21]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	757b      	strb	r3, [r7, #21]
 8003fbc:	e7c8      	b.n	8003f50 <_ZN12MatrixDriver4OpenEv+0xdc>
			}

			//Setup the final bytes for the row, staring with the output after the last pixel on the current row & plane
			//Disable outputs
			uint16_t offset = BufferOffset(0, y,
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	7dbb      	ldrb	r3, [r7, #22]
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fecc 	bl	8003d64 <_ZN12MatrixDriver12BufferOffsetEtth>
 8003fcc:	4603      	mov	r3, r0
					plane) + CYCLES_PER_PIXEL;
 8003fce:	3302      	adds	r3, #2
 8003fd0:	81fb      	strh	r3, [r7, #14]

			bufferA[offset] = bufferB[offset] = Matrix_OE_Pin | rowSelects;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	89fb      	ldrh	r3, [r7, #14]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	8a7a      	ldrh	r2, [r7, #18]
 8003fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	801a      	strh	r2, [r3, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6911      	ldr	r1, [r2, #16]
 8003fea:	89fa      	ldrh	r2, [r7, #14]
 8003fec:	0052      	lsls	r2, r2, #1
 8003fee:	440a      	add	r2, r1
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	8013      	strh	r3, [r2, #0]
			offset++;
 8003ff4:	89fb      	ldrh	r3, [r7, #14]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	81fb      	strh	r3, [r7, #14]

			uint16_t currentRowSelects =
			SET_IF(y & 0x01, Matrix_A_Pin) |SET_IF(y & 0x02, Matrix_B_Pin)
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	015b      	lsls	r3, r3, #5
 8003ffe:	b21b      	sxth	r3, r3
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	b21a      	sxth	r2, r3
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	b21b      	sxth	r3, r3
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	b21b      	sxth	r3, r3
 8004012:	4313      	orrs	r3, r2
 8004014:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x04, Matrix_C_Pin)
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	b21b      	sxth	r3, r3
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	b21b      	sxth	r3, r3
 8004022:	4313      	orrs	r3, r2
 8004024:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x08, Matrix_D_Pin)
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	01db      	lsls	r3, r3, #7
 800402a:	b21b      	sxth	r3, r3
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	b21b      	sxth	r3, r3
 8004032:	4313      	orrs	r3, r2
 8004034:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x10, Matrix_E_Pin);
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	b21b      	sxth	r3, r3
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	b21b      	sxth	r3, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	b21b      	sxth	r3, r3
			uint16_t currentRowSelects =
 8004046:	81bb      	strh	r3, [r7, #12]

			//Latch data, select next row, outputs still off
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin | Matrix_OE_Pin
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	89fb      	ldrh	r3, [r7, #14]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
					| currentRowSelects;
 8004052:	89ba      	ldrh	r2, [r7, #12]
 8004054:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004058:	b292      	uxth	r2, r2
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin | Matrix_OE_Pin
 800405a:	801a      	strh	r2, [r3, #0]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6911      	ldr	r1, [r2, #16]
 8004060:	89fa      	ldrh	r2, [r7, #14]
 8004062:	0052      	lsls	r2, r2, #1
 8004064:	440a      	add	r2, r1
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	8013      	strh	r3, [r2, #0]

			offset++;
 800406a:	89fb      	ldrh	r3, [r7, #14]
 800406c:	3301      	adds	r3, #1
 800406e:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	89fb      	ldrh	r3, [r7, #14]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	89ba      	ldrh	r2, [r7, #12]
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6911      	ldr	r1, [r2, #16]
 8004082:	89fa      	ldrh	r2, [r7, #14]
 8004084:	0052      	lsls	r2, r2, #1
 8004086:	440a      	add	r2, r1
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	8013      	strh	r3, [r2, #0]

			//Bonus cycle to settle.  Probably not necessary but 3 trailing cycles feels odd
			offset++;
 800408c:	89fb      	ldrh	r3, [r7, #14]
 800408e:	3301      	adds	r3, #1
 8004090:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	89fb      	ldrh	r3, [r7, #14]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	89ba      	ldrh	r2, [r7, #12]
 800409e:	801a      	strh	r2, [r3, #0]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6911      	ldr	r1, [r2, #16]
 80040a4:	89fa      	ldrh	r2, [r7, #14]
 80040a6:	0052      	lsls	r2, r2, #1
 80040a8:	440a      	add	r2, r1
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	8013      	strh	r3, [r2, #0]
		for (uint8_t plane = 0; plane < planes; plane++) {
 80040ae:	7dbb      	ldrb	r3, [r7, #22]
 80040b0:	3301      	adds	r3, #1
 80040b2:	75bb      	strb	r3, [r7, #22]
 80040b4:	e744      	b.n	8003f40 <_ZN12MatrixDriver4OpenEv+0xcc>
	for (uint8_t y = 0; y < height / 2; y++) {
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	3301      	adds	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
 80040bc:	e700      	b.n	8003ec0 <_ZN12MatrixDriver4OpenEv+0x4c>
 80040be:	bf00      	nop
 80040c0:	3ffffffc 	.word	0x3ffffffc
		}
	}

	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	889b      	ldrh	r3, [r3, #4]
 80040c8:	4618      	mov	r0, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	88db      	ldrh	r3, [r3, #6]
 80040ce:	461c      	mov	r4, r3
			bufferSize, planes, planeSize);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	89db      	ldrh	r3, [r3, #14]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 80040d4:	461a      	mov	r2, r3
			bufferSize, planes, planeSize);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 80040da:	4619      	mov	r1, r3
			bufferSize, planes, planeSize);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	899b      	ldrh	r3, [r3, #12]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 80040e0:	9302      	str	r3, [sp, #8]
 80040e2:	9101      	str	r1, [sp, #4]
 80040e4:	9200      	str	r2, [sp, #0]
 80040e6:	4623      	mov	r3, r4
 80040e8:	4602      	mov	r2, r0
 80040ea:	4919      	ldr	r1, [pc, #100]	; (8004150 <_ZN12MatrixDriver4OpenEv+0x2dc>)
 80040ec:	4819      	ldr	r0, [pc, #100]	; (8004154 <_ZN12MatrixDriver4OpenEv+0x2e0>)
 80040ee:	f000 ff35 	bl	8004f5c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
 80040f2:	4818      	ldr	r0, [pc, #96]	; (8004154 <_ZN12MatrixDriver4OpenEv+0x2e0>)
 80040f4:	f7fc f874 	bl	80001e0 <strlen>
 80040f8:	4603      	mov	r3, r0
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	230a      	movs	r3, #10
 80040fe:	4915      	ldr	r1, [pc, #84]	; (8004154 <_ZN12MatrixDriver4OpenEv+0x2e0>)
 8004100:	4815      	ldr	r0, [pc, #84]	; (8004158 <_ZN12MatrixDriver4OpenEv+0x2e4>)
 8004102:	f7fe ffbe 	bl	8003082 <HAL_UART_Transmit>

	hdma_tim1_ch1.XferAbortCallback = DMA_Abort;
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <_ZN12MatrixDriver4OpenEv+0x2e8>)
 8004108:	4a15      	ldr	r2, [pc, #84]	; (8004160 <_ZN12MatrixDriver4OpenEv+0x2ec>)
 800410a:	651a      	str	r2, [r3, #80]	; 0x50
	hdma_tim1_ch1.XferCpltCallback = DMA_Complete;
 800410c:	4b13      	ldr	r3, [pc, #76]	; (800415c <_ZN12MatrixDriver4OpenEv+0x2e8>)
 800410e:	4a15      	ldr	r2, [pc, #84]	; (8004164 <_ZN12MatrixDriver4OpenEv+0x2f0>)
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c
	hdma_tim1_ch1.XferErrorCallback = DMA_Error;
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <_ZN12MatrixDriver4OpenEv+0x2e8>)
 8004114:	4a14      	ldr	r2, [pc, #80]	; (8004168 <_ZN12MatrixDriver4OpenEv+0x2f4>)
 8004116:	64da      	str	r2, [r3, #76]	; 0x4c

	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <_ZN12MatrixDriver4OpenEv+0x2f8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	4b13      	ldr	r3, [pc, #76]	; (800416c <_ZN12MatrixDriver4OpenEv+0x2f8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004126:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004128:	4b10      	ldr	r3, [pc, #64]	; (800416c <_ZN12MatrixDriver4OpenEv+0x2f8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2201      	movs	r2, #1
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe fe73 	bl	8002e1c <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start_IT(&htim1);
 8004136:	480d      	ldr	r0, [pc, #52]	; (800416c <_ZN12MatrixDriver4OpenEv+0x2f8>)
 8004138:	f7fe f9bb 	bl	80024b2 <HAL_TIM_Base_Start_IT>

	nextDmaOffset = 0;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	831a      	strh	r2, [r3, #24]

	StartNextDma();
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f95c 	bl	8004400 <_ZN12MatrixDriver12StartNextDmaEv>
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}
 8004150:	0800565c 	.word	0x0800565c
 8004154:	20000198 	.word	0x20000198
 8004158:	2000061c 	.word	0x2000061c
 800415c:	200005bc 	.word	0x200005bc
 8004160:	08003d19 	.word	0x08003d19
 8004164:	08003cf9 	.word	0x08003cf9
 8004168:	08003d39 	.word	0x08003d39
 800416c:	2000065c 	.word	0x2000065c

08004170 <_ZN12MatrixDriver5CloseEv>:

void MatrixDriver::Close() {
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	HAL_DMA_Abort_IT(&hdma_tim1_ch1);
 8004178:	480e      	ldr	r0, [pc, #56]	; (80041b4 <_ZN12MatrixDriver5CloseEv+0x44>)
 800417a:	f7fd f8a1 	bl	80012c0 <HAL_DMA_Abort_IT>

	HAL_TIM_Base_Stop_IT(&htim1);
 800417e:	480e      	ldr	r0, [pc, #56]	; (80041b8 <_ZN12MatrixDriver5CloseEv+0x48>)
 8004180:	f7fe f9bb 	bl	80024fa <HAL_TIM_Base_Stop_IT>

	nextDmaOffset = 0;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	831a      	strh	r2, [r3, #24]

	delete this->bufferA;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <_ZN12MatrixDriver5CloseEv+0x2a>
 8004192:	2102      	movs	r1, #2
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fd65 	bl	8004c64 <_ZdlPvj>
	delete this->bufferB;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <_ZN12MatrixDriver5CloseEv+0x3a>
 80041a2:	2102      	movs	r1, #2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fd5d 	bl	8004c64 <_ZdlPvj>
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	200005bc 	.word	0x200005bc
 80041b8:	2000065c 	.word	0x2000065c

080041bc <_ZN12MatrixDriver9PlaneBitsEh>:
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	70fb      	strb	r3, [r7, #3]
	value = gamma8[value];
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	4a18      	ldr	r2, [pc, #96]	; (800422c <_ZN12MatrixDriver9PlaneBitsEh+0x70>)
 80041cc:	5cd3      	ldrb	r3, [r2, r3]
 80041ce:	70fb      	strb	r3, [r7, #3]

#if PLANES == 8
	return value;
#elif PLANES == 4
	uint8_t result = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]

	if(value > 128) {
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	2b80      	cmp	r3, #128	; 0x80
 80041d8:	d906      	bls.n	80041e8 <_ZN12MatrixDriver9PlaneBitsEh+0x2c>
		result |= 0x08;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	f043 0308 	orr.w	r3, r3, #8
 80041e0:	73fb      	strb	r3, [r7, #15]
		value -=128;
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	3b80      	subs	r3, #128	; 0x80
 80041e6:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 64) {
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	2b40      	cmp	r3, #64	; 0x40
 80041ec:	d906      	bls.n	80041fc <_ZN12MatrixDriver9PlaneBitsEh+0x40>
		result |= 0x03;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	f043 0303 	orr.w	r3, r3, #3
 80041f4:	73fb      	strb	r3, [r7, #15]
		value -=128;
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	3b80      	subs	r3, #128	; 0x80
 80041fa:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 32) {
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d906      	bls.n	8004210 <_ZN12MatrixDriver9PlaneBitsEh+0x54>
		result |= 0x02;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	f043 0302 	orr.w	r3, r3, #2
 8004208:	73fb      	strb	r3, [r7, #15]
		value -=128;
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	3b80      	subs	r3, #128	; 0x80
 800420e:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 8) {
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	2b08      	cmp	r3, #8
 8004214:	d903      	bls.n	800421e <_ZN12MatrixDriver9PlaneBitsEh+0x62>
		result |= 0x01;
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 800421e:	7bfb      	ldrb	r3, [r7, #15]

	return result;
#elif PLANES == 1
	return value > 0 ? 0x01 : 0x00;
#endif
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	2000000c 	.word	0x2000000c

08004230 <_ZN12MatrixDriver8SetPixelEtthhhh>:
//
//		}
//	}
}

void MatrixDriver::SetPixel(uint16_t x, uint16_t y, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b08c      	sub	sp, #48	; 0x30
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	4608      	mov	r0, r1
 800423a:	4611      	mov	r1, r2
 800423c:	461a      	mov	r2, r3
 800423e:	4603      	mov	r3, r0
 8004240:	817b      	strh	r3, [r7, #10]
 8004242:	460b      	mov	r3, r1
 8004244:	813b      	strh	r3, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	71fb      	strb	r3, [r7, #7]
	uint16_t rBit, gBit, bBit;

//Set data into the buffer we aren't sending at the moment
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	7a9b      	ldrb	r3, [r3, #10]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <_ZN12MatrixDriver8SetPixelEtthhhh+0x28>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	e001      	b.n	800425c <_ZN12MatrixDriver8SetPixelEtthhhh+0x2c>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	623b      	str	r3, [r7, #32]

	if (y < (height / 2)) {
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	88db      	ldrh	r3, [r3, #6]
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	b29b      	uxth	r3, r3
 8004266:	893a      	ldrh	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	d206      	bcs.n	800427a <_ZN12MatrixDriver8SetPixelEtthhhh+0x4a>
		rBit = Matrix_R0_Pin;
 800426c:	2301      	movs	r3, #1
 800426e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gBit = Matrix_G0_Pin;
 8004270:	2302      	movs	r3, #2
 8004272:	85bb      	strh	r3, [r7, #44]	; 0x2c
		bBit = Matrix_B0_Pin;
 8004274:	2304      	movs	r3, #4
 8004276:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004278:	e007      	b.n	800428a <_ZN12MatrixDriver8SetPixelEtthhhh+0x5a>
	} else {
		rBit = Matrix_R1_Pin;
 800427a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800427e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gBit = Matrix_G1_Pin;
 8004280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004284:	85bb      	strh	r3, [r7, #44]	; 0x2c
		bBit = Matrix_B1_Pin;
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint16_t pixelMask = rBit | gBit | bBit;
 800428a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800428c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800428e:	4313      	orrs	r3, r2
 8004290:	b29a      	uxth	r2, r3
 8004292:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004294:	4313      	orrs	r3, r2
 8004296:	83fb      	strh	r3, [r7, #30]

	uint8_t rPlanes = PlaneBits(r);
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	4619      	mov	r1, r3
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff ff8d 	bl	80041bc <_ZN12MatrixDriver9PlaneBitsEh>
 80042a2:	4603      	mov	r3, r0
 80042a4:	777b      	strb	r3, [r7, #29]
	uint8_t gPlanes = PlaneBits(g);
 80042a6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80042aa:	4619      	mov	r1, r3
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff ff85 	bl	80041bc <_ZN12MatrixDriver9PlaneBitsEh>
 80042b2:	4603      	mov	r3, r0
 80042b4:	773b      	strb	r3, [r7, #28]
	uint8_t bPlanes = PlaneBits(b);
 80042b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80042ba:	4619      	mov	r1, r3
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7ff ff7d 	bl	80041bc <_ZN12MatrixDriver9PlaneBitsEh>
 80042c2:	4603      	mov	r3, r0
 80042c4:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
			10);
#endif

	for (int plane = 0; plane < planes; plane++) {
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	7a1b      	ldrb	r3, [r3, #8]
 80042ce:	461a      	mov	r2, r3
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	4293      	cmp	r3, r2
 80042d4:	da63      	bge.n	800439e <_ZN12MatrixDriver8SetPixelEtthhhh+0x16e>
		uint16_t planePixelBits = ((rPlanes & (0x01 << plane)) ? rBit : 0)
 80042d6:	7f7a      	ldrb	r2, [r7, #29]
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	fa42 f303 	asr.w	r3, r2, r3
 80042de:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & (0x01 << plane)) ? gBit : 0)
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <_ZN12MatrixDriver8SetPixelEtthhhh+0xbc>
 80042e6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80042ea:	e000      	b.n	80042ee <_ZN12MatrixDriver8SetPixelEtthhhh+0xbe>
 80042ec:	2200      	movs	r2, #0
 80042ee:	7f39      	ldrb	r1, [r7, #28]
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	fa41 f303 	asr.w	r3, r1, r3
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <_ZN12MatrixDriver8SetPixelEtthhhh+0xd4>
 80042fe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004302:	e000      	b.n	8004306 <_ZN12MatrixDriver8SetPixelEtthhhh+0xd6>
 8004304:	2300      	movs	r3, #0
 8004306:	4313      	orrs	r3, r2
 8004308:	b21a      	sxth	r2, r3
				| ((bPlanes & (0x01 << plane)) ? bBit : 0);
 800430a:	7ef9      	ldrb	r1, [r7, #27]
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	fa41 f303 	asr.w	r3, r1, r3
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <_ZN12MatrixDriver8SetPixelEtthhhh+0xf0>
 800431a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800431e:	e000      	b.n	8004322 <_ZN12MatrixDriver8SetPixelEtthhhh+0xf2>
 8004320:	2300      	movs	r3, #0
 8004322:	4313      	orrs	r3, r2
 8004324:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = ((rPlanes & (0x01 << plane)) ? rBit : 0)
 8004326:	833b      	strh	r3, [r7, #24]

		uint16_t offset = BufferOffset(x, y, plane);
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	b2db      	uxtb	r3, r3
 800432c:	893a      	ldrh	r2, [r7, #8]
 800432e:	8979      	ldrh	r1, [r7, #10]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff fd17 	bl	8003d64 <_ZN12MatrixDriver12BufferOffsetEtth>
 8004336:	4603      	mov	r3, r0
 8004338:	82fb      	strh	r3, [r7, #22]

		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 800433a:	8afb      	ldrh	r3, [r7, #22]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	6a3a      	ldr	r2, [r7, #32]
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b21a      	sxth	r2, r3
 8004346:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800434a:	43db      	mvns	r3, r3
 800434c:	b21b      	sxth	r3, r3
 800434e:	4013      	ands	r3, r2
 8004350:	b21a      	sxth	r2, r3
				| planePixelBits;
 8004352:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	b219      	sxth	r1, r3
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 800435a:	8afb      	ldrh	r3, [r7, #22]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	4413      	add	r3, r2
				| planePixelBits;
 8004362:	b28a      	uxth	r2, r1
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8004364:	801a      	strh	r2, [r3, #0]
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8004366:	8afb      	ldrh	r3, [r7, #22]
 8004368:	3301      	adds	r3, #1
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	6a3a      	ldr	r2, [r7, #32]
 800436e:	4413      	add	r3, r2
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b21a      	sxth	r2, r3
 8004374:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004378:	43db      	mvns	r3, r3
 800437a:	b21b      	sxth	r3, r3
 800437c:	4013      	ands	r3, r2
 800437e:	b21a      	sxth	r2, r3
				| planePixelBits;
 8004380:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004384:	4313      	orrs	r3, r2
 8004386:	b219      	sxth	r1, r3
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8004388:	8afb      	ldrh	r3, [r7, #22]
 800438a:	3301      	adds	r3, #1
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	6a3a      	ldr	r2, [r7, #32]
 8004390:	4413      	add	r3, r2
				| planePixelBits;
 8004392:	b28a      	uxth	r2, r1
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8004394:	801a      	strh	r2, [r3, #0]
	for (int plane = 0; plane < planes; plane++) {
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	3301      	adds	r3, #1
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	e795      	b.n	80042ca <_ZN12MatrixDriver8SetPixelEtthhhh+0x9a>
	}
}
 800439e:	bf00      	nop
 80043a0:	3730      	adds	r7, #48	; 0x30
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	completeSwap = true;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	72da      	strb	r2, [r3, #11]

	HAL_DMA_Abort_IT(&hdma_tim1_ch1);
 80043b6:	4803      	ldr	r0, [pc, #12]	; (80043c4 <_ZN12MatrixDriver10SwapBufferEv+0x1c>)
 80043b8:	f7fc ff82 	bl	80012c0 <HAL_DMA_Abort_IT>
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200005bc 	.word	0x200005bc

080043c8 <_ZN12MatrixDriver6HandleEv>:

void MatrixDriver::Handle() {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	if (completeSwap) {
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	7adb      	ldrb	r3, [r3, #11]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00c      	beq.n	80043f2 <_ZN12MatrixDriver6HandleEv+0x2a>
		completeSwap = false;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	72da      	strb	r2, [r3, #11]
		sendBufferA = !sendBufferA;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	7a9b      	ldrb	r3, [r3, #10]
 80043e2:	f083 0301 	eor.w	r3, r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	729a      	strb	r2, [r3, #10]
		nextDmaOffset = 0;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	831a      	strh	r2, [r3, #24]
	}

	StartNextDma();
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f804 	bl	8004400 <_ZN12MatrixDriver12StartNextDmaEv>
}
 80043f8:	bf00      	nop
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <_ZN12MatrixDriver12StartNextDmaEv>:
uint8_t const AAR_BY_PLANE[] = { 1, 2, 4, 8, 16, 32, 64 };
#elif PLANES == 4
uint8_t const AAR_BY_PLANE[] = { 1, 8, 16, 28 };
#endif

void MatrixDriver::StartNextDma() {
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	uint16_t plane = nextDmaOffset / planeSize;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8b1a      	ldrh	r2, [r3, #24]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	899b      	ldrh	r3, [r3, #12]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	82fb      	strh	r3, [r7, #22]
	uint16_t *outputBuffer = (sendBufferA ? bufferA : bufferB);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7a9b      	ldrb	r3, [r3, #10]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <_ZN12MatrixDriver12StartNextDmaEv+0x24>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	e001      	b.n	8004428 <_ZN12MatrixDriver12StartNextDmaEv+0x28>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	613b      	str	r3, [r7, #16]
	uint16_t *ouputOffset = outputBuffer + (plane * planeSize);
 800442a:	8afb      	ldrh	r3, [r7, #22]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	8992      	ldrh	r2, [r2, #12]
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

	htim1.Instance->ARR = AAR_BY_PLANE[plane];
 800443c:	8afb      	ldrh	r3, [r7, #22]
 800443e:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <_ZN12MatrixDriver12StartNextDmaEv+0xa0>)
 8004440:	5cd2      	ldrb	r2, [r2, r3]
 8004442:	4b18      	ldr	r3, [pc, #96]	; (80044a4 <_ZN12MatrixDriver12StartNextDmaEv+0xa4>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->EGR = TIM_EGR_UG;
 8004448:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <_ZN12MatrixDriver12StartNextDmaEv+0xa4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2201      	movs	r2, #1
 800444e:	615a      	str	r2, [r3, #20]

		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
	}
#endif

	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) ouputOffset,
 8004450:	68f9      	ldr	r1, [r7, #12]
			(uint32_t) &(GPIOB->ODR), planeSize);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	899b      	ldrh	r3, [r3, #12]
	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) ouputOffset,
 8004456:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <_ZN12MatrixDriver12StartNextDmaEv+0xa8>)
 8004458:	4814      	ldr	r0, [pc, #80]	; (80044ac <_ZN12MatrixDriver12StartNextDmaEv+0xac>)
 800445a:	f7fc fed9 	bl	8001210 <HAL_DMA_Start_IT>

	nextDmaOffset += planeSize;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8b1a      	ldrh	r2, [r3, #24]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	899b      	ldrh	r3, [r3, #12]
 8004466:	4413      	add	r3, r2
 8004468:	b29a      	uxth	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	831a      	strh	r2, [r3, #24]

	if (nextDmaOffset >= bufferSize) {
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8b1a      	ldrh	r2, [r3, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	89db      	ldrh	r3, [r3, #14]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <_ZN12MatrixDriver12StartNextDmaEv+0x80>
		nextDmaOffset = 0;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	831a      	strh	r2, [r3, #24]
	}

#ifdef DebugPin_GPIO_Port
	HAL_GPIO_WritePin(DebugPin_GPIO_Port, DebugPin_Pin,
			plane & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004480:	8afb      	ldrh	r3, [r7, #22]
 8004482:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(DebugPin_GPIO_Port, DebugPin_Pin,
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004490:	4807      	ldr	r0, [pc, #28]	; (80044b0 <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 8004492:	f7fd fb25 	bl	8001ae0 <HAL_GPIO_WritePin>
#endif
}
 8004496:	bf00      	nop
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	08005734 	.word	0x08005734
 80044a4:	2000065c 	.word	0x2000065c
 80044a8:	40020414 	.word	0x40020414
 80044ac:	200005bc 	.word	0x200005bc
 80044b0:	40020000 	.word	0x40020000

080044b4 <_ZN13Configuration8getWidthEv>:
		Uninitialized = 0, Ready = 1
	};

	Status status = Uninitialized;

	uint16_t getWidth() {
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
		switch (pixelConfiguration) {
		Simple:
			return elementWidth * elementCount;
		default:
			return elementWidth;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	88db      	ldrh	r3, [r3, #6]
		}
	}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZN13Configuration9getHeightEv>:

	uint16_t getHeight() {
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
		switch (pixelConfiguration) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7a9b      	ldrb	r3, [r3, #10]
 80044d8:	3b01      	subs	r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d807      	bhi.n	80044ee <_ZN13Configuration9getHeightEv+0x22>
		case LeftToRight:
		case SnakeStartBottomRight:
			return elementHeight * elementCount;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	891a      	ldrh	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	889b      	ldrh	r3, [r3, #4]
 80044e6:	fb12 f303 	smulbb	r3, r2, r3
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	e001      	b.n	80044f2 <_ZN13Configuration9getHeightEv+0x26>
		default:
			return elementHeight;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	891b      	ldrh	r3, [r3, #8]
		}
	}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <_ZN12PixelMapping5PixelC1Ett>:
#define INC_PIXELMAPPING_H_

class PixelMapping {
public:
	struct Pixel {
		Pixel(uint16_t x, uint16_t y) {
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	460b      	mov	r3, r1
 8004508:	807b      	strh	r3, [r7, #2]
 800450a:	4613      	mov	r3, r2
 800450c:	803b      	strh	r3, [r7, #0]
			this->x = x;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	887a      	ldrh	r2, [r7, #2]
 8004512:	801a      	strh	r2, [r3, #0]
			this->y = y;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	883a      	ldrh	r2, [r7, #0]
 8004518:	805a      	strh	r2, [r3, #2]
		}
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <_ZN18SimplePixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:
	virtual Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) = 0;
};

class SimplePixelMapping : public PixelMapping {
public:
	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
		return input;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	2300      	movs	r3, #0
 8004538:	89ba      	ldrh	r2, [r7, #12]
 800453a:	f362 030f 	bfi	r3, r2, #0, #16
 800453e:	89fa      	ldrh	r2, [r7, #14]
 8004540:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <_ZN12PixelMappingC1Ev>:
class PixelMapping {
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	4a04      	ldr	r2, [pc, #16]	; (800456c <_ZN12PixelMappingC1Ev+0x1c>)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	0802377c 	.word	0x0802377c

08004570 <_ZN23LeftToRightPixelMappingC1Ehtt>:
};

class LeftToRightPixelMapping : public PixelMapping {
public:
	LeftToRightPixelMapping(uint8_t panelCount, uint16_t panelWidth, uint16_t panelHeight) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	461a      	mov	r2, r3
 800457e:	4603      	mov	r3, r0
 8004580:	72fb      	strb	r3, [r7, #11]
 8004582:	460b      	mov	r3, r1
 8004584:	813b      	strh	r3, [r7, #8]
 8004586:	4613      	mov	r3, r2
 8004588:	80fb      	strh	r3, [r7, #6]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ffdf 	bl	8004550 <_ZN12PixelMappingC1Ev>
 8004592:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <_ZN23LeftToRightPixelMappingC1Ehtt+0x44>)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]
		this->panelCount = panelCount;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	7afa      	ldrb	r2, [r7, #11]
 800459c:	711a      	strb	r2, [r3, #4]
		this->panelWidth = panelWidth;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	893a      	ldrh	r2, [r7, #8]
 80045a2:	80da      	strh	r2, [r3, #6]
		this->panelHeight = panelHeight;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	811a      	strh	r2, [r3, #8]
	}
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	08023764 	.word	0x08023764

080045b8 <_ZN23LeftToRightPixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:

	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
		//Panel counted from top-left
		uint16_t panel = input.y / panelHeight;
 80045c2:	887a      	ldrh	r2, [r7, #2]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	891b      	ldrh	r3, [r3, #8]
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	82bb      	strh	r3, [r7, #20]
		uint16_t lineOnPanel = input.y % panelHeight;
 80045ce:	887b      	ldrh	r3, [r7, #2]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	8912      	ldrh	r2, [r2, #8]
 80045d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80045d8:	fb02 f201 	mul.w	r2, r2, r1
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	82fb      	strh	r3, [r7, #22]

		if(panel % 2 == 1) {
 80045e0:	8abb      	ldrh	r3, [r7, #20]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d004      	beq.n	80045f4 <_ZN23LeftToRightPixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x3c>
			//Odd panels are vertically reversed
			lineOnPanel = panelHeight - lineOnPanel;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	891a      	ldrh	r2, [r3, #8]
 80045ee:	8afb      	ldrh	r3, [r7, #22]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	82fb      	strh	r3, [r7, #22]
		}

		uint16_t xOffset = (panelCount - 1) - panel * panelWidth;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	791b      	ldrb	r3, [r3, #4]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	88db      	ldrh	r3, [r3, #6]
 80045fe:	8ab9      	ldrh	r1, [r7, #20]
 8004600:	fb11 f303 	smulbb	r3, r1, r3
 8004604:	b29b      	uxth	r3, r3
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	827b      	strh	r3, [r7, #18]

		PixelMapping::Pixel output {
			.x= xOffset + input.x,
 800460e:	883a      	ldrh	r2, [r7, #0]
			.y = lineOnPanel
		};
 8004610:	8a7b      	ldrh	r3, [r7, #18]
 8004612:	4413      	add	r3, r2
 8004614:	b299      	uxth	r1, r3
 8004616:	8afa      	ldrh	r2, [r7, #22]
 8004618:	f107 0308 	add.w	r3, r7, #8
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff ff6e 	bl	80044fe <_ZN12PixelMapping5PixelC1Ett>

		return output;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	2300      	movs	r3, #0
 8004628:	89ba      	ldrh	r2, [r7, #12]
 800462a:	f362 030f 	bfi	r3, r2, #0, #16
 800462e:	89fa      	ldrh	r2, [r7, #14]
 8004630:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <_ZN31SnakePixelMappingFedBottomRightC1Ehtt>:
	uint16_t panelHeight;
};

class SnakePixelMappingFedBottomRight : public PixelMapping {
public:
	SnakePixelMappingFedBottomRight(uint8_t panelCount, uint16_t panelWidth, uint16_t panelHeight) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	4608      	mov	r0, r1
 8004646:	4611      	mov	r1, r2
 8004648:	461a      	mov	r2, r3
 800464a:	4603      	mov	r3, r0
 800464c:	72fb      	strb	r3, [r7, #11]
 800464e:	460b      	mov	r3, r1
 8004650:	813b      	strh	r3, [r7, #8]
 8004652:	4613      	mov	r3, r2
 8004654:	80fb      	strh	r3, [r7, #6]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ff79 	bl	8004550 <_ZN12PixelMappingC1Ev>
 800465e:	4a08      	ldr	r2, [pc, #32]	; (8004680 <_ZN31SnakePixelMappingFedBottomRightC1Ehtt+0x44>)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	601a      	str	r2, [r3, #0]
		this->panelCount = panelCount;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	7afa      	ldrb	r2, [r7, #11]
 8004668:	711a      	strb	r2, [r3, #4]
		this->panelWidth = panelWidth;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	893a      	ldrh	r2, [r7, #8]
 800466e:	80da      	strh	r2, [r3, #6]
		this->panelHeight = panelHeight;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	811a      	strh	r2, [r3, #8]
	}
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	08023758 	.word	0x08023758

08004684 <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:

	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
		//Panel counted from top-left
		uint16_t panel = input.y / panelHeight;
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	891b      	ldrh	r3, [r3, #8]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	827b      	strh	r3, [r7, #18]
		uint16_t lineOnPanel = input.y % panelHeight;
 800469a:	887b      	ldrh	r3, [r7, #2]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	8912      	ldrh	r2, [r2, #8]
 80046a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80046a4:	fb02 f201 	mul.w	r2, r2, r1
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	82fb      	strh	r3, [r7, #22]

		uint16_t xOffset = ((panelCount - 1) - panel) * panelWidth;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	791b      	ldrb	r3, [r3, #4]
 80046b0:	1e5a      	subs	r2, r3, #1
 80046b2:	8a7b      	ldrh	r3, [r7, #18]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	88db      	ldrh	r3, [r3, #6]
 80046bc:	fb12 f303 	smulbb	r3, r2, r3
 80046c0:	823b      	strh	r3, [r7, #16]
		uint16_t x;

		if(((panelCount - 1) - panel) % 2 == 1) {
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	791b      	ldrb	r3, [r3, #4]
 80046c6:	1e5a      	subs	r2, r3, #1
 80046c8:	8a7b      	ldrh	r3, [r7, #18]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	bfb8      	it	lt
 80046d4:	425b      	neglt	r3, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d10b      	bne.n	80046f2 <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x6e>
			//Even panels (from feedpoint) are vertically reversed
			lineOnPanel = (panelHeight - 1) - lineOnPanel;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	891a      	ldrh	r2, [r3, #8]
 80046de:	8afb      	ldrh	r3, [r7, #22]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	82fb      	strh	r3, [r7, #22]
			x = xOffset + input.x;
 80046e8:	883a      	ldrh	r2, [r7, #0]
 80046ea:	8a3b      	ldrh	r3, [r7, #16]
 80046ec:	4413      	add	r3, r2
 80046ee:	82bb      	strh	r3, [r7, #20]
 80046f0:	e009      	b.n	8004706 <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x82>
		} else {
			x= xOffset + ((panelWidth -1) - input.x);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	88da      	ldrh	r2, [r3, #6]
 80046f6:	883b      	ldrh	r3, [r7, #0]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	8a3b      	ldrh	r3, [r7, #16]
 80046fe:	4413      	add	r3, r2
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	82bb      	strh	r3, [r7, #20]
		}

		Pixel output {
			.x= x,
			.y = lineOnPanel
		};
 8004706:	8afa      	ldrh	r2, [r7, #22]
 8004708:	8ab9      	ldrh	r1, [r7, #20]
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fef5 	bl	80044fe <_ZN12PixelMapping5PixelC1Ett>

		return output;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	2300      	movs	r3, #0
 800471a:	89ba      	ldrh	r2, [r7, #12]
 800471c:	f362 030f 	bfi	r3, r2, #0, #16
 8004720:	89fa      	ldrh	r2, [r7, #14]
 8004722:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <_ZN13ConfigurationC1Ev>:
struct Configuration {
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	729a      	strb	r2, [r3, #10]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	72da      	strb	r2, [r3, #11]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <_Z17readConfigurationv>:
DisplayDriver *display = NULL;

Configuration configuration;
PixelMapping *pixelMapping = NULL;

void readConfiguration() {
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
	configuration.useMatrix = true;
 8004754:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <_Z17readConfigurationv+0x64>)
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]
	configuration.useStrands = false;
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <_Z17readConfigurationv+0x64>)
 800475c:	2200      	movs	r2, #0
 800475e:	709a      	strb	r2, [r3, #2]

	if (configuration.useMatrix) {
 8004760:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <_Z17readConfigurationv+0x64>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00c      	beq.n	8004782 <_Z17readConfigurationv+0x32>
		configuration.matrixFormat = MatrixDriver::SCAN_16;
 8004768:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <_Z17readConfigurationv+0x64>)
 800476a:	2200      	movs	r2, #0
 800476c:	705a      	strb	r2, [r3, #1]
		configuration.elementWidth = PANEL_WIDTH;
 800476e:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <_Z17readConfigurationv+0x64>)
 8004770:	2240      	movs	r2, #64	; 0x40
 8004772:	80da      	strh	r2, [r3, #6]
		configuration.elementHeight = PANEL_HEIGHT;
 8004774:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <_Z17readConfigurationv+0x64>)
 8004776:	2220      	movs	r2, #32
 8004778:	811a      	strh	r2, [r3, #8]
		configuration.elementCount = 2;
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <_Z17readConfigurationv+0x64>)
 800477c:	2202      	movs	r2, #2
 800477e:	809a      	strh	r2, [r3, #4]
 8004780:	e010      	b.n	80047a4 <_Z17readConfigurationv+0x54>
	} else if (configuration.useStrands) {
 8004782:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <_Z17readConfigurationv+0x64>)
 8004784:	789b      	ldrb	r3, [r3, #2]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00c      	beq.n	80047a4 <_Z17readConfigurationv+0x54>
		configuration.strandFormat = LedSingleWire::RGBW;
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <_Z17readConfigurationv+0x64>)
 800478c:	2200      	movs	r2, #0
 800478e:	70da      	strb	r2, [r3, #3]
		configuration.elementWidth = 300;
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <_Z17readConfigurationv+0x64>)
 8004792:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004796:	80da      	strh	r2, [r3, #6]
		configuration.elementHeight = 1;
 8004798:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <_Z17readConfigurationv+0x64>)
 800479a:	2201      	movs	r2, #1
 800479c:	811a      	strh	r2, [r3, #8]
		configuration.elementCount = 1;
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <_Z17readConfigurationv+0x64>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	809a      	strh	r2, [r3, #4]
	}

	configuration.pixelConfiguration =
 80047a4:	4b03      	ldr	r3, [pc, #12]	; (80047b4 <_Z17readConfigurationv+0x64>)
 80047a6:	2202      	movs	r2, #2
 80047a8:	729a      	strb	r2, [r3, #10]
			Configuration::PixelConfiguration::SnakeStartBottomRight;
}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	200005a0 	.word	0x200005a0

080047b8 <_ZN18SimplePixelMappingC1Ev>:
class SimplePixelMapping : public PixelMapping {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fec4 	bl	8004550 <_ZN12PixelMappingC1Ev>
 80047c8:	4a03      	ldr	r2, [pc, #12]	; (80047d8 <_ZN18SimplePixelMappingC1Ev+0x20>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	08023770 	.word	0x08023770

080047dc <_Z9configurev>:

void configure() {
 80047dc:	b598      	push	{r3, r4, r7, lr}
 80047de:	af00      	add	r7, sp, #0
	if (configuration.useMatrix) {
 80047e0:	4b34      	ldr	r3, [pc, #208]	; (80048b4 <_Z9configurev+0xd8>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d015      	beq.n	8004814 <_Z9configurev+0x38>
		display = new MatrixDriver(
				configuration.elementWidth * configuration.elementCount,
				configuration.elementHeight,
				(MatrixDriver::ScanType) configuration.matrixFormat);
 80047e8:	201c      	movs	r0, #28
 80047ea:	f000 fa3d 	bl	8004c68 <_Znwj>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461c      	mov	r4, r3
				configuration.elementWidth * configuration.elementCount,
 80047f2:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <_Z9configurev+0xd8>)
 80047f4:	88da      	ldrh	r2, [r3, #6]
 80047f6:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <_Z9configurev+0xd8>)
 80047f8:	889b      	ldrh	r3, [r3, #4]
				(MatrixDriver::ScanType) configuration.matrixFormat);
 80047fa:	fb12 f303 	smulbb	r3, r2, r3
 80047fe:	b299      	uxth	r1, r3
 8004800:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <_Z9configurev+0xd8>)
 8004802:	891a      	ldrh	r2, [r3, #8]
 8004804:	4b2b      	ldr	r3, [pc, #172]	; (80048b4 <_Z9configurev+0xd8>)
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	4620      	mov	r0, r4
 800480a:	f7ff fae9 	bl	8003de0 <_ZN12MatrixDriverC1EttNS_8ScanTypeE>
		display = new MatrixDriver(
 800480e:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <_Z9configurev+0xdc>)
 8004810:	601c      	str	r4, [r3, #0]
 8004812:	e014      	b.n	800483e <_Z9configurev+0x62>
	} else if (configuration.useStrands) {
 8004814:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <_Z9configurev+0xd8>)
 8004816:	789b      	ldrb	r3, [r3, #2]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d010      	beq.n	800483e <_Z9configurev+0x62>

		display = new LedSingleWire(
				(LedSingleWire::Format) configuration.strandFormat,
				configuration.elementCount, configuration.elementWidth);
 800481c:	2010      	movs	r0, #16
 800481e:	f000 fa23 	bl	8004c68 <_Znwj>
 8004822:	4603      	mov	r3, r0
 8004824:	461c      	mov	r4, r3
				(LedSingleWire::Format) configuration.strandFormat,
 8004826:	4b23      	ldr	r3, [pc, #140]	; (80048b4 <_Z9configurev+0xd8>)
 8004828:	78d9      	ldrb	r1, [r3, #3]
				configuration.elementCount, configuration.elementWidth);
 800482a:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <_Z9configurev+0xd8>)
 800482c:	889b      	ldrh	r3, [r3, #4]
 800482e:	b2da      	uxtb	r2, r3
 8004830:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <_Z9configurev+0xd8>)
 8004832:	88db      	ldrh	r3, [r3, #6]
 8004834:	4620      	mov	r0, r4
 8004836:	f7ff f8b3 	bl	80039a0 <_ZN13LedSingleWireC1ENS_6FormatEht>
		display = new LedSingleWire(
 800483a:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <_Z9configurev+0xdc>)
 800483c:	601c      	str	r4, [r3, #0]
	}

	switch (configuration.pixelConfiguration) {
 800483e:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <_Z9configurev+0xd8>)
 8004840:	7a9b      	ldrb	r3, [r3, #10]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d002      	beq.n	800484c <_Z9configurev+0x70>
 8004846:	2b02      	cmp	r3, #2
 8004848:	d012      	beq.n	8004870 <_Z9configurev+0x94>
 800484a:	e023      	b.n	8004894 <_Z9configurev+0xb8>
	case Configuration::PixelConfiguration::LeftToRight:
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
				configuration.elementWidth, configuration.elementHeight);
 800484c:	200c      	movs	r0, #12
 800484e:	f000 fa0b 	bl	8004c68 <_Znwj>
 8004852:	4603      	mov	r3, r0
 8004854:	461c      	mov	r4, r3
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
 8004856:	4b17      	ldr	r3, [pc, #92]	; (80048b4 <_Z9configurev+0xd8>)
 8004858:	889b      	ldrh	r3, [r3, #4]
				configuration.elementWidth, configuration.elementHeight);
 800485a:	b2d9      	uxtb	r1, r3
 800485c:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <_Z9configurev+0xd8>)
 800485e:	88da      	ldrh	r2, [r3, #6]
 8004860:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <_Z9configurev+0xd8>)
 8004862:	891b      	ldrh	r3, [r3, #8]
 8004864:	4620      	mov	r0, r4
 8004866:	f7ff fe83 	bl	8004570 <_ZN23LeftToRightPixelMappingC1Ehtt>
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
 800486a:	4b14      	ldr	r3, [pc, #80]	; (80048bc <_Z9configurev+0xe0>)
 800486c:	601c      	str	r4, [r3, #0]
		break;
 800486e:	e01e      	b.n	80048ae <_Z9configurev+0xd2>
	case Configuration::PixelConfiguration::SnakeStartBottomRight:
		pixelMapping = new SnakePixelMappingFedBottomRight(
				configuration.elementCount, configuration.elementWidth,
				configuration.elementHeight);
 8004870:	200c      	movs	r0, #12
 8004872:	f000 f9f9 	bl	8004c68 <_Znwj>
 8004876:	4603      	mov	r3, r0
 8004878:	461c      	mov	r4, r3
				configuration.elementCount, configuration.elementWidth,
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <_Z9configurev+0xd8>)
 800487c:	889b      	ldrh	r3, [r3, #4]
				configuration.elementHeight);
 800487e:	b2d9      	uxtb	r1, r3
 8004880:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <_Z9configurev+0xd8>)
 8004882:	88da      	ldrh	r2, [r3, #6]
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <_Z9configurev+0xd8>)
 8004886:	891b      	ldrh	r3, [r3, #8]
 8004888:	4620      	mov	r0, r4
 800488a:	f7ff fed7 	bl	800463c <_ZN31SnakePixelMappingFedBottomRightC1Ehtt>
		pixelMapping = new SnakePixelMappingFedBottomRight(
 800488e:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <_Z9configurev+0xe0>)
 8004890:	601c      	str	r4, [r3, #0]
		break;
 8004892:	e00c      	b.n	80048ae <_Z9configurev+0xd2>
	default:
		pixelMapping = new SimplePixelMapping();
 8004894:	2004      	movs	r0, #4
 8004896:	f000 f9e7 	bl	8004c68 <_Znwj>
 800489a:	4603      	mov	r3, r0
 800489c:	461c      	mov	r4, r3
 800489e:	2300      	movs	r3, #0
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	4620      	mov	r0, r4
 80048a4:	f7ff ff88 	bl	80047b8 <_ZN18SimplePixelMappingC1Ev>
 80048a8:	4b04      	ldr	r3, [pc, #16]	; (80048bc <_Z9configurev+0xe0>)
 80048aa:	601c      	str	r4, [r3, #0]
		break;
 80048ac:	bf00      	nop
	}
}
 80048ae:	bf00      	nop
 80048b0:	bd98      	pop	{r3, r4, r7, pc}
 80048b2:	bf00      	nop
 80048b4:	200005a0 	.word	0x200005a0
 80048b8:	2000059c 	.word	0x2000059c
 80048bc:	200005ac 	.word	0x200005ac

080048c0 <_Z4openv>:

void open() {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
	if (display != NULL) {
 80048c4:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <_Z4openv+0x28>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <_Z4openv+0x1c>
		display->Open();
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <_Z4openv+0x28>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <_Z4openv+0x28>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4610      	mov	r0, r2
 80048da:	4798      	blx	r3
	}

	configuration.status = Configuration::Status::Ready;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <_Z4openv+0x2c>)
 80048de:	2201      	movs	r2, #1
 80048e0:	72da      	strb	r2, [r3, #11]
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	2000059c 	.word	0x2000059c
 80048ec:	200005a0 	.word	0x200005a0

080048f0 <_Z4drawN12PixelMapping5PixelEhhhh>:

void draw(PixelMapping::Pixel pixel, uint8_t r, uint8_t g, uint8_t b,
		uint8_t w) {
 80048f0:	b5b0      	push	{r4, r5, r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af04      	add	r7, sp, #16
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	4608      	mov	r0, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	461a      	mov	r2, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	70fb      	strb	r3, [r7, #3]
 8004902:	460b      	mov	r3, r1
 8004904:	70bb      	strb	r3, [r7, #2]
 8004906:	4613      	mov	r3, r2
 8004908:	707b      	strb	r3, [r7, #1]
	if (display != NULL) {
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <_Z4drawN12PixelMapping5PixelEhhhh+0x68>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01d      	beq.n	800494e <_Z4drawN12PixelMapping5PixelEhhhh+0x5e>
		PixelMapping::Pixel physicalPixel =
				pixelMapping->mapVirtualPixelToPhysicalPixel(pixel);
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <_Z4drawN12PixelMapping5PixelEhhhh+0x6c>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b11      	ldr	r3, [pc, #68]	; (800495c <_Z4drawN12PixelMapping5PixelEhhhh+0x6c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	4610      	mov	r0, r2
 8004922:	4798      	blx	r3
 8004924:	4603      	mov	r3, r0
 8004926:	60fb      	str	r3, [r7, #12]

		display->SetPixel(physicalPixel.x, physicalPixel.y, r, g, b, w);
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <_Z4drawN12PixelMapping5PixelEhhhh+0x68>)
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <_Z4drawN12PixelMapping5PixelEhhhh+0x68>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3308      	adds	r3, #8
 8004934:	681c      	ldr	r4, [r3, #0]
 8004936:	89b9      	ldrh	r1, [r7, #12]
 8004938:	89fa      	ldrh	r2, [r7, #14]
 800493a:	78fd      	ldrb	r5, [r7, #3]
 800493c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	787b      	ldrb	r3, [r7, #1]
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	78bb      	ldrb	r3, [r7, #2]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	462b      	mov	r3, r5
 800494c:	47a0      	blx	r4
	}
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bdb0      	pop	{r4, r5, r7, pc}
 8004956:	bf00      	nop
 8004958:	2000059c 	.word	0x2000059c
 800495c:	200005ac 	.word	0x200005ac

08004960 <_Z6commitv>:

void commit() {
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
	if (display != NULL) {
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <_Z6commitv+0x24>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <_Z6commitv+0x1e>
		display->SwapBuffer();
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <_Z6commitv+0x24>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4b04      	ldr	r3, [pc, #16]	; (8004984 <_Z6commitv+0x24>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4610      	mov	r0, r2
 800497c:	4798      	blx	r3
	}
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	2000059c 	.word	0x2000059c

08004988 <cpp_main>:
//2 - advancing pixel
//3 - image
//4 - Debugging
#define DRAW 3

extern "C" int cpp_main(void) {
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b08d      	sub	sp, #52	; 0x34
 800498c:	af02      	add	r7, sp, #8
	__HAL_DBGMCU_FREEZE_IWDG();
 800498e:	4b9f      	ldr	r3, [pc, #636]	; (8004c0c <cpp_main+0x284>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	4a9e      	ldr	r2, [pc, #632]	; (8004c0c <cpp_main+0x284>)
 8004994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004998:	6093      	str	r3, [r2, #8]

	readConfiguration();
 800499a:	f7ff fed9 	bl	8004750 <_Z17readConfigurationv>

	configure();
 800499e:	f7ff ff1d 	bl	80047dc <_Z9configurev>

	open();
 80049a2:	f7ff ff8d 	bl	80048c0 <_Z4openv>

	uint16_t color_shift = 1;
 80049a6:	2301      	movs	r3, #1
 80049a8:	83bb      	strh	r3, [r7, #28]

	uint32_t start = HAL_GetTick();
 80049aa:	f7fc fa41 	bl	8000e30 <HAL_GetTick>
 80049ae:	61b8      	str	r0, [r7, #24]

	uint16_t pos = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	84fb      	strh	r3, [r7, #38]	; 0x26

#if DRAW == 3
	for (uint16_t col = 0; col < configuration.getWidth(); col++) {
 80049b4:	2300      	movs	r3, #0
 80049b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80049b8:	4895      	ldr	r0, [pc, #596]	; (8004c10 <cpp_main+0x288>)
 80049ba:	f7ff fd7b 	bl	80044b4 <_ZN13Configuration8getWidthEv>
 80049be:	4603      	mov	r3, r0
 80049c0:	461a      	mov	r2, r3
 80049c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049c4:	4293      	cmp	r3, r2
 80049c6:	bf34      	ite	cc
 80049c8:	2301      	movcc	r3, #1
 80049ca:	2300      	movcs	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d06e      	beq.n	8004ab0 <cpp_main+0x128>

		for (uint16_t row = 0; row < configuration.getHeight(); row++) {
 80049d2:	2300      	movs	r3, #0
 80049d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80049d6:	488e      	ldr	r0, [pc, #568]	; (8004c10 <cpp_main+0x288>)
 80049d8:	f7ff fd78 	bl	80044cc <_ZN13Configuration9getHeightEv>
 80049dc:	4603      	mov	r3, r0
 80049de:	461a      	mov	r2, r3
 80049e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049e2:	4293      	cmp	r3, r2
 80049e4:	bf34      	ite	cc
 80049e6:	2301      	movcc	r3, #1
 80049e8:	2300      	movcs	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d05b      	beq.n	8004aa8 <cpp_main+0x120>
			uint8_t r =
					IMAGE_DATA[pos][col % IMAGE_WIDTH][row % IMAGE_HEIGHT][0];
 80049f0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80049f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049f4:	f003 003f 	and.w	r0, r3, #63	; 0x3f
 80049f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
			uint8_t r =
 80049fe:	4c85      	ldr	r4, [pc, #532]	; (8004c14 <cpp_main+0x28c>)
 8004a00:	461a      	mov	r2, r3
 8004a02:	0052      	lsls	r2, r2, #1
 8004a04:	441a      	add	r2, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4403      	add	r3, r0
 8004a0c:	019b      	lsls	r3, r3, #6
 8004a0e:	441a      	add	r2, r3
 8004a10:	460b      	mov	r3, r1
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	440b      	add	r3, r1
 8004a16:	031b      	lsls	r3, r3, #12
 8004a18:	4413      	add	r3, r2
 8004a1a:	4423      	add	r3, r4
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	743b      	strb	r3, [r7, #16]
			uint8_t g =
					IMAGE_DATA[pos][col % IMAGE_WIDTH][row % IMAGE_HEIGHT][1];
 8004a20:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a24:	f003 013f 	and.w	r1, r3, #63	; 0x3f
 8004a28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
			uint8_t g =
 8004a2e:	4c79      	ldr	r4, [pc, #484]	; (8004c14 <cpp_main+0x28c>)
 8004a30:	461a      	mov	r2, r3
 8004a32:	0052      	lsls	r2, r2, #1
 8004a34:	441a      	add	r2, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	4403      	add	r3, r0
 8004a3c:	031b      	lsls	r3, r3, #12
 8004a3e:	441a      	add	r2, r3
 8004a40:	460b      	mov	r3, r1
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	440b      	add	r3, r1
 8004a46:	019b      	lsls	r3, r3, #6
 8004a48:	4413      	add	r3, r2
 8004a4a:	4423      	add	r3, r4
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	73fb      	strb	r3, [r7, #15]
			uint8_t b =
					IMAGE_DATA[pos][col % IMAGE_WIDTH][row % IMAGE_HEIGHT][2];
 8004a52:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004a54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a56:	f003 013f 	and.w	r1, r3, #63	; 0x3f
 8004a5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
			uint8_t b =
 8004a60:	4c6c      	ldr	r4, [pc, #432]	; (8004c14 <cpp_main+0x28c>)
 8004a62:	461a      	mov	r2, r3
 8004a64:	0052      	lsls	r2, r2, #1
 8004a66:	441a      	add	r2, r3
 8004a68:	4603      	mov	r3, r0
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	4403      	add	r3, r0
 8004a6e:	031b      	lsls	r3, r3, #12
 8004a70:	441a      	add	r2, r3
 8004a72:	460b      	mov	r3, r1
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	440b      	add	r3, r1
 8004a78:	019b      	lsls	r3, r3, #6
 8004a7a:	4413      	add	r3, r2
 8004a7c:	4423      	add	r3, r4
 8004a7e:	3302      	adds	r3, #2
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	73bb      	strb	r3, [r7, #14]

			draw(PixelMapping::Pixel(col, row), r, g, b, 0);
 8004a84:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004a86:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004a88:	1d3b      	adds	r3, r7, #4
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff fd37 	bl	80044fe <_ZN12PixelMapping5PixelC1Ett>
 8004a90:	7bbb      	ldrb	r3, [r7, #14]
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	7c39      	ldrb	r1, [r7, #16]
 8004a96:	2000      	movs	r0, #0
 8004a98:	9000      	str	r0, [sp, #0]
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff ff28 	bl	80048f0 <_Z4drawN12PixelMapping5PixelEhhhh>
		for (uint16_t row = 0; row < configuration.getHeight(); row++) {
 8004aa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	847b      	strh	r3, [r7, #34]	; 0x22
 8004aa6:	e796      	b.n	80049d6 <cpp_main+0x4e>
	for (uint16_t col = 0; col < configuration.getWidth(); col++) {
 8004aa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aaa:	3301      	adds	r3, #1
 8004aac:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004aae:	e783      	b.n	80049b8 <cpp_main+0x30>
//			draw(PixelMapping::Pixel(col, row), r, g, b, 0);
//		}
//	}
#endif

	lastUpdate = HAL_GetTick();
 8004ab0:	f7fc f9be 	bl	8000e30 <HAL_GetTick>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4a58      	ldr	r2, [pc, #352]	; (8004c18 <cpp_main+0x290>)
 8004ab8:	6013      	str	r3, [r2, #0]

	color_shift++;
 8004aba:	8bbb      	ldrh	r3, [r7, #28]
 8004abc:	3301      	adds	r3, #1
 8004abe:	83bb      	strh	r3, [r7, #28]

	uint32_t duration = HAL_GetTick() - start;
 8004ac0:	f7fc f9b6 	bl	8000e30 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	617b      	str	r3, [r7, #20]

	sprintf(buffer, "Setup Duration: %lu\n", duration);
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4953      	ldr	r1, [pc, #332]	; (8004c1c <cpp_main+0x294>)
 8004ad0:	4853      	ldr	r0, [pc, #332]	; (8004c20 <cpp_main+0x298>)
 8004ad2:	f000 fa43 	bl	8004f5c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 500);
 8004ad6:	4852      	ldr	r0, [pc, #328]	; (8004c20 <cpp_main+0x298>)
 8004ad8:	f7fb fb82 	bl	80001e0 <strlen>
 8004adc:	4603      	mov	r3, r0
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004ae4:	494e      	ldr	r1, [pc, #312]	; (8004c20 <cpp_main+0x298>)
 8004ae6:	484f      	ldr	r0, [pc, #316]	; (8004c24 <cpp_main+0x29c>)
 8004ae8:	f7fe facb 	bl	8003082 <HAL_UART_Transmit>

	commit();
 8004aec:	f7ff ff38 	bl	8004960 <_Z6commitv>
	commit();
#elif DRAW == 3

//		HAL_Delay(5);

		start = HAL_GetTick();
 8004af0:	f7fc f99e 	bl	8000e30 <HAL_GetTick>
 8004af4:	61b8      	str	r0, [r7, #24]

		for (uint16_t col = 0; col < configuration.getWidth(); col++) {
 8004af6:	2300      	movs	r3, #0
 8004af8:	843b      	strh	r3, [r7, #32]
 8004afa:	4845      	ldr	r0, [pc, #276]	; (8004c10 <cpp_main+0x288>)
 8004afc:	f7ff fcda 	bl	80044b4 <_ZN13Configuration8getWidthEv>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461a      	mov	r2, r3
 8004b04:	8c3b      	ldrh	r3, [r7, #32]
 8004b06:	4293      	cmp	r3, r2
 8004b08:	bf34      	ite	cc
 8004b0a:	2301      	movcc	r3, #1
 8004b0c:	2300      	movcs	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d06f      	beq.n	8004bf4 <cpp_main+0x26c>

			for (uint16_t row = 0; row < configuration.getHeight(); row++) {
 8004b14:	2300      	movs	r3, #0
 8004b16:	83fb      	strh	r3, [r7, #30]
 8004b18:	483d      	ldr	r0, [pc, #244]	; (8004c10 <cpp_main+0x288>)
 8004b1a:	f7ff fcd7 	bl	80044cc <_ZN13Configuration9getHeightEv>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	461a      	mov	r2, r3
 8004b22:	8bfb      	ldrh	r3, [r7, #30]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bf34      	ite	cc
 8004b28:	2301      	movcc	r3, #1
 8004b2a:	2300      	movcs	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d05c      	beq.n	8004bec <cpp_main+0x264>
				uint8_t r = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004b32:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004b34:	8c3b      	ldrh	r3, [r7, #32]
 8004b36:	f003 003f 	and.w	r0, r3, #63	; 0x3f
						% IMAGE_HEIGHT][0];
 8004b3a:	8bfb      	ldrh	r3, [r7, #30]
 8004b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				uint8_t r = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004b40:	4c34      	ldr	r4, [pc, #208]	; (8004c14 <cpp_main+0x28c>)
 8004b42:	461a      	mov	r2, r3
 8004b44:	0052      	lsls	r2, r2, #1
 8004b46:	441a      	add	r2, r3
 8004b48:	4603      	mov	r3, r0
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	4403      	add	r3, r0
 8004b4e:	019b      	lsls	r3, r3, #6
 8004b50:	441a      	add	r2, r3
 8004b52:	460b      	mov	r3, r1
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	440b      	add	r3, r1
 8004b58:	031b      	lsls	r3, r3, #12
 8004b5a:	4413      	add	r3, r2
 8004b5c:	4423      	add	r3, r4
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	74fb      	strb	r3, [r7, #19]
				uint8_t g = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004b62:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004b64:	8c3b      	ldrh	r3, [r7, #32]
 8004b66:	f003 013f 	and.w	r1, r3, #63	; 0x3f
						% IMAGE_HEIGHT][1];
 8004b6a:	8bfb      	ldrh	r3, [r7, #30]
 8004b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				uint8_t g = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004b70:	4c28      	ldr	r4, [pc, #160]	; (8004c14 <cpp_main+0x28c>)
 8004b72:	461a      	mov	r2, r3
 8004b74:	0052      	lsls	r2, r2, #1
 8004b76:	441a      	add	r2, r3
 8004b78:	4603      	mov	r3, r0
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4403      	add	r3, r0
 8004b7e:	031b      	lsls	r3, r3, #12
 8004b80:	441a      	add	r2, r3
 8004b82:	460b      	mov	r3, r1
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	440b      	add	r3, r1
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	4413      	add	r3, r2
 8004b8c:	4423      	add	r3, r4
 8004b8e:	3301      	adds	r3, #1
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	74bb      	strb	r3, [r7, #18]
				uint8_t b = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004b94:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004b96:	8c3b      	ldrh	r3, [r7, #32]
 8004b98:	f003 013f 	and.w	r1, r3, #63	; 0x3f
						% IMAGE_HEIGHT][2];
 8004b9c:	8bfb      	ldrh	r3, [r7, #30]
 8004b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				uint8_t b = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004ba2:	4c1c      	ldr	r4, [pc, #112]	; (8004c14 <cpp_main+0x28c>)
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	0052      	lsls	r2, r2, #1
 8004ba8:	441a      	add	r2, r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	4403      	add	r3, r0
 8004bb0:	031b      	lsls	r3, r3, #12
 8004bb2:	441a      	add	r2, r3
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	440b      	add	r3, r1
 8004bba:	019b      	lsls	r3, r3, #6
 8004bbc:	4413      	add	r3, r2
 8004bbe:	4423      	add	r3, r4
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	747b      	strb	r3, [r7, #17]

				draw(PixelMapping::Pixel(col, row), r, g, b, 0);
 8004bc6:	8bfa      	ldrh	r2, [r7, #30]
 8004bc8:	8c39      	ldrh	r1, [r7, #32]
 8004bca:	f107 0308 	add.w	r3, r7, #8
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fc95 	bl	80044fe <_ZN12PixelMapping5PixelC1Ett>
 8004bd4:	7c7b      	ldrb	r3, [r7, #17]
 8004bd6:	7cba      	ldrb	r2, [r7, #18]
 8004bd8:	7cf9      	ldrb	r1, [r7, #19]
 8004bda:	2000      	movs	r0, #0
 8004bdc:	9000      	str	r0, [sp, #0]
 8004bde:	68b8      	ldr	r0, [r7, #8]
 8004be0:	f7ff fe86 	bl	80048f0 <_Z4drawN12PixelMapping5PixelEhhhh>
			for (uint16_t row = 0; row < configuration.getHeight(); row++) {
 8004be4:	8bfb      	ldrh	r3, [r7, #30]
 8004be6:	3301      	adds	r3, #1
 8004be8:	83fb      	strh	r3, [r7, #30]
 8004bea:	e795      	b.n	8004b18 <cpp_main+0x190>
		for (uint16_t col = 0; col < configuration.getWidth(); col++) {
 8004bec:	8c3b      	ldrh	r3, [r7, #32]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	843b      	strh	r3, [r7, #32]
 8004bf2:	e782      	b.n	8004afa <cpp_main+0x172>
			}
		}

		commit();
 8004bf4:	f7ff feb4 	bl	8004960 <_Z6commitv>
//
//		sprintf(buffer, "Setup Duration: %lu\n", duration);
//
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 500);

		pos += 1;
 8004bf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (pos >= IMAGE_FRAMES) {
 8004bfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c00:	2b09      	cmp	r3, #9
 8004c02:	f67f af75 	bls.w	8004af0 <cpp_main+0x168>
			pos = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	84fb      	strh	r3, [r7, #38]	; 0x26
//					b = ((row + col + color_shift) % 4) == 2 ? 255 : 0;
//
//					matrix.SetPixel(col, row, r, g, b);
//				}
//			}
	}
 8004c0a:	e771      	b.n	8004af0 <cpp_main+0x168>
 8004c0c:	e0042000 	.word	0xe0042000
 8004c10:	200005a0 	.word	0x200005a0
 8004c14:	08005750 	.word	0x08005750
 8004c18:	20000598 	.word	0x20000598
 8004c1c:	080056cc 	.word	0x080056cc
 8004c20:	20000198 	.word	0x20000198
 8004c24:	2000061c 	.word	0x2000061c

08004c28 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d107      	bne.n	8004c48 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d102      	bne.n	8004c48 <_Z41__static_initialization_and_destruction_0ii+0x20>
Configuration configuration;
 8004c42:	4803      	ldr	r0, [pc, #12]	; (8004c50 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004c44:	f7ff fd73 	bl	800472e <_ZN13ConfigurationC1Ev>
}
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	200005a0 	.word	0x200005a0

08004c54 <_GLOBAL__sub_I_buffer>:
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	f7ff ffe3 	bl	8004c28 <_Z41__static_initialization_and_destruction_0ii>
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <_ZdlPvj>:
 8004c64:	f000 b816 	b.w	8004c94 <_ZdlPv>

08004c68 <_Znwj>:
 8004c68:	2801      	cmp	r0, #1
 8004c6a:	bf38      	it	cc
 8004c6c:	2001      	movcc	r0, #1
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	4604      	mov	r4, r0
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 f85c 	bl	8004d30 <malloc>
 8004c78:	b930      	cbnz	r0, 8004c88 <_Znwj+0x20>
 8004c7a:	f000 f81f 	bl	8004cbc <_ZSt15get_new_handlerv>
 8004c7e:	b908      	cbnz	r0, 8004c84 <_Znwj+0x1c>
 8004c80:	f000 f824 	bl	8004ccc <abort>
 8004c84:	4780      	blx	r0
 8004c86:	e7f4      	b.n	8004c72 <_Znwj+0xa>
 8004c88:	bd10      	pop	{r4, pc}

08004c8a <_Znaj>:
 8004c8a:	f7ff bfed 	b.w	8004c68 <_Znwj>

08004c8e <__cxa_pure_virtual>:
 8004c8e:	b508      	push	{r3, lr}
 8004c90:	f000 f80e 	bl	8004cb0 <_ZSt9terminatev>

08004c94 <_ZdlPv>:
 8004c94:	f000 b854 	b.w	8004d40 <free>

08004c98 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004c98:	b508      	push	{r3, lr}
 8004c9a:	4780      	blx	r0
 8004c9c:	f000 f816 	bl	8004ccc <abort>

08004ca0 <_ZSt13get_terminatev>:
 8004ca0:	4b02      	ldr	r3, [pc, #8]	; (8004cac <_ZSt13get_terminatev+0xc>)
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	f3bf 8f5b 	dmb	ish
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	2000010c 	.word	0x2000010c

08004cb0 <_ZSt9terminatev>:
 8004cb0:	b508      	push	{r3, lr}
 8004cb2:	f7ff fff5 	bl	8004ca0 <_ZSt13get_terminatev>
 8004cb6:	f7ff ffef 	bl	8004c98 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08004cbc <_ZSt15get_new_handlerv>:
 8004cbc:	4b02      	ldr	r3, [pc, #8]	; (8004cc8 <_ZSt15get_new_handlerv+0xc>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	f3bf 8f5b 	dmb	ish
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	200005b0 	.word	0x200005b0

08004ccc <abort>:
 8004ccc:	b508      	push	{r3, lr}
 8004cce:	2006      	movs	r0, #6
 8004cd0:	f000 f928 	bl	8004f24 <raise>
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	f7fb ffc5 	bl	8000c64 <_exit>
	...

08004cdc <__errno>:
 8004cdc:	4b01      	ldr	r3, [pc, #4]	; (8004ce4 <__errno+0x8>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000110 	.word	0x20000110

08004ce8 <__libc_init_array>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	4d0d      	ldr	r5, [pc, #52]	; (8004d20 <__libc_init_array+0x38>)
 8004cec:	4c0d      	ldr	r4, [pc, #52]	; (8004d24 <__libc_init_array+0x3c>)
 8004cee:	1b64      	subs	r4, r4, r5
 8004cf0:	10a4      	asrs	r4, r4, #2
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	42a6      	cmp	r6, r4
 8004cf6:	d109      	bne.n	8004d0c <__libc_init_array+0x24>
 8004cf8:	4d0b      	ldr	r5, [pc, #44]	; (8004d28 <__libc_init_array+0x40>)
 8004cfa:	4c0c      	ldr	r4, [pc, #48]	; (8004d2c <__libc_init_array+0x44>)
 8004cfc:	f000 fca2 	bl	8005644 <_init>
 8004d00:	1b64      	subs	r4, r4, r5
 8004d02:	10a4      	asrs	r4, r4, #2
 8004d04:	2600      	movs	r6, #0
 8004d06:	42a6      	cmp	r6, r4
 8004d08:	d105      	bne.n	8004d16 <__libc_init_array+0x2e>
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d10:	4798      	blx	r3
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7ee      	b.n	8004cf4 <__libc_init_array+0xc>
 8004d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1a:	4798      	blx	r3
 8004d1c:	3601      	adds	r6, #1
 8004d1e:	e7f2      	b.n	8004d06 <__libc_init_array+0x1e>
 8004d20:	080237bc 	.word	0x080237bc
 8004d24:	080237bc 	.word	0x080237bc
 8004d28:	080237bc 	.word	0x080237bc
 8004d2c:	080237c4 	.word	0x080237c4

08004d30 <malloc>:
 8004d30:	4b02      	ldr	r3, [pc, #8]	; (8004d3c <malloc+0xc>)
 8004d32:	4601      	mov	r1, r0
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	f000 b863 	b.w	8004e00 <_malloc_r>
 8004d3a:	bf00      	nop
 8004d3c:	20000110 	.word	0x20000110

08004d40 <free>:
 8004d40:	4b02      	ldr	r3, [pc, #8]	; (8004d4c <free+0xc>)
 8004d42:	4601      	mov	r1, r0
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	f000 b80b 	b.w	8004d60 <_free_r>
 8004d4a:	bf00      	nop
 8004d4c:	20000110 	.word	0x20000110

08004d50 <memset>:
 8004d50:	4402      	add	r2, r0
 8004d52:	4603      	mov	r3, r0
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d100      	bne.n	8004d5a <memset+0xa>
 8004d58:	4770      	bx	lr
 8004d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5e:	e7f9      	b.n	8004d54 <memset+0x4>

08004d60 <_free_r>:
 8004d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d62:	2900      	cmp	r1, #0
 8004d64:	d048      	beq.n	8004df8 <_free_r+0x98>
 8004d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d6a:	9001      	str	r0, [sp, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d72:	bfb8      	it	lt
 8004d74:	18e4      	addlt	r4, r4, r3
 8004d76:	f000 f911 	bl	8004f9c <__malloc_lock>
 8004d7a:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <_free_r+0x9c>)
 8004d7c:	9801      	ldr	r0, [sp, #4]
 8004d7e:	6813      	ldr	r3, [r2, #0]
 8004d80:	4615      	mov	r5, r2
 8004d82:	b933      	cbnz	r3, 8004d92 <_free_r+0x32>
 8004d84:	6063      	str	r3, [r4, #4]
 8004d86:	6014      	str	r4, [r2, #0]
 8004d88:	b003      	add	sp, #12
 8004d8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d8e:	f000 b90b 	b.w	8004fa8 <__malloc_unlock>
 8004d92:	42a3      	cmp	r3, r4
 8004d94:	d90b      	bls.n	8004dae <_free_r+0x4e>
 8004d96:	6821      	ldr	r1, [r4, #0]
 8004d98:	1862      	adds	r2, r4, r1
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	bf04      	itt	eq
 8004d9e:	681a      	ldreq	r2, [r3, #0]
 8004da0:	685b      	ldreq	r3, [r3, #4]
 8004da2:	6063      	str	r3, [r4, #4]
 8004da4:	bf04      	itt	eq
 8004da6:	1852      	addeq	r2, r2, r1
 8004da8:	6022      	streq	r2, [r4, #0]
 8004daa:	602c      	str	r4, [r5, #0]
 8004dac:	e7ec      	b.n	8004d88 <_free_r+0x28>
 8004dae:	461a      	mov	r2, r3
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	b10b      	cbz	r3, 8004db8 <_free_r+0x58>
 8004db4:	42a3      	cmp	r3, r4
 8004db6:	d9fa      	bls.n	8004dae <_free_r+0x4e>
 8004db8:	6811      	ldr	r1, [r2, #0]
 8004dba:	1855      	adds	r5, r2, r1
 8004dbc:	42a5      	cmp	r5, r4
 8004dbe:	d10b      	bne.n	8004dd8 <_free_r+0x78>
 8004dc0:	6824      	ldr	r4, [r4, #0]
 8004dc2:	4421      	add	r1, r4
 8004dc4:	1854      	adds	r4, r2, r1
 8004dc6:	42a3      	cmp	r3, r4
 8004dc8:	6011      	str	r1, [r2, #0]
 8004dca:	d1dd      	bne.n	8004d88 <_free_r+0x28>
 8004dcc:	681c      	ldr	r4, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	6053      	str	r3, [r2, #4]
 8004dd2:	4421      	add	r1, r4
 8004dd4:	6011      	str	r1, [r2, #0]
 8004dd6:	e7d7      	b.n	8004d88 <_free_r+0x28>
 8004dd8:	d902      	bls.n	8004de0 <_free_r+0x80>
 8004dda:	230c      	movs	r3, #12
 8004ddc:	6003      	str	r3, [r0, #0]
 8004dde:	e7d3      	b.n	8004d88 <_free_r+0x28>
 8004de0:	6825      	ldr	r5, [r4, #0]
 8004de2:	1961      	adds	r1, r4, r5
 8004de4:	428b      	cmp	r3, r1
 8004de6:	bf04      	itt	eq
 8004de8:	6819      	ldreq	r1, [r3, #0]
 8004dea:	685b      	ldreq	r3, [r3, #4]
 8004dec:	6063      	str	r3, [r4, #4]
 8004dee:	bf04      	itt	eq
 8004df0:	1949      	addeq	r1, r1, r5
 8004df2:	6021      	streq	r1, [r4, #0]
 8004df4:	6054      	str	r4, [r2, #4]
 8004df6:	e7c7      	b.n	8004d88 <_free_r+0x28>
 8004df8:	b003      	add	sp, #12
 8004dfa:	bd30      	pop	{r4, r5, pc}
 8004dfc:	200005b4 	.word	0x200005b4

08004e00 <_malloc_r>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	1ccd      	adds	r5, r1, #3
 8004e04:	f025 0503 	bic.w	r5, r5, #3
 8004e08:	3508      	adds	r5, #8
 8004e0a:	2d0c      	cmp	r5, #12
 8004e0c:	bf38      	it	cc
 8004e0e:	250c      	movcc	r5, #12
 8004e10:	2d00      	cmp	r5, #0
 8004e12:	4606      	mov	r6, r0
 8004e14:	db01      	blt.n	8004e1a <_malloc_r+0x1a>
 8004e16:	42a9      	cmp	r1, r5
 8004e18:	d903      	bls.n	8004e22 <_malloc_r+0x22>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	2000      	movs	r0, #0
 8004e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e22:	f000 f8bb 	bl	8004f9c <__malloc_lock>
 8004e26:	4921      	ldr	r1, [pc, #132]	; (8004eac <_malloc_r+0xac>)
 8004e28:	680a      	ldr	r2, [r1, #0]
 8004e2a:	4614      	mov	r4, r2
 8004e2c:	b99c      	cbnz	r4, 8004e56 <_malloc_r+0x56>
 8004e2e:	4f20      	ldr	r7, [pc, #128]	; (8004eb0 <_malloc_r+0xb0>)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	b923      	cbnz	r3, 8004e3e <_malloc_r+0x3e>
 8004e34:	4621      	mov	r1, r4
 8004e36:	4630      	mov	r0, r6
 8004e38:	f000 f83c 	bl	8004eb4 <_sbrk_r>
 8004e3c:	6038      	str	r0, [r7, #0]
 8004e3e:	4629      	mov	r1, r5
 8004e40:	4630      	mov	r0, r6
 8004e42:	f000 f837 	bl	8004eb4 <_sbrk_r>
 8004e46:	1c43      	adds	r3, r0, #1
 8004e48:	d123      	bne.n	8004e92 <_malloc_r+0x92>
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	6033      	str	r3, [r6, #0]
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f000 f8aa 	bl	8004fa8 <__malloc_unlock>
 8004e54:	e7e3      	b.n	8004e1e <_malloc_r+0x1e>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	1b5b      	subs	r3, r3, r5
 8004e5a:	d417      	bmi.n	8004e8c <_malloc_r+0x8c>
 8004e5c:	2b0b      	cmp	r3, #11
 8004e5e:	d903      	bls.n	8004e68 <_malloc_r+0x68>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	441c      	add	r4, r3
 8004e64:	6025      	str	r5, [r4, #0]
 8004e66:	e004      	b.n	8004e72 <_malloc_r+0x72>
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	42a2      	cmp	r2, r4
 8004e6c:	bf0c      	ite	eq
 8004e6e:	600b      	streq	r3, [r1, #0]
 8004e70:	6053      	strne	r3, [r2, #4]
 8004e72:	4630      	mov	r0, r6
 8004e74:	f000 f898 	bl	8004fa8 <__malloc_unlock>
 8004e78:	f104 000b 	add.w	r0, r4, #11
 8004e7c:	1d23      	adds	r3, r4, #4
 8004e7e:	f020 0007 	bic.w	r0, r0, #7
 8004e82:	1ac2      	subs	r2, r0, r3
 8004e84:	d0cc      	beq.n	8004e20 <_malloc_r+0x20>
 8004e86:	1a1b      	subs	r3, r3, r0
 8004e88:	50a3      	str	r3, [r4, r2]
 8004e8a:	e7c9      	b.n	8004e20 <_malloc_r+0x20>
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	6864      	ldr	r4, [r4, #4]
 8004e90:	e7cc      	b.n	8004e2c <_malloc_r+0x2c>
 8004e92:	1cc4      	adds	r4, r0, #3
 8004e94:	f024 0403 	bic.w	r4, r4, #3
 8004e98:	42a0      	cmp	r0, r4
 8004e9a:	d0e3      	beq.n	8004e64 <_malloc_r+0x64>
 8004e9c:	1a21      	subs	r1, r4, r0
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	f000 f808 	bl	8004eb4 <_sbrk_r>
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d1dd      	bne.n	8004e64 <_malloc_r+0x64>
 8004ea8:	e7cf      	b.n	8004e4a <_malloc_r+0x4a>
 8004eaa:	bf00      	nop
 8004eac:	200005b4 	.word	0x200005b4
 8004eb0:	200005b8 	.word	0x200005b8

08004eb4 <_sbrk_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4d06      	ldr	r5, [pc, #24]	; (8004ed0 <_sbrk_r+0x1c>)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	602b      	str	r3, [r5, #0]
 8004ec0:	f7fb feda 	bl	8000c78 <_sbrk>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_sbrk_r+0x1a>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_sbrk_r+0x1a>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	200006f8 	.word	0x200006f8

08004ed4 <_raise_r>:
 8004ed4:	291f      	cmp	r1, #31
 8004ed6:	b538      	push	{r3, r4, r5, lr}
 8004ed8:	4604      	mov	r4, r0
 8004eda:	460d      	mov	r5, r1
 8004edc:	d904      	bls.n	8004ee8 <_raise_r+0x14>
 8004ede:	2316      	movs	r3, #22
 8004ee0:	6003      	str	r3, [r0, #0]
 8004ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004eea:	b112      	cbz	r2, 8004ef2 <_raise_r+0x1e>
 8004eec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ef0:	b94b      	cbnz	r3, 8004f06 <_raise_r+0x32>
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f000 f830 	bl	8004f58 <_getpid_r>
 8004ef8:	462a      	mov	r2, r5
 8004efa:	4601      	mov	r1, r0
 8004efc:	4620      	mov	r0, r4
 8004efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f02:	f000 b817 	b.w	8004f34 <_kill_r>
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d00a      	beq.n	8004f20 <_raise_r+0x4c>
 8004f0a:	1c59      	adds	r1, r3, #1
 8004f0c:	d103      	bne.n	8004f16 <_raise_r+0x42>
 8004f0e:	2316      	movs	r3, #22
 8004f10:	6003      	str	r3, [r0, #0]
 8004f12:	2001      	movs	r0, #1
 8004f14:	e7e7      	b.n	8004ee6 <_raise_r+0x12>
 8004f16:	2400      	movs	r4, #0
 8004f18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	4798      	blx	r3
 8004f20:	2000      	movs	r0, #0
 8004f22:	e7e0      	b.n	8004ee6 <_raise_r+0x12>

08004f24 <raise>:
 8004f24:	4b02      	ldr	r3, [pc, #8]	; (8004f30 <raise+0xc>)
 8004f26:	4601      	mov	r1, r0
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	f7ff bfd3 	b.w	8004ed4 <_raise_r>
 8004f2e:	bf00      	nop
 8004f30:	20000110 	.word	0x20000110

08004f34 <_kill_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4d07      	ldr	r5, [pc, #28]	; (8004f54 <_kill_r+0x20>)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	f7fb fe7f 	bl	8000c44 <_kill>
 8004f46:	1c43      	adds	r3, r0, #1
 8004f48:	d102      	bne.n	8004f50 <_kill_r+0x1c>
 8004f4a:	682b      	ldr	r3, [r5, #0]
 8004f4c:	b103      	cbz	r3, 8004f50 <_kill_r+0x1c>
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	bd38      	pop	{r3, r4, r5, pc}
 8004f52:	bf00      	nop
 8004f54:	200006f8 	.word	0x200006f8

08004f58 <_getpid_r>:
 8004f58:	f7fb be6c 	b.w	8000c34 <_getpid>

08004f5c <siprintf>:
 8004f5c:	b40e      	push	{r1, r2, r3}
 8004f5e:	b500      	push	{lr}
 8004f60:	b09c      	sub	sp, #112	; 0x70
 8004f62:	ab1d      	add	r3, sp, #116	; 0x74
 8004f64:	9002      	str	r0, [sp, #8]
 8004f66:	9006      	str	r0, [sp, #24]
 8004f68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f6c:	4809      	ldr	r0, [pc, #36]	; (8004f94 <siprintf+0x38>)
 8004f6e:	9107      	str	r1, [sp, #28]
 8004f70:	9104      	str	r1, [sp, #16]
 8004f72:	4909      	ldr	r1, [pc, #36]	; (8004f98 <siprintf+0x3c>)
 8004f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f78:	9105      	str	r1, [sp, #20]
 8004f7a:	6800      	ldr	r0, [r0, #0]
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	a902      	add	r1, sp, #8
 8004f80:	f000 f874 	bl	800506c <_svfiprintf_r>
 8004f84:	9b02      	ldr	r3, [sp, #8]
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	b01c      	add	sp, #112	; 0x70
 8004f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f90:	b003      	add	sp, #12
 8004f92:	4770      	bx	lr
 8004f94:	20000110 	.word	0x20000110
 8004f98:	ffff0208 	.word	0xffff0208

08004f9c <__malloc_lock>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	; (8004fa4 <__malloc_lock+0x8>)
 8004f9e:	f000 baf9 	b.w	8005594 <__retarget_lock_acquire_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	20000700 	.word	0x20000700

08004fa8 <__malloc_unlock>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__malloc_unlock+0x8>)
 8004faa:	f000 baf4 	b.w	8005596 <__retarget_lock_release_recursive>
 8004fae:	bf00      	nop
 8004fb0:	20000700 	.word	0x20000700

08004fb4 <__ssputs_r>:
 8004fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb8:	688e      	ldr	r6, [r1, #8]
 8004fba:	429e      	cmp	r6, r3
 8004fbc:	4682      	mov	sl, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	4690      	mov	r8, r2
 8004fc2:	461f      	mov	r7, r3
 8004fc4:	d838      	bhi.n	8005038 <__ssputs_r+0x84>
 8004fc6:	898a      	ldrh	r2, [r1, #12]
 8004fc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fcc:	d032      	beq.n	8005034 <__ssputs_r+0x80>
 8004fce:	6825      	ldr	r5, [r4, #0]
 8004fd0:	6909      	ldr	r1, [r1, #16]
 8004fd2:	eba5 0901 	sub.w	r9, r5, r1
 8004fd6:	6965      	ldr	r5, [r4, #20]
 8004fd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	444b      	add	r3, r9
 8004fe4:	106d      	asrs	r5, r5, #1
 8004fe6:	429d      	cmp	r5, r3
 8004fe8:	bf38      	it	cc
 8004fea:	461d      	movcc	r5, r3
 8004fec:	0553      	lsls	r3, r2, #21
 8004fee:	d531      	bpl.n	8005054 <__ssputs_r+0xa0>
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	f7ff ff05 	bl	8004e00 <_malloc_r>
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	b950      	cbnz	r0, 8005010 <__ssputs_r+0x5c>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	f8ca 3000 	str.w	r3, [sl]
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800500c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005010:	6921      	ldr	r1, [r4, #16]
 8005012:	464a      	mov	r2, r9
 8005014:	f000 fac0 	bl	8005598 <memcpy>
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800501e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005022:	81a3      	strh	r3, [r4, #12]
 8005024:	6126      	str	r6, [r4, #16]
 8005026:	6165      	str	r5, [r4, #20]
 8005028:	444e      	add	r6, r9
 800502a:	eba5 0509 	sub.w	r5, r5, r9
 800502e:	6026      	str	r6, [r4, #0]
 8005030:	60a5      	str	r5, [r4, #8]
 8005032:	463e      	mov	r6, r7
 8005034:	42be      	cmp	r6, r7
 8005036:	d900      	bls.n	800503a <__ssputs_r+0x86>
 8005038:	463e      	mov	r6, r7
 800503a:	4632      	mov	r2, r6
 800503c:	6820      	ldr	r0, [r4, #0]
 800503e:	4641      	mov	r1, r8
 8005040:	f000 fab8 	bl	80055b4 <memmove>
 8005044:	68a3      	ldr	r3, [r4, #8]
 8005046:	6822      	ldr	r2, [r4, #0]
 8005048:	1b9b      	subs	r3, r3, r6
 800504a:	4432      	add	r2, r6
 800504c:	60a3      	str	r3, [r4, #8]
 800504e:	6022      	str	r2, [r4, #0]
 8005050:	2000      	movs	r0, #0
 8005052:	e7db      	b.n	800500c <__ssputs_r+0x58>
 8005054:	462a      	mov	r2, r5
 8005056:	f000 fac7 	bl	80055e8 <_realloc_r>
 800505a:	4606      	mov	r6, r0
 800505c:	2800      	cmp	r0, #0
 800505e:	d1e1      	bne.n	8005024 <__ssputs_r+0x70>
 8005060:	6921      	ldr	r1, [r4, #16]
 8005062:	4650      	mov	r0, sl
 8005064:	f7ff fe7c 	bl	8004d60 <_free_r>
 8005068:	e7c7      	b.n	8004ffa <__ssputs_r+0x46>
	...

0800506c <_svfiprintf_r>:
 800506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	4698      	mov	r8, r3
 8005072:	898b      	ldrh	r3, [r1, #12]
 8005074:	061b      	lsls	r3, r3, #24
 8005076:	b09d      	sub	sp, #116	; 0x74
 8005078:	4607      	mov	r7, r0
 800507a:	460d      	mov	r5, r1
 800507c:	4614      	mov	r4, r2
 800507e:	d50e      	bpl.n	800509e <_svfiprintf_r+0x32>
 8005080:	690b      	ldr	r3, [r1, #16]
 8005082:	b963      	cbnz	r3, 800509e <_svfiprintf_r+0x32>
 8005084:	2140      	movs	r1, #64	; 0x40
 8005086:	f7ff febb 	bl	8004e00 <_malloc_r>
 800508a:	6028      	str	r0, [r5, #0]
 800508c:	6128      	str	r0, [r5, #16]
 800508e:	b920      	cbnz	r0, 800509a <_svfiprintf_r+0x2e>
 8005090:	230c      	movs	r3, #12
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005098:	e0d1      	b.n	800523e <_svfiprintf_r+0x1d2>
 800509a:	2340      	movs	r3, #64	; 0x40
 800509c:	616b      	str	r3, [r5, #20]
 800509e:	2300      	movs	r3, #0
 80050a0:	9309      	str	r3, [sp, #36]	; 0x24
 80050a2:	2320      	movs	r3, #32
 80050a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ac:	2330      	movs	r3, #48	; 0x30
 80050ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005258 <_svfiprintf_r+0x1ec>
 80050b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050b6:	f04f 0901 	mov.w	r9, #1
 80050ba:	4623      	mov	r3, r4
 80050bc:	469a      	mov	sl, r3
 80050be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050c2:	b10a      	cbz	r2, 80050c8 <_svfiprintf_r+0x5c>
 80050c4:	2a25      	cmp	r2, #37	; 0x25
 80050c6:	d1f9      	bne.n	80050bc <_svfiprintf_r+0x50>
 80050c8:	ebba 0b04 	subs.w	fp, sl, r4
 80050cc:	d00b      	beq.n	80050e6 <_svfiprintf_r+0x7a>
 80050ce:	465b      	mov	r3, fp
 80050d0:	4622      	mov	r2, r4
 80050d2:	4629      	mov	r1, r5
 80050d4:	4638      	mov	r0, r7
 80050d6:	f7ff ff6d 	bl	8004fb4 <__ssputs_r>
 80050da:	3001      	adds	r0, #1
 80050dc:	f000 80aa 	beq.w	8005234 <_svfiprintf_r+0x1c8>
 80050e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050e2:	445a      	add	r2, fp
 80050e4:	9209      	str	r2, [sp, #36]	; 0x24
 80050e6:	f89a 3000 	ldrb.w	r3, [sl]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80a2 	beq.w	8005234 <_svfiprintf_r+0x1c8>
 80050f0:	2300      	movs	r3, #0
 80050f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050fa:	f10a 0a01 	add.w	sl, sl, #1
 80050fe:	9304      	str	r3, [sp, #16]
 8005100:	9307      	str	r3, [sp, #28]
 8005102:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005106:	931a      	str	r3, [sp, #104]	; 0x68
 8005108:	4654      	mov	r4, sl
 800510a:	2205      	movs	r2, #5
 800510c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005110:	4851      	ldr	r0, [pc, #324]	; (8005258 <_svfiprintf_r+0x1ec>)
 8005112:	f7fb f86d 	bl	80001f0 <memchr>
 8005116:	9a04      	ldr	r2, [sp, #16]
 8005118:	b9d8      	cbnz	r0, 8005152 <_svfiprintf_r+0xe6>
 800511a:	06d0      	lsls	r0, r2, #27
 800511c:	bf44      	itt	mi
 800511e:	2320      	movmi	r3, #32
 8005120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005124:	0711      	lsls	r1, r2, #28
 8005126:	bf44      	itt	mi
 8005128:	232b      	movmi	r3, #43	; 0x2b
 800512a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800512e:	f89a 3000 	ldrb.w	r3, [sl]
 8005132:	2b2a      	cmp	r3, #42	; 0x2a
 8005134:	d015      	beq.n	8005162 <_svfiprintf_r+0xf6>
 8005136:	9a07      	ldr	r2, [sp, #28]
 8005138:	4654      	mov	r4, sl
 800513a:	2000      	movs	r0, #0
 800513c:	f04f 0c0a 	mov.w	ip, #10
 8005140:	4621      	mov	r1, r4
 8005142:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005146:	3b30      	subs	r3, #48	; 0x30
 8005148:	2b09      	cmp	r3, #9
 800514a:	d94e      	bls.n	80051ea <_svfiprintf_r+0x17e>
 800514c:	b1b0      	cbz	r0, 800517c <_svfiprintf_r+0x110>
 800514e:	9207      	str	r2, [sp, #28]
 8005150:	e014      	b.n	800517c <_svfiprintf_r+0x110>
 8005152:	eba0 0308 	sub.w	r3, r0, r8
 8005156:	fa09 f303 	lsl.w	r3, r9, r3
 800515a:	4313      	orrs	r3, r2
 800515c:	9304      	str	r3, [sp, #16]
 800515e:	46a2      	mov	sl, r4
 8005160:	e7d2      	b.n	8005108 <_svfiprintf_r+0x9c>
 8005162:	9b03      	ldr	r3, [sp, #12]
 8005164:	1d19      	adds	r1, r3, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	9103      	str	r1, [sp, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	bfbb      	ittet	lt
 800516e:	425b      	neglt	r3, r3
 8005170:	f042 0202 	orrlt.w	r2, r2, #2
 8005174:	9307      	strge	r3, [sp, #28]
 8005176:	9307      	strlt	r3, [sp, #28]
 8005178:	bfb8      	it	lt
 800517a:	9204      	strlt	r2, [sp, #16]
 800517c:	7823      	ldrb	r3, [r4, #0]
 800517e:	2b2e      	cmp	r3, #46	; 0x2e
 8005180:	d10c      	bne.n	800519c <_svfiprintf_r+0x130>
 8005182:	7863      	ldrb	r3, [r4, #1]
 8005184:	2b2a      	cmp	r3, #42	; 0x2a
 8005186:	d135      	bne.n	80051f4 <_svfiprintf_r+0x188>
 8005188:	9b03      	ldr	r3, [sp, #12]
 800518a:	1d1a      	adds	r2, r3, #4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	9203      	str	r2, [sp, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	bfb8      	it	lt
 8005194:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005198:	3402      	adds	r4, #2
 800519a:	9305      	str	r3, [sp, #20]
 800519c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005268 <_svfiprintf_r+0x1fc>
 80051a0:	7821      	ldrb	r1, [r4, #0]
 80051a2:	2203      	movs	r2, #3
 80051a4:	4650      	mov	r0, sl
 80051a6:	f7fb f823 	bl	80001f0 <memchr>
 80051aa:	b140      	cbz	r0, 80051be <_svfiprintf_r+0x152>
 80051ac:	2340      	movs	r3, #64	; 0x40
 80051ae:	eba0 000a 	sub.w	r0, r0, sl
 80051b2:	fa03 f000 	lsl.w	r0, r3, r0
 80051b6:	9b04      	ldr	r3, [sp, #16]
 80051b8:	4303      	orrs	r3, r0
 80051ba:	3401      	adds	r4, #1
 80051bc:	9304      	str	r3, [sp, #16]
 80051be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c2:	4826      	ldr	r0, [pc, #152]	; (800525c <_svfiprintf_r+0x1f0>)
 80051c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051c8:	2206      	movs	r2, #6
 80051ca:	f7fb f811 	bl	80001f0 <memchr>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d038      	beq.n	8005244 <_svfiprintf_r+0x1d8>
 80051d2:	4b23      	ldr	r3, [pc, #140]	; (8005260 <_svfiprintf_r+0x1f4>)
 80051d4:	bb1b      	cbnz	r3, 800521e <_svfiprintf_r+0x1b2>
 80051d6:	9b03      	ldr	r3, [sp, #12]
 80051d8:	3307      	adds	r3, #7
 80051da:	f023 0307 	bic.w	r3, r3, #7
 80051de:	3308      	adds	r3, #8
 80051e0:	9303      	str	r3, [sp, #12]
 80051e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e4:	4433      	add	r3, r6
 80051e6:	9309      	str	r3, [sp, #36]	; 0x24
 80051e8:	e767      	b.n	80050ba <_svfiprintf_r+0x4e>
 80051ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ee:	460c      	mov	r4, r1
 80051f0:	2001      	movs	r0, #1
 80051f2:	e7a5      	b.n	8005140 <_svfiprintf_r+0xd4>
 80051f4:	2300      	movs	r3, #0
 80051f6:	3401      	adds	r4, #1
 80051f8:	9305      	str	r3, [sp, #20]
 80051fa:	4619      	mov	r1, r3
 80051fc:	f04f 0c0a 	mov.w	ip, #10
 8005200:	4620      	mov	r0, r4
 8005202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005206:	3a30      	subs	r2, #48	; 0x30
 8005208:	2a09      	cmp	r2, #9
 800520a:	d903      	bls.n	8005214 <_svfiprintf_r+0x1a8>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0c5      	beq.n	800519c <_svfiprintf_r+0x130>
 8005210:	9105      	str	r1, [sp, #20]
 8005212:	e7c3      	b.n	800519c <_svfiprintf_r+0x130>
 8005214:	fb0c 2101 	mla	r1, ip, r1, r2
 8005218:	4604      	mov	r4, r0
 800521a:	2301      	movs	r3, #1
 800521c:	e7f0      	b.n	8005200 <_svfiprintf_r+0x194>
 800521e:	ab03      	add	r3, sp, #12
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	462a      	mov	r2, r5
 8005224:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <_svfiprintf_r+0x1f8>)
 8005226:	a904      	add	r1, sp, #16
 8005228:	4638      	mov	r0, r7
 800522a:	f3af 8000 	nop.w
 800522e:	1c42      	adds	r2, r0, #1
 8005230:	4606      	mov	r6, r0
 8005232:	d1d6      	bne.n	80051e2 <_svfiprintf_r+0x176>
 8005234:	89ab      	ldrh	r3, [r5, #12]
 8005236:	065b      	lsls	r3, r3, #25
 8005238:	f53f af2c 	bmi.w	8005094 <_svfiprintf_r+0x28>
 800523c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800523e:	b01d      	add	sp, #116	; 0x74
 8005240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005244:	ab03      	add	r3, sp, #12
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	462a      	mov	r2, r5
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <_svfiprintf_r+0x1f8>)
 800524c:	a904      	add	r1, sp, #16
 800524e:	4638      	mov	r0, r7
 8005250:	f000 f87a 	bl	8005348 <_printf_i>
 8005254:	e7eb      	b.n	800522e <_svfiprintf_r+0x1c2>
 8005256:	bf00      	nop
 8005258:	08023780 	.word	0x08023780
 800525c:	0802378a 	.word	0x0802378a
 8005260:	00000000 	.word	0x00000000
 8005264:	08004fb5 	.word	0x08004fb5
 8005268:	08023786 	.word	0x08023786

0800526c <_printf_common>:
 800526c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005270:	4616      	mov	r6, r2
 8005272:	4699      	mov	r9, r3
 8005274:	688a      	ldr	r2, [r1, #8]
 8005276:	690b      	ldr	r3, [r1, #16]
 8005278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800527c:	4293      	cmp	r3, r2
 800527e:	bfb8      	it	lt
 8005280:	4613      	movlt	r3, r2
 8005282:	6033      	str	r3, [r6, #0]
 8005284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005288:	4607      	mov	r7, r0
 800528a:	460c      	mov	r4, r1
 800528c:	b10a      	cbz	r2, 8005292 <_printf_common+0x26>
 800528e:	3301      	adds	r3, #1
 8005290:	6033      	str	r3, [r6, #0]
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	0699      	lsls	r1, r3, #26
 8005296:	bf42      	ittt	mi
 8005298:	6833      	ldrmi	r3, [r6, #0]
 800529a:	3302      	addmi	r3, #2
 800529c:	6033      	strmi	r3, [r6, #0]
 800529e:	6825      	ldr	r5, [r4, #0]
 80052a0:	f015 0506 	ands.w	r5, r5, #6
 80052a4:	d106      	bne.n	80052b4 <_printf_common+0x48>
 80052a6:	f104 0a19 	add.w	sl, r4, #25
 80052aa:	68e3      	ldr	r3, [r4, #12]
 80052ac:	6832      	ldr	r2, [r6, #0]
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	42ab      	cmp	r3, r5
 80052b2:	dc26      	bgt.n	8005302 <_printf_common+0x96>
 80052b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052b8:	1e13      	subs	r3, r2, #0
 80052ba:	6822      	ldr	r2, [r4, #0]
 80052bc:	bf18      	it	ne
 80052be:	2301      	movne	r3, #1
 80052c0:	0692      	lsls	r2, r2, #26
 80052c2:	d42b      	bmi.n	800531c <_printf_common+0xb0>
 80052c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052c8:	4649      	mov	r1, r9
 80052ca:	4638      	mov	r0, r7
 80052cc:	47c0      	blx	r8
 80052ce:	3001      	adds	r0, #1
 80052d0:	d01e      	beq.n	8005310 <_printf_common+0xa4>
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	68e5      	ldr	r5, [r4, #12]
 80052d6:	6832      	ldr	r2, [r6, #0]
 80052d8:	f003 0306 	and.w	r3, r3, #6
 80052dc:	2b04      	cmp	r3, #4
 80052de:	bf08      	it	eq
 80052e0:	1aad      	subeq	r5, r5, r2
 80052e2:	68a3      	ldr	r3, [r4, #8]
 80052e4:	6922      	ldr	r2, [r4, #16]
 80052e6:	bf0c      	ite	eq
 80052e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052ec:	2500      	movne	r5, #0
 80052ee:	4293      	cmp	r3, r2
 80052f0:	bfc4      	itt	gt
 80052f2:	1a9b      	subgt	r3, r3, r2
 80052f4:	18ed      	addgt	r5, r5, r3
 80052f6:	2600      	movs	r6, #0
 80052f8:	341a      	adds	r4, #26
 80052fa:	42b5      	cmp	r5, r6
 80052fc:	d11a      	bne.n	8005334 <_printf_common+0xc8>
 80052fe:	2000      	movs	r0, #0
 8005300:	e008      	b.n	8005314 <_printf_common+0xa8>
 8005302:	2301      	movs	r3, #1
 8005304:	4652      	mov	r2, sl
 8005306:	4649      	mov	r1, r9
 8005308:	4638      	mov	r0, r7
 800530a:	47c0      	blx	r8
 800530c:	3001      	adds	r0, #1
 800530e:	d103      	bne.n	8005318 <_printf_common+0xac>
 8005310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005318:	3501      	adds	r5, #1
 800531a:	e7c6      	b.n	80052aa <_printf_common+0x3e>
 800531c:	18e1      	adds	r1, r4, r3
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	2030      	movs	r0, #48	; 0x30
 8005322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005326:	4422      	add	r2, r4
 8005328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800532c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005330:	3302      	adds	r3, #2
 8005332:	e7c7      	b.n	80052c4 <_printf_common+0x58>
 8005334:	2301      	movs	r3, #1
 8005336:	4622      	mov	r2, r4
 8005338:	4649      	mov	r1, r9
 800533a:	4638      	mov	r0, r7
 800533c:	47c0      	blx	r8
 800533e:	3001      	adds	r0, #1
 8005340:	d0e6      	beq.n	8005310 <_printf_common+0xa4>
 8005342:	3601      	adds	r6, #1
 8005344:	e7d9      	b.n	80052fa <_printf_common+0x8e>
	...

08005348 <_printf_i>:
 8005348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800534c:	460c      	mov	r4, r1
 800534e:	4691      	mov	r9, r2
 8005350:	7e27      	ldrb	r7, [r4, #24]
 8005352:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005354:	2f78      	cmp	r7, #120	; 0x78
 8005356:	4680      	mov	r8, r0
 8005358:	469a      	mov	sl, r3
 800535a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800535e:	d807      	bhi.n	8005370 <_printf_i+0x28>
 8005360:	2f62      	cmp	r7, #98	; 0x62
 8005362:	d80a      	bhi.n	800537a <_printf_i+0x32>
 8005364:	2f00      	cmp	r7, #0
 8005366:	f000 80d8 	beq.w	800551a <_printf_i+0x1d2>
 800536a:	2f58      	cmp	r7, #88	; 0x58
 800536c:	f000 80a3 	beq.w	80054b6 <_printf_i+0x16e>
 8005370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005378:	e03a      	b.n	80053f0 <_printf_i+0xa8>
 800537a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800537e:	2b15      	cmp	r3, #21
 8005380:	d8f6      	bhi.n	8005370 <_printf_i+0x28>
 8005382:	a001      	add	r0, pc, #4	; (adr r0, 8005388 <_printf_i+0x40>)
 8005384:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005388:	080053e1 	.word	0x080053e1
 800538c:	080053f5 	.word	0x080053f5
 8005390:	08005371 	.word	0x08005371
 8005394:	08005371 	.word	0x08005371
 8005398:	08005371 	.word	0x08005371
 800539c:	08005371 	.word	0x08005371
 80053a0:	080053f5 	.word	0x080053f5
 80053a4:	08005371 	.word	0x08005371
 80053a8:	08005371 	.word	0x08005371
 80053ac:	08005371 	.word	0x08005371
 80053b0:	08005371 	.word	0x08005371
 80053b4:	08005501 	.word	0x08005501
 80053b8:	08005425 	.word	0x08005425
 80053bc:	080054e3 	.word	0x080054e3
 80053c0:	08005371 	.word	0x08005371
 80053c4:	08005371 	.word	0x08005371
 80053c8:	08005523 	.word	0x08005523
 80053cc:	08005371 	.word	0x08005371
 80053d0:	08005425 	.word	0x08005425
 80053d4:	08005371 	.word	0x08005371
 80053d8:	08005371 	.word	0x08005371
 80053dc:	080054eb 	.word	0x080054eb
 80053e0:	680b      	ldr	r3, [r1, #0]
 80053e2:	1d1a      	adds	r2, r3, #4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	600a      	str	r2, [r1, #0]
 80053e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0a3      	b.n	800553c <_printf_i+0x1f4>
 80053f4:	6825      	ldr	r5, [r4, #0]
 80053f6:	6808      	ldr	r0, [r1, #0]
 80053f8:	062e      	lsls	r6, r5, #24
 80053fa:	f100 0304 	add.w	r3, r0, #4
 80053fe:	d50a      	bpl.n	8005416 <_printf_i+0xce>
 8005400:	6805      	ldr	r5, [r0, #0]
 8005402:	600b      	str	r3, [r1, #0]
 8005404:	2d00      	cmp	r5, #0
 8005406:	da03      	bge.n	8005410 <_printf_i+0xc8>
 8005408:	232d      	movs	r3, #45	; 0x2d
 800540a:	426d      	negs	r5, r5
 800540c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005410:	485e      	ldr	r0, [pc, #376]	; (800558c <_printf_i+0x244>)
 8005412:	230a      	movs	r3, #10
 8005414:	e019      	b.n	800544a <_printf_i+0x102>
 8005416:	f015 0f40 	tst.w	r5, #64	; 0x40
 800541a:	6805      	ldr	r5, [r0, #0]
 800541c:	600b      	str	r3, [r1, #0]
 800541e:	bf18      	it	ne
 8005420:	b22d      	sxthne	r5, r5
 8005422:	e7ef      	b.n	8005404 <_printf_i+0xbc>
 8005424:	680b      	ldr	r3, [r1, #0]
 8005426:	6825      	ldr	r5, [r4, #0]
 8005428:	1d18      	adds	r0, r3, #4
 800542a:	6008      	str	r0, [r1, #0]
 800542c:	0628      	lsls	r0, r5, #24
 800542e:	d501      	bpl.n	8005434 <_printf_i+0xec>
 8005430:	681d      	ldr	r5, [r3, #0]
 8005432:	e002      	b.n	800543a <_printf_i+0xf2>
 8005434:	0669      	lsls	r1, r5, #25
 8005436:	d5fb      	bpl.n	8005430 <_printf_i+0xe8>
 8005438:	881d      	ldrh	r5, [r3, #0]
 800543a:	4854      	ldr	r0, [pc, #336]	; (800558c <_printf_i+0x244>)
 800543c:	2f6f      	cmp	r7, #111	; 0x6f
 800543e:	bf0c      	ite	eq
 8005440:	2308      	moveq	r3, #8
 8005442:	230a      	movne	r3, #10
 8005444:	2100      	movs	r1, #0
 8005446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800544a:	6866      	ldr	r6, [r4, #4]
 800544c:	60a6      	str	r6, [r4, #8]
 800544e:	2e00      	cmp	r6, #0
 8005450:	bfa2      	ittt	ge
 8005452:	6821      	ldrge	r1, [r4, #0]
 8005454:	f021 0104 	bicge.w	r1, r1, #4
 8005458:	6021      	strge	r1, [r4, #0]
 800545a:	b90d      	cbnz	r5, 8005460 <_printf_i+0x118>
 800545c:	2e00      	cmp	r6, #0
 800545e:	d04d      	beq.n	80054fc <_printf_i+0x1b4>
 8005460:	4616      	mov	r6, r2
 8005462:	fbb5 f1f3 	udiv	r1, r5, r3
 8005466:	fb03 5711 	mls	r7, r3, r1, r5
 800546a:	5dc7      	ldrb	r7, [r0, r7]
 800546c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005470:	462f      	mov	r7, r5
 8005472:	42bb      	cmp	r3, r7
 8005474:	460d      	mov	r5, r1
 8005476:	d9f4      	bls.n	8005462 <_printf_i+0x11a>
 8005478:	2b08      	cmp	r3, #8
 800547a:	d10b      	bne.n	8005494 <_printf_i+0x14c>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	07df      	lsls	r7, r3, #31
 8005480:	d508      	bpl.n	8005494 <_printf_i+0x14c>
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	6861      	ldr	r1, [r4, #4]
 8005486:	4299      	cmp	r1, r3
 8005488:	bfde      	ittt	le
 800548a:	2330      	movle	r3, #48	; 0x30
 800548c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005490:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005494:	1b92      	subs	r2, r2, r6
 8005496:	6122      	str	r2, [r4, #16]
 8005498:	f8cd a000 	str.w	sl, [sp]
 800549c:	464b      	mov	r3, r9
 800549e:	aa03      	add	r2, sp, #12
 80054a0:	4621      	mov	r1, r4
 80054a2:	4640      	mov	r0, r8
 80054a4:	f7ff fee2 	bl	800526c <_printf_common>
 80054a8:	3001      	adds	r0, #1
 80054aa:	d14c      	bne.n	8005546 <_printf_i+0x1fe>
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054b0:	b004      	add	sp, #16
 80054b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b6:	4835      	ldr	r0, [pc, #212]	; (800558c <_printf_i+0x244>)
 80054b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	680e      	ldr	r6, [r1, #0]
 80054c0:	061f      	lsls	r7, r3, #24
 80054c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80054c6:	600e      	str	r6, [r1, #0]
 80054c8:	d514      	bpl.n	80054f4 <_printf_i+0x1ac>
 80054ca:	07d9      	lsls	r1, r3, #31
 80054cc:	bf44      	itt	mi
 80054ce:	f043 0320 	orrmi.w	r3, r3, #32
 80054d2:	6023      	strmi	r3, [r4, #0]
 80054d4:	b91d      	cbnz	r5, 80054de <_printf_i+0x196>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	f023 0320 	bic.w	r3, r3, #32
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	2310      	movs	r3, #16
 80054e0:	e7b0      	b.n	8005444 <_printf_i+0xfc>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	f043 0320 	orr.w	r3, r3, #32
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	2378      	movs	r3, #120	; 0x78
 80054ec:	4828      	ldr	r0, [pc, #160]	; (8005590 <_printf_i+0x248>)
 80054ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054f2:	e7e3      	b.n	80054bc <_printf_i+0x174>
 80054f4:	065e      	lsls	r6, r3, #25
 80054f6:	bf48      	it	mi
 80054f8:	b2ad      	uxthmi	r5, r5
 80054fa:	e7e6      	b.n	80054ca <_printf_i+0x182>
 80054fc:	4616      	mov	r6, r2
 80054fe:	e7bb      	b.n	8005478 <_printf_i+0x130>
 8005500:	680b      	ldr	r3, [r1, #0]
 8005502:	6826      	ldr	r6, [r4, #0]
 8005504:	6960      	ldr	r0, [r4, #20]
 8005506:	1d1d      	adds	r5, r3, #4
 8005508:	600d      	str	r5, [r1, #0]
 800550a:	0635      	lsls	r5, r6, #24
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	d501      	bpl.n	8005514 <_printf_i+0x1cc>
 8005510:	6018      	str	r0, [r3, #0]
 8005512:	e002      	b.n	800551a <_printf_i+0x1d2>
 8005514:	0671      	lsls	r1, r6, #25
 8005516:	d5fb      	bpl.n	8005510 <_printf_i+0x1c8>
 8005518:	8018      	strh	r0, [r3, #0]
 800551a:	2300      	movs	r3, #0
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	4616      	mov	r6, r2
 8005520:	e7ba      	b.n	8005498 <_printf_i+0x150>
 8005522:	680b      	ldr	r3, [r1, #0]
 8005524:	1d1a      	adds	r2, r3, #4
 8005526:	600a      	str	r2, [r1, #0]
 8005528:	681e      	ldr	r6, [r3, #0]
 800552a:	6862      	ldr	r2, [r4, #4]
 800552c:	2100      	movs	r1, #0
 800552e:	4630      	mov	r0, r6
 8005530:	f7fa fe5e 	bl	80001f0 <memchr>
 8005534:	b108      	cbz	r0, 800553a <_printf_i+0x1f2>
 8005536:	1b80      	subs	r0, r0, r6
 8005538:	6060      	str	r0, [r4, #4]
 800553a:	6863      	ldr	r3, [r4, #4]
 800553c:	6123      	str	r3, [r4, #16]
 800553e:	2300      	movs	r3, #0
 8005540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005544:	e7a8      	b.n	8005498 <_printf_i+0x150>
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	4632      	mov	r2, r6
 800554a:	4649      	mov	r1, r9
 800554c:	4640      	mov	r0, r8
 800554e:	47d0      	blx	sl
 8005550:	3001      	adds	r0, #1
 8005552:	d0ab      	beq.n	80054ac <_printf_i+0x164>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	079b      	lsls	r3, r3, #30
 8005558:	d413      	bmi.n	8005582 <_printf_i+0x23a>
 800555a:	68e0      	ldr	r0, [r4, #12]
 800555c:	9b03      	ldr	r3, [sp, #12]
 800555e:	4298      	cmp	r0, r3
 8005560:	bfb8      	it	lt
 8005562:	4618      	movlt	r0, r3
 8005564:	e7a4      	b.n	80054b0 <_printf_i+0x168>
 8005566:	2301      	movs	r3, #1
 8005568:	4632      	mov	r2, r6
 800556a:	4649      	mov	r1, r9
 800556c:	4640      	mov	r0, r8
 800556e:	47d0      	blx	sl
 8005570:	3001      	adds	r0, #1
 8005572:	d09b      	beq.n	80054ac <_printf_i+0x164>
 8005574:	3501      	adds	r5, #1
 8005576:	68e3      	ldr	r3, [r4, #12]
 8005578:	9903      	ldr	r1, [sp, #12]
 800557a:	1a5b      	subs	r3, r3, r1
 800557c:	42ab      	cmp	r3, r5
 800557e:	dcf2      	bgt.n	8005566 <_printf_i+0x21e>
 8005580:	e7eb      	b.n	800555a <_printf_i+0x212>
 8005582:	2500      	movs	r5, #0
 8005584:	f104 0619 	add.w	r6, r4, #25
 8005588:	e7f5      	b.n	8005576 <_printf_i+0x22e>
 800558a:	bf00      	nop
 800558c:	08023791 	.word	0x08023791
 8005590:	080237a2 	.word	0x080237a2

08005594 <__retarget_lock_acquire_recursive>:
 8005594:	4770      	bx	lr

08005596 <__retarget_lock_release_recursive>:
 8005596:	4770      	bx	lr

08005598 <memcpy>:
 8005598:	440a      	add	r2, r1
 800559a:	4291      	cmp	r1, r2
 800559c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80055a0:	d100      	bne.n	80055a4 <memcpy+0xc>
 80055a2:	4770      	bx	lr
 80055a4:	b510      	push	{r4, lr}
 80055a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ae:	4291      	cmp	r1, r2
 80055b0:	d1f9      	bne.n	80055a6 <memcpy+0xe>
 80055b2:	bd10      	pop	{r4, pc}

080055b4 <memmove>:
 80055b4:	4288      	cmp	r0, r1
 80055b6:	b510      	push	{r4, lr}
 80055b8:	eb01 0402 	add.w	r4, r1, r2
 80055bc:	d902      	bls.n	80055c4 <memmove+0x10>
 80055be:	4284      	cmp	r4, r0
 80055c0:	4623      	mov	r3, r4
 80055c2:	d807      	bhi.n	80055d4 <memmove+0x20>
 80055c4:	1e43      	subs	r3, r0, #1
 80055c6:	42a1      	cmp	r1, r4
 80055c8:	d008      	beq.n	80055dc <memmove+0x28>
 80055ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055d2:	e7f8      	b.n	80055c6 <memmove+0x12>
 80055d4:	4402      	add	r2, r0
 80055d6:	4601      	mov	r1, r0
 80055d8:	428a      	cmp	r2, r1
 80055da:	d100      	bne.n	80055de <memmove+0x2a>
 80055dc:	bd10      	pop	{r4, pc}
 80055de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055e6:	e7f7      	b.n	80055d8 <memmove+0x24>

080055e8 <_realloc_r>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	4607      	mov	r7, r0
 80055ec:	4614      	mov	r4, r2
 80055ee:	460e      	mov	r6, r1
 80055f0:	b921      	cbnz	r1, 80055fc <_realloc_r+0x14>
 80055f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055f6:	4611      	mov	r1, r2
 80055f8:	f7ff bc02 	b.w	8004e00 <_malloc_r>
 80055fc:	b922      	cbnz	r2, 8005608 <_realloc_r+0x20>
 80055fe:	f7ff fbaf 	bl	8004d60 <_free_r>
 8005602:	4625      	mov	r5, r4
 8005604:	4628      	mov	r0, r5
 8005606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005608:	f000 f814 	bl	8005634 <_malloc_usable_size_r>
 800560c:	42a0      	cmp	r0, r4
 800560e:	d20f      	bcs.n	8005630 <_realloc_r+0x48>
 8005610:	4621      	mov	r1, r4
 8005612:	4638      	mov	r0, r7
 8005614:	f7ff fbf4 	bl	8004e00 <_malloc_r>
 8005618:	4605      	mov	r5, r0
 800561a:	2800      	cmp	r0, #0
 800561c:	d0f2      	beq.n	8005604 <_realloc_r+0x1c>
 800561e:	4631      	mov	r1, r6
 8005620:	4622      	mov	r2, r4
 8005622:	f7ff ffb9 	bl	8005598 <memcpy>
 8005626:	4631      	mov	r1, r6
 8005628:	4638      	mov	r0, r7
 800562a:	f7ff fb99 	bl	8004d60 <_free_r>
 800562e:	e7e9      	b.n	8005604 <_realloc_r+0x1c>
 8005630:	4635      	mov	r5, r6
 8005632:	e7e7      	b.n	8005604 <_realloc_r+0x1c>

08005634 <_malloc_usable_size_r>:
 8005634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005638:	1f18      	subs	r0, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	bfbc      	itt	lt
 800563e:	580b      	ldrlt	r3, [r1, r0]
 8005640:	18c0      	addlt	r0, r0, r3
 8005642:	4770      	bx	lr

08005644 <_init>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr

08005650 <_fini>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr
