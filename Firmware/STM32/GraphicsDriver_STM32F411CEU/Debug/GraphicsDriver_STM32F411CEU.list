
GraphicsDriver_STM32F411CEU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08007c80  08007c80  00017c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000024  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c8  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008008  08008008  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08008018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001678  20000174  0800818c  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00008404  200017ec  0800818c  000217ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c86  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b7  00000000  00000000  00034e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  000382e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00039370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b16f  00000000  00000000  0003a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011df8  00000000  00000000  00055427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092389  00000000  00000000  0006721f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009f  00000000  00000000  000f95a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f0c  00000000  00000000  000f9648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c68 	.word	0x08007c68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	08007c68 	.word	0x08007c68

080001e0 <_ZN7RequestC1Ev>:

#include "Protocol.h"
#include "Request.h"
#include <string.h>

Request::Request() {
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	4a0c      	ldr	r2, [pc, #48]	; (800021c <_ZN7RequestC1Ev+0x3c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	601a      	str	r2, [r3, #0]
	for (int c = 0; c < NETWORK_PACKET_MAXIMUM_SIZE; c++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001f8:	da09      	bge.n	800020e <_ZN7RequestC1Ev+0x2e>
		body[c] = 0x00;
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	4413      	add	r3, r2
 8000200:	3308      	adds	r3, #8
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]
	for (int c = 0; c < NETWORK_PACKET_MAXIMUM_SIZE; c++) {
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	3301      	adds	r3, #1
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	e7f1      	b.n	80001f2 <_ZN7RequestC1Ev+0x12>
	}
}
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4618      	mov	r0, r3
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	08007d34 	.word	0x08007d34

08000220 <_ZN7RequestD1Ev>:

Request::~Request() {
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <_ZN7RequestD1Ev+0x1c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

}
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	08007d34 	.word	0x08007d34

08000240 <_ZN7RequestD0Ev>:
Request::~Request() {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
}
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ffe9 	bl	8000220 <_ZN7RequestD1Ev>
 800024e:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f006 ff80 	bl	8007158 <_ZdlPvj>
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4618      	mov	r0, r3
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}

08000262 <_ZN7Request5ParseEPht>:

bool Request::Parse(uint8_t *data, uint16_t dataLength) {
 8000262:	b580      	push	{r7, lr}
 8000264:	b084      	sub	sp, #16
 8000266:	af00      	add	r7, sp, #0
 8000268:	60f8      	str	r0, [r7, #12]
 800026a:	60b9      	str	r1, [r7, #8]
 800026c:	4613      	mov	r3, r2
 800026e:	80fb      	strh	r3, [r7, #6]
	if (dataLength < 3 || data == 0) {
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	2b02      	cmp	r3, #2
 8000274:	d902      	bls.n	800027c <_ZN7Request5ParseEPht+0x1a>
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d101      	bne.n	8000280 <_ZN7Request5ParseEPht+0x1e>
		return false;
 800027c:	2300      	movs	r3, #0
 800027e:	e033      	b.n	80002e8 <_ZN7Request5ParseEPht+0x86>
	}

	type = data[0];
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	711a      	strb	r2, [r3, #4]
	bodyLength = (data[1] << 8) | data[2];
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	3301      	adds	r3, #1
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	021b      	lsls	r3, r3, #8
 8000290:	b21a      	sxth	r2, r3
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	3302      	adds	r3, #2
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	b21b      	sxth	r3, r3
 800029a:	4313      	orrs	r3, r2
 800029c:	b21b      	sxth	r3, r3
 800029e:	b29a      	uxth	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	80da      	strh	r2, [r3, #6]

	memcpy(this->body, data + 3, bodyLength);
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f103 0008 	add.w	r0, r3, #8
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	1cd9      	adds	r1, r3, #3
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	88db      	ldrh	r3, [r3, #6]
 80002b2:	461a      	mov	r2, r3
 80002b4:	f007 f85e 	bl	8007374 <memcpy>

	switch (type) {
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	2b04      	cmp	r3, #4
 80002be:	dc12      	bgt.n	80002e6 <_ZN7Request5ParseEPht+0x84>
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	da04      	bge.n	80002ce <_ZN7Request5ParseEPht+0x6c>
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d007      	beq.n	80002d8 <_ZN7Request5ParseEPht+0x76>
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	d00a      	beq.n	80002e2 <_ZN7Request5ParseEPht+0x80>
 80002cc:	e00b      	b.n	80002e6 <_ZN7Request5ParseEPht+0x84>
	case RequestType::ClearAssignPixelData:
	case RequestType::AssignPixelData:
		return ParseClearPixelDataRequest();
 80002ce:	68f8      	ldr	r0, [r7, #12]
 80002d0:	f000 f825 	bl	800031e <_ZN7Request26ParseClearPixelDataRequestEv>
 80002d4:	4603      	mov	r3, r0
 80002d6:	e007      	b.n	80002e8 <_ZN7Request5ParseEPht+0x86>
	case RequestType::SetPixelData:
		return ParseSetPixelDataRequest();
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f000 f809 	bl	80002f0 <_ZN7Request24ParseSetPixelDataRequestEv>
 80002de:	4603      	mov	r3, r0
 80002e0:	e002      	b.n	80002e8 <_ZN7Request5ParseEPht+0x86>
	case RequestType::Commit:
		return true;
 80002e2:	2301      	movs	r3, #1
 80002e4:	e000      	b.n	80002e8 <_ZN7Request5ParseEPht+0x86>
	}

	return false;
 80002e6:	2300      	movs	r3, #0
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <_ZN7Request24ParseSetPixelDataRequestEv>:

bool Request::ParseSetPixelDataRequest() {
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	if (bodyLength % 4 != 0 || bodyLength == 4) {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	88db      	ldrh	r3, [r3, #6]
 80002fc:	f003 0303 	and.w	r3, r3, #3
 8000300:	2b00      	cmp	r3, #0
 8000302:	d103      	bne.n	800030c <_ZN7Request24ParseSetPixelDataRequestEv+0x1c>
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	88db      	ldrh	r3, [r3, #6]
 8000308:	2b04      	cmp	r3, #4
 800030a:	d101      	bne.n	8000310 <_ZN7Request24ParseSetPixelDataRequestEv+0x20>
		return false;
 800030c:	2300      	movs	r3, #0
 800030e:	e000      	b.n	8000312 <_ZN7Request24ParseSetPixelDataRequestEv+0x22>
	}

	return true;
 8000310:	2301      	movs	r3, #1
}
 8000312:	4618      	mov	r0, r3
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr

0800031e <_ZN7Request26ParseClearPixelDataRequestEv>:

bool Request::ParseClearPixelDataRequest() {
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
	if (bodyLength % 8 != 0) {
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	88db      	ldrh	r3, [r3, #6]
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <_ZN7Request26ParseClearPixelDataRequestEv+0x18>
		return false;
 8000332:	2300      	movs	r3, #0
 8000334:	e000      	b.n	8000338 <_ZN7Request26ParseClearPixelDataRequestEv+0x1a>
	}

	return true;
 8000336:	2301      	movs	r3, #1
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <_ZN16CommandProcessorC1Ev>:
 *      Author: benvh
 */

#include "CommandProcessor.h"

CommandProcessor::CommandProcessor() {
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <_ZN16CommandProcessorC1Ev+0x1c>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4618      	mov	r0, r3
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	08007d58 	.word	0x08007d58

08000364 <_ZN16CommandProcessorD1Ev>:

CommandProcessor::~CommandProcessor() {
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <_ZN16CommandProcessorD1Ev+0x1c>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4618      	mov	r0, r3
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	08007d58 	.word	0x08007d58

08000384 <_ZN16CommandProcessorD0Ev>:
CommandProcessor::~CommandProcessor() {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
}
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f7ff ffe9 	bl	8000364 <_ZN16CommandProcessorD1Ev>
 8000392:	2104      	movs	r1, #4
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f006 fedf 	bl	8007158 <_ZdlPvj>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4618      	mov	r0, r3
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration>:

void CommandProcessor::ProcessRequest(Request *request, DisplayDriver *display,
		Configuration *configuration) {
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b08f      	sub	sp, #60	; 0x3c
 80003a8:	af04      	add	r7, sp, #16
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
	switch (request->type) {
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	791b      	ldrb	r3, [r3, #4]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	f200 80e6 	bhi.w	800058a <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0x1e6>
 80003be:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0x20>)
 80003c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c4:	080003d5 	.word	0x080003d5
 80003c8:	08000577 	.word	0x08000577
 80003cc:	08000469 	.word	0x08000469
 80003d0:	080004d3 	.word	0x080004d3
	case RequestType::SetPixelData: {
		uint16_t x = request->body[0] << 8 | request->body[1];
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	7a1b      	ldrb	r3, [r3, #8]
 80003d8:	021b      	lsls	r3, r3, #8
 80003da:	b21a      	sxth	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	7a5b      	ldrb	r3, [r3, #9]
 80003e0:	b21b      	sxth	r3, r3
 80003e2:	4313      	orrs	r3, r2
 80003e4:	b21b      	sxth	r3, r3
 80003e6:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t y = request->body[2] << 8 | request->body[3];
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	7a9b      	ldrb	r3, [r3, #10]
 80003ec:	021b      	lsls	r3, r3, #8
 80003ee:	b21a      	sxth	r2, r3
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	7adb      	ldrb	r3, [r3, #11]
 80003f4:	b21b      	sxth	r3, r3
 80003f6:	4313      	orrs	r3, r2
 80003f8:	b21b      	sxth	r3, r3
 80003fa:	82bb      	strh	r3, [r7, #20]

		uint16_t pixelStart = 4;
 80003fc:	2304      	movs	r3, #4
 80003fe:	84bb      	strh	r3, [r7, #36]	; 0x24

		while (pixelStart < request->bodyLength) {
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	88db      	ldrh	r3, [r3, #6]
 8000404:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000406:	429a      	cmp	r2, r3
 8000408:	f080 80bc 	bcs.w	8000584 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0x1e0>
			uint8_t r = request->body[pixelStart + 0];
 800040c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	4413      	add	r3, r2
 8000412:	7a1b      	ldrb	r3, [r3, #8]
 8000414:	74fb      	strb	r3, [r7, #19]
			uint8_t g = request->body[pixelStart + 1];
 8000416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000418:	3301      	adds	r3, #1
 800041a:	68ba      	ldr	r2, [r7, #8]
 800041c:	4413      	add	r3, r2
 800041e:	7a1b      	ldrb	r3, [r3, #8]
 8000420:	74bb      	strb	r3, [r7, #18]
			uint8_t b = request->body[pixelStart + 2];
 8000422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000424:	3302      	adds	r3, #2
 8000426:	68ba      	ldr	r2, [r7, #8]
 8000428:	4413      	add	r3, r2
 800042a:	7a1b      	ldrb	r3, [r3, #8]
 800042c:	747b      	strb	r3, [r7, #17]
			uint8_t w = request->body[pixelStart + 3];
 800042e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000430:	3303      	adds	r3, #3
 8000432:	68ba      	ldr	r2, [r7, #8]
 8000434:	4413      	add	r3, r2
 8000436:	7a1b      	ldrb	r3, [r3, #8]
 8000438:	743b      	strb	r3, [r7, #16]

			display->SetPixel(x, y, r, g, b, w);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	3308      	adds	r3, #8
 8000440:	681c      	ldr	r4, [r3, #0]
 8000442:	7cf8      	ldrb	r0, [r7, #19]
 8000444:	8aba      	ldrh	r2, [r7, #20]
 8000446:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000448:	7c3b      	ldrb	r3, [r7, #16]
 800044a:	9302      	str	r3, [sp, #8]
 800044c:	7c7b      	ldrb	r3, [r7, #17]
 800044e:	9301      	str	r3, [sp, #4]
 8000450:	7cbb      	ldrb	r3, [r7, #18]
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	4603      	mov	r3, r0
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	47a0      	blx	r4

			pixelStart += 4;
 800045a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800045c:	3304      	adds	r3, #4
 800045e:	84bb      	strh	r3, [r7, #36]	; 0x24
			x++;
 8000460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000462:	3301      	adds	r3, #1
 8000464:	84fb      	strh	r3, [r7, #38]	; 0x26
		while (pixelStart < request->bodyLength) {
 8000466:	e7cb      	b.n	8000400 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0x5c>

		break;
	}

	case RequestType::ClearAssignPixelData: {
		for (uint16_t x = 0; x < configuration->getWidth(); x++) {
 8000468:	2300      	movs	r3, #0
 800046a:	847b      	strh	r3, [r7, #34]	; 0x22
 800046c:	6838      	ldr	r0, [r7, #0]
 800046e:	f006 fdcd 	bl	800700c <_ZN13Configuration8getWidthEv>
 8000472:	4603      	mov	r3, r0
 8000474:	461a      	mov	r2, r3
 8000476:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000478:	4293      	cmp	r3, r2
 800047a:	bf34      	ite	cc
 800047c:	2301      	movcc	r3, #1
 800047e:	2300      	movcs	r3, #0
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d025      	beq.n	80004d2 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0x12e>
			for (uint16_t y = 0; y < configuration->getHeight(); y++) {
 8000486:	2300      	movs	r3, #0
 8000488:	843b      	strh	r3, [r7, #32]
 800048a:	6838      	ldr	r0, [r7, #0]
 800048c:	f006 fdd6 	bl	800703c <_ZN13Configuration9getHeightEv>
 8000490:	4603      	mov	r3, r0
 8000492:	461a      	mov	r2, r3
 8000494:	8c3b      	ldrh	r3, [r7, #32]
 8000496:	4293      	cmp	r3, r2
 8000498:	bf34      	ite	cc
 800049a:	2301      	movcc	r3, #1
 800049c:	2300      	movcs	r3, #0
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d012      	beq.n	80004ca <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0x126>
				display->SetPixel(x, y, 0, 0, 0, 0);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3308      	adds	r3, #8
 80004aa:	681c      	ldr	r4, [r3, #0]
 80004ac:	8c3a      	ldrh	r2, [r7, #32]
 80004ae:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80004b0:	2300      	movs	r3, #0
 80004b2:	9302      	str	r3, [sp, #8]
 80004b4:	2300      	movs	r3, #0
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	2300      	movs	r3, #0
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2300      	movs	r3, #0
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	47a0      	blx	r4
			for (uint16_t y = 0; y < configuration->getHeight(); y++) {
 80004c2:	8c3b      	ldrh	r3, [r7, #32]
 80004c4:	3301      	adds	r3, #1
 80004c6:	843b      	strh	r3, [r7, #32]
 80004c8:	e7df      	b.n	800048a <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0xe6>
		for (uint16_t x = 0; x < configuration->getWidth(); x++) {
 80004ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80004cc:	3301      	adds	r3, #1
 80004ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80004d0:	e7cc      	b.n	800046c <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0xc8>
			}
		}
		//No break.  Proceed to assign pixel data
	}
	case RequestType::AssignPixelData: {
		for (uint16_t offset = 0; offset < request->bodyLength; offset += 8) {
 80004d2:	2300      	movs	r3, #0
 80004d4:	83fb      	strh	r3, [r7, #30]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	88db      	ldrh	r3, [r3, #6]
 80004da:	8bfa      	ldrh	r2, [r7, #30]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d253      	bcs.n	8000588 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0x1e4>

			uint16_t x = request->body[offset + 0] << 8
 80004e0:	8bfb      	ldrh	r3, [r7, #30]
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	4413      	add	r3, r2
 80004e6:	7a1b      	ldrb	r3, [r3, #8]
 80004e8:	021b      	lsls	r3, r3, #8
					| request->body[offset + 1];
 80004ea:	b21a      	sxth	r2, r3
 80004ec:	8bfb      	ldrh	r3, [r7, #30]
 80004ee:	3301      	adds	r3, #1
 80004f0:	68b9      	ldr	r1, [r7, #8]
 80004f2:	440b      	add	r3, r1
 80004f4:	7a1b      	ldrb	r3, [r3, #8]
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b21b      	sxth	r3, r3
			uint16_t x = request->body[offset + 0] << 8
 80004fc:	83bb      	strh	r3, [r7, #28]
			uint16_t y = request->body[offset + 2] << 8
 80004fe:	8bfb      	ldrh	r3, [r7, #30]
 8000500:	3302      	adds	r3, #2
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	4413      	add	r3, r2
 8000506:	7a1b      	ldrb	r3, [r3, #8]
 8000508:	021b      	lsls	r3, r3, #8
					| request->body[offset + 3];
 800050a:	b21a      	sxth	r2, r3
 800050c:	8bfb      	ldrh	r3, [r7, #30]
 800050e:	3303      	adds	r3, #3
 8000510:	68b9      	ldr	r1, [r7, #8]
 8000512:	440b      	add	r3, r1
 8000514:	7a1b      	ldrb	r3, [r3, #8]
 8000516:	b21b      	sxth	r3, r3
 8000518:	4313      	orrs	r3, r2
 800051a:	b21b      	sxth	r3, r3
			uint16_t y = request->body[offset + 2] << 8
 800051c:	837b      	strh	r3, [r7, #26]

			uint8_t r = request->body[offset + 4];
 800051e:	8bfb      	ldrh	r3, [r7, #30]
 8000520:	3304      	adds	r3, #4
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	4413      	add	r3, r2
 8000526:	7a1b      	ldrb	r3, [r3, #8]
 8000528:	767b      	strb	r3, [r7, #25]
			uint8_t g = request->body[offset + 5];
 800052a:	8bfb      	ldrh	r3, [r7, #30]
 800052c:	3305      	adds	r3, #5
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	4413      	add	r3, r2
 8000532:	7a1b      	ldrb	r3, [r3, #8]
 8000534:	763b      	strb	r3, [r7, #24]
			uint8_t b = request->body[offset + 6];
 8000536:	8bfb      	ldrh	r3, [r7, #30]
 8000538:	3306      	adds	r3, #6
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	4413      	add	r3, r2
 800053e:	7a1b      	ldrb	r3, [r3, #8]
 8000540:	75fb      	strb	r3, [r7, #23]
			uint8_t w = request->body[offset + 7];
 8000542:	8bfb      	ldrh	r3, [r7, #30]
 8000544:	3307      	adds	r3, #7
 8000546:	68ba      	ldr	r2, [r7, #8]
 8000548:	4413      	add	r3, r2
 800054a:	7a1b      	ldrb	r3, [r3, #8]
 800054c:	75bb      	strb	r3, [r7, #22]

			display->SetPixel(x, y, r, g, b, w);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3308      	adds	r3, #8
 8000554:	681c      	ldr	r4, [r3, #0]
 8000556:	7e78      	ldrb	r0, [r7, #25]
 8000558:	8b7a      	ldrh	r2, [r7, #26]
 800055a:	8bb9      	ldrh	r1, [r7, #28]
 800055c:	7dbb      	ldrb	r3, [r7, #22]
 800055e:	9302      	str	r3, [sp, #8]
 8000560:	7dfb      	ldrb	r3, [r7, #23]
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	7e3b      	ldrb	r3, [r7, #24]
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	4603      	mov	r3, r0
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	47a0      	blx	r4
		for (uint16_t offset = 0; offset < request->bodyLength; offset += 8) {
 800056e:	8bfb      	ldrh	r3, [r7, #30]
 8000570:	3308      	adds	r3, #8
 8000572:	83fb      	strh	r3, [r7, #30]
 8000574:	e7af      	b.n	80004d6 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0x132>
		}

		break;
	}
	case RequestType::Commit: {
		display->SwapBuffer();
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	330c      	adds	r3, #12
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	4798      	blx	r3
		break;
 8000582:	e002      	b.n	800058a <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0x1e6>
		break;
 8000584:	bf00      	nop
 8000586:	e000      	b.n	800058a <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration+0x1e6>
		break;
 8000588:	bf00      	nop
	}
	}
}
 800058a:	bf00      	nop
 800058c:	372c      	adds	r7, #44	; 0x2c
 800058e:	46bd      	mov	sp, r7
 8000590:	bd90      	pop	{r4, r7, pc}
 8000592:	bf00      	nop

08000594 <strcmp>:
 8000594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800059c:	2a01      	cmp	r2, #1
 800059e:	bf28      	it	cs
 80005a0:	429a      	cmpcs	r2, r3
 80005a2:	d0f7      	beq.n	8000594 <strcmp>
 80005a4:	1ad0      	subs	r0, r2, r3
 80005a6:	4770      	bx	lr

080005a8 <strlen>:
 80005a8:	4603      	mov	r3, r0
 80005aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d1fb      	bne.n	80005aa <strlen+0x2>
 80005b2:	1a18      	subs	r0, r3, r0
 80005b4:	3801      	subs	r0, #1
 80005b6:	4770      	bx	lr
	...

080005c0 <memchr>:
 80005c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80005c4:	2a10      	cmp	r2, #16
 80005c6:	db2b      	blt.n	8000620 <memchr+0x60>
 80005c8:	f010 0f07 	tst.w	r0, #7
 80005cc:	d008      	beq.n	80005e0 <memchr+0x20>
 80005ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80005d2:	3a01      	subs	r2, #1
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d02d      	beq.n	8000634 <memchr+0x74>
 80005d8:	f010 0f07 	tst.w	r0, #7
 80005dc:	b342      	cbz	r2, 8000630 <memchr+0x70>
 80005de:	d1f6      	bne.n	80005ce <memchr+0xe>
 80005e0:	b4f0      	push	{r4, r5, r6, r7}
 80005e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80005e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80005ea:	f022 0407 	bic.w	r4, r2, #7
 80005ee:	f07f 0700 	mvns.w	r7, #0
 80005f2:	2300      	movs	r3, #0
 80005f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80005f8:	3c08      	subs	r4, #8
 80005fa:	ea85 0501 	eor.w	r5, r5, r1
 80005fe:	ea86 0601 	eor.w	r6, r6, r1
 8000602:	fa85 f547 	uadd8	r5, r5, r7
 8000606:	faa3 f587 	sel	r5, r3, r7
 800060a:	fa86 f647 	uadd8	r6, r6, r7
 800060e:	faa5 f687 	sel	r6, r5, r7
 8000612:	b98e      	cbnz	r6, 8000638 <memchr+0x78>
 8000614:	d1ee      	bne.n	80005f4 <memchr+0x34>
 8000616:	bcf0      	pop	{r4, r5, r6, r7}
 8000618:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800061c:	f002 0207 	and.w	r2, r2, #7
 8000620:	b132      	cbz	r2, 8000630 <memchr+0x70>
 8000622:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000626:	3a01      	subs	r2, #1
 8000628:	ea83 0301 	eor.w	r3, r3, r1
 800062c:	b113      	cbz	r3, 8000634 <memchr+0x74>
 800062e:	d1f8      	bne.n	8000622 <memchr+0x62>
 8000630:	2000      	movs	r0, #0
 8000632:	4770      	bx	lr
 8000634:	3801      	subs	r0, #1
 8000636:	4770      	bx	lr
 8000638:	2d00      	cmp	r5, #0
 800063a:	bf06      	itte	eq
 800063c:	4635      	moveq	r5, r6
 800063e:	3803      	subeq	r0, #3
 8000640:	3807      	subne	r0, #7
 8000642:	f015 0f01 	tst.w	r5, #1
 8000646:	d107      	bne.n	8000658 <memchr+0x98>
 8000648:	3001      	adds	r0, #1
 800064a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800064e:	bf02      	ittt	eq
 8000650:	3001      	addeq	r0, #1
 8000652:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000656:	3001      	addeq	r0, #1
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	3801      	subs	r0, #1
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_uldivmod>:
 8000660:	b953      	cbnz	r3, 8000678 <__aeabi_uldivmod+0x18>
 8000662:	b94a      	cbnz	r2, 8000678 <__aeabi_uldivmod+0x18>
 8000664:	2900      	cmp	r1, #0
 8000666:	bf08      	it	eq
 8000668:	2800      	cmpeq	r0, #0
 800066a:	bf1c      	itt	ne
 800066c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000670:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000674:	f001 b8c0 	b.w	80017f8 <__aeabi_idiv0>
 8000678:	f1ad 0c08 	sub.w	ip, sp, #8
 800067c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000680:	f000 f806 	bl	8000690 <__udivmoddi4>
 8000684:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068c:	b004      	add	sp, #16
 800068e:	4770      	bx	lr

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	9d08      	ldr	r5, [sp, #32]
 8000696:	4604      	mov	r4, r0
 8000698:	468c      	mov	ip, r1
 800069a:	2b00      	cmp	r3, #0
 800069c:	f040 8083 	bne.w	80007a6 <__udivmoddi4+0x116>
 80006a0:	428a      	cmp	r2, r1
 80006a2:	4617      	mov	r7, r2
 80006a4:	d947      	bls.n	8000736 <__udivmoddi4+0xa6>
 80006a6:	fab2 f282 	clz	r2, r2
 80006aa:	b142      	cbz	r2, 80006be <__udivmoddi4+0x2e>
 80006ac:	f1c2 0020 	rsb	r0, r2, #32
 80006b0:	fa24 f000 	lsr.w	r0, r4, r0
 80006b4:	4091      	lsls	r1, r2
 80006b6:	4097      	lsls	r7, r2
 80006b8:	ea40 0c01 	orr.w	ip, r0, r1
 80006bc:	4094      	lsls	r4, r2
 80006be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006c2:	0c23      	lsrs	r3, r4, #16
 80006c4:	fbbc f6f8 	udiv	r6, ip, r8
 80006c8:	fa1f fe87 	uxth.w	lr, r7
 80006cc:	fb08 c116 	mls	r1, r8, r6, ip
 80006d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006d4:	fb06 f10e 	mul.w	r1, r6, lr
 80006d8:	4299      	cmp	r1, r3
 80006da:	d909      	bls.n	80006f0 <__udivmoddi4+0x60>
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006e2:	f080 8119 	bcs.w	8000918 <__udivmoddi4+0x288>
 80006e6:	4299      	cmp	r1, r3
 80006e8:	f240 8116 	bls.w	8000918 <__udivmoddi4+0x288>
 80006ec:	3e02      	subs	r6, #2
 80006ee:	443b      	add	r3, r7
 80006f0:	1a5b      	subs	r3, r3, r1
 80006f2:	b2a4      	uxth	r4, r4
 80006f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006f8:	fb08 3310 	mls	r3, r8, r0, r3
 80006fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000700:	fb00 fe0e 	mul.w	lr, r0, lr
 8000704:	45a6      	cmp	lr, r4
 8000706:	d909      	bls.n	800071c <__udivmoddi4+0x8c>
 8000708:	193c      	adds	r4, r7, r4
 800070a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800070e:	f080 8105 	bcs.w	800091c <__udivmoddi4+0x28c>
 8000712:	45a6      	cmp	lr, r4
 8000714:	f240 8102 	bls.w	800091c <__udivmoddi4+0x28c>
 8000718:	3802      	subs	r0, #2
 800071a:	443c      	add	r4, r7
 800071c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000720:	eba4 040e 	sub.w	r4, r4, lr
 8000724:	2600      	movs	r6, #0
 8000726:	b11d      	cbz	r5, 8000730 <__udivmoddi4+0xa0>
 8000728:	40d4      	lsrs	r4, r2
 800072a:	2300      	movs	r3, #0
 800072c:	e9c5 4300 	strd	r4, r3, [r5]
 8000730:	4631      	mov	r1, r6
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	b902      	cbnz	r2, 800073a <__udivmoddi4+0xaa>
 8000738:	deff      	udf	#255	; 0xff
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	2a00      	cmp	r2, #0
 8000740:	d150      	bne.n	80007e4 <__udivmoddi4+0x154>
 8000742:	1bcb      	subs	r3, r1, r7
 8000744:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000748:	fa1f f887 	uxth.w	r8, r7
 800074c:	2601      	movs	r6, #1
 800074e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000752:	0c21      	lsrs	r1, r4, #16
 8000754:	fb0e 331c 	mls	r3, lr, ip, r3
 8000758:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800075c:	fb08 f30c 	mul.w	r3, r8, ip
 8000760:	428b      	cmp	r3, r1
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0xe4>
 8000764:	1879      	adds	r1, r7, r1
 8000766:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0xe2>
 800076c:	428b      	cmp	r3, r1
 800076e:	f200 80e9 	bhi.w	8000944 <__udivmoddi4+0x2b4>
 8000772:	4684      	mov	ip, r0
 8000774:	1ac9      	subs	r1, r1, r3
 8000776:	b2a3      	uxth	r3, r4
 8000778:	fbb1 f0fe 	udiv	r0, r1, lr
 800077c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000780:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000784:	fb08 f800 	mul.w	r8, r8, r0
 8000788:	45a0      	cmp	r8, r4
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x10c>
 800078c:	193c      	adds	r4, r7, r4
 800078e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x10a>
 8000794:	45a0      	cmp	r8, r4
 8000796:	f200 80d9 	bhi.w	800094c <__udivmoddi4+0x2bc>
 800079a:	4618      	mov	r0, r3
 800079c:	eba4 0408 	sub.w	r4, r4, r8
 80007a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007a4:	e7bf      	b.n	8000726 <__udivmoddi4+0x96>
 80007a6:	428b      	cmp	r3, r1
 80007a8:	d909      	bls.n	80007be <__udivmoddi4+0x12e>
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	f000 80b1 	beq.w	8000912 <__udivmoddi4+0x282>
 80007b0:	2600      	movs	r6, #0
 80007b2:	e9c5 0100 	strd	r0, r1, [r5]
 80007b6:	4630      	mov	r0, r6
 80007b8:	4631      	mov	r1, r6
 80007ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007be:	fab3 f683 	clz	r6, r3
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d14a      	bne.n	800085c <__udivmoddi4+0x1cc>
 80007c6:	428b      	cmp	r3, r1
 80007c8:	d302      	bcc.n	80007d0 <__udivmoddi4+0x140>
 80007ca:	4282      	cmp	r2, r0
 80007cc:	f200 80b8 	bhi.w	8000940 <__udivmoddi4+0x2b0>
 80007d0:	1a84      	subs	r4, r0, r2
 80007d2:	eb61 0103 	sbc.w	r1, r1, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	468c      	mov	ip, r1
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d0a8      	beq.n	8000730 <__udivmoddi4+0xa0>
 80007de:	e9c5 4c00 	strd	r4, ip, [r5]
 80007e2:	e7a5      	b.n	8000730 <__udivmoddi4+0xa0>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f603 	lsr.w	r6, r0, r3
 80007ec:	4097      	lsls	r7, r2
 80007ee:	fa01 f002 	lsl.w	r0, r1, r2
 80007f2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f6:	40d9      	lsrs	r1, r3
 80007f8:	4330      	orrs	r0, r6
 80007fa:	0c03      	lsrs	r3, r0, #16
 80007fc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000800:	fa1f f887 	uxth.w	r8, r7
 8000804:	fb0e 1116 	mls	r1, lr, r6, r1
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f108 	mul.w	r1, r6, r8
 8000810:	4299      	cmp	r1, r3
 8000812:	fa04 f402 	lsl.w	r4, r4, r2
 8000816:	d909      	bls.n	800082c <__udivmoddi4+0x19c>
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800081e:	f080 808d 	bcs.w	800093c <__udivmoddi4+0x2ac>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 808a 	bls.w	800093c <__udivmoddi4+0x2ac>
 8000828:	3e02      	subs	r6, #2
 800082a:	443b      	add	r3, r7
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b281      	uxth	r1, r0
 8000830:	fbb3 f0fe 	udiv	r0, r3, lr
 8000834:	fb0e 3310 	mls	r3, lr, r0, r3
 8000838:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800083c:	fb00 f308 	mul.w	r3, r0, r8
 8000840:	428b      	cmp	r3, r1
 8000842:	d907      	bls.n	8000854 <__udivmoddi4+0x1c4>
 8000844:	1879      	adds	r1, r7, r1
 8000846:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800084a:	d273      	bcs.n	8000934 <__udivmoddi4+0x2a4>
 800084c:	428b      	cmp	r3, r1
 800084e:	d971      	bls.n	8000934 <__udivmoddi4+0x2a4>
 8000850:	3802      	subs	r0, #2
 8000852:	4439      	add	r1, r7
 8000854:	1acb      	subs	r3, r1, r3
 8000856:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800085a:	e778      	b.n	800074e <__udivmoddi4+0xbe>
 800085c:	f1c6 0c20 	rsb	ip, r6, #32
 8000860:	fa03 f406 	lsl.w	r4, r3, r6
 8000864:	fa22 f30c 	lsr.w	r3, r2, ip
 8000868:	431c      	orrs	r4, r3
 800086a:	fa20 f70c 	lsr.w	r7, r0, ip
 800086e:	fa01 f306 	lsl.w	r3, r1, r6
 8000872:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000876:	fa21 f10c 	lsr.w	r1, r1, ip
 800087a:	431f      	orrs	r7, r3
 800087c:	0c3b      	lsrs	r3, r7, #16
 800087e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000882:	fa1f f884 	uxth.w	r8, r4
 8000886:	fb0e 1119 	mls	r1, lr, r9, r1
 800088a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800088e:	fb09 fa08 	mul.w	sl, r9, r8
 8000892:	458a      	cmp	sl, r1
 8000894:	fa02 f206 	lsl.w	r2, r2, r6
 8000898:	fa00 f306 	lsl.w	r3, r0, r6
 800089c:	d908      	bls.n	80008b0 <__udivmoddi4+0x220>
 800089e:	1861      	adds	r1, r4, r1
 80008a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80008a4:	d248      	bcs.n	8000938 <__udivmoddi4+0x2a8>
 80008a6:	458a      	cmp	sl, r1
 80008a8:	d946      	bls.n	8000938 <__udivmoddi4+0x2a8>
 80008aa:	f1a9 0902 	sub.w	r9, r9, #2
 80008ae:	4421      	add	r1, r4
 80008b0:	eba1 010a 	sub.w	r1, r1, sl
 80008b4:	b2bf      	uxth	r7, r7
 80008b6:	fbb1 f0fe 	udiv	r0, r1, lr
 80008ba:	fb0e 1110 	mls	r1, lr, r0, r1
 80008be:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008c2:	fb00 f808 	mul.w	r8, r0, r8
 80008c6:	45b8      	cmp	r8, r7
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x24a>
 80008ca:	19e7      	adds	r7, r4, r7
 80008cc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008d0:	d22e      	bcs.n	8000930 <__udivmoddi4+0x2a0>
 80008d2:	45b8      	cmp	r8, r7
 80008d4:	d92c      	bls.n	8000930 <__udivmoddi4+0x2a0>
 80008d6:	3802      	subs	r0, #2
 80008d8:	4427      	add	r7, r4
 80008da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008de:	eba7 0708 	sub.w	r7, r7, r8
 80008e2:	fba0 8902 	umull	r8, r9, r0, r2
 80008e6:	454f      	cmp	r7, r9
 80008e8:	46c6      	mov	lr, r8
 80008ea:	4649      	mov	r1, r9
 80008ec:	d31a      	bcc.n	8000924 <__udivmoddi4+0x294>
 80008ee:	d017      	beq.n	8000920 <__udivmoddi4+0x290>
 80008f0:	b15d      	cbz	r5, 800090a <__udivmoddi4+0x27a>
 80008f2:	ebb3 020e 	subs.w	r2, r3, lr
 80008f6:	eb67 0701 	sbc.w	r7, r7, r1
 80008fa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008fe:	40f2      	lsrs	r2, r6
 8000900:	ea4c 0202 	orr.w	r2, ip, r2
 8000904:	40f7      	lsrs	r7, r6
 8000906:	e9c5 2700 	strd	r2, r7, [r5]
 800090a:	2600      	movs	r6, #0
 800090c:	4631      	mov	r1, r6
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	462e      	mov	r6, r5
 8000914:	4628      	mov	r0, r5
 8000916:	e70b      	b.n	8000730 <__udivmoddi4+0xa0>
 8000918:	4606      	mov	r6, r0
 800091a:	e6e9      	b.n	80006f0 <__udivmoddi4+0x60>
 800091c:	4618      	mov	r0, r3
 800091e:	e6fd      	b.n	800071c <__udivmoddi4+0x8c>
 8000920:	4543      	cmp	r3, r8
 8000922:	d2e5      	bcs.n	80008f0 <__udivmoddi4+0x260>
 8000924:	ebb8 0e02 	subs.w	lr, r8, r2
 8000928:	eb69 0104 	sbc.w	r1, r9, r4
 800092c:	3801      	subs	r0, #1
 800092e:	e7df      	b.n	80008f0 <__udivmoddi4+0x260>
 8000930:	4608      	mov	r0, r1
 8000932:	e7d2      	b.n	80008da <__udivmoddi4+0x24a>
 8000934:	4660      	mov	r0, ip
 8000936:	e78d      	b.n	8000854 <__udivmoddi4+0x1c4>
 8000938:	4681      	mov	r9, r0
 800093a:	e7b9      	b.n	80008b0 <__udivmoddi4+0x220>
 800093c:	4666      	mov	r6, ip
 800093e:	e775      	b.n	800082c <__udivmoddi4+0x19c>
 8000940:	4630      	mov	r0, r6
 8000942:	e74a      	b.n	80007da <__udivmoddi4+0x14a>
 8000944:	f1ac 0c02 	sub.w	ip, ip, #2
 8000948:	4439      	add	r1, r7
 800094a:	e713      	b.n	8000774 <__udivmoddi4+0xe4>
 800094c:	3802      	subs	r0, #2
 800094e:	443c      	add	r4, r7
 8000950:	e724      	b.n	800079c <__udivmoddi4+0x10c>
 8000952:	bf00      	nop

08000954 <selfrel_offset31>:
 8000954:	6803      	ldr	r3, [r0, #0]
 8000956:	005a      	lsls	r2, r3, #1
 8000958:	bf4c      	ite	mi
 800095a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800095e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000962:	4418      	add	r0, r3
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop

08000968 <search_EIT_table>:
 8000968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800096c:	b329      	cbz	r1, 80009ba <search_EIT_table+0x52>
 800096e:	1e4f      	subs	r7, r1, #1
 8000970:	4604      	mov	r4, r0
 8000972:	4615      	mov	r5, r2
 8000974:	463e      	mov	r6, r7
 8000976:	f04f 0800 	mov.w	r8, #0
 800097a:	eb08 0106 	add.w	r1, r8, r6
 800097e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000982:	1049      	asrs	r1, r1, #1
 8000984:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000988:	4648      	mov	r0, r9
 800098a:	f7ff ffe3 	bl	8000954 <selfrel_offset31>
 800098e:	4603      	mov	r3, r0
 8000990:	00c8      	lsls	r0, r1, #3
 8000992:	3008      	adds	r0, #8
 8000994:	428f      	cmp	r7, r1
 8000996:	4420      	add	r0, r4
 8000998:	d009      	beq.n	80009ae <search_EIT_table+0x46>
 800099a:	42ab      	cmp	r3, r5
 800099c:	d809      	bhi.n	80009b2 <search_EIT_table+0x4a>
 800099e:	f7ff ffd9 	bl	8000954 <selfrel_offset31>
 80009a2:	3801      	subs	r0, #1
 80009a4:	42a8      	cmp	r0, r5
 80009a6:	d20a      	bcs.n	80009be <search_EIT_table+0x56>
 80009a8:	f101 0801 	add.w	r8, r1, #1
 80009ac:	e7e5      	b.n	800097a <search_EIT_table+0x12>
 80009ae:	42ab      	cmp	r3, r5
 80009b0:	d905      	bls.n	80009be <search_EIT_table+0x56>
 80009b2:	4588      	cmp	r8, r1
 80009b4:	d001      	beq.n	80009ba <search_EIT_table+0x52>
 80009b6:	1e4e      	subs	r6, r1, #1
 80009b8:	e7df      	b.n	800097a <search_EIT_table+0x12>
 80009ba:	f04f 0900 	mov.w	r9, #0
 80009be:	4648      	mov	r0, r9
 80009c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080009c4 <__gnu_unwind_get_pr_addr>:
 80009c4:	2801      	cmp	r0, #1
 80009c6:	d007      	beq.n	80009d8 <__gnu_unwind_get_pr_addr+0x14>
 80009c8:	2802      	cmp	r0, #2
 80009ca:	d007      	beq.n	80009dc <__gnu_unwind_get_pr_addr+0x18>
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__gnu_unwind_get_pr_addr+0x1c>)
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf0c      	ite	eq
 80009d2:	4618      	moveq	r0, r3
 80009d4:	2000      	movne	r0, #0
 80009d6:	4770      	bx	lr
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <__gnu_unwind_get_pr_addr+0x20>)
 80009da:	4770      	bx	lr
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <__gnu_unwind_get_pr_addr+0x24>)
 80009de:	4770      	bx	lr
 80009e0:	08001089 	.word	0x08001089
 80009e4:	0800108d 	.word	0x0800108d
 80009e8:	08001091 	.word	0x08001091

080009ec <get_eit_entry>:
 80009ec:	b530      	push	{r4, r5, lr}
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <get_eit_entry+0x90>)
 80009f0:	b083      	sub	sp, #12
 80009f2:	4604      	mov	r4, r0
 80009f4:	1e8d      	subs	r5, r1, #2
 80009f6:	b33b      	cbz	r3, 8000a48 <get_eit_entry+0x5c>
 80009f8:	a901      	add	r1, sp, #4
 80009fa:	4628      	mov	r0, r5
 80009fc:	f3af 8000 	nop.w
 8000a00:	b1e8      	cbz	r0, 8000a3e <get_eit_entry+0x52>
 8000a02:	9901      	ldr	r1, [sp, #4]
 8000a04:	462a      	mov	r2, r5
 8000a06:	f7ff ffaf 	bl	8000968 <search_EIT_table>
 8000a0a:	4601      	mov	r1, r0
 8000a0c:	b1b8      	cbz	r0, 8000a3e <get_eit_entry+0x52>
 8000a0e:	f7ff ffa1 	bl	8000954 <selfrel_offset31>
 8000a12:	684b      	ldr	r3, [r1, #4]
 8000a14:	64a0      	str	r0, [r4, #72]	; 0x48
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d02b      	beq.n	8000a72 <get_eit_entry+0x86>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f101 0004 	add.w	r0, r1, #4
 8000a20:	db23      	blt.n	8000a6a <get_eit_entry+0x7e>
 8000a22:	f7ff ff97 	bl	8000954 <selfrel_offset31>
 8000a26:	2300      	movs	r3, #0
 8000a28:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000a2c:	6803      	ldr	r3, [r0, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db10      	blt.n	8000a54 <get_eit_entry+0x68>
 8000a32:	f7ff ff8f 	bl	8000954 <selfrel_offset31>
 8000a36:	6120      	str	r0, [r4, #16]
 8000a38:	2000      	movs	r0, #0
 8000a3a:	b003      	add	sp, #12
 8000a3c:	bd30      	pop	{r4, r5, pc}
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2009      	movs	r0, #9
 8000a42:	6123      	str	r3, [r4, #16]
 8000a44:	b003      	add	sp, #12
 8000a46:	bd30      	pop	{r4, r5, pc}
 8000a48:	490d      	ldr	r1, [pc, #52]	; (8000a80 <get_eit_entry+0x94>)
 8000a4a:	480e      	ldr	r0, [pc, #56]	; (8000a84 <get_eit_entry+0x98>)
 8000a4c:	1a09      	subs	r1, r1, r0
 8000a4e:	10c9      	asrs	r1, r1, #3
 8000a50:	9101      	str	r1, [sp, #4]
 8000a52:	e7d7      	b.n	8000a04 <get_eit_entry+0x18>
 8000a54:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000a58:	f7ff ffb4 	bl	80009c4 <__gnu_unwind_get_pr_addr>
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	6120      	str	r0, [r4, #16]
 8000a60:	bf14      	ite	ne
 8000a62:	2000      	movne	r0, #0
 8000a64:	2009      	moveq	r0, #9
 8000a66:	b003      	add	sp, #12
 8000a68:	bd30      	pop	{r4, r5, pc}
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000a70:	e7dc      	b.n	8000a2c <get_eit_entry+0x40>
 8000a72:	2300      	movs	r3, #0
 8000a74:	6123      	str	r3, [r4, #16]
 8000a76:	2005      	movs	r0, #5
 8000a78:	e7df      	b.n	8000a3a <get_eit_entry+0x4e>
 8000a7a:	bf00      	nop
 8000a7c:	00000000 	.word	0x00000000
 8000a80:	08008008 	.word	0x08008008
 8000a84:	08007f40 	.word	0x08007f40

08000a88 <restore_non_core_regs>:
 8000a88:	6803      	ldr	r3, [r0, #0]
 8000a8a:	07da      	lsls	r2, r3, #31
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	4604      	mov	r4, r0
 8000a90:	d406      	bmi.n	8000aa0 <restore_non_core_regs+0x18>
 8000a92:	079b      	lsls	r3, r3, #30
 8000a94:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000a98:	d509      	bpl.n	8000aae <restore_non_core_regs+0x26>
 8000a9a:	f000 fc4b 	bl	8001334 <__gnu_Unwind_Restore_VFP_D>
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	0759      	lsls	r1, r3, #29
 8000aa2:	d509      	bpl.n	8000ab8 <restore_non_core_regs+0x30>
 8000aa4:	071a      	lsls	r2, r3, #28
 8000aa6:	d50e      	bpl.n	8000ac6 <restore_non_core_regs+0x3e>
 8000aa8:	06db      	lsls	r3, r3, #27
 8000aaa:	d513      	bpl.n	8000ad4 <restore_non_core_regs+0x4c>
 8000aac:	bd10      	pop	{r4, pc}
 8000aae:	f000 fc39 	bl	8001324 <__gnu_Unwind_Restore_VFP>
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	0759      	lsls	r1, r3, #29
 8000ab6:	d4f5      	bmi.n	8000aa4 <restore_non_core_regs+0x1c>
 8000ab8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000abc:	f000 fc42 	bl	8001344 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	071a      	lsls	r2, r3, #28
 8000ac4:	d4f0      	bmi.n	8000aa8 <restore_non_core_regs+0x20>
 8000ac6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000aca:	f000 fc43 	bl	8001354 <__gnu_Unwind_Restore_WMMXD>
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	06db      	lsls	r3, r3, #27
 8000ad2:	d4eb      	bmi.n	8000aac <restore_non_core_regs+0x24>
 8000ad4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000adc:	f000 bc7e 	b.w	80013dc <__gnu_Unwind_Restore_WMMXC>

08000ae0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	6800      	ldr	r0, [r0, #0]
 8000ae4:	b100      	cbz	r0, 8000ae8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8000ae6:	4418      	add	r0, r3
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__gnu_unwind_24bit.isra.0>:
 8000aec:	2009      	movs	r0, #9
 8000aee:	4770      	bx	lr

08000af0 <_Unwind_DebugHook>:
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <unwind_phase2>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	4604      	mov	r4, r0
 8000af8:	460e      	mov	r6, r1
 8000afa:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000afc:	4620      	mov	r0, r4
 8000afe:	f7ff ff75 	bl	80009ec <get_eit_entry>
 8000b02:	4605      	mov	r5, r0
 8000b04:	b988      	cbnz	r0, 8000b2a <unwind_phase2+0x36>
 8000b06:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000b08:	6163      	str	r3, [r4, #20]
 8000b0a:	4632      	mov	r2, r6
 8000b0c:	6923      	ldr	r3, [r4, #16]
 8000b0e:	4621      	mov	r1, r4
 8000b10:	2001      	movs	r0, #1
 8000b12:	4798      	blx	r3
 8000b14:	2808      	cmp	r0, #8
 8000b16:	d0f0      	beq.n	8000afa <unwind_phase2+0x6>
 8000b18:	2807      	cmp	r0, #7
 8000b1a:	d106      	bne.n	8000b2a <unwind_phase2+0x36>
 8000b1c:	4628      	mov	r0, r5
 8000b1e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000b20:	f7ff ffe6 	bl	8000af0 <_Unwind_DebugHook>
 8000b24:	1d30      	adds	r0, r6, #4
 8000b26:	f000 fbf1 	bl	800130c <__restore_core_regs>
 8000b2a:	f006 fbe1 	bl	80072f0 <abort>
 8000b2e:	bf00      	nop

08000b30 <unwind_phase2_forced>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	1d0d      	adds	r5, r1, #4
 8000b36:	4606      	mov	r6, r0
 8000b38:	4614      	mov	r4, r2
 8000b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000b40:	f10d 0c0c 	add.w	ip, sp, #12
 8000b44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000b54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b58:	ad02      	add	r5, sp, #8
 8000b5a:	68f7      	ldr	r7, [r6, #12]
 8000b5c:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8000b60:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000b64:	2300      	movs	r3, #0
 8000b66:	602b      	str	r3, [r5, #0]
 8000b68:	e021      	b.n	8000bae <unwind_phase2_forced+0x7e>
 8000b6a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000b6c:	6173      	str	r3, [r6, #20]
 8000b6e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b72:	4629      	mov	r1, r5
 8000b74:	a87a      	add	r0, sp, #488	; 0x1e8
 8000b76:	f006 fbfd 	bl	8007374 <memcpy>
 8000b7a:	6933      	ldr	r3, [r6, #16]
 8000b7c:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000b7e:	4631      	mov	r1, r6
 8000b80:	4650      	mov	r0, sl
 8000b82:	4798      	blx	r3
 8000b84:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000b86:	e9cd 5800 	strd	r5, r8, [sp]
 8000b8a:	4621      	mov	r1, r4
 8000b8c:	646b      	str	r3, [r5, #68]	; 0x44
 8000b8e:	4681      	mov	r9, r0
 8000b90:	4633      	mov	r3, r6
 8000b92:	4632      	mov	r2, r6
 8000b94:	2001      	movs	r0, #1
 8000b96:	47b8      	blx	r7
 8000b98:	4604      	mov	r4, r0
 8000b9a:	b9e8      	cbnz	r0, 8000bd8 <unwind_phase2_forced+0xa8>
 8000b9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000ba0:	a97a      	add	r1, sp, #488	; 0x1e8
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	f006 fbe6 	bl	8007374 <memcpy>
 8000ba8:	f1b9 0f08 	cmp.w	r9, #8
 8000bac:	d11b      	bne.n	8000be6 <unwind_phase2_forced+0xb6>
 8000bae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	f7ff ff1b 	bl	80009ec <get_eit_entry>
 8000bb6:	3409      	adds	r4, #9
 8000bb8:	fa5f fa84 	uxtb.w	sl, r4
 8000bbc:	4681      	mov	r9, r0
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	d0d3      	beq.n	8000b6a <unwind_phase2_forced+0x3a>
 8000bc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000bc4:	f04a 0110 	orr.w	r1, sl, #16
 8000bc8:	e9cd 5800 	strd	r5, r8, [sp]
 8000bcc:	4632      	mov	r2, r6
 8000bce:	646b      	str	r3, [r5, #68]	; 0x44
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	4633      	mov	r3, r6
 8000bd4:	47b8      	blx	r7
 8000bd6:	b108      	cbz	r0, 8000bdc <unwind_phase2_forced+0xac>
 8000bd8:	f04f 0909 	mov.w	r9, #9
 8000bdc:	4648      	mov	r0, r9
 8000bde:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	f1b9 0f07 	cmp.w	r9, #7
 8000bea:	d1f5      	bne.n	8000bd8 <unwind_phase2_forced+0xa8>
 8000bec:	4620      	mov	r0, r4
 8000bee:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000bf0:	f7ff ff7e 	bl	8000af0 <_Unwind_DebugHook>
 8000bf4:	a803      	add	r0, sp, #12
 8000bf6:	f000 fb89 	bl	800130c <__restore_core_regs>
 8000bfa:	bf00      	nop

08000bfc <_Unwind_GetCFA>:
 8000bfc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000bfe:	4770      	bx	lr

08000c00 <__gnu_Unwind_RaiseException>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000c04:	640b      	str	r3, [r1, #64]	; 0x40
 8000c06:	1d0e      	adds	r6, r1, #4
 8000c08:	460f      	mov	r7, r1
 8000c0a:	4605      	mov	r5, r0
 8000c0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c0e:	b0f9      	sub	sp, #484	; 0x1e4
 8000c10:	ac01      	add	r4, sp, #4
 8000c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c20:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c28:	9600      	str	r6, [sp, #0]
 8000c2a:	e006      	b.n	8000c3a <__gnu_Unwind_RaiseException+0x3a>
 8000c2c:	692b      	ldr	r3, [r5, #16]
 8000c2e:	466a      	mov	r2, sp
 8000c30:	4629      	mov	r1, r5
 8000c32:	4798      	blx	r3
 8000c34:	2808      	cmp	r0, #8
 8000c36:	4604      	mov	r4, r0
 8000c38:	d108      	bne.n	8000c4c <__gnu_Unwind_RaiseException+0x4c>
 8000c3a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	f7ff fed5 	bl	80009ec <get_eit_entry>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	d0f2      	beq.n	8000c2c <__gnu_Unwind_RaiseException+0x2c>
 8000c46:	2009      	movs	r0, #9
 8000c48:	b079      	add	sp, #484	; 0x1e4
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	4668      	mov	r0, sp
 8000c4e:	f7ff ff1b 	bl	8000a88 <restore_non_core_regs>
 8000c52:	2c06      	cmp	r4, #6
 8000c54:	d1f7      	bne.n	8000c46 <__gnu_Unwind_RaiseException+0x46>
 8000c56:	4639      	mov	r1, r7
 8000c58:	4628      	mov	r0, r5
 8000c5a:	f7ff ff4b 	bl	8000af4 <unwind_phase2>
 8000c5e:	bf00      	nop

08000c60 <__gnu_Unwind_ForcedUnwind>:
 8000c60:	b430      	push	{r4, r5}
 8000c62:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000c64:	60c1      	str	r1, [r0, #12]
 8000c66:	6182      	str	r2, [r0, #24]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	641d      	str	r5, [r3, #64]	; 0x40
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	bc30      	pop	{r4, r5}
 8000c70:	e75e      	b.n	8000b30 <unwind_phase2_forced>
 8000c72:	bf00      	nop

08000c74 <__gnu_Unwind_Resume>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	68c6      	ldr	r6, [r0, #12]
 8000c78:	6943      	ldr	r3, [r0, #20]
 8000c7a:	640b      	str	r3, [r1, #64]	; 0x40
 8000c7c:	b9ae      	cbnz	r6, 8000caa <__gnu_Unwind_Resume+0x36>
 8000c7e:	6903      	ldr	r3, [r0, #16]
 8000c80:	460a      	mov	r2, r1
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	4601      	mov	r1, r0
 8000c88:	2002      	movs	r0, #2
 8000c8a:	4798      	blx	r3
 8000c8c:	2807      	cmp	r0, #7
 8000c8e:	d005      	beq.n	8000c9c <__gnu_Unwind_Resume+0x28>
 8000c90:	2808      	cmp	r0, #8
 8000c92:	d10f      	bne.n	8000cb4 <__gnu_Unwind_Resume+0x40>
 8000c94:	4629      	mov	r1, r5
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff ff2c 	bl	8000af4 <unwind_phase2>
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000ca0:	f7ff ff26 	bl	8000af0 <_Unwind_DebugHook>
 8000ca4:	1d28      	adds	r0, r5, #4
 8000ca6:	f000 fb31 	bl	800130c <__restore_core_regs>
 8000caa:	2201      	movs	r2, #1
 8000cac:	f7ff ff40 	bl	8000b30 <unwind_phase2_forced>
 8000cb0:	f006 fb1e 	bl	80072f0 <abort>
 8000cb4:	f006 fb1c 	bl	80072f0 <abort>

08000cb8 <__gnu_Unwind_Resume_or_Rethrow>:
 8000cb8:	68c2      	ldr	r2, [r0, #12]
 8000cba:	b11a      	cbz	r2, 8000cc4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000cbc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000cbe:	640a      	str	r2, [r1, #64]	; 0x40
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e735      	b.n	8000b30 <unwind_phase2_forced>
 8000cc4:	e79c      	b.n	8000c00 <__gnu_Unwind_RaiseException>
 8000cc6:	bf00      	nop

08000cc8 <_Unwind_Complete>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <_Unwind_DeleteException>:
 8000ccc:	6883      	ldr	r3, [r0, #8]
 8000cce:	4601      	mov	r1, r0
 8000cd0:	b10b      	cbz	r3, 8000cd6 <_Unwind_DeleteException+0xa>
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	4718      	bx	r3
 8000cd6:	4770      	bx	lr

08000cd8 <_Unwind_VRS_Get>:
 8000cd8:	2901      	cmp	r1, #1
 8000cda:	d012      	beq.n	8000d02 <_Unwind_VRS_Get+0x2a>
 8000cdc:	d809      	bhi.n	8000cf2 <_Unwind_VRS_Get+0x1a>
 8000cde:	b973      	cbnz	r3, 8000cfe <_Unwind_VRS_Get+0x26>
 8000ce0:	2a0f      	cmp	r2, #15
 8000ce2:	d80c      	bhi.n	8000cfe <_Unwind_VRS_Get+0x26>
 8000ce4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	6853      	ldr	r3, [r2, #4]
 8000cec:	9a00      	ldr	r2, [sp, #0]
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4770      	bx	lr
 8000cf2:	3903      	subs	r1, #3
 8000cf4:	2901      	cmp	r1, #1
 8000cf6:	bf94      	ite	ls
 8000cf8:	2001      	movls	r0, #1
 8000cfa:	2002      	movhi	r0, #2
 8000cfc:	4770      	bx	lr
 8000cfe:	2002      	movs	r0, #2
 8000d00:	4770      	bx	lr
 8000d02:	4608      	mov	r0, r1
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <_Unwind_GetGR>:
 8000d08:	b510      	push	{r4, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	ac03      	add	r4, sp, #12
 8000d10:	460a      	mov	r2, r1
 8000d12:	9400      	str	r4, [sp, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f7ff ffdf 	bl	8000cd8 <_Unwind_VRS_Get>
 8000d1a:	9803      	ldr	r0, [sp, #12]
 8000d1c:	b004      	add	sp, #16
 8000d1e:	bd10      	pop	{r4, pc}

08000d20 <_Unwind_VRS_Set>:
 8000d20:	2901      	cmp	r1, #1
 8000d22:	d012      	beq.n	8000d4a <_Unwind_VRS_Set+0x2a>
 8000d24:	d809      	bhi.n	8000d3a <_Unwind_VRS_Set+0x1a>
 8000d26:	b973      	cbnz	r3, 8000d46 <_Unwind_VRS_Set+0x26>
 8000d28:	2a0f      	cmp	r2, #15
 8000d2a:	d80c      	bhi.n	8000d46 <_Unwind_VRS_Set+0x26>
 8000d2c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000d30:	9a00      	ldr	r2, [sp, #0]
 8000d32:	6812      	ldr	r2, [r2, #0]
 8000d34:	6042      	str	r2, [r0, #4]
 8000d36:	4618      	mov	r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	3903      	subs	r1, #3
 8000d3c:	2901      	cmp	r1, #1
 8000d3e:	bf94      	ite	ls
 8000d40:	2001      	movls	r0, #1
 8000d42:	2002      	movhi	r0, #2
 8000d44:	4770      	bx	lr
 8000d46:	2002      	movs	r0, #2
 8000d48:	4770      	bx	lr
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <_Unwind_SetGR>:
 8000d50:	b510      	push	{r4, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	2300      	movs	r3, #0
 8000d56:	ac03      	add	r4, sp, #12
 8000d58:	9203      	str	r2, [sp, #12]
 8000d5a:	9400      	str	r4, [sp, #0]
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f7ff ffde 	bl	8000d20 <_Unwind_VRS_Set>
 8000d64:	b004      	add	sp, #16
 8000d66:	bd10      	pop	{r4, pc}

08000d68 <__gnu_Unwind_Backtrace>:
 8000d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	1d15      	adds	r5, r2, #4
 8000d70:	468c      	mov	ip, r1
 8000d72:	4606      	mov	r6, r0
 8000d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d76:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000d7a:	ac17      	add	r4, sp, #92	; 0x5c
 8000d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d8a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000d8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d92:	4665      	mov	r5, ip
 8000d94:	9716      	str	r7, [sp, #88]	; 0x58
 8000d96:	e010      	b.n	8000dba <__gnu_Unwind_Backtrace+0x52>
 8000d98:	f7ff ffda 	bl	8000d50 <_Unwind_SetGR>
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	a816      	add	r0, sp, #88	; 0x58
 8000da0:	47b0      	blx	r6
 8000da2:	4603      	mov	r3, r0
 8000da4:	aa16      	add	r2, sp, #88	; 0x58
 8000da6:	4669      	mov	r1, sp
 8000da8:	2008      	movs	r0, #8
 8000daa:	b983      	cbnz	r3, 8000dce <__gnu_Unwind_Backtrace+0x66>
 8000dac:	9b04      	ldr	r3, [sp, #16]
 8000dae:	4798      	blx	r3
 8000db0:	2805      	cmp	r0, #5
 8000db2:	4604      	mov	r4, r0
 8000db4:	d00c      	beq.n	8000dd0 <__gnu_Unwind_Backtrace+0x68>
 8000db6:	2809      	cmp	r0, #9
 8000db8:	d009      	beq.n	8000dce <__gnu_Unwind_Backtrace+0x66>
 8000dba:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000dbc:	4668      	mov	r0, sp
 8000dbe:	f7ff fe15 	bl	80009ec <get_eit_entry>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	466a      	mov	r2, sp
 8000dc6:	210c      	movs	r1, #12
 8000dc8:	a816      	add	r0, sp, #88	; 0x58
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0e4      	beq.n	8000d98 <__gnu_Unwind_Backtrace+0x30>
 8000dce:	2409      	movs	r4, #9
 8000dd0:	a816      	add	r0, sp, #88	; 0x58
 8000dd2:	f7ff fe59 	bl	8000a88 <restore_non_core_regs>
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dde:	bf00      	nop

08000de0 <__gnu_unwind_pr_common>:
 8000de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de4:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	460d      	mov	r5, r1
 8000dea:	f854 1b04 	ldr.w	r1, [r4], #4
 8000dee:	9406      	str	r4, [sp, #24]
 8000df0:	4617      	mov	r7, r2
 8000df2:	f000 0803 	and.w	r8, r0, #3
 8000df6:	461e      	mov	r6, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d079      	beq.n	8000ef0 <__gnu_unwind_pr_common+0x110>
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	0409      	lsls	r1, r1, #16
 8000e02:	f88d 301d 	strb.w	r3, [sp, #29]
 8000e06:	2302      	movs	r3, #2
 8000e08:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000e0c:	9105      	str	r1, [sp, #20]
 8000e0e:	f88d 301c 	strb.w	r3, [sp, #28]
 8000e12:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000e14:	f1b8 0f02 	cmp.w	r8, #2
 8000e18:	bf08      	it	eq
 8000e1a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000e1c:	f013 0301 	ands.w	r3, r3, #1
 8000e20:	d00c      	beq.n	8000e3c <__gnu_unwind_pr_common+0x5c>
 8000e22:	4638      	mov	r0, r7
 8000e24:	a905      	add	r1, sp, #20
 8000e26:	f000 fb73 	bl	8001510 <__gnu_unwind_execute>
 8000e2a:	b918      	cbnz	r0, 8000e34 <__gnu_unwind_pr_common+0x54>
 8000e2c:	2008      	movs	r0, #8
 8000e2e:	b009      	add	sp, #36	; 0x24
 8000e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e34:	2009      	movs	r0, #9
 8000e36:	b009      	add	sp, #36	; 0x24
 8000e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e3c:	f8d4 a000 	ldr.w	sl, [r4]
 8000e40:	f1ba 0f00 	cmp.w	sl, #0
 8000e44:	d0ed      	beq.n	8000e22 <__gnu_unwind_pr_common+0x42>
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	f000 0308 	and.w	r3, r0, #8
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	2e02      	cmp	r6, #2
 8000e50:	d04a      	beq.n	8000ee8 <__gnu_unwind_pr_common+0x108>
 8000e52:	f8b4 a000 	ldrh.w	sl, [r4]
 8000e56:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000e5a:	3404      	adds	r4, #4
 8000e5c:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000e5e:	f029 0b01 	bic.w	fp, r9, #1
 8000e62:	210f      	movs	r1, #15
 8000e64:	4638      	mov	r0, r7
 8000e66:	4493      	add	fp, r2
 8000e68:	f7ff ff4e 	bl	8000d08 <_Unwind_GetGR>
 8000e6c:	4583      	cmp	fp, r0
 8000e6e:	d839      	bhi.n	8000ee4 <__gnu_unwind_pr_common+0x104>
 8000e70:	f02a 0201 	bic.w	r2, sl, #1
 8000e74:	445a      	add	r2, fp
 8000e76:	4282      	cmp	r2, r0
 8000e78:	bf94      	ite	ls
 8000e7a:	2000      	movls	r0, #0
 8000e7c:	2001      	movhi	r0, #1
 8000e7e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	f00a 0a01 	and.w	sl, sl, #1
 8000e8a:	ea43 030a 	orr.w	r3, r3, sl
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d049      	beq.n	8000f26 <__gnu_unwind_pr_common+0x146>
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d032      	beq.n	8000efc <__gnu_unwind_pr_common+0x11c>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1cc      	bne.n	8000e34 <__gnu_unwind_pr_common+0x54>
 8000e9a:	f1b8 0f00 	cmp.w	r8, #0
 8000e9e:	d002      	beq.n	8000ea6 <__gnu_unwind_pr_common+0xc6>
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	f040 80cd 	bne.w	8001040 <__gnu_unwind_pr_common+0x260>
 8000ea6:	3404      	adds	r4, #4
 8000ea8:	f8d4 a000 	ldr.w	sl, [r4]
 8000eac:	f1ba 0f00 	cmp.w	sl, #0
 8000eb0:	d1cd      	bne.n	8000e4e <__gnu_unwind_pr_common+0x6e>
 8000eb2:	a905      	add	r1, sp, #20
 8000eb4:	4638      	mov	r0, r7
 8000eb6:	f000 fb2b 	bl	8001510 <__gnu_unwind_execute>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d1ba      	bne.n	8000e34 <__gnu_unwind_pr_common+0x54>
 8000ebe:	9b01      	ldr	r3, [sp, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0b3      	beq.n	8000e2c <__gnu_unwind_pr_common+0x4c>
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	4638      	mov	r0, r7
 8000ec8:	f7ff ff1e 	bl	8000d08 <_Unwind_GetGR>
 8000ecc:	210e      	movs	r1, #14
 8000ece:	4602      	mov	r2, r0
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	f7ff ff3d 	bl	8000d50 <_Unwind_SetGR>
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	4a6a      	ldr	r2, [pc, #424]	; (8001084 <__gnu_unwind_pr_common+0x2a4>)
 8000eda:	210f      	movs	r1, #15
 8000edc:	f7ff ff38 	bl	8000d50 <_Unwind_SetGR>
 8000ee0:	2007      	movs	r0, #7
 8000ee2:	e7a8      	b.n	8000e36 <__gnu_unwind_pr_common+0x56>
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e7ca      	b.n	8000e7e <__gnu_unwind_pr_common+0x9e>
 8000ee8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000eec:	3408      	adds	r4, #8
 8000eee:	e7b5      	b.n	8000e5c <__gnu_unwind_pr_common+0x7c>
 8000ef0:	0209      	lsls	r1, r1, #8
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	9105      	str	r1, [sp, #20]
 8000ef6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000efa:	e78a      	b.n	8000e12 <__gnu_unwind_pr_common+0x32>
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000f02:	f1b8 0f00 	cmp.w	r8, #0
 8000f06:	d145      	bne.n	8000f94 <__gnu_unwind_pr_common+0x1b4>
 8000f08:	b128      	cbz	r0, 8000f16 <__gnu_unwind_pr_common+0x136>
 8000f0a:	9a02      	ldr	r2, [sp, #8]
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	d05c      	beq.n	8000fca <__gnu_unwind_pr_common+0x1ea>
 8000f10:	f1bb 0f00 	cmp.w	fp, #0
 8000f14:	d074      	beq.n	8001000 <__gnu_unwind_pr_common+0x220>
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da00      	bge.n	8000f1c <__gnu_unwind_pr_common+0x13c>
 8000f1a:	3404      	adds	r4, #4
 8000f1c:	f10b 0b01 	add.w	fp, fp, #1
 8000f20:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000f24:	e7c0      	b.n	8000ea8 <__gnu_unwind_pr_common+0xc8>
 8000f26:	f1b8 0f00 	cmp.w	r8, #0
 8000f2a:	d119      	bne.n	8000f60 <__gnu_unwind_pr_common+0x180>
 8000f2c:	b1b0      	cbz	r0, 8000f5c <__gnu_unwind_pr_common+0x17c>
 8000f2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000f32:	1c99      	adds	r1, r3, #2
 8000f34:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000f38:	f43f af7c 	beq.w	8000e34 <__gnu_unwind_pr_common+0x54>
 8000f3c:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000f40:	3301      	adds	r3, #1
 8000f42:	9104      	str	r1, [sp, #16]
 8000f44:	f000 8090 	beq.w	8001068 <__gnu_unwind_pr_common+0x288>
 8000f48:	1d20      	adds	r0, r4, #4
 8000f4a:	f7ff fdc9 	bl	8000ae0 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000f4e:	ab04      	add	r3, sp, #16
 8000f50:	4601      	mov	r1, r0
 8000f52:	4628      	mov	r0, r5
 8000f54:	f3af 8000 	nop.w
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d15b      	bne.n	8001014 <__gnu_unwind_pr_common+0x234>
 8000f5c:	3408      	adds	r4, #8
 8000f5e:	e7a3      	b.n	8000ea8 <__gnu_unwind_pr_common+0xc8>
 8000f60:	210d      	movs	r1, #13
 8000f62:	4638      	mov	r0, r7
 8000f64:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000f68:	f7ff fece 	bl	8000d08 <_Unwind_GetGR>
 8000f6c:	4581      	cmp	r9, r0
 8000f6e:	d1f5      	bne.n	8000f5c <__gnu_unwind_pr_common+0x17c>
 8000f70:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f72:	429c      	cmp	r4, r3
 8000f74:	d1f2      	bne.n	8000f5c <__gnu_unwind_pr_common+0x17c>
 8000f76:	4620      	mov	r0, r4
 8000f78:	f7ff fcec 	bl	8000954 <selfrel_offset31>
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	4602      	mov	r2, r0
 8000f80:	4638      	mov	r0, r7
 8000f82:	f7ff fee5 	bl	8000d50 <_Unwind_SetGR>
 8000f86:	4638      	mov	r0, r7
 8000f88:	462a      	mov	r2, r5
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f7ff fee0 	bl	8000d50 <_Unwind_SetGR>
 8000f90:	2007      	movs	r0, #7
 8000f92:	e750      	b.n	8000e36 <__gnu_unwind_pr_common+0x56>
 8000f94:	210d      	movs	r1, #13
 8000f96:	4638      	mov	r0, r7
 8000f98:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000f9c:	f7ff feb4 	bl	8000d08 <_Unwind_GetGR>
 8000fa0:	4581      	cmp	r9, r0
 8000fa2:	d001      	beq.n	8000fa8 <__gnu_unwind_pr_common+0x1c8>
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	e7b6      	b.n	8000f16 <__gnu_unwind_pr_common+0x136>
 8000fa8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000faa:	429c      	cmp	r4, r3
 8000fac:	d1fa      	bne.n	8000fa4 <__gnu_unwind_pr_common+0x1c4>
 8000fae:	2204      	movs	r2, #4
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 8000fb6:	18a3      	adds	r3, r4, r2
 8000fb8:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000fbc:	636b      	str	r3, [r5, #52]	; 0x34
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	db59      	blt.n	8001078 <__gnu_unwind_pr_common+0x298>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	e7a8      	b.n	8000f1c <__gnu_unwind_pr_common+0x13c>
 8000fca:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fd2:	f104 0a04 	add.w	sl, r4, #4
 8000fd6:	46b0      	mov	r8, r6
 8000fd8:	4691      	mov	r9, r2
 8000fda:	461e      	mov	r6, r3
 8000fdc:	e00d      	b.n	8000ffa <__gnu_unwind_pr_common+0x21a>
 8000fde:	9604      	str	r6, [sp, #16]
 8000fe0:	f7ff fd7e 	bl	8000ae0 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000fe4:	ab04      	add	r3, sp, #16
 8000fe6:	4601      	mov	r1, r0
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4628      	mov	r0, r5
 8000fec:	f3af 8000 	nop.w
 8000ff0:	f109 0901 	add.w	r9, r9, #1
 8000ff4:	f10a 0a04 	add.w	sl, sl, #4
 8000ff8:	b9e8      	cbnz	r0, 8001036 <__gnu_unwind_pr_common+0x256>
 8000ffa:	45d9      	cmp	r9, fp
 8000ffc:	4650      	mov	r0, sl
 8000ffe:	d1ee      	bne.n	8000fde <__gnu_unwind_pr_common+0x1fe>
 8001000:	4638      	mov	r0, r7
 8001002:	210d      	movs	r1, #13
 8001004:	f7ff fe80 	bl	8000d08 <_Unwind_GetGR>
 8001008:	9b04      	ldr	r3, [sp, #16]
 800100a:	6228      	str	r0, [r5, #32]
 800100c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8001010:	2006      	movs	r0, #6
 8001012:	e710      	b.n	8000e36 <__gnu_unwind_pr_common+0x56>
 8001014:	4681      	mov	r9, r0
 8001016:	210d      	movs	r1, #13
 8001018:	4638      	mov	r0, r7
 800101a:	f7ff fe75 	bl	8000d08 <_Unwind_GetGR>
 800101e:	f1b9 0f02 	cmp.w	r9, #2
 8001022:	6228      	str	r0, [r5, #32]
 8001024:	d125      	bne.n	8001072 <__gnu_unwind_pr_common+0x292>
 8001026:	462b      	mov	r3, r5
 8001028:	9a04      	ldr	r2, [sp, #16]
 800102a:	f843 2f2c 	str.w	r2, [r3, #44]!
 800102e:	626b      	str	r3, [r5, #36]	; 0x24
 8001030:	62ac      	str	r4, [r5, #40]	; 0x28
 8001032:	2006      	movs	r0, #6
 8001034:	e6ff      	b.n	8000e36 <__gnu_unwind_pr_common+0x56>
 8001036:	4646      	mov	r6, r8
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800103e:	e76a      	b.n	8000f16 <__gnu_unwind_pr_common+0x136>
 8001040:	4620      	mov	r0, r4
 8001042:	f7ff fc87 	bl	8000954 <selfrel_offset31>
 8001046:	3404      	adds	r4, #4
 8001048:	4602      	mov	r2, r0
 800104a:	63ac      	str	r4, [r5, #56]	; 0x38
 800104c:	4628      	mov	r0, r5
 800104e:	4614      	mov	r4, r2
 8001050:	f3af 8000 	nop.w
 8001054:	2800      	cmp	r0, #0
 8001056:	f43f aeed 	beq.w	8000e34 <__gnu_unwind_pr_common+0x54>
 800105a:	4638      	mov	r0, r7
 800105c:	4622      	mov	r2, r4
 800105e:	210f      	movs	r1, #15
 8001060:	f7ff fe76 	bl	8000d50 <_Unwind_SetGR>
 8001064:	2007      	movs	r0, #7
 8001066:	e6e6      	b.n	8000e36 <__gnu_unwind_pr_common+0x56>
 8001068:	4638      	mov	r0, r7
 800106a:	210d      	movs	r1, #13
 800106c:	f7ff fe4c 	bl	8000d08 <_Unwind_GetGR>
 8001070:	6228      	str	r0, [r5, #32]
 8001072:	9b04      	ldr	r3, [sp, #16]
 8001074:	626b      	str	r3, [r5, #36]	; 0x24
 8001076:	e7db      	b.n	8001030 <__gnu_unwind_pr_common+0x250>
 8001078:	f10b 0001 	add.w	r0, fp, #1
 800107c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001080:	e77a      	b.n	8000f78 <__gnu_unwind_pr_common+0x198>
 8001082:	bf00      	nop
 8001084:	00000000 	.word	0x00000000

08001088 <__aeabi_unwind_cpp_pr0>:
 8001088:	2300      	movs	r3, #0
 800108a:	e6a9      	b.n	8000de0 <__gnu_unwind_pr_common>

0800108c <__aeabi_unwind_cpp_pr1>:
 800108c:	2301      	movs	r3, #1
 800108e:	e6a7      	b.n	8000de0 <__gnu_unwind_pr_common>

08001090 <__aeabi_unwind_cpp_pr2>:
 8001090:	2302      	movs	r3, #2
 8001092:	e6a5      	b.n	8000de0 <__gnu_unwind_pr_common>

08001094 <_Unwind_VRS_Pop>:
 8001094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001098:	4606      	mov	r6, r0
 800109a:	b0c3      	sub	sp, #268	; 0x10c
 800109c:	4615      	mov	r5, r2
 800109e:	461c      	mov	r4, r3
 80010a0:	2904      	cmp	r1, #4
 80010a2:	f200 80b9 	bhi.w	8001218 <_Unwind_VRS_Pop+0x184>
 80010a6:	e8df f001 	tbb	[pc, r1]
 80010aa:	539a      	.short	0x539a
 80010ac:	29b7      	.short	0x29b7
 80010ae:	03          	.byte	0x03
 80010af:	00          	.byte	0x00
 80010b0:	2c00      	cmp	r4, #0
 80010b2:	f040 80b1 	bne.w	8001218 <_Unwind_VRS_Pop+0x184>
 80010b6:	2a10      	cmp	r2, #16
 80010b8:	f200 80ae 	bhi.w	8001218 <_Unwind_VRS_Pop+0x184>
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	06d8      	lsls	r0, r3, #27
 80010c0:	f100 80f3 	bmi.w	80012aa <_Unwind_VRS_Pop+0x216>
 80010c4:	af20      	add	r7, sp, #128	; 0x80
 80010c6:	4638      	mov	r0, r7
 80010c8:	f000 f992 	bl	80013f0 <__gnu_Unwind_Save_WMMXC>
 80010cc:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80010ce:	2300      	movs	r3, #0
 80010d0:	2401      	movs	r4, #1
 80010d2:	fa04 f203 	lsl.w	r2, r4, r3
 80010d6:	422a      	tst	r2, r5
 80010d8:	4601      	mov	r1, r0
 80010da:	d004      	beq.n	80010e6 <_Unwind_VRS_Pop+0x52>
 80010dc:	f851 2b04 	ldr.w	r2, [r1], #4
 80010e0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 80010e4:	4608      	mov	r0, r1
 80010e6:	3301      	adds	r3, #1
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d1f2      	bne.n	80010d2 <_Unwind_VRS_Pop+0x3e>
 80010ec:	63b0      	str	r0, [r6, #56]	; 0x38
 80010ee:	4638      	mov	r0, r7
 80010f0:	f000 f974 	bl	80013dc <__gnu_Unwind_Restore_WMMXC>
 80010f4:	2000      	movs	r0, #0
 80010f6:	b043      	add	sp, #268	; 0x10c
 80010f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010fc:	2c03      	cmp	r4, #3
 80010fe:	f040 808b 	bne.w	8001218 <_Unwind_VRS_Pop+0x184>
 8001102:	b294      	uxth	r4, r2
 8001104:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001108:	2b10      	cmp	r3, #16
 800110a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800110e:	f200 8083 	bhi.w	8001218 <_Unwind_VRS_Pop+0x184>
 8001112:	6803      	ldr	r3, [r0, #0]
 8001114:	071f      	lsls	r7, r3, #28
 8001116:	f100 80d0 	bmi.w	80012ba <_Unwind_VRS_Pop+0x226>
 800111a:	af20      	add	r7, sp, #128	; 0x80
 800111c:	4638      	mov	r0, r7
 800111e:	f000 f93b 	bl	8001398 <__gnu_Unwind_Save_WMMXD>
 8001122:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001126:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8001128:	b154      	cbz	r4, 8001140 <_Unwind_VRS_Pop+0xac>
 800112a:	460b      	mov	r3, r1
 800112c:	1ae8      	subs	r0, r5, r3
 800112e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001132:	00e4      	lsls	r4, r4, #3
 8001134:	581a      	ldr	r2, [r3, r0]
 8001136:	f843 2b04 	str.w	r2, [r3], #4
 800113a:	428b      	cmp	r3, r1
 800113c:	d1fa      	bne.n	8001134 <_Unwind_VRS_Pop+0xa0>
 800113e:	4425      	add	r5, r4
 8001140:	4638      	mov	r0, r7
 8001142:	63b5      	str	r5, [r6, #56]	; 0x38
 8001144:	f000 f906 	bl	8001354 <__gnu_Unwind_Restore_WMMXD>
 8001148:	2000      	movs	r0, #0
 800114a:	b043      	add	sp, #268	; 0x10c
 800114c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001150:	2c01      	cmp	r4, #1
 8001152:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8001156:	b295      	uxth	r5, r2
 8001158:	d05a      	beq.n	8001210 <_Unwind_VRS_Pop+0x17c>
 800115a:	2c05      	cmp	r4, #5
 800115c:	d15c      	bne.n	8001218 <_Unwind_VRS_Pop+0x184>
 800115e:	eb08 0905 	add.w	r9, r8, r5
 8001162:	f1b9 0f20 	cmp.w	r9, #32
 8001166:	d857      	bhi.n	8001218 <_Unwind_VRS_Pop+0x184>
 8001168:	f1b8 0f0f 	cmp.w	r8, #15
 800116c:	d977      	bls.n	800125e <_Unwind_VRS_Pop+0x1ca>
 800116e:	46a9      	mov	r9, r5
 8001170:	2d00      	cmp	r5, #0
 8001172:	f040 8088 	bne.w	8001286 <_Unwind_VRS_Pop+0x1f2>
 8001176:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001178:	b36d      	cbz	r5, 80011d6 <_Unwind_VRS_Pop+0x142>
 800117a:	af20      	add	r7, sp, #128	; 0x80
 800117c:	f04f 0900 	mov.w	r9, #0
 8001180:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8001184:	3f04      	subs	r7, #4
 8001186:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800118a:	f853 1b04 	ldr.w	r1, [r3], #4
 800118e:	f847 1f04 	str.w	r1, [r7, #4]!
 8001192:	42ab      	cmp	r3, r5
 8001194:	d1f9      	bne.n	800118a <_Unwind_VRS_Pop+0xf6>
 8001196:	f1b9 0f00 	cmp.w	r9, #0
 800119a:	d00f      	beq.n	80011bc <_Unwind_VRS_Pop+0x128>
 800119c:	466f      	mov	r7, sp
 800119e:	4641      	mov	r1, r8
 80011a0:	2910      	cmp	r1, #16
 80011a2:	bf38      	it	cc
 80011a4:	2110      	movcc	r1, #16
 80011a6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80011aa:	3984      	subs	r1, #132	; 0x84
 80011ac:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 80011b0:	f853 0b04 	ldr.w	r0, [r3], #4
 80011b4:	f841 0f04 	str.w	r0, [r1, #4]!
 80011b8:	42ab      	cmp	r3, r5
 80011ba:	d1f9      	bne.n	80011b0 <_Unwind_VRS_Pop+0x11c>
 80011bc:	2c01      	cmp	r4, #1
 80011be:	f000 8084 	beq.w	80012ca <_Unwind_VRS_Pop+0x236>
 80011c2:	f1b8 0f0f 	cmp.w	r8, #15
 80011c6:	63b5      	str	r5, [r6, #56]	; 0x38
 80011c8:	d945      	bls.n	8001256 <_Unwind_VRS_Pop+0x1c2>
 80011ca:	f1b9 0f00 	cmp.w	r9, #0
 80011ce:	d002      	beq.n	80011d6 <_Unwind_VRS_Pop+0x142>
 80011d0:	4668      	mov	r0, sp
 80011d2:	f000 f8b7 	bl	8001344 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80011d6:	2000      	movs	r0, #0
 80011d8:	b043      	add	sp, #268	; 0x10c
 80011da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011de:	b9dc      	cbnz	r4, 8001218 <_Unwind_VRS_Pop+0x184>
 80011e0:	6b87      	ldr	r7, [r0, #56]	; 0x38
 80011e2:	4623      	mov	r3, r4
 80011e4:	2001      	movs	r0, #1
 80011e6:	b294      	uxth	r4, r2
 80011e8:	f106 0c04 	add.w	ip, r6, #4
 80011ec:	fa00 f203 	lsl.w	r2, r0, r3
 80011f0:	4222      	tst	r2, r4
 80011f2:	4639      	mov	r1, r7
 80011f4:	d004      	beq.n	8001200 <_Unwind_VRS_Pop+0x16c>
 80011f6:	f851 2b04 	ldr.w	r2, [r1], #4
 80011fa:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 80011fe:	460f      	mov	r7, r1
 8001200:	3301      	adds	r3, #1
 8001202:	2b10      	cmp	r3, #16
 8001204:	d1f2      	bne.n	80011ec <_Unwind_VRS_Pop+0x158>
 8001206:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 800120a:	d1e4      	bne.n	80011d6 <_Unwind_VRS_Pop+0x142>
 800120c:	63b7      	str	r7, [r6, #56]	; 0x38
 800120e:	e004      	b.n	800121a <_Unwind_VRS_Pop+0x186>
 8001210:	eb08 0305 	add.w	r3, r8, r5
 8001214:	2b10      	cmp	r3, #16
 8001216:	d903      	bls.n	8001220 <_Unwind_VRS_Pop+0x18c>
 8001218:	2002      	movs	r0, #2
 800121a:	b043      	add	sp, #268	; 0x10c
 800121c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001220:	f1b8 0f0f 	cmp.w	r8, #15
 8001224:	d8f8      	bhi.n	8001218 <_Unwind_VRS_Pop+0x184>
 8001226:	6833      	ldr	r3, [r6, #0]
 8001228:	07da      	lsls	r2, r3, #31
 800122a:	d506      	bpl.n	800123a <_Unwind_VRS_Pop+0x1a6>
 800122c:	4630      	mov	r0, r6
 800122e:	f023 0303 	bic.w	r3, r3, #3
 8001232:	f840 3b48 	str.w	r3, [r0], #72
 8001236:	f000 f879 	bl	800132c <__gnu_Unwind_Save_VFP>
 800123a:	af20      	add	r7, sp, #128	; 0x80
 800123c:	4638      	mov	r0, r7
 800123e:	f000 f875 	bl	800132c <__gnu_Unwind_Save_VFP>
 8001242:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001244:	2d00      	cmp	r5, #0
 8001246:	d199      	bne.n	800117c <_Unwind_VRS_Pop+0xe8>
 8001248:	461d      	mov	r5, r3
 800124a:	3504      	adds	r5, #4
 800124c:	63b5      	str	r5, [r6, #56]	; 0x38
 800124e:	4638      	mov	r0, r7
 8001250:	f000 f868 	bl	8001324 <__gnu_Unwind_Restore_VFP>
 8001254:	e7bf      	b.n	80011d6 <_Unwind_VRS_Pop+0x142>
 8001256:	a820      	add	r0, sp, #128	; 0x80
 8001258:	f000 f86c 	bl	8001334 <__gnu_Unwind_Restore_VFP_D>
 800125c:	e7b5      	b.n	80011ca <_Unwind_VRS_Pop+0x136>
 800125e:	f1b9 0f10 	cmp.w	r9, #16
 8001262:	d940      	bls.n	80012e6 <_Unwind_VRS_Pop+0x252>
 8001264:	f1a9 0910 	sub.w	r9, r9, #16
 8001268:	6833      	ldr	r3, [r6, #0]
 800126a:	07d9      	lsls	r1, r3, #31
 800126c:	d508      	bpl.n	8001280 <_Unwind_VRS_Pop+0x1ec>
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	4630      	mov	r0, r6
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	f840 3b48 	str.w	r3, [r0], #72
 800127c:	f000 f85e 	bl	800133c <__gnu_Unwind_Save_VFP_D>
 8001280:	f1b9 0f00 	cmp.w	r9, #0
 8001284:	d032      	beq.n	80012ec <_Unwind_VRS_Pop+0x258>
 8001286:	6833      	ldr	r3, [r6, #0]
 8001288:	075a      	lsls	r2, r3, #29
 800128a:	d420      	bmi.n	80012ce <_Unwind_VRS_Pop+0x23a>
 800128c:	f1b8 0f0f 	cmp.w	r8, #15
 8001290:	d925      	bls.n	80012de <_Unwind_VRS_Pop+0x24a>
 8001292:	466f      	mov	r7, sp
 8001294:	4638      	mov	r0, r7
 8001296:	f1c8 0510 	rsb	r5, r8, #16
 800129a:	f000 f857 	bl	800134c <__gnu_Unwind_Save_VFP_D_16_to_31>
 800129e:	2d00      	cmp	r5, #0
 80012a0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80012a2:	f77f af7c 	ble.w	800119e <_Unwind_VRS_Pop+0x10a>
 80012a6:	af20      	add	r7, sp, #128	; 0x80
 80012a8:	e76a      	b.n	8001180 <_Unwind_VRS_Pop+0xec>
 80012aa:	f023 0310 	bic.w	r3, r3, #16
 80012ae:	6033      	str	r3, [r6, #0]
 80012b0:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 80012b4:	f000 f89c 	bl	80013f0 <__gnu_Unwind_Save_WMMXC>
 80012b8:	e704      	b.n	80010c4 <_Unwind_VRS_Pop+0x30>
 80012ba:	f023 0308 	bic.w	r3, r3, #8
 80012be:	6003      	str	r3, [r0, #0]
 80012c0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 80012c4:	f000 f868 	bl	8001398 <__gnu_Unwind_Save_WMMXD>
 80012c8:	e727      	b.n	800111a <_Unwind_VRS_Pop+0x86>
 80012ca:	af20      	add	r7, sp, #128	; 0x80
 80012cc:	e7bd      	b.n	800124a <_Unwind_VRS_Pop+0x1b6>
 80012ce:	4630      	mov	r0, r6
 80012d0:	f023 0304 	bic.w	r3, r3, #4
 80012d4:	f840 3bd0 	str.w	r3, [r0], #208
 80012d8:	f000 f838 	bl	800134c <__gnu_Unwind_Save_VFP_D_16_to_31>
 80012dc:	e7d6      	b.n	800128c <_Unwind_VRS_Pop+0x1f8>
 80012de:	a820      	add	r0, sp, #128	; 0x80
 80012e0:	f000 f82c 	bl	800133c <__gnu_Unwind_Save_VFP_D>
 80012e4:	e7d5      	b.n	8001292 <_Unwind_VRS_Pop+0x1fe>
 80012e6:	f04f 0900 	mov.w	r9, #0
 80012ea:	e7bd      	b.n	8001268 <_Unwind_VRS_Pop+0x1d4>
 80012ec:	f1b8 0f0f 	cmp.w	r8, #15
 80012f0:	f63f af41 	bhi.w	8001176 <_Unwind_VRS_Pop+0xe2>
 80012f4:	af20      	add	r7, sp, #128	; 0x80
 80012f6:	4638      	mov	r0, r7
 80012f8:	f000 f820 	bl	800133c <__gnu_Unwind_Save_VFP_D>
 80012fc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80012fe:	2d00      	cmp	r5, #0
 8001300:	f47f af3c 	bne.w	800117c <_Unwind_VRS_Pop+0xe8>
 8001304:	4638      	mov	r0, r7
 8001306:	f000 f815 	bl	8001334 <__gnu_Unwind_Restore_VFP_D>
 800130a:	e764      	b.n	80011d6 <_Unwind_VRS_Pop+0x142>

0800130c <__restore_core_regs>:
 800130c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001310:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001314:	469c      	mov	ip, r3
 8001316:	46a6      	mov	lr, r4
 8001318:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800131c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001320:	46e5      	mov	sp, ip
 8001322:	bd00      	pop	{pc}

08001324 <__gnu_Unwind_Restore_VFP>:
 8001324:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop

0800132c <__gnu_Unwind_Save_VFP>:
 800132c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <__gnu_Unwind_Restore_VFP_D>:
 8001334:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop

0800133c <__gnu_Unwind_Save_VFP_D>:
 800133c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop

08001344 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001344:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop

0800134c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800134c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <__gnu_Unwind_Restore_WMMXD>:
 8001354:	ecf0 0102 	ldfe	f0, [r0], #8
 8001358:	ecf0 1102 	ldfe	f1, [r0], #8
 800135c:	ecf0 2102 	ldfe	f2, [r0], #8
 8001360:	ecf0 3102 	ldfe	f3, [r0], #8
 8001364:	ecf0 4102 	ldfe	f4, [r0], #8
 8001368:	ecf0 5102 	ldfe	f5, [r0], #8
 800136c:	ecf0 6102 	ldfe	f6, [r0], #8
 8001370:	ecf0 7102 	ldfe	f7, [r0], #8
 8001374:	ecf0 8102 	ldfp	f0, [r0], #8
 8001378:	ecf0 9102 	ldfp	f1, [r0], #8
 800137c:	ecf0 a102 	ldfp	f2, [r0], #8
 8001380:	ecf0 b102 	ldfp	f3, [r0], #8
 8001384:	ecf0 c102 	ldfp	f4, [r0], #8
 8001388:	ecf0 d102 	ldfp	f5, [r0], #8
 800138c:	ecf0 e102 	ldfp	f6, [r0], #8
 8001390:	ecf0 f102 	ldfp	f7, [r0], #8
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <__gnu_Unwind_Save_WMMXD>:
 8001398:	ece0 0102 	stfe	f0, [r0], #8
 800139c:	ece0 1102 	stfe	f1, [r0], #8
 80013a0:	ece0 2102 	stfe	f2, [r0], #8
 80013a4:	ece0 3102 	stfe	f3, [r0], #8
 80013a8:	ece0 4102 	stfe	f4, [r0], #8
 80013ac:	ece0 5102 	stfe	f5, [r0], #8
 80013b0:	ece0 6102 	stfe	f6, [r0], #8
 80013b4:	ece0 7102 	stfe	f7, [r0], #8
 80013b8:	ece0 8102 	stfp	f0, [r0], #8
 80013bc:	ece0 9102 	stfp	f1, [r0], #8
 80013c0:	ece0 a102 	stfp	f2, [r0], #8
 80013c4:	ece0 b102 	stfp	f3, [r0], #8
 80013c8:	ece0 c102 	stfp	f4, [r0], #8
 80013cc:	ece0 d102 	stfp	f5, [r0], #8
 80013d0:	ece0 e102 	stfp	f6, [r0], #8
 80013d4:	ece0 f102 	stfp	f7, [r0], #8
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop

080013dc <__gnu_Unwind_Restore_WMMXC>:
 80013dc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80013e0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80013e4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80013e8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <__gnu_Unwind_Save_WMMXC>:
 80013f0:	fca0 8101 	stc2	1, cr8, [r0], #4
 80013f4:	fca0 9101 	stc2	1, cr9, [r0], #4
 80013f8:	fca0 a101 	stc2	1, cr10, [r0], #4
 80013fc:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop

08001404 <_Unwind_RaiseException>:
 8001404:	46ec      	mov	ip, sp
 8001406:	b500      	push	{lr}
 8001408:	e92d 5000 	stmdb	sp!, {ip, lr}
 800140c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001418:	a901      	add	r1, sp, #4
 800141a:	f7ff fbf1 	bl	8000c00 <__gnu_Unwind_RaiseException>
 800141e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001422:	b012      	add	sp, #72	; 0x48
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <_Unwind_Resume>:
 8001428:	46ec      	mov	ip, sp
 800142a:	b500      	push	{lr}
 800142c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001430:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e92d 000c 	stmdb	sp!, {r2, r3}
 800143c:	a901      	add	r1, sp, #4
 800143e:	f7ff fc19 	bl	8000c74 <__gnu_Unwind_Resume>
 8001442:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001446:	b012      	add	sp, #72	; 0x48
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop

0800144c <_Unwind_Resume_or_Rethrow>:
 800144c:	46ec      	mov	ip, sp
 800144e:	b500      	push	{lr}
 8001450:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001454:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001460:	a901      	add	r1, sp, #4
 8001462:	f7ff fc29 	bl	8000cb8 <__gnu_Unwind_Resume_or_Rethrow>
 8001466:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800146a:	b012      	add	sp, #72	; 0x48
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <_Unwind_ForcedUnwind>:
 8001470:	46ec      	mov	ip, sp
 8001472:	b500      	push	{lr}
 8001474:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001478:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001484:	ab01      	add	r3, sp, #4
 8001486:	f7ff fbeb 	bl	8000c60 <__gnu_Unwind_ForcedUnwind>
 800148a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800148e:	b012      	add	sp, #72	; 0x48
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <_Unwind_Backtrace>:
 8001494:	46ec      	mov	ip, sp
 8001496:	b500      	push	{lr}
 8001498:	e92d 5000 	stmdb	sp!, {ip, lr}
 800149c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80014a8:	aa01      	add	r2, sp, #4
 80014aa:	f7ff fc5d 	bl	8000d68 <__gnu_Unwind_Backtrace>
 80014ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80014b2:	b012      	add	sp, #72	; 0x48
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop

080014b8 <next_unwind_byte>:
 80014b8:	7a02      	ldrb	r2, [r0, #8]
 80014ba:	b97a      	cbnz	r2, 80014dc <next_unwind_byte+0x24>
 80014bc:	7a43      	ldrb	r3, [r0, #9]
 80014be:	b1a3      	cbz	r3, 80014ea <next_unwind_byte+0x32>
 80014c0:	6842      	ldr	r2, [r0, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	b410      	push	{r4}
 80014c6:	7243      	strb	r3, [r0, #9]
 80014c8:	6813      	ldr	r3, [r2, #0]
 80014ca:	2103      	movs	r1, #3
 80014cc:	1d14      	adds	r4, r2, #4
 80014ce:	7201      	strb	r1, [r0, #8]
 80014d0:	021a      	lsls	r2, r3, #8
 80014d2:	6044      	str	r4, [r0, #4]
 80014d4:	6002      	str	r2, [r0, #0]
 80014d6:	bc10      	pop	{r4}
 80014d8:	0e18      	lsrs	r0, r3, #24
 80014da:	4770      	bx	lr
 80014dc:	6803      	ldr	r3, [r0, #0]
 80014de:	3a01      	subs	r2, #1
 80014e0:	7202      	strb	r2, [r0, #8]
 80014e2:	021a      	lsls	r2, r3, #8
 80014e4:	6002      	str	r2, [r0, #0]
 80014e6:	0e18      	lsrs	r0, r3, #24
 80014e8:	4770      	bx	lr
 80014ea:	20b0      	movs	r0, #176	; 0xb0
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <_Unwind_GetGR.constprop.0>:
 80014f0:	b500      	push	{lr}
 80014f2:	b085      	sub	sp, #20
 80014f4:	aa03      	add	r2, sp, #12
 80014f6:	2300      	movs	r3, #0
 80014f8:	9200      	str	r2, [sp, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	220c      	movs	r2, #12
 80014fe:	f7ff fbeb 	bl	8000cd8 <_Unwind_VRS_Get>
 8001502:	9803      	ldr	r0, [sp, #12]
 8001504:	b005      	add	sp, #20
 8001506:	f85d fb04 	ldr.w	pc, [sp], #4
 800150a:	bf00      	nop

0800150c <unwind_UCB_from_context>:
 800150c:	e7f0      	b.n	80014f0 <_Unwind_GetGR.constprop.0>
 800150e:	bf00      	nop

08001510 <__gnu_unwind_execute>:
 8001510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001514:	4605      	mov	r5, r0
 8001516:	b085      	sub	sp, #20
 8001518:	460e      	mov	r6, r1
 800151a:	f04f 0800 	mov.w	r8, #0
 800151e:	4630      	mov	r0, r6
 8001520:	f7ff ffca 	bl	80014b8 <next_unwind_byte>
 8001524:	28b0      	cmp	r0, #176	; 0xb0
 8001526:	4604      	mov	r4, r0
 8001528:	f000 80b2 	beq.w	8001690 <__gnu_unwind_execute+0x180>
 800152c:	0607      	lsls	r7, r0, #24
 800152e:	d520      	bpl.n	8001572 <__gnu_unwind_execute+0x62>
 8001530:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001534:	2b80      	cmp	r3, #128	; 0x80
 8001536:	d04d      	beq.n	80015d4 <__gnu_unwind_execute+0xc4>
 8001538:	2b90      	cmp	r3, #144	; 0x90
 800153a:	d036      	beq.n	80015aa <__gnu_unwind_execute+0x9a>
 800153c:	2ba0      	cmp	r3, #160	; 0xa0
 800153e:	d060      	beq.n	8001602 <__gnu_unwind_execute+0xf2>
 8001540:	2bb0      	cmp	r3, #176	; 0xb0
 8001542:	d074      	beq.n	800162e <__gnu_unwind_execute+0x11e>
 8001544:	2bc0      	cmp	r3, #192	; 0xc0
 8001546:	f000 808b 	beq.w	8001660 <__gnu_unwind_execute+0x150>
 800154a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800154e:	2bd0      	cmp	r3, #208	; 0xd0
 8001550:	d10b      	bne.n	800156a <__gnu_unwind_execute+0x5a>
 8001552:	f000 0207 	and.w	r2, r0, #7
 8001556:	3201      	adds	r2, #1
 8001558:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800155c:	2305      	movs	r3, #5
 800155e:	2101      	movs	r1, #1
 8001560:	4628      	mov	r0, r5
 8001562:	f7ff fd97 	bl	8001094 <_Unwind_VRS_Pop>
 8001566:	2800      	cmp	r0, #0
 8001568:	d0d9      	beq.n	800151e <__gnu_unwind_execute+0xe>
 800156a:	2009      	movs	r0, #9
 800156c:	b005      	add	sp, #20
 800156e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001572:	f10d 090c 	add.w	r9, sp, #12
 8001576:	2300      	movs	r3, #0
 8001578:	4619      	mov	r1, r3
 800157a:	0087      	lsls	r7, r0, #2
 800157c:	f8cd 9000 	str.w	r9, [sp]
 8001580:	220d      	movs	r2, #13
 8001582:	4628      	mov	r0, r5
 8001584:	f7ff fba8 	bl	8000cd8 <_Unwind_VRS_Get>
 8001588:	b2ff      	uxtb	r7, r7
 800158a:	9b03      	ldr	r3, [sp, #12]
 800158c:	f8cd 9000 	str.w	r9, [sp]
 8001590:	3704      	adds	r7, #4
 8001592:	0660      	lsls	r0, r4, #25
 8001594:	bf4c      	ite	mi
 8001596:	1bdf      	submi	r7, r3, r7
 8001598:	18ff      	addpl	r7, r7, r3
 800159a:	2300      	movs	r3, #0
 800159c:	4619      	mov	r1, r3
 800159e:	220d      	movs	r2, #13
 80015a0:	4628      	mov	r0, r5
 80015a2:	9703      	str	r7, [sp, #12]
 80015a4:	f7ff fbbc 	bl	8000d20 <_Unwind_VRS_Set>
 80015a8:	e7b9      	b.n	800151e <__gnu_unwind_execute+0xe>
 80015aa:	f000 030d 	and.w	r3, r0, #13
 80015ae:	2b0d      	cmp	r3, #13
 80015b0:	d0db      	beq.n	800156a <__gnu_unwind_execute+0x5a>
 80015b2:	af03      	add	r7, sp, #12
 80015b4:	2300      	movs	r3, #0
 80015b6:	f000 020f 	and.w	r2, r0, #15
 80015ba:	4619      	mov	r1, r3
 80015bc:	9700      	str	r7, [sp, #0]
 80015be:	4628      	mov	r0, r5
 80015c0:	f7ff fb8a 	bl	8000cd8 <_Unwind_VRS_Get>
 80015c4:	2300      	movs	r3, #0
 80015c6:	9700      	str	r7, [sp, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	220d      	movs	r2, #13
 80015cc:	4628      	mov	r0, r5
 80015ce:	f7ff fba7 	bl	8000d20 <_Unwind_VRS_Set>
 80015d2:	e7a4      	b.n	800151e <__gnu_unwind_execute+0xe>
 80015d4:	4630      	mov	r0, r6
 80015d6:	f7ff ff6f 	bl	80014b8 <next_unwind_byte>
 80015da:	0224      	lsls	r4, r4, #8
 80015dc:	4320      	orrs	r0, r4
 80015de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80015e2:	d0c2      	beq.n	800156a <__gnu_unwind_execute+0x5a>
 80015e4:	0104      	lsls	r4, r0, #4
 80015e6:	2300      	movs	r3, #0
 80015e8:	b2a2      	uxth	r2, r4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4628      	mov	r0, r5
 80015ee:	f7ff fd51 	bl	8001094 <_Unwind_VRS_Pop>
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d1b9      	bne.n	800156a <__gnu_unwind_execute+0x5a>
 80015f6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80015fa:	bf18      	it	ne
 80015fc:	f04f 0801 	movne.w	r8, #1
 8001600:	e78d      	b.n	800151e <__gnu_unwind_execute+0xe>
 8001602:	43c2      	mvns	r2, r0
 8001604:	f002 0307 	and.w	r3, r2, #7
 8001608:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800160c:	411a      	asrs	r2, r3
 800160e:	0701      	lsls	r1, r0, #28
 8001610:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	bf48      	it	mi
 800161a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800161e:	4619      	mov	r1, r3
 8001620:	4628      	mov	r0, r5
 8001622:	f7ff fd37 	bl	8001094 <_Unwind_VRS_Pop>
 8001626:	2800      	cmp	r0, #0
 8001628:	f43f af79 	beq.w	800151e <__gnu_unwind_execute+0xe>
 800162c:	e79d      	b.n	800156a <__gnu_unwind_execute+0x5a>
 800162e:	28b1      	cmp	r0, #177	; 0xb1
 8001630:	d033      	beq.n	800169a <__gnu_unwind_execute+0x18a>
 8001632:	28b2      	cmp	r0, #178	; 0xb2
 8001634:	f000 808b 	beq.w	800174e <__gnu_unwind_execute+0x23e>
 8001638:	28b3      	cmp	r0, #179	; 0xb3
 800163a:	d039      	beq.n	80016b0 <__gnu_unwind_execute+0x1a0>
 800163c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001640:	2bb4      	cmp	r3, #180	; 0xb4
 8001642:	d092      	beq.n	800156a <__gnu_unwind_execute+0x5a>
 8001644:	f000 0207 	and.w	r2, r0, #7
 8001648:	3201      	adds	r2, #1
 800164a:	2301      	movs	r3, #1
 800164c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001650:	4619      	mov	r1, r3
 8001652:	4628      	mov	r0, r5
 8001654:	f7ff fd1e 	bl	8001094 <_Unwind_VRS_Pop>
 8001658:	2800      	cmp	r0, #0
 800165a:	f43f af60 	beq.w	800151e <__gnu_unwind_execute+0xe>
 800165e:	e784      	b.n	800156a <__gnu_unwind_execute+0x5a>
 8001660:	28c6      	cmp	r0, #198	; 0xc6
 8001662:	d042      	beq.n	80016ea <__gnu_unwind_execute+0x1da>
 8001664:	28c7      	cmp	r0, #199	; 0xc7
 8001666:	d04c      	beq.n	8001702 <__gnu_unwind_execute+0x1f2>
 8001668:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800166c:	2bc0      	cmp	r3, #192	; 0xc0
 800166e:	d05b      	beq.n	8001728 <__gnu_unwind_execute+0x218>
 8001670:	28c8      	cmp	r0, #200	; 0xc8
 8001672:	d060      	beq.n	8001736 <__gnu_unwind_execute+0x226>
 8001674:	28c9      	cmp	r0, #201	; 0xc9
 8001676:	f47f af78 	bne.w	800156a <__gnu_unwind_execute+0x5a>
 800167a:	4630      	mov	r0, r6
 800167c:	f7ff ff1c 	bl	80014b8 <next_unwind_byte>
 8001680:	0302      	lsls	r2, r0, #12
 8001682:	f000 000f 	and.w	r0, r0, #15
 8001686:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800168a:	3001      	adds	r0, #1
 800168c:	4302      	orrs	r2, r0
 800168e:	e765      	b.n	800155c <__gnu_unwind_execute+0x4c>
 8001690:	f1b8 0f00 	cmp.w	r8, #0
 8001694:	d018      	beq.n	80016c8 <__gnu_unwind_execute+0x1b8>
 8001696:	2000      	movs	r0, #0
 8001698:	e768      	b.n	800156c <__gnu_unwind_execute+0x5c>
 800169a:	4630      	mov	r0, r6
 800169c:	f7ff ff0c 	bl	80014b8 <next_unwind_byte>
 80016a0:	4602      	mov	r2, r0
 80016a2:	2800      	cmp	r0, #0
 80016a4:	f43f af61 	beq.w	800156a <__gnu_unwind_execute+0x5a>
 80016a8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80016ac:	d0d0      	beq.n	8001650 <__gnu_unwind_execute+0x140>
 80016ae:	e75c      	b.n	800156a <__gnu_unwind_execute+0x5a>
 80016b0:	4630      	mov	r0, r6
 80016b2:	f7ff ff01 	bl	80014b8 <next_unwind_byte>
 80016b6:	0301      	lsls	r1, r0, #12
 80016b8:	f000 000f 	and.w	r0, r0, #15
 80016bc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80016c0:	1c42      	adds	r2, r0, #1
 80016c2:	2301      	movs	r3, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	e7c3      	b.n	8001650 <__gnu_unwind_execute+0x140>
 80016c8:	ac03      	add	r4, sp, #12
 80016ca:	4643      	mov	r3, r8
 80016cc:	220e      	movs	r2, #14
 80016ce:	4641      	mov	r1, r8
 80016d0:	9400      	str	r4, [sp, #0]
 80016d2:	4628      	mov	r0, r5
 80016d4:	f7ff fb00 	bl	8000cd8 <_Unwind_VRS_Get>
 80016d8:	9400      	str	r4, [sp, #0]
 80016da:	4628      	mov	r0, r5
 80016dc:	4643      	mov	r3, r8
 80016de:	220f      	movs	r2, #15
 80016e0:	4641      	mov	r1, r8
 80016e2:	f7ff fb1d 	bl	8000d20 <_Unwind_VRS_Set>
 80016e6:	4640      	mov	r0, r8
 80016e8:	e740      	b.n	800156c <__gnu_unwind_execute+0x5c>
 80016ea:	4630      	mov	r0, r6
 80016ec:	f7ff fee4 	bl	80014b8 <next_unwind_byte>
 80016f0:	0301      	lsls	r1, r0, #12
 80016f2:	f000 000f 	and.w	r0, r0, #15
 80016f6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80016fa:	1c42      	adds	r2, r0, #1
 80016fc:	2303      	movs	r3, #3
 80016fe:	430a      	orrs	r2, r1
 8001700:	e7a6      	b.n	8001650 <__gnu_unwind_execute+0x140>
 8001702:	4630      	mov	r0, r6
 8001704:	f7ff fed8 	bl	80014b8 <next_unwind_byte>
 8001708:	4602      	mov	r2, r0
 800170a:	2800      	cmp	r0, #0
 800170c:	f43f af2d 	beq.w	800156a <__gnu_unwind_execute+0x5a>
 8001710:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001714:	f47f af29 	bne.w	800156a <__gnu_unwind_execute+0x5a>
 8001718:	2104      	movs	r1, #4
 800171a:	4628      	mov	r0, r5
 800171c:	f7ff fcba 	bl	8001094 <_Unwind_VRS_Pop>
 8001720:	2800      	cmp	r0, #0
 8001722:	f43f aefc 	beq.w	800151e <__gnu_unwind_execute+0xe>
 8001726:	e720      	b.n	800156a <__gnu_unwind_execute+0x5a>
 8001728:	f000 020f 	and.w	r2, r0, #15
 800172c:	3201      	adds	r2, #1
 800172e:	2303      	movs	r3, #3
 8001730:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001734:	e78c      	b.n	8001650 <__gnu_unwind_execute+0x140>
 8001736:	4630      	mov	r0, r6
 8001738:	f7ff febe 	bl	80014b8 <next_unwind_byte>
 800173c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001740:	f000 030f 	and.w	r3, r0, #15
 8001744:	3210      	adds	r2, #16
 8001746:	3301      	adds	r3, #1
 8001748:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800174c:	e706      	b.n	800155c <__gnu_unwind_execute+0x4c>
 800174e:	2300      	movs	r3, #0
 8001750:	f10d 090c 	add.w	r9, sp, #12
 8001754:	220d      	movs	r2, #13
 8001756:	4619      	mov	r1, r3
 8001758:	f8cd 9000 	str.w	r9, [sp]
 800175c:	4628      	mov	r0, r5
 800175e:	f7ff fabb 	bl	8000cd8 <_Unwind_VRS_Get>
 8001762:	4630      	mov	r0, r6
 8001764:	f7ff fea8 	bl	80014b8 <next_unwind_byte>
 8001768:	0602      	lsls	r2, r0, #24
 800176a:	f04f 0702 	mov.w	r7, #2
 800176e:	d50c      	bpl.n	800178a <__gnu_unwind_execute+0x27a>
 8001770:	9b03      	ldr	r3, [sp, #12]
 8001772:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001776:	40b8      	lsls	r0, r7
 8001778:	4403      	add	r3, r0
 800177a:	4630      	mov	r0, r6
 800177c:	9303      	str	r3, [sp, #12]
 800177e:	f7ff fe9b 	bl	80014b8 <next_unwind_byte>
 8001782:	0603      	lsls	r3, r0, #24
 8001784:	f107 0707 	add.w	r7, r7, #7
 8001788:	d4f2      	bmi.n	8001770 <__gnu_unwind_execute+0x260>
 800178a:	9b03      	ldr	r3, [sp, #12]
 800178c:	f8cd 9000 	str.w	r9, [sp]
 8001790:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001794:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001798:	40bc      	lsls	r4, r7
 800179a:	2300      	movs	r3, #0
 800179c:	4414      	add	r4, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	220d      	movs	r2, #13
 80017a2:	4628      	mov	r0, r5
 80017a4:	9403      	str	r4, [sp, #12]
 80017a6:	f7ff fabb 	bl	8000d20 <_Unwind_VRS_Set>
 80017aa:	e6b8      	b.n	800151e <__gnu_unwind_execute+0xe>

080017ac <__gnu_unwind_frame>:
 80017ac:	b510      	push	{r4, lr}
 80017ae:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80017b0:	b084      	sub	sp, #16
 80017b2:	6853      	ldr	r3, [r2, #4]
 80017b4:	2403      	movs	r4, #3
 80017b6:	f88d 400c 	strb.w	r4, [sp, #12]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	f102 0408 	add.w	r4, r2, #8
 80017c0:	4608      	mov	r0, r1
 80017c2:	79d2      	ldrb	r2, [r2, #7]
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	a901      	add	r1, sp, #4
 80017c8:	9402      	str	r4, [sp, #8]
 80017ca:	f88d 200d 	strb.w	r2, [sp, #13]
 80017ce:	f7ff fe9f 	bl	8001510 <__gnu_unwind_execute>
 80017d2:	b004      	add	sp, #16
 80017d4:	bd10      	pop	{r4, pc}
 80017d6:	bf00      	nop

080017d8 <_Unwind_GetRegionStart>:
 80017d8:	b508      	push	{r3, lr}
 80017da:	f7ff fe97 	bl	800150c <unwind_UCB_from_context>
 80017de:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80017e0:	bd08      	pop	{r3, pc}
 80017e2:	bf00      	nop

080017e4 <_Unwind_GetLanguageSpecificData>:
 80017e4:	b508      	push	{r3, lr}
 80017e6:	f7ff fe91 	bl	800150c <unwind_UCB_from_context>
 80017ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80017ec:	79c3      	ldrb	r3, [r0, #7]
 80017ee:	3302      	adds	r3, #2
 80017f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80017f4:	bd08      	pop	{r3, pc}
 80017f6:	bf00      	nop

080017f8 <__aeabi_idiv0>:
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop

080017fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint32_t reset_reason = RCC->CSR;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <main+0x34>)
 8001804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001806:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001808:	f000 fcec 	bl	80021e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180c:	f000 f812 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001810:	f000 f9f6 	bl	8001c00 <MX_GPIO_Init>
  MX_DMA_Init();
 8001814:	f000 f9cc 	bl	8001bb0 <MX_DMA_Init>
  MX_TIM1_Init();
 8001818:	f000 f8a6 	bl	8001968 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800181c:	f000 f99e 	bl	8001b5c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001820:	f000 f870 	bl	8001904 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001824:	f000 f93c 	bl	8001aa0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 8001828:	f005 fac2 	bl	8006db0 <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800182c:	e7fe      	b.n	800182c <main+0x30>
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2230      	movs	r2, #48	; 0x30
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f005 fda4 	bl	8007390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <SystemClock_Config+0xc8>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <SystemClock_Config+0xc8>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <SystemClock_Config+0xc8>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <SystemClock_Config+0xcc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <SystemClock_Config+0xcc>)
 800187e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <SystemClock_Config+0xcc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001890:	2301      	movs	r3, #1
 8001892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189a:	2302      	movs	r3, #2
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80018a4:	230c      	movs	r3, #12
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80018a8:	2360      	movs	r3, #96	; 0x60
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018b0:	2304      	movs	r3, #4
 80018b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 0320 	add.w	r3, r7, #32
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 fb91 	bl	8002fe0 <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018c4:	f000 fa22 	bl	8001d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018cc:	2302      	movs	r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	2103      	movs	r1, #3
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 fdeb 	bl	80034c0 <HAL_RCC_ClockConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018f0:	f000 fa0c 	bl	8001d0c <Error_Handler>
  }
}
 80018f4:	bf00      	nop
 80018f6:	3750      	adds	r7, #80	; 0x50
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000

08001904 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_SPI1_Init+0x5c>)
 800190a:	4a16      	ldr	r2, [pc, #88]	; (8001964 <MX_SPI1_Init+0x60>)
 800190c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_SPI1_Init+0x5c>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_SPI1_Init+0x5c>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_SPI1_Init+0x5c>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_SPI1_Init+0x5c>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_SPI1_Init+0x5c>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_SPI1_Init+0x5c>)
 800192e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001932:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <MX_SPI1_Init+0x5c>)
 8001936:	2200      	movs	r2, #0
 8001938:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_SPI1_Init+0x5c>)
 800193c:	2200      	movs	r2, #0
 800193e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <MX_SPI1_Init+0x5c>)
 8001942:	2200      	movs	r2, #0
 8001944:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_SPI1_Init+0x5c>)
 8001948:	220a      	movs	r2, #10
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_SPI1_Init+0x5c>)
 800194e:	f001 ff87 	bl	8003860 <HAL_SPI_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8001958:	f000 f9d8 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20001758 	.word	0x20001758
 8001964:	40013000 	.word	0x40013000

08001968 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b096      	sub	sp, #88	; 0x58
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]
 8001996:	615a      	str	r2, [r3, #20]
 8001998:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2220      	movs	r2, #32
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f005 fcf5 	bl	8007390 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019a6:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <MX_TIM1_Init+0x130>)
 80019a8:	4a3c      	ldr	r2, [pc, #240]	; (8001a9c <MX_TIM1_Init+0x134>)
 80019aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019ac:	4b3a      	ldr	r3, [pc, #232]	; (8001a98 <MX_TIM1_Init+0x130>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <MX_TIM1_Init+0x130>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 80019b8:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <MX_TIM1_Init+0x130>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <MX_TIM1_Init+0x130>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019c4:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <MX_TIM1_Init+0x130>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ca:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <MX_TIM1_Init+0x130>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019d0:	4831      	ldr	r0, [pc, #196]	; (8001a98 <MX_TIM1_Init+0x130>)
 80019d2:	f002 fd3c 	bl	800444e <HAL_TIM_Base_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80019dc:	f000 f996 	bl	8001d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019ea:	4619      	mov	r1, r3
 80019ec:	482a      	ldr	r0, [pc, #168]	; (8001a98 <MX_TIM1_Init+0x130>)
 80019ee:	f002 ffe7 	bl	80049c0 <HAL_TIM_ConfigClockSource>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80019f8:	f000 f988 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019fc:	4826      	ldr	r0, [pc, #152]	; (8001a98 <MX_TIM1_Init+0x130>)
 80019fe:	f002 fda0 	bl	8004542 <HAL_TIM_PWM_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a08:	f000 f980 	bl	8001d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a18:	4619      	mov	r1, r3
 8001a1a:	481f      	ldr	r0, [pc, #124]	; (8001a98 <MX_TIM1_Init+0x130>)
 8001a1c:	f003 fb88 	bl	8005130 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001a26:	f000 f971 	bl	8001d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2a:	2360      	movs	r3, #96	; 0x60
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a36:	2300      	movs	r3, #0
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4812      	ldr	r0, [pc, #72]	; (8001a98 <MX_TIM1_Init+0x130>)
 8001a50:	f002 fef0 	bl	8004834 <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001a5a:	f000 f957 	bl	8001d0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_TIM1_Init+0x130>)
 8001a82:	f003 fbc3 	bl	800520c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a8c:	f000 f93e 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3758      	adds	r7, #88	; 0x58
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20001718 	.word	0x20001718
 8001a9c:	40010000 	.word	0x40010000

08001aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <MX_TIM3_Init+0xb4>)
 8001ac4:	4a24      	ldr	r2, [pc, #144]	; (8001b58 <MX_TIM3_Init+0xb8>)
 8001ac6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200;
 8001ac8:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <MX_TIM3_Init+0xb4>)
 8001aca:	22c8      	movs	r2, #200	; 0xc8
 8001acc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <MX_TIM3_Init+0xb4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <MX_TIM3_Init+0xb4>)
 8001ad6:	220a      	movs	r2, #10
 8001ad8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <MX_TIM3_Init+0xb4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MX_TIM3_Init+0xb4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ae6:	481b      	ldr	r0, [pc, #108]	; (8001b54 <MX_TIM3_Init+0xb4>)
 8001ae8:	f002 fd2b 	bl	8004542 <HAL_TIM_PWM_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001af2:	f000 f90b 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001af6:	2108      	movs	r1, #8
 8001af8:	4816      	ldr	r0, [pc, #88]	; (8001b54 <MX_TIM3_Init+0xb4>)
 8001afa:	f002 fd4d 	bl	8004598 <HAL_TIM_OnePulse_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b04:	f000 f902 	bl	8001d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b10:	f107 0320 	add.w	r3, r7, #32
 8001b14:	4619      	mov	r1, r3
 8001b16:	480f      	ldr	r0, [pc, #60]	; (8001b54 <MX_TIM3_Init+0xb4>)
 8001b18:	f003 fb0a 	bl	8005130 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001b22:	f000 f8f3 	bl	8001d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b26:	2360      	movs	r3, #96	; 0x60
 8001b28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_TIM3_Init+0xb4>)
 8001b3e:	f002 fe79 	bl	8004834 <HAL_TIM_PWM_ConfigChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001b48:	f000 f8e0 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20001698 	.word	0x20001698
 8001b58:	40000400 	.word	0x40000400

08001b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <MX_USART1_UART_Init+0x50>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_USART1_UART_Init+0x4c>)
 8001b94:	f003 fba0 	bl	80052d8 <HAL_UART_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b9e:	f000 f8b5 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200016d8 	.word	0x200016d8
 8001bac:	40011000 	.word	0x40011000

08001bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <MX_DMA_Init+0x4c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <MX_DMA_Init+0x4c>)
 8001bc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <MX_DMA_Init+0x4c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2038      	movs	r0, #56	; 0x38
 8001bd8:	f000 fc75 	bl	80024c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bdc:	2038      	movs	r0, #56	; 0x38
 8001bde:	f000 fc8e 	bl	80024fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	2039      	movs	r0, #57	; 0x39
 8001be8:	f000 fc6d 	bl	80024c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001bec:	2039      	movs	r0, #57	; 0x39
 8001bee:	f000 fc86 	bl	80024fe <HAL_NVIC_EnableIRQ>

}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
 8001c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <MX_GPIO_Init+0xfc>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a37      	ldr	r2, [pc, #220]	; (8001cfc <MX_GPIO_Init+0xfc>)
 8001c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <MX_GPIO_Init+0xfc>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <MX_GPIO_Init+0xfc>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <MX_GPIO_Init+0xfc>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <MX_GPIO_Init+0xfc>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <MX_GPIO_Init+0xfc>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a29      	ldr	r2, [pc, #164]	; (8001cfc <MX_GPIO_Init+0xfc>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <MX_GPIO_Init+0xfc>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CLK_Pin|LED_0_Pin|LED_1_Pin|STATE_Pin
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f640 010f 	movw	r1, #2063	; 0x80f
 8001c70:	4823      	ldr	r0, [pc, #140]	; (8001d00 <MX_GPIO_Init+0x100>)
 8001c72:	f001 f983 	bl	8002f7c <HAL_GPIO_WritePin>
                          |DebugPin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 8001c76:	2200      	movs	r2, #0
 8001c78:	f245 71ff 	movw	r1, #22527	; 0x57ff
 8001c7c:	4821      	ldr	r0, [pc, #132]	; (8001d04 <MX_GPIO_Init+0x104>)
 8001c7e:	f001 f97d 	bl	8002f7c <HAL_GPIO_WritePin>
                          |Matrix_CLK_Pin|Matrix_OE_Pin|Matrix_C_Pin|Matrix_B_Pin
                          |Matrix_A_Pin|Matrix_E_Pin|Matrix_B1_Pin|Matrix_G1_Pin
                          |Matrix_R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Matrix_LAT_GPIO_Port, Matrix_LAT_Pin, GPIO_PIN_SET);
 8001c82:	2201      	movs	r2, #1
 8001c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c88:	481e      	ldr	r0, [pc, #120]	; (8001d04 <MX_GPIO_Init+0x104>)
 8001c8a:	f001 f977 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CLK_Pin LED_0_Pin LED_1_Pin STATE_Pin
                           DebugPin_Pin */
  GPIO_InitStruct.Pin = LED_CLK_Pin|LED_0_Pin|LED_1_Pin|STATE_Pin
 8001c8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8001c92:	60fb      	str	r3, [r7, #12]
                          |DebugPin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4816      	ldr	r0, [pc, #88]	; (8001d00 <MX_GPIO_Init+0x100>)
 8001ca8:	f000 ffe4 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : IPS_NCS_Pin */
  GPIO_InitStruct.Pin = IPS_NCS_Pin;
 8001cac:	2310      	movs	r3, #16
 8001cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_GPIO_Init+0x108>)
 8001cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IPS_NCS_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4810      	ldr	r0, [pc, #64]	; (8001d00 <MX_GPIO_Init+0x100>)
 8001cc0:	f000 ffd8 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B0_Pin Matrix_D_Pin
                           Matrix_CLK_Pin Matrix_LAT_Pin Matrix_OE_Pin Matrix_C_Pin
                           Matrix_B_Pin Matrix_A_Pin Matrix_E_Pin Matrix_B1_Pin
                           Matrix_G1_Pin Matrix_R1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 8001cc4:	f247 73ff 	movw	r3, #30719	; 0x77ff
 8001cc8:	60fb      	str	r3, [r7, #12]
                          |Matrix_CLK_Pin|Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_C_Pin
                          |Matrix_B_Pin|Matrix_A_Pin|Matrix_E_Pin|Matrix_B1_Pin
                          |Matrix_G1_Pin|Matrix_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4809      	ldr	r0, [pc, #36]	; (8001d04 <MX_GPIO_Init+0x104>)
 8001cde:	f000 ffc9 	bl	8002c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	f000 fbed 	bl	80024c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001cec:	200a      	movs	r0, #10
 8001cee:	f000 fc06 	bl	80024fe <HAL_NVIC_EnableIRQ>

}
 8001cf2:	bf00      	nop
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020000 	.word	0x40020000
 8001d04:	40020400 	.word	0x40020400
 8001d08:	10310000 	.word	0x10310000

08001d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a34      	ldr	r2, [pc, #208]	; (8001e5c <HAL_SPI_MspInit+0xf0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d162      	bne.n	8001e54 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <HAL_SPI_MspInit+0xf4>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <HAL_SPI_MspInit+0xf4>)
 8001d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_SPI_MspInit+0xf4>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_SPI_MspInit+0xf4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a2b      	ldr	r2, [pc, #172]	; (8001e60 <HAL_SPI_MspInit+0xf4>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <HAL_SPI_MspInit+0xf4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dc6:	23e0      	movs	r3, #224	; 0xe0
 8001dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	4820      	ldr	r0, [pc, #128]	; (8001e64 <HAL_SPI_MspInit+0xf8>)
 8001de2:	f000 ff47 	bl	8002c74 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001de8:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <HAL_SPI_MspInit+0x100>)
 8001dea:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001dee:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001df2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e06:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e20:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001e28:	480f      	ldr	r0, [pc, #60]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e2a:	f000 fb91 	bl	8002550 <HAL_DMA_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001e34:	f7ff ff6a 	bl	8001d0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2023      	movs	r0, #35	; 0x23
 8001e4a:	f000 fb3c 	bl	80024c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e4e:	2023      	movs	r0, #35	; 0x23
 8001e50:	f000 fb55 	bl	80024fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e54:	bf00      	nop
 8001e56:	3728      	adds	r7, #40	; 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40013000 	.word	0x40013000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	2000019c 	.word	0x2000019c
 8001e6c:	40026410 	.word	0x40026410

08001e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <HAL_TIM_Base_MspInit+0x98>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d13d      	bne.n	8001efe <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <HAL_TIM_Base_MspInit+0xa4>)
 8001ea2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001ea6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001eaa:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ebe:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001ec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ec6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ece:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001ee2:	480b      	ldr	r0, [pc, #44]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001ee4:	f000 fb34 	bl	8002550 <HAL_DMA_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001eee:	f7ff ff0d 	bl	8001d0c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ef8:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	20001638 	.word	0x20001638
 8001f14:	40026428 	.word	0x40026428

08001f18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_TIM_PWM_MspInit+0x48>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d115      	bne.n	8001f56 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_TIM_PWM_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <HAL_TIM_PWM_MspInit+0x4c>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_TIM_PWM_MspInit+0x4c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	201d      	movs	r0, #29
 8001f4c:	f000 fabb 	bl	80024c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f50:	201d      	movs	r0, #29
 8001f52:	f000 fad4 	bl	80024fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_UART_MspInit+0x84>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12c      	bne.n	8001fe4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_UART_MspInit+0x88>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_UART_MspInit+0x88>)
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_UART_MspInit+0x88>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_UART_MspInit+0x88>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_UART_MspInit+0x88>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_UART_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <HAL_UART_MspInit+0x8c>)
 8001fe0:	f000 fe48 	bl	8002c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40011000 	.word	0x40011000
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200a:	e7fe      	b.n	800200a <HardFault_Handler+0x4>

0800200c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <MemManage_Handler+0x4>

08002012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <UsageFault_Handler+0x4>

0800201e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204c:	f000 f91c 	bl	8002288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}

08002054 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002058:	2010      	movs	r0, #16
 800205a:	f000 ffa9 	bl	8002fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <TIM3_IRQHandler+0x10>)
 800206a:	f002 fadb 	bl	8004624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20001698 	.word	0x20001698

08002078 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <SPI1_IRQHandler+0x10>)
 800207e:	f001 fdaf 	bl	8003be0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20001758 	.word	0x20001758

0800208c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA2_Stream0_IRQHandler+0x10>)
 8002092:	f000 fb85 	bl	80027a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000019c 	.word	0x2000019c

080020a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <DMA2_Stream1_IRQHandler+0x10>)
 80020a6:	f000 fb7b 	bl	80027a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20001638 	.word	0x20001638

080020b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
	return 1;
 80020b8:	2301      	movs	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_kill>:

int _kill(int pid, int sig)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020ce:	f005 f917 	bl	8007300 <__errno>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2216      	movs	r2, #22
 80020d6:	601a      	str	r2, [r3, #0]
	return -1;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_exit>:

void _exit (int status)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ffe7 	bl	80020c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020f6:	e7fe      	b.n	80020f6 <_exit+0x12>

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f005 f8ea 	bl	8007300 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20020000 	.word	0x20020000
 8002158:	00000400 	.word	0x00000400
 800215c:	20000190 	.word	0x20000190
 8002160:	200017f0 	.word	0x200017f0

08002164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <SystemInit+0x28>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <SystemInit+0x28>)
 8002170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <SystemInit+0x28>)
 800217a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800217e:	609a      	str	r2, [r3, #8]
#endif
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002196:	e003      	b.n	80021a0 <LoopCopyDataInit>

08002198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800219a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800219c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800219e:	3104      	adds	r1, #4

080021a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021a0:	480b      	ldr	r0, [pc, #44]	; (80021d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021a8:	d3f6      	bcc.n	8002198 <CopyDataInit>
  ldr  r2, =_sbss
 80021aa:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021ac:	e002      	b.n	80021b4 <LoopFillZerobss>

080021ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021b0:	f842 3b04 	str.w	r3, [r2], #4

080021b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021b8:	d3f9      	bcc.n	80021ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021ba:	f7ff ffd3 	bl	8002164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021be:	f005 f8a5 	bl	800730c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c2:	f7ff fb1b 	bl	80017fc <main>
  bx  lr    
 80021c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80021cc:	08008018 	.word	0x08008018
  ldr  r0, =_sdata
 80021d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021d4:	20000174 	.word	0x20000174
  ldr  r2, =_sbss
 80021d8:	20000174 	.word	0x20000174
  ldr  r3, = _ebss
 80021dc:	200017ec 	.word	0x200017ec

080021e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC_IRQHandler>
	...

080021e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <HAL_Init+0x40>)
 80021ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_Init+0x40>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <HAL_Init+0x40>)
 80021fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_Init+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_Init+0x40>)
 8002206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800220c:	2003      	movs	r0, #3
 800220e:	f000 f94f 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002212:	2000      	movs	r0, #0
 8002214:	f000 f808 	bl	8002228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002218:	f7ff fd80 	bl	8001d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023c00 	.word	0x40023c00

08002228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_InitTick+0x54>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_InitTick+0x58>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800223e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f975 	bl	8002536 <HAL_SYSTICK_Config>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e00e      	b.n	8002274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b0f      	cmp	r3, #15
 800225a:	d80a      	bhi.n	8002272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800225c:	2200      	movs	r2, #0
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002264:	f000 f92f 	bl	80024c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <HAL_InitTick+0x5c>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e000      	b.n	8002274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000000 	.word	0x20000000
 8002280:	20000008 	.word	0x20000008
 8002284:	20000004 	.word	0x20000004

08002288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_IncTick+0x20>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_IncTick+0x24>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4413      	add	r3, r2
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <HAL_IncTick+0x24>)
 800229a:	6013      	str	r3, [r2, #0]
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000008 	.word	0x20000008
 80022ac:	200017d8 	.word	0x200017d8

080022b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return uwTick;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_GetTick+0x14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	200017d8 	.word	0x200017d8

080022c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <__NVIC_EnableIRQ+0x38>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db12      	blt.n	80023a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	490a      	ldr	r1, [pc, #40]	; (80023ac <__NVIC_DisableIRQ+0x44>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	3320      	adds	r3, #32
 8002390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002394:	f3bf 8f4f 	dsb	sy
}
 8002398:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800239a:	f3bf 8f6f 	isb	sy
}
 800239e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247c:	d301      	bcc.n	8002482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2301      	movs	r3, #1
 8002480:	e00f      	b.n	80024a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SysTick_Config+0x40>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248a:	210f      	movs	r1, #15
 800248c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002490:	f7ff ff8e 	bl	80023b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x40>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff05 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff1a 	bl	8002310 <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff8e 	bl	8002404 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5d 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff0d 	bl	800232c <__NVIC_EnableIRQ>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff1d 	bl	8002368 <__NVIC_DisableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff94 	bl	800246c <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff fea8 	bl	80022b0 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e099      	b.n	80026a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800258c:	e00f      	b.n	80025ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800258e:	f7ff fe8f 	bl	80022b0 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b05      	cmp	r3, #5
 800259a:	d908      	bls.n	80025ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2203      	movs	r2, #3
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e078      	b.n	80026a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e8      	bne.n	800258e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <HAL_DMA_Init+0x158>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	2b04      	cmp	r3, #4
 8002606:	d107      	bne.n	8002618 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	4313      	orrs	r3, r2
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f023 0307 	bic.w	r3, r3, #7
 800262e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2b04      	cmp	r3, #4
 8002640:	d117      	bne.n	8002672 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00e      	beq.n	8002672 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fa91 	bl	8002b7c <DMA_CheckFifoParam>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2240      	movs	r2, #64	; 0x40
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800266e:	2301      	movs	r3, #1
 8002670:	e016      	b.n	80026a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fa48 	bl	8002b10 <DMA_CalcBaseAndBitshift>
 8002680:	4603      	mov	r3, r0
 8002682:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	223f      	movs	r2, #63	; 0x3f
 800268a:	409a      	lsls	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	f010803f 	.word	0xf010803f

080026ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_DMA_Start_IT+0x26>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e040      	b.n	8002754 <HAL_DMA_Start_IT+0xa8>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d12f      	bne.n	8002746 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f9da 	bl	8002ab4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	223f      	movs	r2, #63	; 0x3f
 8002706:	409a      	lsls	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0216 	orr.w	r2, r2, #22
 800271a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0208 	orr.w	r2, r2, #8
 8002732:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e005      	b.n	8002752 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800274e:	2302      	movs	r3, #2
 8002750:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002752:	7dfb      	ldrb	r3, [r7, #23]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d004      	beq.n	800277a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00c      	b.n	8002794 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2205      	movs	r2, #5
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027ac:	4b92      	ldr	r3, [pc, #584]	; (80029f8 <HAL_DMA_IRQHandler+0x258>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a92      	ldr	r2, [pc, #584]	; (80029fc <HAL_DMA_IRQHandler+0x25c>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0a9b      	lsrs	r3, r3, #10
 80027b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	2208      	movs	r2, #8
 80027cc:	409a      	lsls	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01a      	beq.n	800280c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0204 	bic.w	r2, r2, #4
 80027f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	2208      	movs	r2, #8
 80027fa:	409a      	lsls	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	2201      	movs	r2, #1
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d012      	beq.n	8002842 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	2201      	movs	r2, #1
 8002830:	409a      	lsls	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f043 0202 	orr.w	r2, r3, #2
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2204      	movs	r2, #4
 8002848:	409a      	lsls	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d012      	beq.n	8002878 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2204      	movs	r2, #4
 8002866:	409a      	lsls	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2210      	movs	r2, #16
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d043      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d03c      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	2210      	movs	r2, #16
 800289c:	409a      	lsls	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d018      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d024      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
 80028ce:	e01f      	b.n	8002910 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01b      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
 80028e0:	e016      	b.n	8002910 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0208 	bic.w	r2, r2, #8
 80028fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	2220      	movs	r2, #32
 8002916:	409a      	lsls	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 808e 	beq.w	8002a3e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8086 	beq.w	8002a3e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2220      	movs	r2, #32
 8002938:	409a      	lsls	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b05      	cmp	r3, #5
 8002948:	d136      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0216 	bic.w	r2, r2, #22
 8002958:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002968:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d103      	bne.n	800297a <HAL_DMA_IRQHandler+0x1da>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0208 	bic.w	r2, r2, #8
 8002988:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	223f      	movs	r2, #63	; 0x3f
 8002990:	409a      	lsls	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d07d      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
        }
        return;
 80029b6:	e078      	b.n	8002aaa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d01c      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d108      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d030      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
 80029e4:	e02b      	b.n	8002a3e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d027      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
 80029f6:	e022      	b.n	8002a3e <HAL_DMA_IRQHandler+0x29e>
 80029f8:	20000000 	.word	0x20000000
 80029fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0210 	bic.w	r2, r2, #16
 8002a1c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d032      	beq.n	8002aac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d022      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2205      	movs	r2, #5
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d307      	bcc.n	8002a86 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f2      	bne.n	8002a6a <HAL_DMA_IRQHandler+0x2ca>
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a86:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
 8002aa8:	e000      	b.n	8002aac <HAL_DMA_IRQHandler+0x30c>
        return;
 8002aaa:	bf00      	nop
    }
  }
}
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop

08002ab4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d108      	bne.n	8002af4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002af2:	e007      	b.n	8002b04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	60da      	str	r2, [r3, #12]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	3b10      	subs	r3, #16
 8002b20:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <DMA_CalcBaseAndBitshift+0x64>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b2a:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <DMA_CalcBaseAndBitshift+0x68>)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d909      	bls.n	8002b52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	1d1a      	adds	r2, r3, #4
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b50:	e007      	b.n	8002b62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	aaaaaaab 	.word	0xaaaaaaab
 8002b78:	08007d94 	.word	0x08007d94

08002b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11f      	bne.n	8002bd6 <DMA_CheckFifoParam+0x5a>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d856      	bhi.n	8002c4a <DMA_CheckFifoParam+0xce>
 8002b9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <DMA_CheckFifoParam+0x28>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bc7 	.word	0x08002bc7
 8002bac:	08002bb5 	.word	0x08002bb5
 8002bb0:	08002c4b 	.word	0x08002c4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d046      	beq.n	8002c4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e043      	b.n	8002c4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bce:	d140      	bne.n	8002c52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd4:	e03d      	b.n	8002c52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bde:	d121      	bne.n	8002c24 <DMA_CheckFifoParam+0xa8>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d837      	bhi.n	8002c56 <DMA_CheckFifoParam+0xda>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <DMA_CheckFifoParam+0x70>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c03 	.word	0x08002c03
 8002bf4:	08002bfd 	.word	0x08002bfd
 8002bf8:	08002c15 	.word	0x08002c15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e030      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d025      	beq.n	8002c5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c12:	e022      	b.n	8002c5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c1c:	d11f      	bne.n	8002c5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c22:	e01c      	b.n	8002c5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d903      	bls.n	8002c32 <DMA_CheckFifoParam+0xb6>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d003      	beq.n	8002c38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c30:	e018      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      break;
 8002c36:	e015      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      break;
 8002c48:	e00b      	b.n	8002c62 <DMA_CheckFifoParam+0xe6>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e00a      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e008      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
 8002c54:	e006      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
 8002c58:	e004      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e002      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
    }
  } 
  
  return status; 
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	e159      	b.n	8002f44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c90:	2201      	movs	r2, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	f040 8148 	bne.w	8002f3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d00b      	beq.n	8002cce <HAL_GPIO_Init+0x5a>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d007      	beq.n	8002cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cc2:	2b11      	cmp	r3, #17
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b12      	cmp	r3, #18
 8002ccc:	d130      	bne.n	8002d30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 0201 	and.w	r2, r3, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0xfc>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b12      	cmp	r3, #18
 8002d6e:	d123      	bne.n	8002db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	08da      	lsrs	r2, r3, #3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3208      	adds	r2, #8
 8002d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	220f      	movs	r2, #15
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	08da      	lsrs	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3208      	adds	r2, #8
 8002db2:	69b9      	ldr	r1, [r7, #24]
 8002db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0203 	and.w	r2, r3, #3
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80a2 	beq.w	8002f3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b57      	ldr	r3, [pc, #348]	; (8002f5c <HAL_GPIO_Init+0x2e8>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	4a56      	ldr	r2, [pc, #344]	; (8002f5c <HAL_GPIO_Init+0x2e8>)
 8002e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e08:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0a:	4b54      	ldr	r3, [pc, #336]	; (8002f5c <HAL_GPIO_Init+0x2e8>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e16:	4a52      	ldr	r2, [pc, #328]	; (8002f60 <HAL_GPIO_Init+0x2ec>)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a49      	ldr	r2, [pc, #292]	; (8002f64 <HAL_GPIO_Init+0x2f0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d019      	beq.n	8002e76 <HAL_GPIO_Init+0x202>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a48      	ldr	r2, [pc, #288]	; (8002f68 <HAL_GPIO_Init+0x2f4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <HAL_GPIO_Init+0x1fe>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a47      	ldr	r2, [pc, #284]	; (8002f6c <HAL_GPIO_Init+0x2f8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00d      	beq.n	8002e6e <HAL_GPIO_Init+0x1fa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a46      	ldr	r2, [pc, #280]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d007      	beq.n	8002e6a <HAL_GPIO_Init+0x1f6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a45      	ldr	r2, [pc, #276]	; (8002f74 <HAL_GPIO_Init+0x300>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <HAL_GPIO_Init+0x1f2>
 8002e62:	2304      	movs	r3, #4
 8002e64:	e008      	b.n	8002e78 <HAL_GPIO_Init+0x204>
 8002e66:	2307      	movs	r3, #7
 8002e68:	e006      	b.n	8002e78 <HAL_GPIO_Init+0x204>
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e004      	b.n	8002e78 <HAL_GPIO_Init+0x204>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e002      	b.n	8002e78 <HAL_GPIO_Init+0x204>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_GPIO_Init+0x204>
 8002e76:	2300      	movs	r3, #0
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f002 0203 	and.w	r2, r2, #3
 8002e7e:	0092      	lsls	r2, r2, #2
 8002e80:	4093      	lsls	r3, r2
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e88:	4935      	ldr	r1, [pc, #212]	; (8002f60 <HAL_GPIO_Init+0x2ec>)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	3302      	adds	r3, #2
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e96:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <HAL_GPIO_Init+0x304>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eba:	4a2f      	ldr	r2, [pc, #188]	; (8002f78 <HAL_GPIO_Init+0x304>)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_GPIO_Init+0x304>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee4:	4a24      	ldr	r2, [pc, #144]	; (8002f78 <HAL_GPIO_Init+0x304>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_GPIO_Init+0x304>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f0e:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <HAL_GPIO_Init+0x304>)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <HAL_GPIO_Init+0x304>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f38:	4a0f      	ldr	r2, [pc, #60]	; (8002f78 <HAL_GPIO_Init+0x304>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	f67f aea2 	bls.w	8002c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40013800 	.word	0x40013800
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40013c00 	.word	0x40013c00

08002f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f98:	e003      	b.n	8002fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	041a      	lsls	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	619a      	str	r2, [r3, #24]
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fc6:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f003 fed0 	bl	8006d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40013c00 	.word	0x40013c00

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e25b      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d075      	beq.n	80030ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffe:	4ba3      	ldr	r3, [pc, #652]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b04      	cmp	r3, #4
 8003008:	d00c      	beq.n	8003024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300a:	4ba0      	ldr	r3, [pc, #640]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003012:	2b08      	cmp	r3, #8
 8003014:	d112      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003016:	4b9d      	ldr	r3, [pc, #628]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003022:	d10b      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	4b99      	ldr	r3, [pc, #612]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d05b      	beq.n	80030e8 <HAL_RCC_OscConfig+0x108>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d157      	bne.n	80030e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e236      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003044:	d106      	bne.n	8003054 <HAL_RCC_OscConfig+0x74>
 8003046:	4b91      	ldr	r3, [pc, #580]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a90      	ldr	r2, [pc, #576]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e01d      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x98>
 800305e:	4b8b      	ldr	r3, [pc, #556]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a8a      	ldr	r2, [pc, #552]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a87      	ldr	r2, [pc, #540]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003078:	4b84      	ldr	r3, [pc, #528]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a83      	ldr	r2, [pc, #524]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800307e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a80      	ldr	r2, [pc, #512]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800308a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7ff f90a 	bl	80022b0 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a0:	f7ff f906 	bl	80022b0 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e1fb      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b76      	ldr	r3, [pc, #472]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0xc0>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7ff f8f6 	bl	80022b0 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c8:	f7ff f8f2 	bl	80022b0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1e7      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	4b6c      	ldr	r3, [pc, #432]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0xe8>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d063      	beq.n	80031be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f6:	4b65      	ldr	r3, [pc, #404]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b62      	ldr	r3, [pc, #392]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310a:	2b08      	cmp	r3, #8
 800310c:	d11c      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310e:	4b5f      	ldr	r3, [pc, #380]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	4b5c      	ldr	r3, [pc, #368]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d001      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e1bb      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003132:	4b56      	ldr	r3, [pc, #344]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4952      	ldr	r1, [pc, #328]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	e03a      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003150:	4b4f      	ldr	r3, [pc, #316]	; (8003290 <HAL_RCC_OscConfig+0x2b0>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7ff f8ab 	bl	80022b0 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315e:	f7ff f8a7 	bl	80022b0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e19c      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4940      	ldr	r1, [pc, #256]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
 8003190:	e015      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b3f      	ldr	r3, [pc, #252]	; (8003290 <HAL_RCC_OscConfig+0x2b0>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7ff f88a 	bl	80022b0 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a0:	f7ff f886 	bl	80022b0 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e17b      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d030      	beq.n	800322c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d016      	beq.n	8003200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d2:	4b30      	ldr	r3, [pc, #192]	; (8003294 <HAL_RCC_OscConfig+0x2b4>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7ff f86a 	bl	80022b0 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e0:	f7ff f866 	bl	80022b0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e15b      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	4b26      	ldr	r3, [pc, #152]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x200>
 80031fe:	e015      	b.n	800322c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x2b4>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7ff f853 	bl	80022b0 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320e:	f7ff f84f 	bl	80022b0 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e144      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f0      	bne.n	800320e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a0 	beq.w	800337a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	4a0e      	ldr	r2, [pc, #56]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003258:	6413      	str	r3, [r2, #64]	; 0x40
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_OscConfig+0x2b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d121      	bne.n	80032ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_RCC_OscConfig+0x2b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_RCC_OscConfig+0x2b8>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7ff f815 	bl	80022b0 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	e011      	b.n	80032ae <HAL_RCC_OscConfig+0x2ce>
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	42470000 	.word	0x42470000
 8003294:	42470e80 	.word	0x42470e80
 8003298:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7ff f808 	bl	80022b0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0fd      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b81      	ldr	r3, [pc, #516]	; (80034b4 <HAL_RCC_OscConfig+0x4d4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x2f0>
 80032c2:	4b7d      	ldr	r3, [pc, #500]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a7c      	ldr	r2, [pc, #496]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
 80032ce:	e01c      	b.n	800330a <HAL_RCC_OscConfig+0x32a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x312>
 80032d8:	4b77      	ldr	r3, [pc, #476]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a76      	ldr	r2, [pc, #472]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
 80032e4:	4b74      	ldr	r3, [pc, #464]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a73      	ldr	r2, [pc, #460]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	e00b      	b.n	800330a <HAL_RCC_OscConfig+0x32a>
 80032f2:	4b71      	ldr	r3, [pc, #452]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a70      	ldr	r2, [pc, #448]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
 80032fe:	4b6e      	ldr	r3, [pc, #440]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a6d      	ldr	r2, [pc, #436]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d015      	beq.n	800333e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fe ffcd 	bl	80022b0 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fe ffc9 	bl	80022b0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0bc      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ee      	beq.n	800331a <HAL_RCC_OscConfig+0x33a>
 800333c:	e014      	b.n	8003368 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7fe ffb7 	bl	80022b0 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fe ffb3 	bl	80022b0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0a6      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335c:	4b56      	ldr	r3, [pc, #344]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ee      	bne.n	8003346 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d105      	bne.n	800337a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336e:	4b52      	ldr	r3, [pc, #328]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a51      	ldr	r2, [pc, #324]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 8003374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8092 	beq.w	80034a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003384:	4b4c      	ldr	r3, [pc, #304]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	d05c      	beq.n	800344a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d141      	bne.n	800341c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003398:	4b48      	ldr	r3, [pc, #288]	; (80034bc <HAL_RCC_OscConfig+0x4dc>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fe ff87 	bl	80022b0 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fe ff83 	bl	80022b0 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e078      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b8:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	019b      	lsls	r3, r3, #6
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	061b      	lsls	r3, r3, #24
 80033e8:	4933      	ldr	r1, [pc, #204]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ee:	4b33      	ldr	r3, [pc, #204]	; (80034bc <HAL_RCC_OscConfig+0x4dc>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe ff5c 	bl	80022b0 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe ff58 	bl	80022b0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e04d      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x41c>
 800341a:	e045      	b.n	80034a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_RCC_OscConfig+0x4dc>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003422:	f7fe ff45 	bl	80022b0 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342a:	f7fe ff41 	bl	80022b0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e036      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343c:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f0      	bne.n	800342a <HAL_RCC_OscConfig+0x44a>
 8003448:	e02e      	b.n	80034a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e029      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003456:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <HAL_RCC_OscConfig+0x4d8>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	429a      	cmp	r2, r3
 8003468:	d11c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d115      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800347e:	4013      	ands	r3, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003484:	4293      	cmp	r3, r2
 8003486:	d10d      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40007000 	.word	0x40007000
 80034b8:	40023800 	.word	0x40023800
 80034bc:	42470060 	.word	0x42470060

080034c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0cc      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b68      	ldr	r3, [pc, #416]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d90c      	bls.n	80034fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b65      	ldr	r3, [pc, #404]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b63      	ldr	r3, [pc, #396]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0b8      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d020      	beq.n	800354a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003514:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4a58      	ldr	r2, [pc, #352]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800351e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800352c:	4b53      	ldr	r3, [pc, #332]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a52      	ldr	r2, [pc, #328]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003538:	4b50      	ldr	r3, [pc, #320]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	494d      	ldr	r1, [pc, #308]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d044      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b47      	ldr	r3, [pc, #284]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d119      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e07f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d003      	beq.n	800357e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357a:	2b03      	cmp	r3, #3
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	4b3f      	ldr	r3, [pc, #252]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e06f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358e:	4b3b      	ldr	r3, [pc, #236]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e067      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4934      	ldr	r1, [pc, #208]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b0:	f7fe fe7e 	bl	80022b0 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b8:	f7fe fe7a 	bl	80022b0 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e04f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 020c 	and.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	429a      	cmp	r2, r3
 80035de:	d1eb      	bne.n	80035b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d20c      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e032      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4916      	ldr	r1, [pc, #88]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	490e      	ldr	r1, [pc, #56]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003646:	f000 f821 	bl	800368c <HAL_RCC_GetSysClockFreq>
 800364a:	4602      	mov	r2, r0
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	490a      	ldr	r1, [pc, #40]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	5ccb      	ldrb	r3, [r1, r3]
 800365a:	fa22 f303 	lsr.w	r3, r2, r3
 800365e:	4a09      	ldr	r2, [pc, #36]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fdde 	bl	8002228 <HAL_InitTick>

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023c00 	.word	0x40023c00
 800367c:	40023800 	.word	0x40023800
 8003680:	08007d7c 	.word	0x08007d7c
 8003684:	20000000 	.word	0x20000000
 8003688:	20000004 	.word	0x20000004

0800368c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	b5b0      	push	{r4, r5, r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003692:	2100      	movs	r1, #0
 8003694:	6079      	str	r1, [r7, #4]
 8003696:	2100      	movs	r1, #0
 8003698:	60f9      	str	r1, [r7, #12]
 800369a:	2100      	movs	r1, #0
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800369e:	2100      	movs	r1, #0
 80036a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a2:	4952      	ldr	r1, [pc, #328]	; (80037ec <HAL_RCC_GetSysClockFreq+0x160>)
 80036a4:	6889      	ldr	r1, [r1, #8]
 80036a6:	f001 010c 	and.w	r1, r1, #12
 80036aa:	2908      	cmp	r1, #8
 80036ac:	d00d      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0x3e>
 80036ae:	2908      	cmp	r1, #8
 80036b0:	f200 8094 	bhi.w	80037dc <HAL_RCC_GetSysClockFreq+0x150>
 80036b4:	2900      	cmp	r1, #0
 80036b6:	d002      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x32>
 80036b8:	2904      	cmp	r1, #4
 80036ba:	d003      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x38>
 80036bc:	e08e      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036be:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80036c0:	60bb      	str	r3, [r7, #8]
       break;
 80036c2:	e08e      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036c4:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80036c6:	60bb      	str	r3, [r7, #8]
      break;
 80036c8:	e08b      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ca:	4948      	ldr	r1, [pc, #288]	; (80037ec <HAL_RCC_GetSysClockFreq+0x160>)
 80036cc:	6849      	ldr	r1, [r1, #4]
 80036ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80036d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036d4:	4945      	ldr	r1, [pc, #276]	; (80037ec <HAL_RCC_GetSysClockFreq+0x160>)
 80036d6:	6849      	ldr	r1, [r1, #4]
 80036d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80036dc:	2900      	cmp	r1, #0
 80036de:	d024      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e0:	4942      	ldr	r1, [pc, #264]	; (80037ec <HAL_RCC_GetSysClockFreq+0x160>)
 80036e2:	6849      	ldr	r1, [r1, #4]
 80036e4:	0989      	lsrs	r1, r1, #6
 80036e6:	4608      	mov	r0, r1
 80036e8:	f04f 0100 	mov.w	r1, #0
 80036ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80036f0:	f04f 0500 	mov.w	r5, #0
 80036f4:	ea00 0204 	and.w	r2, r0, r4
 80036f8:	ea01 0305 	and.w	r3, r1, r5
 80036fc:	493d      	ldr	r1, [pc, #244]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80036fe:	fb01 f003 	mul.w	r0, r1, r3
 8003702:	2100      	movs	r1, #0
 8003704:	fb01 f102 	mul.w	r1, r1, r2
 8003708:	1844      	adds	r4, r0, r1
 800370a:	493a      	ldr	r1, [pc, #232]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800370c:	fba2 0101 	umull	r0, r1, r2, r1
 8003710:	1863      	adds	r3, r4, r1
 8003712:	4619      	mov	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	461a      	mov	r2, r3
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	f7fc ffa0 	bl	8000660 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4613      	mov	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e04a      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	4b30      	ldr	r3, [pc, #192]	; (80037ec <HAL_RCC_GetSysClockFreq+0x160>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	461a      	mov	r2, r3
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	f240 10ff 	movw	r0, #511	; 0x1ff
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	ea02 0400 	and.w	r4, r2, r0
 8003742:	ea03 0501 	and.w	r5, r3, r1
 8003746:	4620      	mov	r0, r4
 8003748:	4629      	mov	r1, r5
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	014b      	lsls	r3, r1, #5
 8003754:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003758:	0142      	lsls	r2, r0, #5
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	1b00      	subs	r0, r0, r4
 8003760:	eb61 0105 	sbc.w	r1, r1, r5
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	018b      	lsls	r3, r1, #6
 800376e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003772:	0182      	lsls	r2, r0, #6
 8003774:	1a12      	subs	r2, r2, r0
 8003776:	eb63 0301 	sbc.w	r3, r3, r1
 800377a:	f04f 0000 	mov.w	r0, #0
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	00d9      	lsls	r1, r3, #3
 8003784:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003788:	00d0      	lsls	r0, r2, #3
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	1912      	adds	r2, r2, r4
 8003790:	eb45 0303 	adc.w	r3, r5, r3
 8003794:	f04f 0000 	mov.w	r0, #0
 8003798:	f04f 0100 	mov.w	r1, #0
 800379c:	0299      	lsls	r1, r3, #10
 800379e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037a2:	0290      	lsls	r0, r2, #10
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	f7fc ff54 	bl	8000660 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4613      	mov	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_RCC_GetSysClockFreq+0x160>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	60bb      	str	r3, [r7, #8]
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80037de:	60bb      	str	r3, [r7, #8]
      break;
 80037e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e2:	68bb      	ldr	r3, [r7, #8]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bdb0      	pop	{r4, r5, r7, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	00f42400 	.word	0x00f42400
 80037f4:	017d7840 	.word	0x017d7840

080037f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_RCC_GetHCLKFreq+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20000000 	.word	0x20000000

08003810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003814:	f7ff fff0 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	0a9b      	lsrs	r3, r3, #10
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4903      	ldr	r1, [pc, #12]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003826:	5ccb      	ldrb	r3, [r1, r3]
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40023800 	.word	0x40023800
 8003834:	08007d8c 	.word	0x08007d8c

08003838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800383c:	f7ff ffdc 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003840:	4602      	mov	r2, r0
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	0b5b      	lsrs	r3, r3, #13
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4903      	ldr	r1, [pc, #12]	; (800385c <HAL_RCC_GetPCLK2Freq+0x24>)
 800384e:	5ccb      	ldrb	r3, [r1, r3]
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40023800 	.word	0x40023800
 800385c:	08007d8c 	.word	0x08007d8c

08003860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e076      	b.n	8003960 <HAL_SPI_Init+0x100>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d126      	bne.n	80038d2 <HAL_SPI_Init+0x72>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a36      	ldr	r2, [pc, #216]	; (8003968 <HAL_SPI_Init+0x108>)
 8003890:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a35      	ldr	r2, [pc, #212]	; (800396c <HAL_SPI_Init+0x10c>)
 8003896:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a35      	ldr	r2, [pc, #212]	; (8003970 <HAL_SPI_Init+0x110>)
 800389c:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a34      	ldr	r2, [pc, #208]	; (8003974 <HAL_SPI_Init+0x114>)
 80038a2:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a34      	ldr	r2, [pc, #208]	; (8003978 <HAL_SPI_Init+0x118>)
 80038a8:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a33      	ldr	r2, [pc, #204]	; (800397c <HAL_SPI_Init+0x11c>)
 80038ae:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a33      	ldr	r2, [pc, #204]	; (8003980 <HAL_SPI_Init+0x120>)
 80038b4:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a32      	ldr	r2, [pc, #200]	; (8003984 <HAL_SPI_Init+0x124>)
 80038ba:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <HAL_SPI_Init+0x6a>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a30      	ldr	r2, [pc, #192]	; (8003988 <HAL_SPI_Init+0x128>)
 80038c8:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	ea42 0103 	orr.w	r1, r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	f003 0104 	and.w	r1, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69da      	ldr	r2, [r3, #28]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800394e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	08003de1 	.word	0x08003de1
 800396c:	08003df5 	.word	0x08003df5
 8003970:	08003e09 	.word	0x08003e09
 8003974:	08003e1d 	.word	0x08003e1d
 8003978:	08003e31 	.word	0x08003e31
 800397c:	08003e45 	.word	0x08003e45
 8003980:	08003e59 	.word	0x08003e59
 8003984:	08003e6d 	.word	0x08003e6d
 8003988:	08001d6d 	.word	0x08001d6d

0800398c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d110      	bne.n	80039c8 <HAL_SPI_Receive_IT+0x3c>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ae:	d10b      	bne.n	80039c8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2204      	movs	r2, #4
 80039b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f87a 	bl	8003ab8 <HAL_SPI_TransmitReceive_IT>
 80039c4:	4603      	mov	r3, r0
 80039c6:	e06e      	b.n	8003aa6 <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_SPI_Receive_IT+0x4a>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e067      	b.n	8003aa6 <HAL_SPI_Receive_IT+0x11a>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d002      	beq.n	80039f0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
 80039ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039ee:	e055      	b.n	8003a9c <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_SPI_Receive_IT+0x70>
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a00:	e04c      	b.n	8003a9c <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2204      	movs	r2, #4
 8003a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a1a      	ldr	r2, [pc, #104]	; (8003ab0 <HAL_SPI_Receive_IT+0x124>)
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
 8003a48:	e002      	b.n	8003a50 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a19      	ldr	r2, [pc, #100]	; (8003ab4 <HAL_SPI_Receive_IT+0x128>)
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a58:	d107      	bne.n	8003a6a <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003a78:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d008      	beq.n	8003a9a <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e000      	b.n	8003a9c <HAL_SPI_Receive_IT+0x110>
  }

error :
 8003a9a:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	08004077 	.word	0x08004077
 8003ab4:	0800402d 	.word	0x0800402d

08003ab8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_SPI_TransmitReceive_IT+0x20>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e075      	b.n	8003bc4 <HAL_SPI_TransmitReceive_IT+0x10c>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ae6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003aee:	7dbb      	ldrb	r3, [r7, #22]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d00d      	beq.n	8003b10 <HAL_SPI_TransmitReceive_IT+0x58>
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afa:	d106      	bne.n	8003b0a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <HAL_SPI_TransmitReceive_IT+0x52>
 8003b04:	7dbb      	ldrb	r3, [r7, #22]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d002      	beq.n	8003b10 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b0e:	e054      	b.n	8003bba <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003b1c:	887b      	ldrh	r3, [r7, #2]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b26:	e048      	b.n	8003bba <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d003      	beq.n	8003b3c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2205      	movs	r2, #5
 8003b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	887a      	ldrh	r2, [r7, #2]
 8003b4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	887a      	ldrh	r2, [r7, #2]
 8003b52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	887a      	ldrh	r2, [r7, #2]
 8003b5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	887a      	ldrh	r2, [r7, #2]
 8003b64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
 8003b7a:	e005      	b.n	8003b88 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <HAL_SPI_TransmitReceive_IT+0x124>)
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003b96:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d008      	beq.n	8003bb8 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e000      	b.n	8003bba <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003bb8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	08003f6f 	.word	0x08003f6f
 8003bd4:	08003fcf 	.word	0x08003fcf
 8003bd8:	08003eab 	.word	0x08003eab
 8003bdc:	08003f0f 	.word	0x08003f0f

08003be0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10f      	bne.n	8003c24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
    return;
 8003c22:	e0d8      	b.n	8003dd6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_SPI_IRQHandler+0x66>
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	09db      	lsrs	r3, r3, #7
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d004      	beq.n	8003c46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
    return;
 8003c44:	e0c7      	b.n	8003dd6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10c      	bne.n	8003c6c <HAL_SPI_IRQHandler+0x8c>
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	0a1b      	lsrs	r3, r3, #8
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80b5 	beq.w	8003dd6 <HAL_SPI_IRQHandler+0x1f6>
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80ae 	beq.w	8003dd6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d023      	beq.n	8003cce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d011      	beq.n	8003cb6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	f043 0204 	orr.w	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	e00b      	b.n	8003cce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	693b      	ldr	r3, [r7, #16]
        return;
 8003ccc:	e083      	b.n	8003dd6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d014      	beq.n	8003d04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	f043 0201 	orr.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00c      	beq.n	8003d2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f043 0208 	orr.w	r2, r3, #8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d050      	beq.n	8003dd4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <HAL_SPI_IRQHandler+0x17e>
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d034      	beq.n	8003dc8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0203 	bic.w	r2, r2, #3
 8003d6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d011      	beq.n	8003d9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7a:	4a18      	ldr	r2, [pc, #96]	; (8003ddc <HAL_SPI_IRQHandler+0x1fc>)
 8003d7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fcea 	bl	800275c <HAL_DMA_Abort_IT>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d017      	beq.n	8003dd2 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da6:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <HAL_SPI_IRQHandler+0x1fc>)
 8003da8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fcd4 	bl	800275c <HAL_DMA_Abort_IT>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003dc6:	e004      	b.n	8003dd2 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003dd0:	e000      	b.n	8003dd4 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8003dd2:	bf00      	nop
    return;
 8003dd4:	bf00      	nop
  }
}
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	08003e81 	.word	0x08003e81

08003de0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f103 020c 	add.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	7812      	ldrb	r2, [r2, #0]
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ef4:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f9ed 	bl	80042e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	7812      	ldrb	r2, [r2, #0]
 8003f22:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10f      	bne.n	8003f66 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f54:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f9bd 	bl	80042e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	b292      	uxth	r2, r2
 8003f82:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	1c9a      	adds	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10f      	bne.n	8003fc6 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb4:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f98d 	bl	80042e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	881a      	ldrh	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	1c9a      	adds	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10f      	bne.n	8004024 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004012:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d102      	bne.n	8004024 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f95e 	bl	80042e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f103 020c 	add.w	r2, r3, #12
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	7812      	ldrb	r2, [r2, #0]
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f9af 	bl	80043cc <SPI_CloseRx_ISR>
  }
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	b292      	uxth	r2, r2
 800408a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	1c9a      	adds	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f98c 	bl	80043cc <SPI_CloseRx_ISR>
  }
}
 80040b4:	bf00      	nop
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040cc:	e04c      	b.n	8004168 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d4:	d048      	beq.n	8004168 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80040d6:	f7fe f8eb 	bl	80022b0 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d902      	bls.n	80040ec <SPI_WaitFlagStateUntilTimeout+0x30>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d13d      	bne.n	8004168 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004104:	d111      	bne.n	800412a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410e:	d004      	beq.n	800411a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004118:	d107      	bne.n	800412a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004128:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004132:	d10f      	bne.n	8004154 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004152:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e00f      	b.n	8004188 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4013      	ands	r3, r2
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	429a      	cmp	r2, r3
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	429a      	cmp	r2, r3
 8004184:	d1a3      	bne.n	80040ce <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a4:	d111      	bne.n	80041ca <SPI_EndRxTransaction+0x3a>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ae:	d004      	beq.n	80041ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b8:	d107      	bne.n	80041ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d2:	d12a      	bne.n	800422a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041dc:	d012      	beq.n	8004204 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2180      	movs	r1, #128	; 0x80
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff ff67 	bl	80040bc <SPI_WaitFlagStateUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d02d      	beq.n	8004250 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	f043 0220 	orr.w	r2, r3, #32
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e026      	b.n	8004252 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2200      	movs	r2, #0
 800420c:	2101      	movs	r1, #1
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff ff54 	bl	80040bc <SPI_WaitFlagStateUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01a      	beq.n	8004250 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e013      	b.n	8004252 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2200      	movs	r2, #0
 8004232:	2101      	movs	r1, #1
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff ff41 	bl	80040bc <SPI_WaitFlagStateUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e000      	b.n	8004252 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004268:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <SPI_EndRxTxTransaction+0x7c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <SPI_EndRxTxTransaction+0x80>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0d5b      	lsrs	r3, r3, #21
 8004274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004286:	d112      	bne.n	80042ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2200      	movs	r2, #0
 8004290:	2180      	movs	r1, #128	; 0x80
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff ff12 	bl	80040bc <SPI_WaitFlagStateUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d016      	beq.n	80042cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	f043 0220 	orr.w	r2, r3, #32
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e00f      	b.n	80042ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d0f2      	beq.n	80042ae <SPI_EndRxTxTransaction+0x52>
 80042c8:	e000      	b.n	80042cc <SPI_EndRxTxTransaction+0x70>
        break;
 80042ca:	bf00      	nop
  }

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000000 	.word	0x20000000
 80042dc:	165e9f81 	.word	0x165e9f81

080042e0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80042e8:	4b36      	ldr	r3, [pc, #216]	; (80043c4 <SPI_CloseRxTx_ISR+0xe4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a36      	ldr	r2, [pc, #216]	; (80043c8 <SPI_CloseRxTx_ISR+0xe8>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0a5b      	lsrs	r3, r3, #9
 80042f4:	2264      	movs	r2, #100	; 0x64
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
 80042fa:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80042fc:	f7fd ffd8 	bl	80022b0 <HAL_GetTick>
 8004300:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0220 	bic.w	r2, r2, #32
 8004310:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004324:	e009      	b.n	800433a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	3b01      	subs	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0eb      	beq.n	8004312 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	2164      	movs	r1, #100	; 0x64
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff ff8c 	bl	800425c <SPI_EndRxTxTransaction>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	2b00      	cmp	r3, #0
 800437a:	d117      	bne.n	80043ac <SPI_CloseRxTx_ISR+0xcc>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b04      	cmp	r3, #4
 8004386:	d108      	bne.n	800439a <SPI_CloseRxTx_ISR+0xba>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004398:	e010      	b.n	80043bc <SPI_CloseRxTx_ISR+0xdc>
        hspi->State = HAL_SPI_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        hspi->TxRxCpltCallback(hspi);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
}
 80043aa:	e007      	b.n	80043bc <SPI_CloseRxTx_ISR+0xdc>
      hspi->State = HAL_SPI_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      hspi->ErrorCallback(hspi);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4798      	blx	r3
}
 80043bc:	bf00      	nop
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20000000 	.word	0x20000000
 80043c8:	057619f1 	.word	0x057619f1

080043cc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043e2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80043e4:	f7fd ff64 	bl	80022b0 <HAL_GetTick>
 80043e8:	4603      	mov	r3, r0
 80043ea:	461a      	mov	r2, r3
 80043ec:	2164      	movs	r1, #100	; 0x64
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff fece 	bl	8004190 <SPI_EndRxTransaction>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	2b00      	cmp	r3, #0
 8004432:	d104      	bne.n	800443e <SPI_CloseRx_ISR+0x72>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800443c:	e003      	b.n	8004446 <SPI_CloseRx_ISR+0x7a>
      hspi->ErrorCallback(hspi);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e01d      	b.n	800449c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7fd fcfb 	bl	8001e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f000 fb83 	bl	8004b98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b06      	cmp	r3, #6
 80044cc:	d007      	beq.n	80044de <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	f241 1311 	movw	r3, #4369	; 0x1111
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10f      	bne.n	8004534 <HAL_TIM_Base_Stop_IT+0x48>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a1a      	ldr	r2, [r3, #32]
 800451a:	f240 4344 	movw	r3, #1092	; 0x444
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d107      	bne.n	8004534 <HAL_TIM_Base_Stop_IT+0x48>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0201 	bic.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e01d      	b.n	8004590 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fd fcd5 	bl	8001f18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	4619      	mov	r1, r3
 8004580:	4610      	mov	r0, r2
 8004582:	f000 fb09 	bl	8004b98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e02d      	b.n	8004608 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f825 	bl	8004610 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f000 fadd 	bl	8004b98 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0208 	bic.w	r2, r2, #8
 80045ec:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b02      	cmp	r3, #2
 8004638:	d122      	bne.n	8004680 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b02      	cmp	r3, #2
 8004646:	d11b      	bne.n	8004680 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0202 	mvn.w	r2, #2
 8004650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fa78 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f001 fafe 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fa7b 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b04      	cmp	r3, #4
 800468c:	d122      	bne.n	80046d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b04      	cmp	r3, #4
 800469a:	d11b      	bne.n	80046d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0204 	mvn.w	r2, #4
 80046a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa4e 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 80046c0:	e005      	b.n	80046ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f001 fad4 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fa51 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d122      	bne.n	8004728 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d11b      	bne.n	8004728 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0208 	mvn.w	r2, #8
 80046f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2204      	movs	r2, #4
 80046fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa24 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 8004714:	e005      	b.n	8004722 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f001 faaa 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa27 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b10      	cmp	r3, #16
 8004734:	d122      	bne.n	800477c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b10      	cmp	r3, #16
 8004742:	d11b      	bne.n	800477c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0210 	mvn.w	r2, #16
 800474c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2208      	movs	r2, #8
 8004752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f9fa 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 8004768:	e005      	b.n	8004776 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f001 fa80 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f9fd 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d10e      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d107      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0201 	mvn.w	r2, #1
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f9d0 	bl	8004b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b80      	cmp	r3, #128	; 0x80
 80047b4:	d10e      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c0:	2b80      	cmp	r3, #128	; 0x80
 80047c2:	d107      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fd78 	bl	80052c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	d10e      	bne.n	8004800 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d107      	bne.n	8004800 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9c2 	bl	8004b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b20      	cmp	r3, #32
 800480c:	d10e      	bne.n	800482c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b20      	cmp	r3, #32
 800481a:	d107      	bne.n	800482c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0220 	mvn.w	r2, #32
 8004824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fd42 	bl	80052b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800484a:	2302      	movs	r3, #2
 800484c:	e0b4      	b.n	80049b8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b0c      	cmp	r3, #12
 8004862:	f200 809f 	bhi.w	80049a4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	080048a1 	.word	0x080048a1
 8004870:	080049a5 	.word	0x080049a5
 8004874:	080049a5 	.word	0x080049a5
 8004878:	080049a5 	.word	0x080049a5
 800487c:	080048e1 	.word	0x080048e1
 8004880:	080049a5 	.word	0x080049a5
 8004884:	080049a5 	.word	0x080049a5
 8004888:	080049a5 	.word	0x080049a5
 800488c:	08004923 	.word	0x08004923
 8004890:	080049a5 	.word	0x080049a5
 8004894:	080049a5 	.word	0x080049a5
 8004898:	080049a5 	.word	0x080049a5
 800489c:	08004963 	.word	0x08004963
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f9f6 	bl	8004c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0208 	orr.w	r2, r2, #8
 80048ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0204 	bic.w	r2, r2, #4
 80048ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6999      	ldr	r1, [r3, #24]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	619a      	str	r2, [r3, #24]
      break;
 80048de:	e062      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fa3c 	bl	8004d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6999      	ldr	r1, [r3, #24]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	021a      	lsls	r2, r3, #8
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	619a      	str	r2, [r3, #24]
      break;
 8004920:	e041      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fa87 	bl	8004e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0208 	orr.w	r2, r2, #8
 800493c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0204 	bic.w	r2, r2, #4
 800494c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69d9      	ldr	r1, [r3, #28]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	61da      	str	r2, [r3, #28]
      break;
 8004960:	e021      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fad1 	bl	8004f10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69d9      	ldr	r1, [r3, #28]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	021a      	lsls	r2, r3, #8
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	61da      	str	r2, [r3, #28]
      break;
 80049a2:	e000      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80049a4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_TIM_ConfigClockSource+0x18>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e0b3      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x180>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a10:	d03e      	beq.n	8004a90 <HAL_TIM_ConfigClockSource+0xd0>
 8004a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a16:	f200 8087 	bhi.w	8004b28 <HAL_TIM_ConfigClockSource+0x168>
 8004a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1e:	f000 8085 	beq.w	8004b2c <HAL_TIM_ConfigClockSource+0x16c>
 8004a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a26:	d87f      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x168>
 8004a28:	2b70      	cmp	r3, #112	; 0x70
 8004a2a:	d01a      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0xa2>
 8004a2c:	2b70      	cmp	r3, #112	; 0x70
 8004a2e:	d87b      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x168>
 8004a30:	2b60      	cmp	r3, #96	; 0x60
 8004a32:	d050      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x116>
 8004a34:	2b60      	cmp	r3, #96	; 0x60
 8004a36:	d877      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x168>
 8004a38:	2b50      	cmp	r3, #80	; 0x50
 8004a3a:	d03c      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0xf6>
 8004a3c:	2b50      	cmp	r3, #80	; 0x50
 8004a3e:	d873      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x168>
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d058      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0x136>
 8004a44:	2b40      	cmp	r3, #64	; 0x40
 8004a46:	d86f      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x168>
 8004a48:	2b30      	cmp	r3, #48	; 0x30
 8004a4a:	d064      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x156>
 8004a4c:	2b30      	cmp	r3, #48	; 0x30
 8004a4e:	d86b      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x168>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d060      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x156>
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d867      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x168>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d05c      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x156>
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d05a      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004a60:	e062      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6899      	ldr	r1, [r3, #8]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f000 fb17 	bl	80050a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	609a      	str	r2, [r3, #8]
      break;
 8004a8e:	e04e      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6899      	ldr	r1, [r3, #8]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f000 fb00 	bl	80050a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ab2:	609a      	str	r2, [r3, #8]
      break;
 8004ab4:	e03b      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6859      	ldr	r1, [r3, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f000 fa74 	bl	8004fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2150      	movs	r1, #80	; 0x50
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 facd 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004ad4:	e02b      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6859      	ldr	r1, [r3, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f000 fa93 	bl	800500e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2160      	movs	r1, #96	; 0x60
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fabd 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004af4:	e01b      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6859      	ldr	r1, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 fa54 	bl	8004fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2140      	movs	r1, #64	; 0x40
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 faad 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004b14:	e00b      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f000 faa4 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004b26:	e002      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b28:	bf00      	nop
 8004b2a:	e000      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a34      	ldr	r2, [pc, #208]	; (8004c7c <TIM_Base_SetConfig+0xe4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00f      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb6:	d00b      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a31      	ldr	r2, [pc, #196]	; (8004c80 <TIM_Base_SetConfig+0xe8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a30      	ldr	r2, [pc, #192]	; (8004c84 <TIM_Base_SetConfig+0xec>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <TIM_Base_SetConfig+0xf0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d108      	bne.n	8004be2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a25      	ldr	r2, [pc, #148]	; (8004c7c <TIM_Base_SetConfig+0xe4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01b      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf0:	d017      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a22      	ldr	r2, [pc, #136]	; (8004c80 <TIM_Base_SetConfig+0xe8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a21      	ldr	r2, [pc, #132]	; (8004c84 <TIM_Base_SetConfig+0xec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00f      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <TIM_Base_SetConfig+0xf0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <TIM_Base_SetConfig+0xf4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <TIM_Base_SetConfig+0xf8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <TIM_Base_SetConfig+0xfc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <TIM_Base_SetConfig+0xe4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d103      	bne.n	8004c68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	615a      	str	r2, [r3, #20]
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800

08004c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0201 	bic.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0303 	bic.w	r3, r3, #3
 8004cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 0302 	bic.w	r3, r3, #2
 8004ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a1c      	ldr	r2, [pc, #112]	; (8004d60 <TIM_OC1_SetConfig+0xc8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d10c      	bne.n	8004d0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f023 0308 	bic.w	r3, r3, #8
 8004cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f023 0304 	bic.w	r3, r3, #4
 8004d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <TIM_OC1_SetConfig+0xc8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d111      	bne.n	8004d3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40010000 	.word	0x40010000

08004d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0210 	bic.w	r2, r3, #16
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0320 	bic.w	r3, r3, #32
 8004dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <TIM_OC2_SetConfig+0xd4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10d      	bne.n	8004de0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <TIM_OC2_SetConfig+0xd4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d113      	bne.n	8004e10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000

08004e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1d      	ldr	r2, [pc, #116]	; (8004f0c <TIM_OC3_SetConfig+0xd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d10d      	bne.n	8004eb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <TIM_OC3_SetConfig+0xd0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d113      	bne.n	8004ee6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	621a      	str	r2, [r3, #32]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	40010000 	.word	0x40010000

08004f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	031b      	lsls	r3, r3, #12
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a10      	ldr	r2, [pc, #64]	; (8004fac <TIM_OC4_SetConfig+0x9c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d109      	bne.n	8004f84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000

08004fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0201 	bic.w	r2, r3, #1
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 030a 	bic.w	r3, r3, #10
 8004fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800500e:	b480      	push	{r7}
 8005010:	b087      	sub	sp, #28
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f023 0210 	bic.w	r2, r3, #16
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	031b      	lsls	r3, r3, #12
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800504a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	f043 0307 	orr.w	r3, r3, #7
 8005090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	609a      	str	r2, [r3, #8]
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	021a      	lsls	r2, r3, #8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	609a      	str	r2, [r3, #8]
}
 80050d8:	bf00      	nop
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	2201      	movs	r2, #1
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1a      	ldr	r2, [r3, #32]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	43db      	mvns	r3, r3
 8005106:	401a      	ands	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1a      	ldr	r2, [r3, #32]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	fa01 f303 	lsl.w	r3, r1, r3
 800511c:	431a      	orrs	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005144:	2302      	movs	r3, #2
 8005146:	e050      	b.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d018      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005194:	d013      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a18      	ldr	r2, [pc, #96]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a16      	ldr	r2, [pc, #88]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d009      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a15      	ldr	r2, [pc, #84]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a13      	ldr	r2, [pc, #76]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10c      	bne.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800
 8005204:	40000c00 	.word	0x40000c00
 8005208:	40014000 	.word	0x40014000

0800520c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005224:	2302      	movs	r3, #2
 8005226:	e03d      	b.n	80052a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e03f      	b.n	800536a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fc fe32 	bl	8001f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2224      	movs	r2, #36	; 0x24
 8005308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800531a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f90b 	bl	8005538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695a      	ldr	r2, [r3, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b088      	sub	sp, #32
 8005376:	af02      	add	r7, sp, #8
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b20      	cmp	r3, #32
 8005390:	f040 8083 	bne.w	800549a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_UART_Transmit+0x2e>
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e07b      	b.n	800549c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_UART_Transmit+0x40>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e074      	b.n	800549c <HAL_UART_Transmit+0x12a>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2221      	movs	r2, #33	; 0x21
 80053c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80053c8:	f7fc ff72 	bl	80022b0 <HAL_GetTick>
 80053cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80053e2:	e042      	b.n	800546a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fa:	d122      	bne.n	8005442 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2200      	movs	r2, #0
 8005404:	2180      	movs	r1, #128	; 0x80
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f84c 	bl	80054a4 <UART_WaitOnFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e042      	b.n	800549c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005428:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d103      	bne.n	800543a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	3302      	adds	r3, #2
 8005436:	60bb      	str	r3, [r7, #8]
 8005438:	e017      	b.n	800546a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	3301      	adds	r3, #1
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	e013      	b.n	800546a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2200      	movs	r2, #0
 800544a:	2180      	movs	r1, #128	; 0x80
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f829 	bl	80054a4 <UART_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e01f      	b.n	800549c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	60ba      	str	r2, [r7, #8]
 8005462:	781a      	ldrb	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1b7      	bne.n	80053e4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2200      	movs	r2, #0
 800547c:	2140      	movs	r1, #64	; 0x40
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f810 	bl	80054a4 <UART_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e006      	b.n	800549c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	e000      	b.n	800549c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800549a:	2302      	movs	r3, #2
  }
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	4613      	mov	r3, r2
 80054b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b4:	e02c      	b.n	8005510 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054bc:	d028      	beq.n	8005510 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054c4:	f7fc fef4 	bl	80022b0 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d21d      	bcs.n	8005510 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e00f      	b.n	8005530 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4013      	ands	r3, r2
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	429a      	cmp	r2, r3
 800551e:	bf0c      	ite	eq
 8005520:	2301      	moveq	r3, #1
 8005522:	2300      	movne	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	461a      	mov	r2, r3
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	429a      	cmp	r2, r3
 800552c:	d0c3      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	b0bd      	sub	sp, #244	; 0xf4
 800553e:	af00      	add	r7, sp, #0
 8005540:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005554:	68d9      	ldr	r1, [r3, #12]
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	ea40 0301 	orr.w	r3, r0, r1
 8005560:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	431a      	orrs	r2, r3
 8005570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	431a      	orrs	r2, r3
 8005578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005590:	f021 010c 	bic.w	r1, r1, #12
 8005594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800559e:	430b      	orrs	r3, r1
 80055a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b2:	6999      	ldr	r1, [r3, #24]
 80055b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	ea40 0301 	orr.w	r3, r0, r1
 80055be:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ca:	f040 81a5 	bne.w	8005918 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	4bcd      	ldr	r3, [pc, #820]	; (800590c <UART_SetConfig+0x3d4>)
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d006      	beq.n	80055e8 <UART_SetConfig+0xb0>
 80055da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	4bcb      	ldr	r3, [pc, #812]	; (8005910 <UART_SetConfig+0x3d8>)
 80055e2:	429a      	cmp	r2, r3
 80055e4:	f040 80cb 	bne.w	800577e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055e8:	f7fe f926 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 80055ec:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055f4:	461c      	mov	r4, r3
 80055f6:	f04f 0500 	mov.w	r5, #0
 80055fa:	4622      	mov	r2, r4
 80055fc:	462b      	mov	r3, r5
 80055fe:	1891      	adds	r1, r2, r2
 8005600:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005604:	415b      	adcs	r3, r3
 8005606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800560a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800560e:	1912      	adds	r2, r2, r4
 8005610:	eb45 0303 	adc.w	r3, r5, r3
 8005614:	f04f 0000 	mov.w	r0, #0
 8005618:	f04f 0100 	mov.w	r1, #0
 800561c:	00d9      	lsls	r1, r3, #3
 800561e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005622:	00d0      	lsls	r0, r2, #3
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	1911      	adds	r1, r2, r4
 800562a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800562e:	416b      	adcs	r3, r5
 8005630:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	461a      	mov	r2, r3
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	1891      	adds	r1, r2, r2
 8005642:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005646:	415b      	adcs	r3, r3
 8005648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800564c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005650:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005654:	f7fb f804 	bl	8000660 <__aeabi_uldivmod>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4bad      	ldr	r3, [pc, #692]	; (8005914 <UART_SetConfig+0x3dc>)
 800565e:	fba3 2302 	umull	r2, r3, r3, r2
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	011e      	lsls	r6, r3, #4
 8005666:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800566a:	461c      	mov	r4, r3
 800566c:	f04f 0500 	mov.w	r5, #0
 8005670:	4622      	mov	r2, r4
 8005672:	462b      	mov	r3, r5
 8005674:	1891      	adds	r1, r2, r2
 8005676:	67b9      	str	r1, [r7, #120]	; 0x78
 8005678:	415b      	adcs	r3, r3
 800567a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800567c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005680:	1912      	adds	r2, r2, r4
 8005682:	eb45 0303 	adc.w	r3, r5, r3
 8005686:	f04f 0000 	mov.w	r0, #0
 800568a:	f04f 0100 	mov.w	r1, #0
 800568e:	00d9      	lsls	r1, r3, #3
 8005690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005694:	00d0      	lsls	r0, r2, #3
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	1911      	adds	r1, r2, r4
 800569c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80056a0:	416b      	adcs	r3, r5
 80056a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	461a      	mov	r2, r3
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	1891      	adds	r1, r2, r2
 80056b4:	6739      	str	r1, [r7, #112]	; 0x70
 80056b6:	415b      	adcs	r3, r3
 80056b8:	677b      	str	r3, [r7, #116]	; 0x74
 80056ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80056be:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80056c2:	f7fa ffcd 	bl	8000660 <__aeabi_uldivmod>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4b92      	ldr	r3, [pc, #584]	; (8005914 <UART_SetConfig+0x3dc>)
 80056cc:	fba3 1302 	umull	r1, r3, r3, r2
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	2164      	movs	r1, #100	; 0x64
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	3332      	adds	r3, #50	; 0x32
 80056de:	4a8d      	ldr	r2, [pc, #564]	; (8005914 <UART_SetConfig+0x3dc>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056ec:	441e      	add	r6, r3
 80056ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056f2:	4618      	mov	r0, r3
 80056f4:	f04f 0100 	mov.w	r1, #0
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	1894      	adds	r4, r2, r2
 80056fe:	66bc      	str	r4, [r7, #104]	; 0x68
 8005700:	415b      	adcs	r3, r3
 8005702:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005704:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005708:	1812      	adds	r2, r2, r0
 800570a:	eb41 0303 	adc.w	r3, r1, r3
 800570e:	f04f 0400 	mov.w	r4, #0
 8005712:	f04f 0500 	mov.w	r5, #0
 8005716:	00dd      	lsls	r5, r3, #3
 8005718:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800571c:	00d4      	lsls	r4, r2, #3
 800571e:	4622      	mov	r2, r4
 8005720:	462b      	mov	r3, r5
 8005722:	1814      	adds	r4, r2, r0
 8005724:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005728:	414b      	adcs	r3, r1
 800572a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	461a      	mov	r2, r3
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	1891      	adds	r1, r2, r2
 800573c:	6639      	str	r1, [r7, #96]	; 0x60
 800573e:	415b      	adcs	r3, r3
 8005740:	667b      	str	r3, [r7, #100]	; 0x64
 8005742:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005746:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800574a:	f7fa ff89 	bl	8000660 <__aeabi_uldivmod>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4b70      	ldr	r3, [pc, #448]	; (8005914 <UART_SetConfig+0x3dc>)
 8005754:	fba3 1302 	umull	r1, r3, r3, r2
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	2164      	movs	r1, #100	; 0x64
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	3332      	adds	r3, #50	; 0x32
 8005766:	4a6b      	ldr	r2, [pc, #428]	; (8005914 <UART_SetConfig+0x3dc>)
 8005768:	fba2 2303 	umull	r2, r3, r2, r3
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	f003 0207 	and.w	r2, r3, #7
 8005772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4432      	add	r2, r6
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	e26d      	b.n	8005c5a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800577e:	f7fe f847 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 8005782:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800578a:	461c      	mov	r4, r3
 800578c:	f04f 0500 	mov.w	r5, #0
 8005790:	4622      	mov	r2, r4
 8005792:	462b      	mov	r3, r5
 8005794:	1891      	adds	r1, r2, r2
 8005796:	65b9      	str	r1, [r7, #88]	; 0x58
 8005798:	415b      	adcs	r3, r3
 800579a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800579c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057a0:	1912      	adds	r2, r2, r4
 80057a2:	eb45 0303 	adc.w	r3, r5, r3
 80057a6:	f04f 0000 	mov.w	r0, #0
 80057aa:	f04f 0100 	mov.w	r1, #0
 80057ae:	00d9      	lsls	r1, r3, #3
 80057b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057b4:	00d0      	lsls	r0, r2, #3
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	1911      	adds	r1, r2, r4
 80057bc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80057c0:	416b      	adcs	r3, r5
 80057c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	461a      	mov	r2, r3
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	1891      	adds	r1, r2, r2
 80057d4:	6539      	str	r1, [r7, #80]	; 0x50
 80057d6:	415b      	adcs	r3, r3
 80057d8:	657b      	str	r3, [r7, #84]	; 0x54
 80057da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057de:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80057e2:	f7fa ff3d 	bl	8000660 <__aeabi_uldivmod>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4b4a      	ldr	r3, [pc, #296]	; (8005914 <UART_SetConfig+0x3dc>)
 80057ec:	fba3 2302 	umull	r2, r3, r3, r2
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	011e      	lsls	r6, r3, #4
 80057f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057f8:	461c      	mov	r4, r3
 80057fa:	f04f 0500 	mov.w	r5, #0
 80057fe:	4622      	mov	r2, r4
 8005800:	462b      	mov	r3, r5
 8005802:	1891      	adds	r1, r2, r2
 8005804:	64b9      	str	r1, [r7, #72]	; 0x48
 8005806:	415b      	adcs	r3, r3
 8005808:	64fb      	str	r3, [r7, #76]	; 0x4c
 800580a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800580e:	1912      	adds	r2, r2, r4
 8005810:	eb45 0303 	adc.w	r3, r5, r3
 8005814:	f04f 0000 	mov.w	r0, #0
 8005818:	f04f 0100 	mov.w	r1, #0
 800581c:	00d9      	lsls	r1, r3, #3
 800581e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005822:	00d0      	lsls	r0, r2, #3
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	1911      	adds	r1, r2, r4
 800582a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800582e:	416b      	adcs	r3, r5
 8005830:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	461a      	mov	r2, r3
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	1891      	adds	r1, r2, r2
 8005842:	6439      	str	r1, [r7, #64]	; 0x40
 8005844:	415b      	adcs	r3, r3
 8005846:	647b      	str	r3, [r7, #68]	; 0x44
 8005848:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800584c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005850:	f7fa ff06 	bl	8000660 <__aeabi_uldivmod>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4b2e      	ldr	r3, [pc, #184]	; (8005914 <UART_SetConfig+0x3dc>)
 800585a:	fba3 1302 	umull	r1, r3, r3, r2
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	2164      	movs	r1, #100	; 0x64
 8005862:	fb01 f303 	mul.w	r3, r1, r3
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	3332      	adds	r3, #50	; 0x32
 800586c:	4a29      	ldr	r2, [pc, #164]	; (8005914 <UART_SetConfig+0x3dc>)
 800586e:	fba2 2303 	umull	r2, r3, r2, r3
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800587a:	441e      	add	r6, r3
 800587c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005880:	4618      	mov	r0, r3
 8005882:	f04f 0100 	mov.w	r1, #0
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	1894      	adds	r4, r2, r2
 800588c:	63bc      	str	r4, [r7, #56]	; 0x38
 800588e:	415b      	adcs	r3, r3
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005892:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005896:	1812      	adds	r2, r2, r0
 8005898:	eb41 0303 	adc.w	r3, r1, r3
 800589c:	f04f 0400 	mov.w	r4, #0
 80058a0:	f04f 0500 	mov.w	r5, #0
 80058a4:	00dd      	lsls	r5, r3, #3
 80058a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058aa:	00d4      	lsls	r4, r2, #3
 80058ac:	4622      	mov	r2, r4
 80058ae:	462b      	mov	r3, r5
 80058b0:	1814      	adds	r4, r2, r0
 80058b2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80058b6:	414b      	adcs	r3, r1
 80058b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	1891      	adds	r1, r2, r2
 80058ca:	6339      	str	r1, [r7, #48]	; 0x30
 80058cc:	415b      	adcs	r3, r3
 80058ce:	637b      	str	r3, [r7, #52]	; 0x34
 80058d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058d4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058d8:	f7fa fec2 	bl	8000660 <__aeabi_uldivmod>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <UART_SetConfig+0x3dc>)
 80058e2:	fba3 1302 	umull	r1, r3, r3, r2
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	2164      	movs	r1, #100	; 0x64
 80058ea:	fb01 f303 	mul.w	r3, r1, r3
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	3332      	adds	r3, #50	; 0x32
 80058f4:	4a07      	ldr	r2, [pc, #28]	; (8005914 <UART_SetConfig+0x3dc>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	f003 0207 	and.w	r2, r3, #7
 8005900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4432      	add	r2, r6
 8005908:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800590a:	e1a6      	b.n	8005c5a <UART_SetConfig+0x722>
 800590c:	40011000 	.word	0x40011000
 8005910:	40011400 	.word	0x40011400
 8005914:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4bd1      	ldr	r3, [pc, #836]	; (8005c64 <UART_SetConfig+0x72c>)
 8005920:	429a      	cmp	r2, r3
 8005922:	d006      	beq.n	8005932 <UART_SetConfig+0x3fa>
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4bcf      	ldr	r3, [pc, #828]	; (8005c68 <UART_SetConfig+0x730>)
 800592c:	429a      	cmp	r2, r3
 800592e:	f040 80ca 	bne.w	8005ac6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005932:	f7fd ff81 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 8005936:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800593a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800593e:	461c      	mov	r4, r3
 8005940:	f04f 0500 	mov.w	r5, #0
 8005944:	4622      	mov	r2, r4
 8005946:	462b      	mov	r3, r5
 8005948:	1891      	adds	r1, r2, r2
 800594a:	62b9      	str	r1, [r7, #40]	; 0x28
 800594c:	415b      	adcs	r3, r3
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005950:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005954:	1912      	adds	r2, r2, r4
 8005956:	eb45 0303 	adc.w	r3, r5, r3
 800595a:	f04f 0000 	mov.w	r0, #0
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	00d9      	lsls	r1, r3, #3
 8005964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005968:	00d0      	lsls	r0, r2, #3
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	eb12 0a04 	adds.w	sl, r2, r4
 8005972:	eb43 0b05 	adc.w	fp, r3, r5
 8005976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	4618      	mov	r0, r3
 800597e:	f04f 0100 	mov.w	r1, #0
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	008b      	lsls	r3, r1, #2
 800598c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005990:	0082      	lsls	r2, r0, #2
 8005992:	4650      	mov	r0, sl
 8005994:	4659      	mov	r1, fp
 8005996:	f7fa fe63 	bl	8000660 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4bb3      	ldr	r3, [pc, #716]	; (8005c6c <UART_SetConfig+0x734>)
 80059a0:	fba3 2302 	umull	r2, r3, r3, r2
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	011e      	lsls	r6, r3, #4
 80059a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059ac:	4618      	mov	r0, r3
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	1894      	adds	r4, r2, r2
 80059b8:	623c      	str	r4, [r7, #32]
 80059ba:	415b      	adcs	r3, r3
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
 80059be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059c2:	1812      	adds	r2, r2, r0
 80059c4:	eb41 0303 	adc.w	r3, r1, r3
 80059c8:	f04f 0400 	mov.w	r4, #0
 80059cc:	f04f 0500 	mov.w	r5, #0
 80059d0:	00dd      	lsls	r5, r3, #3
 80059d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059d6:	00d4      	lsls	r4, r2, #3
 80059d8:	4622      	mov	r2, r4
 80059da:	462b      	mov	r3, r5
 80059dc:	1814      	adds	r4, r2, r0
 80059de:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80059e2:	414b      	adcs	r3, r1
 80059e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f04f 0100 	mov.w	r1, #0
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	008b      	lsls	r3, r1, #2
 80059fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a02:	0082      	lsls	r2, r0, #2
 8005a04:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005a08:	f7fa fe2a 	bl	8000660 <__aeabi_uldivmod>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4b96      	ldr	r3, [pc, #600]	; (8005c6c <UART_SetConfig+0x734>)
 8005a12:	fba3 1302 	umull	r1, r3, r3, r2
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	2164      	movs	r1, #100	; 0x64
 8005a1a:	fb01 f303 	mul.w	r3, r1, r3
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	3332      	adds	r3, #50	; 0x32
 8005a24:	4a91      	ldr	r2, [pc, #580]	; (8005c6c <UART_SetConfig+0x734>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a30:	441e      	add	r6, r3
 8005a32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a36:	4618      	mov	r0, r3
 8005a38:	f04f 0100 	mov.w	r1, #0
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	1894      	adds	r4, r2, r2
 8005a42:	61bc      	str	r4, [r7, #24]
 8005a44:	415b      	adcs	r3, r3
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a4c:	1812      	adds	r2, r2, r0
 8005a4e:	eb41 0303 	adc.w	r3, r1, r3
 8005a52:	f04f 0400 	mov.w	r4, #0
 8005a56:	f04f 0500 	mov.w	r5, #0
 8005a5a:	00dd      	lsls	r5, r3, #3
 8005a5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a60:	00d4      	lsls	r4, r2, #3
 8005a62:	4622      	mov	r2, r4
 8005a64:	462b      	mov	r3, r5
 8005a66:	1814      	adds	r4, r2, r0
 8005a68:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005a6c:	414b      	adcs	r3, r1
 8005a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f04f 0100 	mov.w	r1, #0
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	008b      	lsls	r3, r1, #2
 8005a88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a8c:	0082      	lsls	r2, r0, #2
 8005a8e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005a92:	f7fa fde5 	bl	8000660 <__aeabi_uldivmod>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4b74      	ldr	r3, [pc, #464]	; (8005c6c <UART_SetConfig+0x734>)
 8005a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	2164      	movs	r1, #100	; 0x64
 8005aa4:	fb01 f303 	mul.w	r3, r1, r3
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	3332      	adds	r3, #50	; 0x32
 8005aae:	4a6f      	ldr	r2, [pc, #444]	; (8005c6c <UART_SetConfig+0x734>)
 8005ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	f003 020f 	and.w	r2, r3, #15
 8005aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4432      	add	r2, r6
 8005ac2:	609a      	str	r2, [r3, #8]
 8005ac4:	e0c9      	b.n	8005c5a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ac6:	f7fd fea3 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 8005aca:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ace:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ad2:	461c      	mov	r4, r3
 8005ad4:	f04f 0500 	mov.w	r5, #0
 8005ad8:	4622      	mov	r2, r4
 8005ada:	462b      	mov	r3, r5
 8005adc:	1891      	adds	r1, r2, r2
 8005ade:	6139      	str	r1, [r7, #16]
 8005ae0:	415b      	adcs	r3, r3
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ae8:	1912      	adds	r2, r2, r4
 8005aea:	eb45 0303 	adc.w	r3, r5, r3
 8005aee:	f04f 0000 	mov.w	r0, #0
 8005af2:	f04f 0100 	mov.w	r1, #0
 8005af6:	00d9      	lsls	r1, r3, #3
 8005af8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005afc:	00d0      	lsls	r0, r2, #3
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	eb12 0804 	adds.w	r8, r2, r4
 8005b06:	eb43 0905 	adc.w	r9, r3, r5
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	008b      	lsls	r3, r1, #2
 8005b20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b24:	0082      	lsls	r2, r0, #2
 8005b26:	4640      	mov	r0, r8
 8005b28:	4649      	mov	r1, r9
 8005b2a:	f7fa fd99 	bl	8000660 <__aeabi_uldivmod>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4b4e      	ldr	r3, [pc, #312]	; (8005c6c <UART_SetConfig+0x734>)
 8005b34:	fba3 2302 	umull	r2, r3, r3, r2
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	011e      	lsls	r6, r3, #4
 8005b3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b40:	4618      	mov	r0, r3
 8005b42:	f04f 0100 	mov.w	r1, #0
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	1894      	adds	r4, r2, r2
 8005b4c:	60bc      	str	r4, [r7, #8]
 8005b4e:	415b      	adcs	r3, r3
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b56:	1812      	adds	r2, r2, r0
 8005b58:	eb41 0303 	adc.w	r3, r1, r3
 8005b5c:	f04f 0400 	mov.w	r4, #0
 8005b60:	f04f 0500 	mov.w	r5, #0
 8005b64:	00dd      	lsls	r5, r3, #3
 8005b66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b6a:	00d4      	lsls	r4, r2, #3
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	462b      	mov	r3, r5
 8005b70:	1814      	adds	r4, r2, r0
 8005b72:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005b76:	414b      	adcs	r3, r1
 8005b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f04f 0100 	mov.w	r1, #0
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	008b      	lsls	r3, r1, #2
 8005b92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b96:	0082      	lsls	r2, r0, #2
 8005b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b9c:	f7fa fd60 	bl	8000660 <__aeabi_uldivmod>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4b31      	ldr	r3, [pc, #196]	; (8005c6c <UART_SetConfig+0x734>)
 8005ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	2164      	movs	r1, #100	; 0x64
 8005bae:	fb01 f303 	mul.w	r3, r1, r3
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	3332      	adds	r3, #50	; 0x32
 8005bb8:	4a2c      	ldr	r2, [pc, #176]	; (8005c6c <UART_SetConfig+0x734>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc4:	441e      	add	r6, r3
 8005bc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f04f 0100 	mov.w	r1, #0
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	1894      	adds	r4, r2, r2
 8005bd6:	603c      	str	r4, [r7, #0]
 8005bd8:	415b      	adcs	r3, r3
 8005bda:	607b      	str	r3, [r7, #4]
 8005bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005be0:	1812      	adds	r2, r2, r0
 8005be2:	eb41 0303 	adc.w	r3, r1, r3
 8005be6:	f04f 0400 	mov.w	r4, #0
 8005bea:	f04f 0500 	mov.w	r5, #0
 8005bee:	00dd      	lsls	r5, r3, #3
 8005bf0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bf4:	00d4      	lsls	r4, r2, #3
 8005bf6:	4622      	mov	r2, r4
 8005bf8:	462b      	mov	r3, r5
 8005bfa:	1814      	adds	r4, r2, r0
 8005bfc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005c00:	414b      	adcs	r3, r1
 8005c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f04f 0100 	mov.w	r1, #0
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	f04f 0300 	mov.w	r3, #0
 8005c1a:	008b      	lsls	r3, r1, #2
 8005c1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c20:	0082      	lsls	r2, r0, #2
 8005c22:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005c26:	f7fa fd1b 	bl	8000660 <__aeabi_uldivmod>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <UART_SetConfig+0x734>)
 8005c30:	fba3 1302 	umull	r1, r3, r3, r2
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	2164      	movs	r1, #100	; 0x64
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	3332      	adds	r3, #50	; 0x32
 8005c42:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <UART_SetConfig+0x734>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	f003 020f 	and.w	r2, r3, #15
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4432      	add	r2, r6
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	e7ff      	b.n	8005c5a <UART_SetConfig+0x722>
 8005c5a:	bf00      	nop
 8005c5c:	37f4      	adds	r7, #244	; 0xf4
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c64:	40011000 	.word	0x40011000
 8005c68:	40011400 	.word	0x40011400
 8005c6c:	51eb851f 	.word	0x51eb851f

08005c70 <HAL_TIM_OC_DelayElapsedCallback>:
#define LEAD_IN 4
#define LEAD_OUT 4

LedSingleWire *instance;

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	instance->StartNextDma();
 8005c78:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <HAL_TIM_OC_DelayElapsedCallback+0x1c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f9e7 	bl	8006050 <_ZN13LedSingleWire12StartNextDmaEv>
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000194 	.word	0x20000194

08005c90 <_ZN13DisplayDriverC1Ev>:
#ifndef INC_DISPLAYDRIVER_H_
#define INC_DISPLAYDRIVER_H_

#include <stdint.h>

class DisplayDriver {
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	4a04      	ldr	r2, [pc, #16]	; (8005cac <_ZN13DisplayDriverC1Ev+0x1c>)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	08007dbc 	.word	0x08007dbc

08005cb0 <_ZN13LedSingleWireC1ENS_6FormatEht>:

LedSingleWire::LedSingleWire(Format format, uint8_t strandCount,
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	4608      	mov	r0, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	70fb      	strb	r3, [r7, #3]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	70bb      	strb	r3, [r7, #2]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	803b      	strh	r3, [r7, #0]
		uint16_t pixelCount) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff ffdf 	bl	8005c90 <_ZN13DisplayDriverC1Ev>
 8005cd2:	4a14      	ldr	r2, [pc, #80]	; (8005d24 <_ZN13LedSingleWireC1ENS_6FormatEht+0x74>)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	601a      	str	r2, [r3, #0]
	this->format = format;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	78fa      	ldrb	r2, [r7, #3]
 8005cdc:	711a      	strb	r2, [r3, #4]
	this->strandCount = strandCount;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	78ba      	ldrb	r2, [r7, #2]
 8005ce2:	719a      	strb	r2, [r3, #6]

	switch (this->format) {
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	791b      	ldrb	r3, [r3, #4]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d803      	bhi.n	8005cf4 <_ZN13LedSingleWireC1ENS_6FormatEht+0x44>
	case RGBW:
	case GRBW:
		this->bytesPerPixel = 4;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2204      	movs	r2, #4
 8005cf0:	715a      	strb	r2, [r3, #5]
		break;
 8005cf2:	bf00      	nop
	}

	//Each time division will be ~ 0.3uS.  0 looks like 0.3us/0.9us.  1 looks like 0.6us/0.6us so
	//each bit requires 4 time divisions
	this->pixelCount = pixelCount;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	883a      	ldrh	r2, [r7, #0]
 8005cf8:	811a      	strh	r2, [r3, #8]
	this->bufferLength = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixelCount)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	795b      	ldrb	r3, [r3, #5]
			+ LEAD_IN + LEAD_OUT;
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	883a      	ldrh	r2, [r7, #0]
 8005d02:	fb12 f303 	smulbb	r3, r2, r3
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	015b      	lsls	r3, r3, #5
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	b29a      	uxth	r2, r3
	this->bufferLength = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixelCount)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	815a      	strh	r2, [r3, #10]

	instance = this;
 8005d14:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <_ZN13LedSingleWireC1ENS_6FormatEht+0x78>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6013      	str	r3, [r2, #0]
}
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	08007da4 	.word	0x08007da4
 8005d28:	20000194 	.word	0x20000194

08005d2c <_ZN13LedSingleWire4OpenEv>:

void LedSingleWire::Open() {
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b089      	sub	sp, #36	; 0x24
 8005d30:	af04      	add	r7, sp, #16
 8005d32:	6078      	str	r0, [r7, #4]
	buffer = new uint16_t[this->bufferLength];
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	895b      	ldrh	r3, [r3, #10]
 8005d38:	4a3a      	ldr	r2, [pc, #232]	; (8005e24 <_ZN13LedSingleWire4OpenEv+0xf8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d801      	bhi.n	8005d42 <_ZN13LedSingleWire4OpenEv+0x16>
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	e001      	b.n	8005d46 <_ZN13LedSingleWire4OpenEv+0x1a>
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 fa19 	bl	800717e <_Znaj>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60da      	str	r2, [r3, #12]

	//Blanks the string

	for (uint16_t offset = 0; offset < bufferLength; offset++) {
 8005d54:	2300      	movs	r3, #0
 8005d56:	81fb      	strh	r3, [r7, #14]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	895b      	ldrh	r3, [r3, #10]
 8005d5c:	89fa      	ldrh	r2, [r7, #14]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d219      	bcs.n	8005d96 <_ZN13LedSingleWire4OpenEv+0x6a>
		if (offset < LEAD_IN || offset > LEAD_OUT) {
 8005d62:	89fb      	ldrh	r3, [r7, #14]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d902      	bls.n	8005d6e <_ZN13LedSingleWire4OpenEv+0x42>
 8005d68:	89fb      	ldrh	r3, [r7, #14]
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d907      	bls.n	8005d7e <_ZN13LedSingleWire4OpenEv+0x52>
			buffer[offset] = 0x0000;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	89fb      	ldrh	r3, [r7, #14]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	2200      	movs	r2, #0
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e007      	b.n	8005d8e <_ZN13LedSingleWire4OpenEv+0x62>
		} else {
			buffer[offset] = 0xFFFF;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	89fb      	ldrh	r3, [r7, #14]
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	4413      	add	r3, r2
 8005d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d8c:	801a      	strh	r2, [r3, #0]
	for (uint16_t offset = 0; offset < bufferLength; offset++) {
 8005d8e:	89fb      	ldrh	r3, [r7, #14]
 8005d90:	3301      	adds	r3, #1
 8005d92:	81fb      	strh	r3, [r7, #14]
 8005d94:	e7e0      	b.n	8005d58 <_ZN13LedSingleWire4OpenEv+0x2c>
		}
	}

	for (uint8_t strand = 0; strand < strandCount; strand++) {
 8005d96:	2300      	movs	r3, #0
 8005d98:	737b      	strb	r3, [r7, #13]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	799b      	ldrb	r3, [r3, #6]
 8005d9e:	7b7a      	ldrb	r2, [r7, #13]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d21e      	bcs.n	8005de2 <_ZN13LedSingleWire4OpenEv+0xb6>
		for (uint16_t pixel = 0; pixel < pixelCount; pixel++) {
 8005da4:	2300      	movs	r3, #0
 8005da6:	817b      	strh	r3, [r7, #10]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	891b      	ldrh	r3, [r3, #8]
 8005dac:	897a      	ldrh	r2, [r7, #10]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d213      	bcs.n	8005dda <_ZN13LedSingleWire4OpenEv+0xae>
			SetPixel(pixel, strand, 0, 0, 0, 0);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3308      	adds	r3, #8
 8005db8:	681c      	ldr	r4, [r3, #0]
 8005dba:	7b7b      	ldrb	r3, [r7, #13]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	8979      	ldrh	r1, [r7, #10]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	9302      	str	r3, [sp, #8]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	47a0      	blx	r4
		for (uint16_t pixel = 0; pixel < pixelCount; pixel++) {
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	817b      	strh	r3, [r7, #10]
 8005dd8:	e7e6      	b.n	8005da8 <_ZN13LedSingleWire4OpenEv+0x7c>
	for (uint8_t strand = 0; strand < strandCount; strand++) {
 8005dda:	7b7b      	ldrb	r3, [r7, #13]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	737b      	strb	r3, [r7, #13]
 8005de0:	e7db      	b.n	8005d9a <_ZN13LedSingleWire4OpenEv+0x6e>
		}
	}

	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 8005de2:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <_ZN13LedSingleWire4OpenEv+0xfc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	4b0f      	ldr	r3, [pc, #60]	; (8005e28 <_ZN13LedSingleWire4OpenEv+0xfc>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df0:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005df2:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <_ZN13LedSingleWire4OpenEv+0xfc>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2201      	movs	r2, #1
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff f972 	bl	80050e4 <TIM_CCxChannelCmd>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8005e00:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <_ZN13LedSingleWire4OpenEv+0x100>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <_ZN13LedSingleWire4OpenEv+0x100>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0202 	orr.w	r2, r2, #2
 8005e0e:	60da      	str	r2, [r3, #12]

//	htim3.OC_DelayElapsedCallback = ResetDelayElapsed;

	HAL_TIM_Base_Start_IT(&htim1);
 8005e10:	4805      	ldr	r0, [pc, #20]	; (8005e28 <_ZN13LedSingleWire4OpenEv+0xfc>)
 8005e12:	f7fe fb47 	bl	80044a4 <HAL_TIM_Base_Start_IT>

	SendStands();
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f904 	bl	8006024 <_ZN13LedSingleWire10SendStandsEv>
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd90      	pop	{r4, r7, pc}
 8005e24:	3ffffffc 	.word	0x3ffffffc
 8005e28:	20001718 	.word	0x20001718
 8005e2c:	20001698 	.word	0x20001698

08005e30 <_ZN13LedSingleWire5CloseEv>:

void LedSingleWire::Close() {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
	delete buffer;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <_ZN13LedSingleWire5CloseEv+0x18>
 8005e40:	2102      	movs	r1, #2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f001 f988 	bl	8007158 <_ZdlPvj>
}
 8005e48:	bf00      	nop
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <_ZN13LedSingleWire8SetPixelEtthhhh>:

void LedSingleWire::SetPixel(uint16_t pixel, uint16_t strand, uint8_t r,
		uint8_t g, uint8_t b, uint8_t w) {
 8005e50:	b480      	push	{r7}
 8005e52:	b089      	sub	sp, #36	; 0x24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4603      	mov	r3, r0
 8005e60:	817b      	strh	r3, [r7, #10]
 8005e62:	460b      	mov	r3, r1
 8005e64:	813b      	strh	r3, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	71fb      	strb	r3, [r7, #7]
	if (pixel >= pixelCount || strand >= strandCount) {
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	891b      	ldrh	r3, [r3, #8]
 8005e6e:	897a      	ldrh	r2, [r7, #10]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	f080 80c3 	bcs.w	8005ffc <_ZN13LedSingleWire8SetPixelEtthhhh+0x1ac>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	799b      	ldrb	r3, [r3, #6]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	893a      	ldrh	r2, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	f080 80bc 	bcs.w	8005ffc <_ZN13LedSingleWire8SetPixelEtthhhh+0x1ac>
		return;
	}

	uint16_t strandMask = 0x00;
 8005e84:	2300      	movs	r3, #0
 8005e86:	82bb      	strh	r3, [r7, #20]

	uint16_t offset = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixel) + LEAD_IN;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	795b      	ldrb	r3, [r3, #5]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	897a      	ldrh	r2, [r7, #10]
 8005e90:	fb12 f303 	smulbb	r3, r2, r3
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	015b      	lsls	r3, r3, #5
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	83fb      	strh	r3, [r7, #30]

	switch (strand) {
 8005e9e:	893b      	ldrh	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f040 80ad 	bne.w	8006000 <_ZN13LedSingleWire8SetPixelEtthhhh+0x1b0>
	case 0:
		strandMask = LED_0_Pin;
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	82bb      	strh	r3, [r7, #20]
		break;
 8005eaa:	bf00      	nop
	default:
		//Strand is not configured
		return;
	}

	uint32_t data = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61bb      	str	r3, [r7, #24]

	switch (format) {
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	791b      	ldrb	r3, [r3, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <_ZN13LedSingleWire8SetPixelEtthhhh+0x6e>
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d00f      	beq.n	8005edc <_ZN13LedSingleWire8SetPixelEtthhhh+0x8c>
 8005ebc:	e01d      	b.n	8005efa <_ZN13LedSingleWire8SetPixelEtthhhh+0xaa>
	case RGBW:
		data = r << 24 | g << 16 | b << 8 | w;
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	061a      	lsls	r2, r3, #24
 8005ec2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ec6:	041b      	lsls	r3, r3, #16
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
		break;
 8005eda:	e00e      	b.n	8005efa <_ZN13LedSingleWire8SetPixelEtthhhh+0xaa>
	case GRBW:
		data = g << 24 | r << 16 | b << 8 | w;
 8005edc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ee0:	061a      	lsls	r2, r3, #24
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	041b      	lsls	r3, r3, #16
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
		break;
 8005ef8:	bf00      	nop
	}

	for (int8_t bit = 31; bit >= 0; bit--) {
 8005efa:	231f      	movs	r3, #31
 8005efc:	75fb      	strb	r3, [r7, #23]
 8005efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	db7d      	blt.n	8006002 <_ZN13LedSingleWire8SetPixelEtthhhh+0x1b2>
		buffer[offset] = buffer[offset] | strandMask;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	8bfb      	ldrh	r3, [r7, #30]
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	4413      	add	r3, r2
 8005f10:	8819      	ldrh	r1, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	8bfb      	ldrh	r3, [r7, #30]
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	8aba      	ldrh	r2, [r7, #20]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	b292      	uxth	r2, r2
 8005f22:	801a      	strh	r2, [r3, #0]
		offset++;
 8005f24:	8bfb      	ldrh	r3, [r7, #30]
 8005f26:	3301      	adds	r3, #1
 8005f28:	83fb      	strh	r3, [r7, #30]
		if (data & (0x01 << bit)) {
 8005f2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d012      	beq.n	8005f64 <_ZN13LedSingleWire8SetPixelEtthhhh+0x114>
			buffer[offset] = buffer[offset] | strandMask;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	8bfb      	ldrh	r3, [r7, #30]
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	4413      	add	r3, r2
 8005f48:	8819      	ldrh	r1, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	8bfb      	ldrh	r3, [r7, #30]
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	4413      	add	r3, r2
 8005f54:	8aba      	ldrh	r2, [r7, #20]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	b292      	uxth	r2, r2
 8005f5a:	801a      	strh	r2, [r3, #0]
			offset++;
 8005f5c:	8bfb      	ldrh	r3, [r7, #30]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	83fb      	strh	r3, [r7, #30]
 8005f62:	e016      	b.n	8005f92 <_ZN13LedSingleWire8SetPixelEtthhhh+0x142>
		} else {
			buffer[offset] = buffer[offset] & ~strandMask;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	8bfb      	ldrh	r3, [r7, #30]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	4413      	add	r3, r2
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	b21a      	sxth	r2, r3
 8005f72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005f76:	43db      	mvns	r3, r3
 8005f78:	b21b      	sxth	r3, r3
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	b219      	sxth	r1, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	8bfb      	ldrh	r3, [r7, #30]
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	4413      	add	r3, r2
 8005f88:	b28a      	uxth	r2, r1
 8005f8a:	801a      	strh	r2, [r3, #0]
			offset++;
 8005f8c:	8bfb      	ldrh	r3, [r7, #30]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	83fb      	strh	r3, [r7, #30]
		}
		buffer[offset] = buffer[offset] & ~strandMask;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	8bfb      	ldrh	r3, [r7, #30]
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b21a      	sxth	r2, r3
 8005fa0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	b21b      	sxth	r3, r3
 8005fa8:	4013      	ands	r3, r2
 8005faa:	b219      	sxth	r1, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	8bfb      	ldrh	r3, [r7, #30]
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	4413      	add	r3, r2
 8005fb6:	b28a      	uxth	r2, r1
 8005fb8:	801a      	strh	r2, [r3, #0]
		offset++;
 8005fba:	8bfb      	ldrh	r3, [r7, #30]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	83fb      	strh	r3, [r7, #30]
		buffer[offset] = buffer[offset] & ~strandMask;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	8bfb      	ldrh	r3, [r7, #30]
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b21a      	sxth	r2, r3
 8005fce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	b21b      	sxth	r3, r3
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	b219      	sxth	r1, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	8bfb      	ldrh	r3, [r7, #30]
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	4413      	add	r3, r2
 8005fe4:	b28a      	uxth	r2, r1
 8005fe6:	801a      	strh	r2, [r3, #0]
		offset++;
 8005fe8:	8bfb      	ldrh	r3, [r7, #30]
 8005fea:	3301      	adds	r3, #1
 8005fec:	83fb      	strh	r3, [r7, #30]
	for (int8_t bit = 31; bit >= 0; bit--) {
 8005fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	75fb      	strb	r3, [r7, #23]
 8005ffa:	e780      	b.n	8005efe <_ZN13LedSingleWire8SetPixelEtthhhh+0xae>
		return;
 8005ffc:	bf00      	nop
 8005ffe:	e000      	b.n	8006002 <_ZN13LedSingleWire8SetPixelEtthhhh+0x1b2>
		return;
 8006000:	bf00      	nop
	}
}
 8006002:	3724      	adds	r7, #36	; 0x24
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <_ZN13LedSingleWire10SwapBufferEv>:

void LedSingleWire::SwapBuffer() {
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	SendStands();
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f805 	bl	8006024 <_ZN13LedSingleWire10SendStandsEv>
}
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <_ZN13LedSingleWire10SendStandsEv>:

void LedSingleWire::SendStands() {
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
	//Reset signal
	LED_CLK_GPIO_Port->ODR = 0x00;
 800602c:	4b06      	ldr	r3, [pc, #24]	; (8006048 <_ZN13LedSingleWire10SendStandsEv+0x24>)
 800602e:	2200      	movs	r2, #0
 8006030:	615a      	str	r2, [r3, #20]

	htim3.Instance->EGR = TIM_EGR_UG;
 8006032:	4b06      	ldr	r3, [pc, #24]	; (800604c <_ZN13LedSingleWire10SendStandsEv+0x28>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2201      	movs	r2, #1
 8006038:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(&htim3);
 800603a:	4804      	ldr	r0, [pc, #16]	; (800604c <_ZN13LedSingleWire10SendStandsEv+0x28>)
 800603c:	f7fe fa32 	bl	80044a4 <HAL_TIM_Base_Start_IT>
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40020000 	.word	0x40020000
 800604c:	20001698 	.word	0x20001698

08006050 <_ZN13LedSingleWire12StartNextDmaEv>:

void LedSingleWire::StartNextDma() {
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	//14 is 300nS
	htim1.Instance->ARR = 30;	//17;//18
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <_ZN13LedSingleWire12StartNextDmaEv+0x34>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	221e      	movs	r2, #30
 800605e:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->EGR = TIM_EGR_UG;
 8006060:	4b08      	ldr	r3, [pc, #32]	; (8006084 <_ZN13LedSingleWire12StartNextDmaEv+0x34>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2201      	movs	r2, #1
 8006066:	615a      	str	r2, [r3, #20]

	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) buffer,
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4619      	mov	r1, r3
			(uint32_t) &(LED_CLK_GPIO_Port->ODR), bufferLength);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	895b      	ldrh	r3, [r3, #10]
	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) buffer,
 8006072:	4a05      	ldr	r2, [pc, #20]	; (8006088 <_ZN13LedSingleWire12StartNextDmaEv+0x38>)
 8006074:	4805      	ldr	r0, [pc, #20]	; (800608c <_ZN13LedSingleWire12StartNextDmaEv+0x3c>)
 8006076:	f7fc fb19 	bl	80026ac <HAL_DMA_Start_IT>
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20001718 	.word	0x20001718
 8006088:	40020014 	.word	0x40020014
 800608c:	20001638 	.word	0x20001638

08006090 <_Z12DMA_CompleteP19__DMA_HandleTypeDef>:
//		instance->handleNeeded = true;
//		instance->Handle();
//	}
//}

void DMA_Complete(DMA_HandleTypeDef *hdma) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	instance->Handle();
 8006098:	4b04      	ldr	r3, [pc, #16]	; (80060ac <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x1c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fb5f 	bl	8006760 <_ZN12MatrixDriver6HandleEv>
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000198 	.word	0x20000198

080060b0 <_Z9DMA_AbortP19__DMA_HandleTypeDef>:

void DMA_Abort(DMA_HandleTypeDef *hdma) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	instance->Handle();
 80060b8:	4b04      	ldr	r3, [pc, #16]	; (80060cc <_Z9DMA_AbortP19__DMA_HandleTypeDef+0x1c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fb4f 	bl	8006760 <_ZN12MatrixDriver6HandleEv>
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000198 	.word	0x20000198

080060d0 <_Z9DMA_ErrorP19__DMA_HandleTypeDef>:

void DMA_Error(DMA_HandleTypeDef *hdma) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_LOGGING
	sprintf(buffer, "DE - %d %d\n", hdma_tim1_ch1.State,
			hdma_tim1_ch1.ErrorCode);
#endif

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
 80060d8:	4806      	ldr	r0, [pc, #24]	; (80060f4 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x24>)
 80060da:	f7fa fa65 	bl	80005a8 <strlen>
 80060de:	4603      	mov	r3, r0
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	230a      	movs	r3, #10
 80060e4:	4903      	ldr	r1, [pc, #12]	; (80060f4 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x24>)
 80060e6:	4804      	ldr	r0, [pc, #16]	; (80060f8 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x28>)
 80060e8:	f7ff f943 	bl	8005372 <HAL_UART_Transmit>
}
 80060ec:	bf00      	nop
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	200001fc 	.word	0x200001fc
 80060f8:	200016d8 	.word	0x200016d8

080060fc <_ZN12MatrixDriver12BufferOffsetEtth>:
// -- Row - y % (height / 2) - Top and bottom half of the panel are in the same output cycle
// ---- Pixel - 0 and 1 data lines, select lines for previously sent row (to keep it displaying while new data is clocked in to the shift registers)
// ------ Offset - Set data
// ------ Offset + 1 - Clock data
// ---- OE & Latch
uint16_t MatrixDriver::BufferOffset(uint16_t x, uint16_t y, uint8_t plane) {
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	4608      	mov	r0, r1
 8006106:	4611      	mov	r1, r2
 8006108:	461a      	mov	r2, r3
 800610a:	4603      	mov	r3, r0
 800610c:	817b      	strh	r3, [r7, #10]
 800610e:	460b      	mov	r3, r1
 8006110:	813b      	strh	r3, [r7, #8]
 8006112:	4613      	mov	r3, r2
 8006114:	71fb      	strb	r3, [r7, #7]
	uint16_t rowEntry = y % (height / 2);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	88db      	ldrh	r3, [r3, #6]
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	893b      	ldrh	r3, [r7, #8]
 8006120:	fbb3 f1f2 	udiv	r1, r3, r2
 8006124:	fb02 f201 	mul.w	r2, r2, r1
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	82fb      	strh	r3, [r7, #22]
	uint16_t rowOffset = rowEntry
			* ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	889b      	ldrh	r3, [r3, #4]
	uint16_t rowOffset = rowEntry
 8006130:	3302      	adds	r3, #2
 8006132:	b29b      	uxth	r3, r3
 8006134:	8afa      	ldrh	r2, [r7, #22]
 8006136:	fb12 f303 	smulbb	r3, r2, r3
 800613a:	b29b      	uxth	r3, r3
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	82bb      	strh	r3, [r7, #20]
	uint16_t offsetInRow = ((width - 1) - x) * CYCLES_PER_PIXEL;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	889b      	ldrh	r3, [r3, #4]
 8006144:	1e5a      	subs	r2, r3, #1
 8006146:	897b      	ldrh	r3, [r7, #10]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	b29b      	uxth	r3, r3
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	827b      	strh	r3, [r7, #18]

	return (plane * planeSize) + rowOffset + offsetInRow;
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	899b      	ldrh	r3, [r3, #12]
 8006158:	fb12 f303 	smulbb	r3, r2, r3
 800615c:	b29a      	uxth	r2, r3
 800615e:	8abb      	ldrh	r3, [r7, #20]
 8006160:	4413      	add	r3, r2
 8006162:	b29a      	uxth	r2, r3
 8006164:	8a7b      	ldrh	r3, [r7, #18]
 8006166:	4413      	add	r3, r2
 8006168:	b29b      	uxth	r3, r3
}
 800616a:	4618      	mov	r0, r3
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <_ZN12MatrixDriverC1EttNS_8ScanTypeE>:

#define MIN(a,b) (((a)<(b))?(a):(b))

MatrixDriver::MatrixDriver(uint16_t width, uint16_t height, ScanType scanType) {
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	4608      	mov	r0, r1
 8006182:	4611      	mov	r1, r2
 8006184:	461a      	mov	r2, r3
 8006186:	4603      	mov	r3, r0
 8006188:	817b      	strh	r3, [r7, #10]
 800618a:	460b      	mov	r3, r1
 800618c:	813b      	strh	r3, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	71fb      	strb	r3, [r7, #7]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff fd7b 	bl	8005c90 <_ZN13DisplayDriverC1Ev>
 800619a:	4a1a      	ldr	r2, [pc, #104]	; (8006204 <_ZN12MatrixDriverC1EttNS_8ScanTypeE+0x8c>)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	72da      	strb	r2, [r3, #11]
	this->width = width;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	897a      	ldrh	r2, [r7, #10]
 80061aa:	809a      	strh	r2, [r3, #4]
	this->height = height;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	893a      	ldrh	r2, [r7, #8]
 80061b0:	80da      	strh	r2, [r3, #6]
	this->scanType = scanType;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	79fa      	ldrb	r2, [r7, #7]
 80061b6:	725a      	strb	r2, [r3, #9]
	this->planes = PLANES;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2204      	movs	r2, #4
 80061bc:	721a      	strb	r2, [r3, #8]

	this->planeSize = ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES)
 80061be:	897b      	ldrh	r3, [r7, #10]
 80061c0:	3302      	adds	r3, #2
 80061c2:	b29a      	uxth	r2, r3
			* (height / 2);
 80061c4:	893b      	ldrh	r3, [r7, #8]
 80061c6:	085b      	lsrs	r3, r3, #1
 80061c8:	b29b      	uxth	r3, r3
	this->planeSize = ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES)
 80061ca:	fb12 f303 	smulbb	r3, r2, r3
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	819a      	strh	r2, [r3, #12]
	this->bufferSize = planeSize * planes;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	899a      	ldrh	r2, [r3, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	7a1b      	ldrb	r3, [r3, #8]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	fb12 f303 	smulbb	r3, r2, r3
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	81da      	strh	r2, [r3, #14]

	this->sendBufferA = true;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	729a      	strb	r2, [r3, #10]

	instance = this;
 80061f2:	4a05      	ldr	r2, [pc, #20]	; (8006208 <_ZN12MatrixDriverC1EttNS_8ScanTypeE+0x90>)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6013      	str	r3, [r2, #0]
}
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	08007dd8 	.word	0x08007dd8
 8006208:	20000198 	.word	0x20000198

0800620c <_ZN12MatrixDriver4OpenEv>:

void MatrixDriver::Open() {
 800620c:	b590      	push	{r4, r7, lr}
 800620e:	b08b      	sub	sp, #44	; 0x2c
 8006210:	af04      	add	r7, sp, #16
 8006212:	6078      	str	r0, [r7, #4]
	this->bufferA = new uint16_t[bufferSize];
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	89db      	ldrh	r3, [r3, #14]
 8006218:	4a8f      	ldr	r2, [pc, #572]	; (8006458 <_ZN12MatrixDriver4OpenEv+0x24c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d801      	bhi.n	8006222 <_ZN12MatrixDriver4OpenEv+0x16>
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	e001      	b.n	8006226 <_ZN12MatrixDriver4OpenEv+0x1a>
 8006222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006226:	4618      	mov	r0, r3
 8006228:	f000 ffa9 	bl	800717e <_Znaj>
 800622c:	4603      	mov	r3, r0
 800622e:	461a      	mov	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	611a      	str	r2, [r3, #16]
	this->bufferB = new uint16_t[bufferSize];
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	89db      	ldrh	r3, [r3, #14]
 8006238:	4a87      	ldr	r2, [pc, #540]	; (8006458 <_ZN12MatrixDriver4OpenEv+0x24c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d801      	bhi.n	8006242 <_ZN12MatrixDriver4OpenEv+0x36>
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	e001      	b.n	8006246 <_ZN12MatrixDriver4OpenEv+0x3a>
 8006242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006246:	4618      	mov	r0, r3
 8006248:	f000 ff99 	bl	800717e <_Znaj>
 800624c:	4603      	mov	r3, r0
 800624e:	461a      	mov	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	615a      	str	r2, [r3, #20]

	for (uint8_t y = 0; y < height / 2; y++) {
 8006254:	2300      	movs	r3, #0
 8006256:	75fb      	strb	r3, [r7, #23]
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	88d2      	ldrh	r2, [r2, #6]
 800625e:	0852      	lsrs	r2, r2, #1
 8006260:	b292      	uxth	r2, r2
 8006262:	4293      	cmp	r3, r2
 8006264:	f280 80fa 	bge.w	800645c <_ZN12MatrixDriver4OpenEv+0x250>

		uint8_t previousRow = y == 0 ? (height / 2) - 1 : y - 1;
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d107      	bne.n	800627e <_ZN12MatrixDriver4OpenEv+0x72>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	88db      	ldrh	r3, [r3, #6]
 8006272:	085b      	lsrs	r3, r3, #1
 8006274:	b29b      	uxth	r3, r3
 8006276:	b2db      	uxtb	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	e002      	b.n	8006284 <_ZN12MatrixDriver4OpenEv+0x78>
 800627e:	7dfb      	ldrb	r3, [r7, #23]
 8006280:	3b01      	subs	r3, #1
 8006282:	b2db      	uxtb	r3, r3
 8006284:	753b      	strb	r3, [r7, #20]

		uint16_t rowSelects =
		SET_IF(previousRow & 0x01,
 8006286:	7d3b      	ldrb	r3, [r7, #20]
 8006288:	015b      	lsls	r3, r3, #5
 800628a:	b21b      	sxth	r3, r3
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	b21a      	sxth	r2, r3
				Matrix_A_Pin) |SET_IF(previousRow & 0x02, Matrix_B_Pin)
 8006292:	7d3b      	ldrb	r3, [r7, #20]
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	b21b      	sxth	r3, r3
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	b21b      	sxth	r3, r3
 800629e:	4313      	orrs	r3, r2
 80062a0:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x04, Matrix_C_Pin)
 80062a2:	7d3b      	ldrb	r3, [r7, #20]
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	b21b      	sxth	r3, r3
 80062a8:	f003 0308 	and.w	r3, r3, #8
 80062ac:	b21b      	sxth	r3, r3
 80062ae:	4313      	orrs	r3, r2
 80062b0:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x08, Matrix_D_Pin)
 80062b2:	7d3b      	ldrb	r3, [r7, #20]
 80062b4:	01db      	lsls	r3, r3, #7
 80062b6:	b21b      	sxth	r3, r3
 80062b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062bc:	b21b      	sxth	r3, r3
 80062be:	4313      	orrs	r3, r2
 80062c0:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x10, Matrix_E_Pin);
 80062c2:	7d3b      	ldrb	r3, [r7, #20]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	b21b      	sxth	r3, r3
 80062c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062cc:	b21b      	sxth	r3, r3
 80062ce:	4313      	orrs	r3, r2
 80062d0:	b21b      	sxth	r3, r3
		uint16_t rowSelects =
 80062d2:	827b      	strh	r3, [r7, #18]

		for (uint8_t plane = 0; plane < planes; plane++) {
 80062d4:	2300      	movs	r3, #0
 80062d6:	75bb      	strb	r3, [r7, #22]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	7a1b      	ldrb	r3, [r3, #8]
 80062dc:	7dba      	ldrb	r2, [r7, #22]
 80062de:	429a      	cmp	r2, r3
 80062e0:	f080 80b5 	bcs.w	800644e <_ZN12MatrixDriver4OpenEv+0x242>
			for (uint8_t x = 0; x < width; x++) {
 80062e4:	2300      	movs	r3, #0
 80062e6:	757b      	strb	r3, [r7, #21]
 80062e8:	7d7b      	ldrb	r3, [r7, #21]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	8892      	ldrh	r2, [r2, #4]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	da31      	bge.n	8006356 <_ZN12MatrixDriver4OpenEv+0x14a>

				uint16_t offset = BufferOffset(x, y, plane);
 80062f2:	7d7b      	ldrb	r3, [r7, #21]
 80062f4:	b299      	uxth	r1, r3
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	7dbb      	ldrb	r3, [r7, #22]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff fefd 	bl	80060fc <_ZN12MatrixDriver12BufferOffsetEtth>
 8006302:	4603      	mov	r3, r0
 8006304:	823b      	strh	r3, [r7, #16]

				bufferA[offset] = rowSelects;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	8a3b      	ldrh	r3, [r7, #16]
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	4413      	add	r3, r2
 8006310:	8a7a      	ldrh	r2, [r7, #18]
 8006312:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = rowSelects;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	8a3b      	ldrh	r3, [r7, #16]
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	4413      	add	r3, r2
 800631e:	8a7a      	ldrh	r2, [r7, #18]
 8006320:	801a      	strh	r2, [r3, #0]
				bufferA[offset + 1] = rowSelects | Matrix_CLK_Pin;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	8a3b      	ldrh	r3, [r7, #16]
 8006328:	3301      	adds	r3, #1
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	4413      	add	r3, r2
 800632e:	8a7a      	ldrh	r2, [r7, #18]
 8006330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006334:	b292      	uxth	r2, r2
 8006336:	801a      	strh	r2, [r3, #0]
				bufferB[offset + 1] = rowSelects | Matrix_CLK_Pin;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695a      	ldr	r2, [r3, #20]
 800633c:	8a3b      	ldrh	r3, [r7, #16]
 800633e:	3301      	adds	r3, #1
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	4413      	add	r3, r2
 8006344:	8a7a      	ldrh	r2, [r7, #18]
 8006346:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800634a:	b292      	uxth	r2, r2
 800634c:	801a      	strh	r2, [r3, #0]
			for (uint8_t x = 0; x < width; x++) {
 800634e:	7d7b      	ldrb	r3, [r7, #21]
 8006350:	3301      	adds	r3, #1
 8006352:	757b      	strb	r3, [r7, #21]
 8006354:	e7c8      	b.n	80062e8 <_ZN12MatrixDriver4OpenEv+0xdc>
			}

			//Setup the final bytes for the row, staring with the output after the last pixel on the current row & plane
			//Disable outputs
			uint16_t offset = BufferOffset(0, y,
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	b29a      	uxth	r2, r3
 800635a:	7dbb      	ldrb	r3, [r7, #22]
 800635c:	2100      	movs	r1, #0
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fecc 	bl	80060fc <_ZN12MatrixDriver12BufferOffsetEtth>
 8006364:	4603      	mov	r3, r0
					plane) + CYCLES_PER_PIXEL;
 8006366:	3302      	adds	r3, #2
 8006368:	81fb      	strh	r3, [r7, #14]

			bufferA[offset] = bufferB[offset] = Matrix_OE_Pin | rowSelects;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695a      	ldr	r2, [r3, #20]
 800636e:	89fb      	ldrh	r3, [r7, #14]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	4413      	add	r3, r2
 8006374:	8a7a      	ldrh	r2, [r7, #18]
 8006376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800637a:	b292      	uxth	r2, r2
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6911      	ldr	r1, [r2, #16]
 8006382:	89fa      	ldrh	r2, [r7, #14]
 8006384:	0052      	lsls	r2, r2, #1
 8006386:	440a      	add	r2, r1
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	8013      	strh	r3, [r2, #0]
			offset++;
 800638c:	89fb      	ldrh	r3, [r7, #14]
 800638e:	3301      	adds	r3, #1
 8006390:	81fb      	strh	r3, [r7, #14]

			uint16_t currentRowSelects =
			SET_IF(y & 0x01, Matrix_A_Pin) |SET_IF(y & 0x02, Matrix_B_Pin)
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	015b      	lsls	r3, r3, #5
 8006396:	b21b      	sxth	r3, r3
 8006398:	f003 0320 	and.w	r3, r3, #32
 800639c:	b21a      	sxth	r2, r3
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	b21b      	sxth	r3, r3
 80063a4:	f003 0310 	and.w	r3, r3, #16
 80063a8:	b21b      	sxth	r3, r3
 80063aa:	4313      	orrs	r3, r2
 80063ac:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x04, Matrix_C_Pin)
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	b21b      	sxth	r3, r3
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	b21b      	sxth	r3, r3
 80063ba:	4313      	orrs	r3, r2
 80063bc:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x08, Matrix_D_Pin)
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	01db      	lsls	r3, r3, #7
 80063c2:	b21b      	sxth	r3, r3
 80063c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c8:	b21b      	sxth	r3, r3
 80063ca:	4313      	orrs	r3, r2
 80063cc:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x10, Matrix_E_Pin);
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	b21b      	sxth	r3, r3
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	b21b      	sxth	r3, r3
 80063da:	4313      	orrs	r3, r2
 80063dc:	b21b      	sxth	r3, r3
			uint16_t currentRowSelects =
 80063de:	81bb      	strh	r3, [r7, #12]

			//Latch data, select next row, outputs still off
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin | Matrix_OE_Pin
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	695a      	ldr	r2, [r3, #20]
 80063e4:	89fb      	ldrh	r3, [r7, #14]
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	4413      	add	r3, r2
					| currentRowSelects;
 80063ea:	89ba      	ldrh	r2, [r7, #12]
 80063ec:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80063f0:	b292      	uxth	r2, r2
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin | Matrix_OE_Pin
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6911      	ldr	r1, [r2, #16]
 80063f8:	89fa      	ldrh	r2, [r7, #14]
 80063fa:	0052      	lsls	r2, r2, #1
 80063fc:	440a      	add	r2, r1
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	8013      	strh	r3, [r2, #0]

			offset++;
 8006402:	89fb      	ldrh	r3, [r7, #14]
 8006404:	3301      	adds	r3, #1
 8006406:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695a      	ldr	r2, [r3, #20]
 800640c:	89fb      	ldrh	r3, [r7, #14]
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	4413      	add	r3, r2
 8006412:	89ba      	ldrh	r2, [r7, #12]
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6911      	ldr	r1, [r2, #16]
 800641a:	89fa      	ldrh	r2, [r7, #14]
 800641c:	0052      	lsls	r2, r2, #1
 800641e:	440a      	add	r2, r1
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	8013      	strh	r3, [r2, #0]

			//Bonus cycle to settle.  Probably not necessary but 3 trailing cycles feels odd
			offset++;
 8006424:	89fb      	ldrh	r3, [r7, #14]
 8006426:	3301      	adds	r3, #1
 8006428:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695a      	ldr	r2, [r3, #20]
 800642e:	89fb      	ldrh	r3, [r7, #14]
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	4413      	add	r3, r2
 8006434:	89ba      	ldrh	r2, [r7, #12]
 8006436:	801a      	strh	r2, [r3, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6911      	ldr	r1, [r2, #16]
 800643c:	89fa      	ldrh	r2, [r7, #14]
 800643e:	0052      	lsls	r2, r2, #1
 8006440:	440a      	add	r2, r1
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	8013      	strh	r3, [r2, #0]
		for (uint8_t plane = 0; plane < planes; plane++) {
 8006446:	7dbb      	ldrb	r3, [r7, #22]
 8006448:	3301      	adds	r3, #1
 800644a:	75bb      	strb	r3, [r7, #22]
 800644c:	e744      	b.n	80062d8 <_ZN12MatrixDriver4OpenEv+0xcc>
	for (uint8_t y = 0; y < height / 2; y++) {
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	3301      	adds	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]
 8006454:	e700      	b.n	8006258 <_ZN12MatrixDriver4OpenEv+0x4c>
 8006456:	bf00      	nop
 8006458:	3ffffffc 	.word	0x3ffffffc
		}
	}

	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	889b      	ldrh	r3, [r3, #4]
 8006460:	4618      	mov	r0, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	88db      	ldrh	r3, [r3, #6]
 8006466:	461c      	mov	r4, r3
			bufferSize, planes, planeSize);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	89db      	ldrh	r3, [r3, #14]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 800646c:	461a      	mov	r2, r3
			bufferSize, planes, planeSize);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8006472:	4619      	mov	r1, r3
			bufferSize, planes, planeSize);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	899b      	ldrh	r3, [r3, #12]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8006478:	9302      	str	r3, [sp, #8]
 800647a:	9101      	str	r1, [sp, #4]
 800647c:	9200      	str	r2, [sp, #0]
 800647e:	4623      	mov	r3, r4
 8006480:	4602      	mov	r2, r0
 8006482:	4919      	ldr	r1, [pc, #100]	; (80064e8 <_ZN12MatrixDriver4OpenEv+0x2dc>)
 8006484:	4819      	ldr	r0, [pc, #100]	; (80064ec <_ZN12MatrixDriver4OpenEv+0x2e0>)
 8006486:	f001 f889 	bl	800759c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
 800648a:	4818      	ldr	r0, [pc, #96]	; (80064ec <_ZN12MatrixDriver4OpenEv+0x2e0>)
 800648c:	f7fa f88c 	bl	80005a8 <strlen>
 8006490:	4603      	mov	r3, r0
 8006492:	b29a      	uxth	r2, r3
 8006494:	230a      	movs	r3, #10
 8006496:	4915      	ldr	r1, [pc, #84]	; (80064ec <_ZN12MatrixDriver4OpenEv+0x2e0>)
 8006498:	4815      	ldr	r0, [pc, #84]	; (80064f0 <_ZN12MatrixDriver4OpenEv+0x2e4>)
 800649a:	f7fe ff6a 	bl	8005372 <HAL_UART_Transmit>

	hdma_tim1_ch1.XferAbortCallback = DMA_Abort;
 800649e:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <_ZN12MatrixDriver4OpenEv+0x2e8>)
 80064a0:	4a15      	ldr	r2, [pc, #84]	; (80064f8 <_ZN12MatrixDriver4OpenEv+0x2ec>)
 80064a2:	651a      	str	r2, [r3, #80]	; 0x50
	hdma_tim1_ch1.XferCpltCallback = DMA_Complete;
 80064a4:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <_ZN12MatrixDriver4OpenEv+0x2e8>)
 80064a6:	4a15      	ldr	r2, [pc, #84]	; (80064fc <_ZN12MatrixDriver4OpenEv+0x2f0>)
 80064a8:	63da      	str	r2, [r3, #60]	; 0x3c
	hdma_tim1_ch1.XferErrorCallback = DMA_Error;
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <_ZN12MatrixDriver4OpenEv+0x2e8>)
 80064ac:	4a14      	ldr	r2, [pc, #80]	; (8006500 <_ZN12MatrixDriver4OpenEv+0x2f4>)
 80064ae:	64da      	str	r2, [r3, #76]	; 0x4c

	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 80064b0:	4b14      	ldr	r3, [pc, #80]	; (8006504 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064be:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064c0:	4b10      	ldr	r3, [pc, #64]	; (8006504 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2201      	movs	r2, #1
 80064c6:	2100      	movs	r1, #0
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe fe0b 	bl	80050e4 <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start_IT(&htim1);
 80064ce:	480d      	ldr	r0, [pc, #52]	; (8006504 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 80064d0:	f7fd ffe8 	bl	80044a4 <HAL_TIM_Base_Start_IT>

	nextDmaOffset = 0;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	831a      	strh	r2, [r3, #24]

	StartNextDma();
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f95c 	bl	8006798 <_ZN12MatrixDriver12StartNextDmaEv>
}
 80064e0:	bf00      	nop
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd90      	pop	{r4, r7, pc}
 80064e8:	08007c80 	.word	0x08007c80
 80064ec:	200001fc 	.word	0x200001fc
 80064f0:	200016d8 	.word	0x200016d8
 80064f4:	20001638 	.word	0x20001638
 80064f8:	080060b1 	.word	0x080060b1
 80064fc:	08006091 	.word	0x08006091
 8006500:	080060d1 	.word	0x080060d1
 8006504:	20001718 	.word	0x20001718

08006508 <_ZN12MatrixDriver5CloseEv>:

void MatrixDriver::Close() {
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	HAL_DMA_Abort_IT(&hdma_tim1_ch1);
 8006510:	480e      	ldr	r0, [pc, #56]	; (800654c <_ZN12MatrixDriver5CloseEv+0x44>)
 8006512:	f7fc f923 	bl	800275c <HAL_DMA_Abort_IT>

	HAL_TIM_Base_Stop_IT(&htim1);
 8006516:	480e      	ldr	r0, [pc, #56]	; (8006550 <_ZN12MatrixDriver5CloseEv+0x48>)
 8006518:	f7fd ffe8 	bl	80044ec <HAL_TIM_Base_Stop_IT>

	nextDmaOffset = 0;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	831a      	strh	r2, [r3, #24]

	delete this->bufferA;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <_ZN12MatrixDriver5CloseEv+0x2a>
 800652a:	2102      	movs	r1, #2
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fe13 	bl	8007158 <_ZdlPvj>
	delete this->bufferB;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <_ZN12MatrixDriver5CloseEv+0x3a>
 800653a:	2102      	movs	r1, #2
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fe0b 	bl	8007158 <_ZdlPvj>
}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20001638 	.word	0x20001638
 8006550:	20001718 	.word	0x20001718

08006554 <_ZN12MatrixDriver9PlaneBitsEh>:
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
	value = gamma8[value];
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	4a18      	ldr	r2, [pc, #96]	; (80065c4 <_ZN12MatrixDriver9PlaneBitsEh+0x70>)
 8006564:	5cd3      	ldrb	r3, [r2, r3]
 8006566:	70fb      	strb	r3, [r7, #3]

#if PLANES == 8
	return value;
#elif PLANES == 4
	uint8_t result = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	73fb      	strb	r3, [r7, #15]

	if(value > 128) {
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	2b80      	cmp	r3, #128	; 0x80
 8006570:	d906      	bls.n	8006580 <_ZN12MatrixDriver9PlaneBitsEh+0x2c>
		result |= 0x08;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	f043 0308 	orr.w	r3, r3, #8
 8006578:	73fb      	strb	r3, [r7, #15]
		value -=128;
 800657a:	78fb      	ldrb	r3, [r7, #3]
 800657c:	3b80      	subs	r3, #128	; 0x80
 800657e:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 64) {
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d906      	bls.n	8006594 <_ZN12MatrixDriver9PlaneBitsEh+0x40>
		result |= 0x03;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	f043 0303 	orr.w	r3, r3, #3
 800658c:	73fb      	strb	r3, [r7, #15]
		value -=128;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	3b80      	subs	r3, #128	; 0x80
 8006592:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 32) {
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	2b20      	cmp	r3, #32
 8006598:	d906      	bls.n	80065a8 <_ZN12MatrixDriver9PlaneBitsEh+0x54>
		result |= 0x02;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	73fb      	strb	r3, [r7, #15]
		value -=128;
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	3b80      	subs	r3, #128	; 0x80
 80065a6:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 8) {
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d903      	bls.n	80065b6 <_ZN12MatrixDriver9PlaneBitsEh+0x62>
		result |= 0x01;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]

	return result;
#elif PLANES == 1
	return value > 0 ? 0x01 : 0x00;
#endif
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	2000000c 	.word	0x2000000c

080065c8 <_ZN12MatrixDriver8SetPixelEtthhhh>:
//
//		}
//	}
}

void MatrixDriver::SetPixel(uint16_t x, uint16_t y, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08c      	sub	sp, #48	; 0x30
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	4608      	mov	r0, r1
 80065d2:	4611      	mov	r1, r2
 80065d4:	461a      	mov	r2, r3
 80065d6:	4603      	mov	r3, r0
 80065d8:	817b      	strh	r3, [r7, #10]
 80065da:	460b      	mov	r3, r1
 80065dc:	813b      	strh	r3, [r7, #8]
 80065de:	4613      	mov	r3, r2
 80065e0:	71fb      	strb	r3, [r7, #7]
	uint16_t rBit, gBit, bBit;

//Set data into the buffer we aren't sending at the moment
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	7a9b      	ldrb	r3, [r3, #10]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <_ZN12MatrixDriver8SetPixelEtthhhh+0x28>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	e001      	b.n	80065f4 <_ZN12MatrixDriver8SetPixelEtthhhh+0x2c>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	623b      	str	r3, [r7, #32]

	if (y < (height / 2)) {
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	88db      	ldrh	r3, [r3, #6]
 80065fa:	085b      	lsrs	r3, r3, #1
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	893a      	ldrh	r2, [r7, #8]
 8006600:	429a      	cmp	r2, r3
 8006602:	d206      	bcs.n	8006612 <_ZN12MatrixDriver8SetPixelEtthhhh+0x4a>
		rBit = Matrix_R0_Pin;
 8006604:	2301      	movs	r3, #1
 8006606:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gBit = Matrix_G0_Pin;
 8006608:	2302      	movs	r3, #2
 800660a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		bBit = Matrix_B0_Pin;
 800660c:	2304      	movs	r3, #4
 800660e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006610:	e007      	b.n	8006622 <_ZN12MatrixDriver8SetPixelEtthhhh+0x5a>
	} else {
		rBit = Matrix_R1_Pin;
 8006612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006616:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gBit = Matrix_G1_Pin;
 8006618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800661c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		bBit = Matrix_B1_Pin;
 800661e:	2380      	movs	r3, #128	; 0x80
 8006620:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint16_t pixelMask = rBit | gBit | bBit;
 8006622:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006624:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006626:	4313      	orrs	r3, r2
 8006628:	b29a      	uxth	r2, r3
 800662a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800662c:	4313      	orrs	r3, r2
 800662e:	83fb      	strh	r3, [r7, #30]

	uint8_t rPlanes = PlaneBits(r);
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	4619      	mov	r1, r3
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff ff8d 	bl	8006554 <_ZN12MatrixDriver9PlaneBitsEh>
 800663a:	4603      	mov	r3, r0
 800663c:	777b      	strb	r3, [r7, #29]
	uint8_t gPlanes = PlaneBits(g);
 800663e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006642:	4619      	mov	r1, r3
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff ff85 	bl	8006554 <_ZN12MatrixDriver9PlaneBitsEh>
 800664a:	4603      	mov	r3, r0
 800664c:	773b      	strb	r3, [r7, #28]
	uint8_t bPlanes = PlaneBits(b);
 800664e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006652:	4619      	mov	r1, r3
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff ff7d 	bl	8006554 <_ZN12MatrixDriver9PlaneBitsEh>
 800665a:	4603      	mov	r3, r0
 800665c:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
			10);
#endif

	for (int plane = 0; plane < planes; plane++) {
 800665e:	2300      	movs	r3, #0
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	7a1b      	ldrb	r3, [r3, #8]
 8006666:	461a      	mov	r2, r3
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	4293      	cmp	r3, r2
 800666c:	da63      	bge.n	8006736 <_ZN12MatrixDriver8SetPixelEtthhhh+0x16e>
		uint16_t planePixelBits = ((rPlanes & (0x01 << plane)) ? rBit : 0)
 800666e:	7f7a      	ldrb	r2, [r7, #29]
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	fa42 f303 	asr.w	r3, r2, r3
 8006676:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & (0x01 << plane)) ? gBit : 0)
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <_ZN12MatrixDriver8SetPixelEtthhhh+0xbc>
 800667e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006682:	e000      	b.n	8006686 <_ZN12MatrixDriver8SetPixelEtthhhh+0xbe>
 8006684:	2200      	movs	r2, #0
 8006686:	7f39      	ldrb	r1, [r7, #28]
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	fa41 f303 	asr.w	r3, r1, r3
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <_ZN12MatrixDriver8SetPixelEtthhhh+0xd4>
 8006696:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800669a:	e000      	b.n	800669e <_ZN12MatrixDriver8SetPixelEtthhhh+0xd6>
 800669c:	2300      	movs	r3, #0
 800669e:	4313      	orrs	r3, r2
 80066a0:	b21a      	sxth	r2, r3
				| ((bPlanes & (0x01 << plane)) ? bBit : 0);
 80066a2:	7ef9      	ldrb	r1, [r7, #27]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	fa41 f303 	asr.w	r3, r1, r3
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <_ZN12MatrixDriver8SetPixelEtthhhh+0xf0>
 80066b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80066b6:	e000      	b.n	80066ba <_ZN12MatrixDriver8SetPixelEtthhhh+0xf2>
 80066b8:	2300      	movs	r3, #0
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = ((rPlanes & (0x01 << plane)) ? rBit : 0)
 80066be:	833b      	strh	r3, [r7, #24]

		uint16_t offset = BufferOffset(x, y, plane);
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	893a      	ldrh	r2, [r7, #8]
 80066c6:	8979      	ldrh	r1, [r7, #10]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7ff fd17 	bl	80060fc <_ZN12MatrixDriver12BufferOffsetEtth>
 80066ce:	4603      	mov	r3, r0
 80066d0:	82fb      	strh	r3, [r7, #22]

		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 80066d2:	8afb      	ldrh	r3, [r7, #22]
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	6a3a      	ldr	r2, [r7, #32]
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b21a      	sxth	r2, r3
 80066de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80066e2:	43db      	mvns	r3, r3
 80066e4:	b21b      	sxth	r3, r3
 80066e6:	4013      	ands	r3, r2
 80066e8:	b21a      	sxth	r2, r3
				| planePixelBits;
 80066ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	b219      	sxth	r1, r3
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 80066f2:	8afb      	ldrh	r3, [r7, #22]
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	6a3a      	ldr	r2, [r7, #32]
 80066f8:	4413      	add	r3, r2
				| planePixelBits;
 80066fa:	b28a      	uxth	r2, r1
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 80066fc:	801a      	strh	r2, [r3, #0]
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 80066fe:	8afb      	ldrh	r3, [r7, #22]
 8006700:	3301      	adds	r3, #1
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	6a3a      	ldr	r2, [r7, #32]
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b21a      	sxth	r2, r3
 800670c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006710:	43db      	mvns	r3, r3
 8006712:	b21b      	sxth	r3, r3
 8006714:	4013      	ands	r3, r2
 8006716:	b21a      	sxth	r2, r3
				| planePixelBits;
 8006718:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800671c:	4313      	orrs	r3, r2
 800671e:	b219      	sxth	r1, r3
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8006720:	8afb      	ldrh	r3, [r7, #22]
 8006722:	3301      	adds	r3, #1
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	6a3a      	ldr	r2, [r7, #32]
 8006728:	4413      	add	r3, r2
				| planePixelBits;
 800672a:	b28a      	uxth	r2, r1
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 800672c:	801a      	strh	r2, [r3, #0]
	for (int plane = 0; plane < planes; plane++) {
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	3301      	adds	r3, #1
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
 8006734:	e795      	b.n	8006662 <_ZN12MatrixDriver8SetPixelEtthhhh+0x9a>
	}
}
 8006736:	bf00      	nop
 8006738:	3730      	adds	r7, #48	; 0x30
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	completeSwap = true;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	72da      	strb	r2, [r3, #11]

	HAL_DMA_Abort_IT(&hdma_tim1_ch1);
 800674e:	4803      	ldr	r0, [pc, #12]	; (800675c <_ZN12MatrixDriver10SwapBufferEv+0x1c>)
 8006750:	f7fc f804 	bl	800275c <HAL_DMA_Abort_IT>
}
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20001638 	.word	0x20001638

08006760 <_ZN12MatrixDriver6HandleEv>:

void MatrixDriver::Handle() {
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	if (completeSwap) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7adb      	ldrb	r3, [r3, #11]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00c      	beq.n	800678a <_ZN12MatrixDriver6HandleEv+0x2a>
		completeSwap = false;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	72da      	strb	r2, [r3, #11]
		sendBufferA = !sendBufferA;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	7a9b      	ldrb	r3, [r3, #10]
 800677a:	f083 0301 	eor.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	729a      	strb	r2, [r3, #10]
		nextDmaOffset = 0;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	831a      	strh	r2, [r3, #24]
	}

	StartNextDma();
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f804 	bl	8006798 <_ZN12MatrixDriver12StartNextDmaEv>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <_ZN12MatrixDriver12StartNextDmaEv>:
uint8_t const AAR_BY_PLANE[] = { 1, 2, 4, 8, 16, 32, 64 };
#elif PLANES == 4
uint8_t const AAR_BY_PLANE[] = { 1, 8, 16, 28 };
#endif

void MatrixDriver::StartNextDma() {
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	uint16_t plane = nextDmaOffset / planeSize;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	8b1a      	ldrh	r2, [r3, #24]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	899b      	ldrh	r3, [r3, #12]
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	82fb      	strh	r3, [r7, #22]
	uint16_t *outputBuffer = (sendBufferA ? bufferA : bufferB);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	7a9b      	ldrb	r3, [r3, #10]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <_ZN12MatrixDriver12StartNextDmaEv+0x24>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	e001      	b.n	80067c0 <_ZN12MatrixDriver12StartNextDmaEv+0x28>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	613b      	str	r3, [r7, #16]
	uint16_t *ouputOffset = outputBuffer + (plane * planeSize);
 80067c2:	8afb      	ldrh	r3, [r7, #22]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	8992      	ldrh	r2, [r2, #12]
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4413      	add	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

	htim1.Instance->ARR = AAR_BY_PLANE[plane];
 80067d4:	8afb      	ldrh	r3, [r7, #22]
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <_ZN12MatrixDriver12StartNextDmaEv+0xa0>)
 80067d8:	5cd2      	ldrb	r2, [r2, r3]
 80067da:	4b18      	ldr	r3, [pc, #96]	; (800683c <_ZN12MatrixDriver12StartNextDmaEv+0xa4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->EGR = TIM_EGR_UG;
 80067e0:	4b16      	ldr	r3, [pc, #88]	; (800683c <_ZN12MatrixDriver12StartNextDmaEv+0xa4>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2201      	movs	r2, #1
 80067e6:	615a      	str	r2, [r3, #20]

		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
	}
#endif

	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) ouputOffset,
 80067e8:	68f9      	ldr	r1, [r7, #12]
			(uint32_t) &(GPIOB->ODR), planeSize);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	899b      	ldrh	r3, [r3, #12]
	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) ouputOffset,
 80067ee:	4a14      	ldr	r2, [pc, #80]	; (8006840 <_ZN12MatrixDriver12StartNextDmaEv+0xa8>)
 80067f0:	4814      	ldr	r0, [pc, #80]	; (8006844 <_ZN12MatrixDriver12StartNextDmaEv+0xac>)
 80067f2:	f7fb ff5b 	bl	80026ac <HAL_DMA_Start_IT>

	nextDmaOffset += planeSize;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	8b1a      	ldrh	r2, [r3, #24]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	899b      	ldrh	r3, [r3, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	b29a      	uxth	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	831a      	strh	r2, [r3, #24]

	if (nextDmaOffset >= bufferSize) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	8b1a      	ldrh	r2, [r3, #24]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	89db      	ldrh	r3, [r3, #14]
 800680e:	429a      	cmp	r2, r3
 8006810:	d302      	bcc.n	8006818 <_ZN12MatrixDriver12StartNextDmaEv+0x80>
		nextDmaOffset = 0;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	831a      	strh	r2, [r3, #24]
	}

#ifdef DebugPin_GPIO_Port
	HAL_GPIO_WritePin(DebugPin_GPIO_Port, DebugPin_Pin,
			plane & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006818:	8afb      	ldrh	r3, [r7, #22]
 800681a:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(DebugPin_GPIO_Port, DebugPin_Pin,
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	b2db      	uxtb	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006828:	4807      	ldr	r0, [pc, #28]	; (8006848 <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 800682a:	f7fc fba7 	bl	8002f7c <HAL_GPIO_WritePin>
#endif
}
 800682e:	bf00      	nop
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	08007dcc 	.word	0x08007dcc
 800683c:	20001718 	.word	0x20001718
 8006840:	40020414 	.word	0x40020414
 8006844:	20001638 	.word	0x20001638
 8006848:	40020000 	.word	0x40020000

0800684c <_ZN12PixelMapping5PixelC1Ett>:
#define INC_PIXELMAPPING_H_

class PixelMapping {
public:
	struct Pixel {
		Pixel(uint16_t x, uint16_t y) {
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	807b      	strh	r3, [r7, #2]
 8006858:	4613      	mov	r3, r2
 800685a:	803b      	strh	r3, [r7, #0]
			this->x = x;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	887a      	ldrh	r2, [r7, #2]
 8006860:	801a      	strh	r2, [r3, #0]
			this->y = y;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	883a      	ldrh	r2, [r7, #0]
 8006866:	805a      	strh	r2, [r3, #2]
		}
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <_ZN18SimplePixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:
	virtual Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) = 0;
};

class SimplePixelMapping : public PixelMapping {
public:
	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
		return input;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	2300      	movs	r3, #0
 8006886:	89ba      	ldrh	r2, [r7, #12]
 8006888:	f362 030f 	bfi	r3, r2, #0, #16
 800688c:	89fa      	ldrh	r2, [r7, #14]
 800688e:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <_ZN12PixelMappingC1Ev>:
class PixelMapping {
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	4a04      	ldr	r2, [pc, #16]	; (80068bc <_ZN12PixelMappingC1Ev+0x1c>)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	08007e14 	.word	0x08007e14

080068c0 <_ZN23LeftToRightPixelMappingC1Ehtt>:
};

class LeftToRightPixelMapping : public PixelMapping {
public:
	LeftToRightPixelMapping(uint8_t panelCount, uint16_t panelWidth, uint16_t panelHeight) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	4608      	mov	r0, r1
 80068ca:	4611      	mov	r1, r2
 80068cc:	461a      	mov	r2, r3
 80068ce:	4603      	mov	r3, r0
 80068d0:	72fb      	strb	r3, [r7, #11]
 80068d2:	460b      	mov	r3, r1
 80068d4:	813b      	strh	r3, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff ffdf 	bl	80068a0 <_ZN12PixelMappingC1Ev>
 80068e2:	4a08      	ldr	r2, [pc, #32]	; (8006904 <_ZN23LeftToRightPixelMappingC1Ehtt+0x44>)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	601a      	str	r2, [r3, #0]
		this->panelCount = panelCount;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	7afa      	ldrb	r2, [r7, #11]
 80068ec:	711a      	strb	r2, [r3, #4]
		this->panelWidth = panelWidth;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	893a      	ldrh	r2, [r7, #8]
 80068f2:	80da      	strh	r2, [r3, #6]
		this->panelHeight = panelHeight;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	811a      	strh	r2, [r3, #8]
	}
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	08007dfc 	.word	0x08007dfc

08006908 <_ZN23LeftToRightPixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:

	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
		//Panel counted from top-left
		uint16_t panel = input.y / panelHeight;
 8006912:	887a      	ldrh	r2, [r7, #2]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	891b      	ldrh	r3, [r3, #8]
 8006918:	fbb2 f3f3 	udiv	r3, r2, r3
 800691c:	82bb      	strh	r3, [r7, #20]
		uint16_t lineOnPanel = input.y % panelHeight;
 800691e:	887b      	ldrh	r3, [r7, #2]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	8912      	ldrh	r2, [r2, #8]
 8006924:	fbb3 f1f2 	udiv	r1, r3, r2
 8006928:	fb02 f201 	mul.w	r2, r2, r1
 800692c:	1a9b      	subs	r3, r3, r2
 800692e:	82fb      	strh	r3, [r7, #22]

		if(panel % 2 == 1) {
 8006930:	8abb      	ldrh	r3, [r7, #20]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d004      	beq.n	8006944 <_ZN23LeftToRightPixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x3c>
			//Odd panels are vertically reversed
			lineOnPanel = panelHeight - lineOnPanel;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	891a      	ldrh	r2, [r3, #8]
 800693e:	8afb      	ldrh	r3, [r7, #22]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	82fb      	strh	r3, [r7, #22]
		}

		uint16_t xOffset = (panelCount - 1) - panel * panelWidth;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	791b      	ldrb	r3, [r3, #4]
 8006948:	b29a      	uxth	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	8ab9      	ldrh	r1, [r7, #20]
 8006950:	fb11 f303 	smulbb	r3, r1, r3
 8006954:	b29b      	uxth	r3, r3
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	827b      	strh	r3, [r7, #18]

		PixelMapping::Pixel output {
			.x= xOffset + input.x,
 800695e:	883a      	ldrh	r2, [r7, #0]
			.y = lineOnPanel
		};
 8006960:	8a7b      	ldrh	r3, [r7, #18]
 8006962:	4413      	add	r3, r2
 8006964:	b299      	uxth	r1, r3
 8006966:	8afa      	ldrh	r2, [r7, #22]
 8006968:	f107 0308 	add.w	r3, r7, #8
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff ff6d 	bl	800684c <_ZN12PixelMapping5PixelC1Ett>

		return output;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	2300      	movs	r3, #0
 8006978:	89ba      	ldrh	r2, [r7, #12]
 800697a:	f362 030f 	bfi	r3, r2, #0, #16
 800697e:	89fa      	ldrh	r2, [r7, #14]
 8006980:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <_ZN31SnakePixelMappingFedBottomRightC1Ehtt>:
	uint16_t panelHeight;
};

class SnakePixelMappingFedBottomRight : public PixelMapping {
public:
	SnakePixelMappingFedBottomRight(uint8_t panelCount, uint16_t panelWidth, uint16_t panelHeight) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	4608      	mov	r0, r1
 8006996:	4611      	mov	r1, r2
 8006998:	461a      	mov	r2, r3
 800699a:	4603      	mov	r3, r0
 800699c:	72fb      	strb	r3, [r7, #11]
 800699e:	460b      	mov	r3, r1
 80069a0:	813b      	strh	r3, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80fb      	strh	r3, [r7, #6]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff ff79 	bl	80068a0 <_ZN12PixelMappingC1Ev>
 80069ae:	4a08      	ldr	r2, [pc, #32]	; (80069d0 <_ZN31SnakePixelMappingFedBottomRightC1Ehtt+0x44>)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	601a      	str	r2, [r3, #0]
		this->panelCount = panelCount;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	7afa      	ldrb	r2, [r7, #11]
 80069b8:	711a      	strb	r2, [r3, #4]
		this->panelWidth = panelWidth;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	893a      	ldrh	r2, [r7, #8]
 80069be:	80da      	strh	r2, [r3, #6]
		this->panelHeight = panelHeight;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	811a      	strh	r2, [r3, #8]
	}
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	08007df0 	.word	0x08007df0

080069d4 <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:

	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
		//Panel counted from top-left
		uint16_t panel = input.y / panelHeight;
 80069de:	887a      	ldrh	r2, [r7, #2]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	891b      	ldrh	r3, [r3, #8]
 80069e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e8:	827b      	strh	r3, [r7, #18]
		uint16_t lineOnPanel = input.y % panelHeight;
 80069ea:	887b      	ldrh	r3, [r7, #2]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	8912      	ldrh	r2, [r2, #8]
 80069f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80069f4:	fb02 f201 	mul.w	r2, r2, r1
 80069f8:	1a9b      	subs	r3, r3, r2
 80069fa:	82fb      	strh	r3, [r7, #22]

		uint16_t xOffset = ((panelCount - 1) - panel) * panelWidth;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	791b      	ldrb	r3, [r3, #4]
 8006a00:	1e5a      	subs	r2, r3, #1
 8006a02:	8a7b      	ldrh	r3, [r7, #18]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	88db      	ldrh	r3, [r3, #6]
 8006a0c:	fb12 f303 	smulbb	r3, r2, r3
 8006a10:	823b      	strh	r3, [r7, #16]
		uint16_t x;

		if(((panelCount - 1) - panel) % 2 == 1) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	791b      	ldrb	r3, [r3, #4]
 8006a16:	1e5a      	subs	r2, r3, #1
 8006a18:	8a7b      	ldrh	r3, [r7, #18]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	bfb8      	it	lt
 8006a24:	425b      	neglt	r3, r3
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d10b      	bne.n	8006a42 <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x6e>
			//Even panels (from feedpoint) are vertically reversed
			lineOnPanel = (panelHeight - 1) - lineOnPanel;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	891a      	ldrh	r2, [r3, #8]
 8006a2e:	8afb      	ldrh	r3, [r7, #22]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	82fb      	strh	r3, [r7, #22]
			x = xOffset + input.x;
 8006a38:	883a      	ldrh	r2, [r7, #0]
 8006a3a:	8a3b      	ldrh	r3, [r7, #16]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	82bb      	strh	r3, [r7, #20]
 8006a40:	e009      	b.n	8006a56 <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x82>
		} else {
			x= xOffset + ((panelWidth -1) - input.x);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	88da      	ldrh	r2, [r3, #6]
 8006a46:	883b      	ldrh	r3, [r7, #0]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	8a3b      	ldrh	r3, [r7, #16]
 8006a4e:	4413      	add	r3, r2
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	3b01      	subs	r3, #1
 8006a54:	82bb      	strh	r3, [r7, #20]
		}

		Pixel output {
			.x= x,
			.y = lineOnPanel
		};
 8006a56:	8afa      	ldrh	r2, [r7, #22]
 8006a58:	8ab9      	ldrh	r1, [r7, #20]
 8006a5a:	f107 0308 	add.w	r3, r7, #8
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff fef4 	bl	800684c <_ZN12PixelMapping5PixelC1Ett>

		return output;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	89ba      	ldrh	r2, [r7, #12]
 8006a6c:	f362 030f 	bfi	r3, r2, #0, #16
 8006a70:	89fa      	ldrh	r2, [r7, #14]
 8006a72:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <_ZN13ConfigurationC1Ev>:
#ifndef INC_CONFIGURATION_H_
#define INC_CONFIGURATION_H_

#include <stdint.h>

struct Configuration {
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	729a      	strb	r2, [r3, #10]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	72da      	strb	r2, [r3, #11]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <_Z17readConfigurationv>:
DisplayDriver *display = NULL;

Configuration configuration;
PixelMapping *pixelMapping = NULL;

void readConfiguration() {
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0
	configuration.useMatrix = false;
 8006aa4:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	701a      	strb	r2, [r3, #0]
	configuration.useStrands = true;
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006aac:	2201      	movs	r2, #1
 8006aae:	709a      	strb	r2, [r3, #2]

	if (configuration.useMatrix) {
 8006ab0:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00c      	beq.n	8006ad2 <_Z17readConfigurationv+0x32>
		configuration.matrixFormat = MatrixDriver::SCAN_16;
 8006ab8:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	705a      	strb	r2, [r3, #1]
		configuration.elementWidth = PANEL_WIDTH;
 8006abe:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006ac0:	2240      	movs	r2, #64	; 0x40
 8006ac2:	80da      	strh	r2, [r3, #6]
		configuration.elementHeight = PANEL_HEIGHT;
 8006ac4:	4b0e      	ldr	r3, [pc, #56]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	811a      	strh	r2, [r3, #8]
		configuration.elementCount = 2;
 8006aca:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006acc:	2202      	movs	r2, #2
 8006ace:	809a      	strh	r2, [r3, #4]
		configuration.elementCount = 1;
	}

//	configuration.pixelConfiguration =
//			Configuration::PixelConfiguration::SnakeStartBottomRight;
}
 8006ad0:	e010      	b.n	8006af4 <_Z17readConfigurationv+0x54>
	} else if (configuration.useStrands) {
 8006ad2:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006ad4:	789b      	ldrb	r3, [r3, #2]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00c      	beq.n	8006af4 <_Z17readConfigurationv+0x54>
		configuration.strandFormat = LedSingleWire::GRBW;
 8006ada:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	70da      	strb	r2, [r3, #3]
		configuration.elementWidth = 300;
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006ae2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ae6:	80da      	strh	r2, [r3, #6]
		configuration.elementHeight = 1;
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	811a      	strh	r2, [r3, #8]
		configuration.elementCount = 1;
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <_Z17readConfigurationv+0x60>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	809a      	strh	r2, [r3, #4]
}
 8006af4:	bf00      	nop
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	20000604 	.word	0x20000604

08006b04 <_ZN18SimplePixelMappingC1Ev>:
class SimplePixelMapping : public PixelMapping {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff fec6 	bl	80068a0 <_ZN12PixelMappingC1Ev>
 8006b14:	4a03      	ldr	r2, [pc, #12]	; (8006b24 <_ZN18SimplePixelMappingC1Ev+0x20>)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	08007e08 	.word	0x08007e08

08006b28 <_Z9configurev>:

void configure() {
 8006b28:	b598      	push	{r3, r4, r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
	if (configuration.useMatrix) {
 8006b2c:	4b34      	ldr	r3, [pc, #208]	; (8006c00 <_Z9configurev+0xd8>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d015      	beq.n	8006b60 <_Z9configurev+0x38>
		display = new MatrixDriver(
				configuration.elementWidth * configuration.elementCount,
				configuration.elementHeight,
				(MatrixDriver::ScanType) configuration.matrixFormat);
 8006b34:	201c      	movs	r0, #28
 8006b36:	f000 fb11 	bl	800715c <_Znwj>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	461c      	mov	r4, r3
				configuration.elementWidth * configuration.elementCount,
 8006b3e:	4b30      	ldr	r3, [pc, #192]	; (8006c00 <_Z9configurev+0xd8>)
 8006b40:	88da      	ldrh	r2, [r3, #6]
 8006b42:	4b2f      	ldr	r3, [pc, #188]	; (8006c00 <_Z9configurev+0xd8>)
 8006b44:	889b      	ldrh	r3, [r3, #4]
				(MatrixDriver::ScanType) configuration.matrixFormat);
 8006b46:	fb12 f303 	smulbb	r3, r2, r3
 8006b4a:	b299      	uxth	r1, r3
 8006b4c:	4b2c      	ldr	r3, [pc, #176]	; (8006c00 <_Z9configurev+0xd8>)
 8006b4e:	891a      	ldrh	r2, [r3, #8]
 8006b50:	4b2b      	ldr	r3, [pc, #172]	; (8006c00 <_Z9configurev+0xd8>)
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	4620      	mov	r0, r4
 8006b56:	f7ff fb0f 	bl	8006178 <_ZN12MatrixDriverC1EttNS_8ScanTypeE>
		display = new MatrixDriver(
 8006b5a:	4b2a      	ldr	r3, [pc, #168]	; (8006c04 <_Z9configurev+0xdc>)
 8006b5c:	601c      	str	r4, [r3, #0]
 8006b5e:	e014      	b.n	8006b8a <_Z9configurev+0x62>
	} else if (configuration.useStrands) {
 8006b60:	4b27      	ldr	r3, [pc, #156]	; (8006c00 <_Z9configurev+0xd8>)
 8006b62:	789b      	ldrb	r3, [r3, #2]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d010      	beq.n	8006b8a <_Z9configurev+0x62>

		display = new LedSingleWire(
				(LedSingleWire::Format) configuration.strandFormat,
				configuration.elementCount, configuration.elementWidth);
 8006b68:	2010      	movs	r0, #16
 8006b6a:	f000 faf7 	bl	800715c <_Znwj>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	461c      	mov	r4, r3
				(LedSingleWire::Format) configuration.strandFormat,
 8006b72:	4b23      	ldr	r3, [pc, #140]	; (8006c00 <_Z9configurev+0xd8>)
 8006b74:	78d9      	ldrb	r1, [r3, #3]
				configuration.elementCount, configuration.elementWidth);
 8006b76:	4b22      	ldr	r3, [pc, #136]	; (8006c00 <_Z9configurev+0xd8>)
 8006b78:	889b      	ldrh	r3, [r3, #4]
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	4b20      	ldr	r3, [pc, #128]	; (8006c00 <_Z9configurev+0xd8>)
 8006b7e:	88db      	ldrh	r3, [r3, #6]
 8006b80:	4620      	mov	r0, r4
 8006b82:	f7ff f895 	bl	8005cb0 <_ZN13LedSingleWireC1ENS_6FormatEht>
		display = new LedSingleWire(
 8006b86:	4b1f      	ldr	r3, [pc, #124]	; (8006c04 <_Z9configurev+0xdc>)
 8006b88:	601c      	str	r4, [r3, #0]
	}

	switch (configuration.pixelConfiguration) {
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	; (8006c00 <_Z9configurev+0xd8>)
 8006b8c:	7a9b      	ldrb	r3, [r3, #10]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d002      	beq.n	8006b98 <_Z9configurev+0x70>
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d012      	beq.n	8006bbc <_Z9configurev+0x94>
 8006b96:	e023      	b.n	8006be0 <_Z9configurev+0xb8>
	case Configuration::PixelConfiguration::LeftToRight:
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
				configuration.elementWidth, configuration.elementHeight);
 8006b98:	200c      	movs	r0, #12
 8006b9a:	f000 fadf 	bl	800715c <_Znwj>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	461c      	mov	r4, r3
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
 8006ba2:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <_Z9configurev+0xd8>)
 8006ba4:	889b      	ldrh	r3, [r3, #4]
				configuration.elementWidth, configuration.elementHeight);
 8006ba6:	b2d9      	uxtb	r1, r3
 8006ba8:	4b15      	ldr	r3, [pc, #84]	; (8006c00 <_Z9configurev+0xd8>)
 8006baa:	88da      	ldrh	r2, [r3, #6]
 8006bac:	4b14      	ldr	r3, [pc, #80]	; (8006c00 <_Z9configurev+0xd8>)
 8006bae:	891b      	ldrh	r3, [r3, #8]
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f7ff fe85 	bl	80068c0 <_ZN23LeftToRightPixelMappingC1Ehtt>
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
 8006bb6:	4b14      	ldr	r3, [pc, #80]	; (8006c08 <_Z9configurev+0xe0>)
 8006bb8:	601c      	str	r4, [r3, #0]
		break;
 8006bba:	e01e      	b.n	8006bfa <_Z9configurev+0xd2>
	case Configuration::PixelConfiguration::SnakeStartBottomRight:
		pixelMapping = new SnakePixelMappingFedBottomRight(
				configuration.elementCount, configuration.elementWidth,
				configuration.elementHeight);
 8006bbc:	200c      	movs	r0, #12
 8006bbe:	f000 facd 	bl	800715c <_Znwj>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	461c      	mov	r4, r3
				configuration.elementCount, configuration.elementWidth,
 8006bc6:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <_Z9configurev+0xd8>)
 8006bc8:	889b      	ldrh	r3, [r3, #4]
				configuration.elementHeight);
 8006bca:	b2d9      	uxtb	r1, r3
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <_Z9configurev+0xd8>)
 8006bce:	88da      	ldrh	r2, [r3, #6]
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <_Z9configurev+0xd8>)
 8006bd2:	891b      	ldrh	r3, [r3, #8]
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f7ff fed9 	bl	800698c <_ZN31SnakePixelMappingFedBottomRightC1Ehtt>
		pixelMapping = new SnakePixelMappingFedBottomRight(
 8006bda:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <_Z9configurev+0xe0>)
 8006bdc:	601c      	str	r4, [r3, #0]
		break;
 8006bde:	e00c      	b.n	8006bfa <_Z9configurev+0xd2>
	default:
		pixelMapping = new SimplePixelMapping();
 8006be0:	2004      	movs	r0, #4
 8006be2:	f000 fabb 	bl	800715c <_Znwj>
 8006be6:	4603      	mov	r3, r0
 8006be8:	461c      	mov	r4, r3
 8006bea:	2300      	movs	r3, #0
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f7ff ff88 	bl	8006b04 <_ZN18SimplePixelMappingC1Ev>
 8006bf4:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <_Z9configurev+0xe0>)
 8006bf6:	601c      	str	r4, [r3, #0]
		break;
 8006bf8:	bf00      	nop
	}
}
 8006bfa:	bf00      	nop
 8006bfc:	bd98      	pop	{r3, r4, r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20000604 	.word	0x20000604
 8006c04:	20000600 	.word	0x20000600
 8006c08:	20000610 	.word	0x20000610

08006c0c <_Z4openv>:

void open() {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
	if (display != NULL) {
 8006c10:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <_Z4openv+0x28>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <_Z4openv+0x1c>
		display->Open();
 8006c18:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <_Z4openv+0x28>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <_Z4openv+0x28>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
	}

	configuration.status = Configuration::Status::Ready;
 8006c28:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <_Z4openv+0x2c>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	72da      	strb	r2, [r3, #11]
}
 8006c2e:	bf00      	nop
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000600 	.word	0x20000600
 8006c38:	20000604 	.word	0x20000604

08006c3c <_ZN8RxBufferC1Ev>:

Request request;
CommandProcessor commandProcessor;

struct RxBuffer {
	RxBuffer() {
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	705a      	strb	r2, [r3, #1]
		for (int c = 0; c < 1021; c++) {
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8006c5a:	dc09      	bgt.n	8006c70 <_ZN8RxBufferC1Ev+0x34>
			buffer[c] = 0x00;
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	3302      	adds	r3, #2
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
		for (int c = 0; c < 1021; c++) {
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	e7f1      	b.n	8006c54 <_ZN8RxBufferC1Ev+0x18>
		}
	}
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <_Z14RxCpltCallbackP19__SPI_HandleTypeDef>:
RxBuffer receiveBuffers[RX_BUFFERS];
volatile RxBuffer *currentBuffer = NULL;

//uint8_t state = 0;

void RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
//			HAL_SPI_Receive_IT(&hspi1, spi_buffer, 2);
//
//			commandProcessor.ProcessRequest(&request, display);
//		}
//	} else {
	currentBuffer->ready = true;
 8006c88:	4b08      	ldr	r3, [pc, #32]	; (8006cac <_Z14RxCpltCallbackP19__SPI_HandleTypeDef+0x2c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	705a      	strb	r2, [r3, #1]
	currentBuffer->inUse = false;
 8006c90:	4b06      	ldr	r3, [pc, #24]	; (8006cac <_Z14RxCpltCallbackP19__SPI_HandleTypeDef+0x2c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2200      	movs	r2, #0
 8006c96:	701a      	strb	r2, [r3, #0]
	currentBuffer = NULL;
 8006c98:	4b04      	ldr	r3, [pc, #16]	; (8006cac <_Z14RxCpltCallbackP19__SPI_HandleTypeDef+0x2c>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
//	}
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20001628 	.word	0x20001628

08006cb0 <_Z12BeginReceivev>:
	sprintf((char*) buffer, "ERROR\n");

	HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 2000);
}

void BeginReceive() {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006cb6:	b672      	cpsid	i
}
 8006cb8:	bf00      	nop
	__disable_irq();

	if (currentBuffer != NULL) {
 8006cba:	4b2a      	ldr	r3, [pc, #168]	; (8006d64 <_Z12BeginReceivev+0xb4>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d006      	beq.n	8006cd0 <_Z12BeginReceivev+0x20>
		currentBuffer->inUse = false;
 8006cc2:	4b28      	ldr	r3, [pc, #160]	; (8006d64 <_Z12BeginReceivev+0xb4>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	701a      	strb	r2, [r3, #0]
		currentBuffer = NULL;
 8006cca:	4b26      	ldr	r3, [pc, #152]	; (8006d64 <_Z12BeginReceivev+0xb4>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
	}

	for (int i = 0; i < RX_BUFFERS; i++) {
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	607b      	str	r3, [r7, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	dc2e      	bgt.n	8006d38 <_Z12BeginReceivev+0x88>
		if (!receiveBuffers[i].ready && !currentBuffer->inUse) {
 8006cda:	4923      	ldr	r1, [pc, #140]	; (8006d68 <_Z12BeginReceivev+0xb8>)
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	025b      	lsls	r3, r3, #9
 8006ce2:	4413      	add	r3, r2
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	440b      	add	r3, r1
 8006ce8:	3301      	adds	r3, #1
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	f083 0301 	eor.w	r3, r3, #1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <_Z12BeginReceivev+0x5e>
 8006cf8:	4b1a      	ldr	r3, [pc, #104]	; (8006d64 <_Z12BeginReceivev+0xb4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	f083 0301 	eor.w	r3, r3, #1
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <_Z12BeginReceivev+0x5e>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <_Z12BeginReceivev+0x60>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00d      	beq.n	8006d30 <_Z12BeginReceivev+0x80>
			currentBuffer = &(receiveBuffers[i]);
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	4613      	mov	r3, r2
 8006d18:	025b      	lsls	r3, r3, #9
 8006d1a:	4413      	add	r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4a12      	ldr	r2, [pc, #72]	; (8006d68 <_Z12BeginReceivev+0xb8>)
 8006d20:	4413      	add	r3, r2
 8006d22:	4a10      	ldr	r2, [pc, #64]	; (8006d64 <_Z12BeginReceivev+0xb4>)
 8006d24:	6013      	str	r3, [r2, #0]
			currentBuffer->inUse = true;
 8006d26:	4b0f      	ldr	r3, [pc, #60]	; (8006d64 <_Z12BeginReceivev+0xb4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	701a      	strb	r2, [r3, #0]
			break;
 8006d2e:	e003      	b.n	8006d38 <_Z12BeginReceivev+0x88>
	for (int i = 0; i < RX_BUFFERS; i++) {
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3301      	adds	r3, #1
 8006d34:	607b      	str	r3, [r7, #4]
 8006d36:	e7cd      	b.n	8006cd4 <_Z12BeginReceivev+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 8006d38:	b662      	cpsie	i
}
 8006d3a:	bf00      	nop
		}
	}

	__enable_irq();

	if (currentBuffer != NULL) {
 8006d3c:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <_Z12BeginReceivev+0xb4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <_Z12BeginReceivev+0xac>
		hspi1.RxCpltCallback = RxCpltCallback;
 8006d44:	4b09      	ldr	r3, [pc, #36]	; (8006d6c <_Z12BeginReceivev+0xbc>)
 8006d46:	4a0a      	ldr	r2, [pc, #40]	; (8006d70 <_Z12BeginReceivev+0xc0>)
 8006d48:	65da      	str	r2, [r3, #92]	; 0x5c

		HAL_SPI_Receive_IT(&hspi1, (uint8_t*) currentBuffer->buffer, 263); //Was 1024
 8006d4a:	4b06      	ldr	r3, [pc, #24]	; (8006d64 <_Z12BeginReceivev+0xb4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3302      	adds	r3, #2
 8006d50:	f240 1207 	movw	r2, #263	; 0x107
 8006d54:	4619      	mov	r1, r3
 8006d56:	4805      	ldr	r0, [pc, #20]	; (8006d6c <_Z12BeginReceivev+0xbc>)
 8006d58:	f7fc fe18 	bl	800398c <HAL_SPI_Receive_IT>
	} else {
		//We'll miss the next SPI transaction
	}
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20001628 	.word	0x20001628
 8006d68:	20000a20 	.word	0x20000a20
 8006d6c:	20001758 	.word	0x20001758
 8006d70:	08006c81 	.word	0x08006c81

08006d74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IPS_NCS_Pin) {
 8006d7e:	88fb      	ldrh	r3, [r7, #6]
 8006d80:	2b10      	cmp	r3, #16
 8006d82:	d10f      	bne.n	8006da4 <HAL_GPIO_EXTI_Callback+0x30>
		if (IPS_NCS_GPIO_Port->IDR & IPS_NCS_Pin) {
 8006d84:	4b09      	ldr	r3, [pc, #36]	; (8006dac <HAL_GPIO_EXTI_Callback+0x38>)
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f003 0310 	and.w	r3, r3, #16
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bf14      	ite	ne
 8006d90:	2301      	movne	r3, #1
 8006d92:	2300      	moveq	r3, #0
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d004      	beq.n	8006da4 <HAL_GPIO_EXTI_Callback+0x30>
//			HAL_GPIO_WritePin(STATE_GPIO_Port, STATE_Pin, GPIO_PIN_SET);
//			HAL_SPI_Abort(&hspi1);
//			HAL_GPIO_WritePin(STATE_GPIO_Port, STATE_Pin, GPIO_PIN_RESET);
			HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8006d9a:	200a      	movs	r0, #10
 8006d9c:	f7fb fbbd 	bl	800251a <HAL_NVIC_DisableIRQ>
			BeginReceive();
 8006da0:	f7ff ff86 	bl	8006cb0 <_Z12BeginReceivev>
		}
	}
}
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	40020000 	.word	0x40020000

08006db0 <cpp_main>:

extern "C" int cpp_main(void) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08c      	sub	sp, #48	; 0x30
 8006db4:	af04      	add	r7, sp, #16
	__HAL_DBGMCU_FREEZE_IWDG();
 8006db6:	4b62      	ldr	r3, [pc, #392]	; (8006f40 <cpp_main+0x190>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	4a61      	ldr	r2, [pc, #388]	; (8006f40 <cpp_main+0x190>)
 8006dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006dc0:	6093      	str	r3, [r2, #8]

	readConfiguration();
 8006dc2:	f7ff fe6d 	bl	8006aa0 <_Z17readConfigurationv>

	configure();
 8006dc6:	f7ff feaf 	bl	8006b28 <_Z9configurev>

	open();
 8006dca:	f7ff ff1f 	bl	8006c0c <_Z4openv>

	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006dce:	2023      	movs	r0, #35	; 0x23
 8006dd0:	f7fb fb95 	bl	80024fe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006dd4:	200a      	movs	r0, #10
 8006dd6:	f7fb fb92 	bl	80024fe <HAL_NVIC_EnableIRQ>

//	BeginReceive();

	uint16_t color_shift = 1;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	827b      	strh	r3, [r7, #18]

	uint32_t start = HAL_GetTick();
 8006dde:	f7fb fa67 	bl	80022b0 <HAL_GetTick>
 8006de2:	60f8      	str	r0, [r7, #12]

	uint16_t pos = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	817b      	strh	r3, [r7, #10]
	input.bodyLength = 0;

	commandProcessor.ProcessRequest(&input, display);
#endif

	lastUpdate = HAL_GetTick();
 8006de8:	f7fb fa62 	bl	80022b0 <HAL_GetTick>
 8006dec:	4603      	mov	r3, r0
 8006dee:	4a55      	ldr	r2, [pc, #340]	; (8006f44 <cpp_main+0x194>)
 8006df0:	6013      	str	r3, [r2, #0]

	color_shift++;
 8006df2:	8a7b      	ldrh	r3, [r7, #18]
 8006df4:	3301      	adds	r3, #1
 8006df6:	827b      	strh	r3, [r7, #18]

	uint32_t duration = HAL_GetTick() - start;
 8006df8:	f7fb fa5a 	bl	80022b0 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	607b      	str	r3, [r7, #4]

	sprintf((char*) buffer, "Setup Duration: %lu\n", duration);
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	4950      	ldr	r1, [pc, #320]	; (8006f48 <cpp_main+0x198>)
 8006e08:	4850      	ldr	r0, [pc, #320]	; (8006f4c <cpp_main+0x19c>)
 8006e0a:	f000 fbc7 	bl	800759c <siprintf>

	HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 500);
 8006e0e:	484f      	ldr	r0, [pc, #316]	; (8006f4c <cpp_main+0x19c>)
 8006e10:	f7f9 fbca 	bl	80005a8 <strlen>
 8006e14:	4603      	mov	r3, r0
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006e1c:	494b      	ldr	r1, [pc, #300]	; (8006f4c <cpp_main+0x19c>)
 8006e1e:	484c      	ldr	r0, [pc, #304]	; (8006f50 <cpp_main+0x1a0>)
 8006e20:	f7fe faa7 	bl	8005372 <HAL_UART_Transmit>

	while (1) {
#ifndef DRAW

		for (int i = 0; i < RX_BUFFERS; i++) {
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	dcfa      	bgt.n	8006e24 <cpp_main+0x74>
//			start = HAL_GetTick();

			if (receiveBuffers[i].ready && !receiveBuffers[i].inUse) {
 8006e2e:	4949      	ldr	r1, [pc, #292]	; (8006f54 <cpp_main+0x1a4>)
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	4613      	mov	r3, r2
 8006e34:	025b      	lsls	r3, r3, #9
 8006e36:	4413      	add	r3, r2
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	440b      	add	r3, r1
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00f      	beq.n	8006e66 <cpp_main+0xb6>
 8006e46:	4943      	ldr	r1, [pc, #268]	; (8006f54 <cpp_main+0x1a4>)
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	025b      	lsls	r3, r3, #9
 8006e4e:	4413      	add	r3, r2
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	440b      	add	r3, r1
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f083 0301 	eor.w	r3, r3, #1
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <cpp_main+0xb6>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e000      	b.n	8006e68 <cpp_main+0xb8>
 8006e66:	2300      	movs	r3, #0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d064      	beq.n	8006f36 <cpp_main+0x186>

				HAL_GPIO_WritePin(STATE_GPIO_Port, STATE_Pin, GPIO_PIN_SET);
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	2108      	movs	r1, #8
 8006e70:	4839      	ldr	r0, [pc, #228]	; (8006f58 <cpp_main+0x1a8>)
 8006e72:	f7fc f883 	bl	8002f7c <HAL_GPIO_WritePin>

				if (!request.Parse(receiveBuffers[i].buffer, 263)) {
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	025b      	lsls	r3, r3, #9
 8006e7c:	4413      	add	r3, r2
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	4a34      	ldr	r2, [pc, #208]	; (8006f54 <cpp_main+0x1a4>)
 8006e82:	4413      	add	r3, r2
 8006e84:	3302      	adds	r3, #2
 8006e86:	f240 1207 	movw	r2, #263	; 0x107
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4833      	ldr	r0, [pc, #204]	; (8006f5c <cpp_main+0x1ac>)
 8006e8e:	f7f9 f9e8 	bl	8000262 <_ZN7Request5ParseEPht>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f083 0301 	eor.w	r3, r3, #1
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d02f      	beq.n	8006efe <cpp_main+0x14e>
					uint16_t firstNonZero = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	837b      	strh	r3, [r7, #26]
					for (int c = 0; c < 260; c++) {
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eac:	da0d      	bge.n	8006eca <cpp_main+0x11a>
						if (request.body[c] != 0x00) {
 8006eae:	4a2b      	ldr	r2, [pc, #172]	; (8006f5c <cpp_main+0x1ac>)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <cpp_main+0x112>
							firstNonZero = c;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	837b      	strh	r3, [r7, #26]
							break;
 8006ec0:	e003      	b.n	8006eca <cpp_main+0x11a>
					for (int c = 0; c < 260; c++) {
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	e7ed      	b.n	8006ea6 <cpp_main+0xf6>
						}
					}

					sprintf((char*) buffer, "UNK: %d %02x - %d fnz: %x\r\n", i,
							duration, request.type, request.bodyLength,
 8006eca:	4b24      	ldr	r3, [pc, #144]	; (8006f5c <cpp_main+0x1ac>)
 8006ecc:	791b      	ldrb	r3, [r3, #4]
					sprintf((char*) buffer, "UNK: %d %02x - %d fnz: %x\r\n", i,
 8006ece:	461a      	mov	r2, r3
							duration, request.type, request.bodyLength,
 8006ed0:	4b22      	ldr	r3, [pc, #136]	; (8006f5c <cpp_main+0x1ac>)
 8006ed2:	88db      	ldrh	r3, [r3, #6]
					sprintf((char*) buffer, "UNK: %d %02x - %d fnz: %x\r\n", i,
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	8b7b      	ldrh	r3, [r7, #26]
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	9101      	str	r1, [sp, #4]
 8006edc:	9200      	str	r2, [sp, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	491f      	ldr	r1, [pc, #124]	; (8006f60 <cpp_main+0x1b0>)
 8006ee4:	4819      	ldr	r0, [pc, #100]	; (8006f4c <cpp_main+0x19c>)
 8006ee6:	f000 fb59 	bl	800759c <siprintf>
							firstNonZero);

					HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer),
 8006eea:	4818      	ldr	r0, [pc, #96]	; (8006f4c <cpp_main+0x19c>)
 8006eec:	f7f9 fb5c 	bl	80005a8 <strlen>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	2364      	movs	r3, #100	; 0x64
 8006ef6:	4915      	ldr	r1, [pc, #84]	; (8006f4c <cpp_main+0x19c>)
 8006ef8:	4815      	ldr	r0, [pc, #84]	; (8006f50 <cpp_main+0x1a0>)
 8006efa:	f7fe fa3a 	bl	8005372 <HAL_UART_Transmit>
							100);
				}

				receiveBuffers[i].ready = false;
 8006efe:	4915      	ldr	r1, [pc, #84]	; (8006f54 <cpp_main+0x1a4>)
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	4613      	mov	r3, r2
 8006f04:	025b      	lsls	r3, r3, #9
 8006f06:	4413      	add	r3, r2
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	440b      	add	r3, r1
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]

				if (currentBuffer == NULL) {
 8006f12:	4b14      	ldr	r3, [pc, #80]	; (8006f64 <cpp_main+0x1b4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <cpp_main+0x16e>
					BeginReceive();
 8006f1a:	f7ff fec9 	bl	8006cb0 <_Z12BeginReceivev>
				}

				commandProcessor.ProcessRequest(&request, display, &configuration);
 8006f1e:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <cpp_main+0x1b8>)
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <cpp_main+0x1bc>)
 8006f24:	490d      	ldr	r1, [pc, #52]	; (8006f5c <cpp_main+0x1ac>)
 8006f26:	4812      	ldr	r0, [pc, #72]	; (8006f70 <cpp_main+0x1c0>)
 8006f28:	f7f9 fa3c 	bl	80003a4 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriverP13Configuration>

//				uint32_t duration = HAL_GetTick() - start;

				HAL_GPIO_WritePin(STATE_GPIO_Port, STATE_Pin, GPIO_PIN_RESET);
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2108      	movs	r1, #8
 8006f30:	4809      	ldr	r0, [pc, #36]	; (8006f58 <cpp_main+0x1a8>)
 8006f32:	f7fc f823 	bl	8002f7c <HAL_GPIO_WritePin>
		for (int i = 0; i < RX_BUFFERS; i++) {
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	61fb      	str	r3, [r7, #28]
 8006f3c:	e774      	b.n	8006e28 <cpp_main+0x78>
 8006f3e:	bf00      	nop
 8006f40:	e0042000 	.word	0xe0042000
 8006f44:	200005fc 	.word	0x200005fc
 8006f48:	08007cf8 	.word	0x08007cf8
 8006f4c:	200001fc 	.word	0x200001fc
 8006f50:	200016d8 	.word	0x200016d8
 8006f54:	20000a20 	.word	0x20000a20
 8006f58:	40020000 	.word	0x40020000
 8006f5c:	20000614 	.word	0x20000614
 8006f60:	08007d10 	.word	0x08007d10
 8006f64:	20001628 	.word	0x20001628
 8006f68:	20000600 	.word	0x20000600
 8006f6c:	20000604 	.word	0x20000604
 8006f70:	20000a1c 	.word	0x20000a1c

08006f74 <_Z41__static_initialization_and_destruction_0ii>:
//		commit();
//
//		HAL_Delay(10);
#endif
	}
}
 8006f74:	b5b0      	push	{r4, r5, r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d119      	bne.n	8006fb8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d114      	bne.n	8006fb8 <_Z41__static_initialization_and_destruction_0ii+0x44>
Configuration configuration;
 8006f8e:	4813      	ldr	r0, [pc, #76]	; (8006fdc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8006f90:	f7ff fd75 	bl	8006a7e <_ZN13ConfigurationC1Ev>
Request request;
 8006f94:	4812      	ldr	r0, [pc, #72]	; (8006fe0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8006f96:	f7f9 f923 	bl	80001e0 <_ZN7RequestC1Ev>
CommandProcessor commandProcessor;
 8006f9a:	4812      	ldr	r0, [pc, #72]	; (8006fe4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8006f9c:	f7f9 f9d2 	bl	8000344 <_ZN16CommandProcessorC1Ev>
RxBuffer receiveBuffers[RX_BUFFERS];
 8006fa0:	4b11      	ldr	r3, [pc, #68]	; (8006fe8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8006fa2:	2402      	movs	r4, #2
 8006fa4:	461d      	mov	r5, r3
 8006fa6:	2c00      	cmp	r4, #0
 8006fa8:	db06      	blt.n	8006fb8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8006faa:	4628      	mov	r0, r5
 8006fac:	f7ff fe46 	bl	8006c3c <_ZN8RxBufferC1Ev>
 8006fb0:	f205 4502 	addw	r5, r5, #1026	; 0x402
 8006fb4:	3c01      	subs	r4, #1
 8006fb6:	e7f6      	b.n	8006fa6 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d105      	bne.n	8006fd4 <_Z41__static_initialization_and_destruction_0ii+0x60>
CommandProcessor commandProcessor;
 8006fc8:	4806      	ldr	r0, [pc, #24]	; (8006fe4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8006fca:	f7f9 f9cb 	bl	8000364 <_ZN16CommandProcessorD1Ev>
Request request;
 8006fce:	4804      	ldr	r0, [pc, #16]	; (8006fe0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8006fd0:	f7f9 f926 	bl	8000220 <_ZN7RequestD1Ev>
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bdb0      	pop	{r4, r5, r7, pc}
 8006fdc:	20000604 	.word	0x20000604
 8006fe0:	20000614 	.word	0x20000614
 8006fe4:	20000a1c 	.word	0x20000a1c
 8006fe8:	20000a20 	.word	0x20000a20

08006fec <_GLOBAL__sub_I_hdma_spi1_rx>:
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	f7ff ffbd 	bl	8006f74 <_Z41__static_initialization_and_destruction_0ii>
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <_GLOBAL__sub_D_hdma_spi1_rx>:
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007004:	2000      	movs	r0, #0
 8007006:	f7ff ffb5 	bl	8006f74 <_Z41__static_initialization_and_destruction_0ii>
 800700a:	bd80      	pop	{r7, pc}

0800700c <_ZN13Configuration8getWidthEv>:
		Uninitialized = 0, Ready = 1
	};

	Status status = Uninitialized;

	uint16_t getWidth() {
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
		switch (pixelConfiguration) {
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	7a9b      	ldrb	r3, [r3, #10]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d107      	bne.n	800702c <_ZN13Configuration8getWidthEv+0x20>
		case Simple:
			return elementWidth * elementCount;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	88da      	ldrh	r2, [r3, #6]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	889b      	ldrh	r3, [r3, #4]
 8007024:	fb12 f303 	smulbb	r3, r2, r3
 8007028:	b29b      	uxth	r3, r3
 800702a:	e001      	b.n	8007030 <_ZN13Configuration8getWidthEv+0x24>
		default:
			return elementWidth;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	88db      	ldrh	r3, [r3, #6]
		}
	}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <_ZN13Configuration9getHeightEv>:

	uint16_t getHeight() {
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
		switch (pixelConfiguration) {
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	7a9b      	ldrb	r3, [r3, #10]
 8007048:	3b01      	subs	r3, #1
 800704a:	2b01      	cmp	r3, #1
 800704c:	d807      	bhi.n	800705e <_ZN13Configuration9getHeightEv+0x22>
		case LeftToRight:
		case SnakeStartBottomRight:
			return elementHeight * elementCount;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	891a      	ldrh	r2, [r3, #8]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	889b      	ldrh	r3, [r3, #4]
 8007056:	fb12 f303 	smulbb	r3, r2, r3
 800705a:	b29b      	uxth	r3, r3
 800705c:	e001      	b.n	8007062 <_ZN13Configuration9getHeightEv+0x26>
		default:
			return elementHeight;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	891b      	ldrh	r3, [r3, #8]
		}
	}
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800706e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007070:	2400      	movs	r4, #0
 8007072:	2310      	movs	r3, #16
 8007074:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007078:	6803      	ldr	r3, [r0, #0]
 800707a:	9400      	str	r4, [sp, #0]
 800707c:	699e      	ldr	r6, [r3, #24]
 800707e:	f88d 4004 	strb.w	r4, [sp, #4]
 8007082:	4615      	mov	r5, r2
 8007084:	466b      	mov	r3, sp
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	47b0      	blx	r6
 800708a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800708e:	f003 0306 	and.w	r3, r3, #6
 8007092:	2b06      	cmp	r3, #6
 8007094:	bf03      	ittte	eq
 8007096:	9b00      	ldreq	r3, [sp, #0]
 8007098:	602b      	streq	r3, [r5, #0]
 800709a:	2001      	moveq	r0, #1
 800709c:	4620      	movne	r0, r4
 800709e:	b004      	add	sp, #16
 80070a0:	bd70      	pop	{r4, r5, r6, pc}

080070a2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80070a2:	9800      	ldr	r0, [sp, #0]
 80070a4:	4290      	cmp	r0, r2
 80070a6:	bf14      	ite	ne
 80070a8:	2001      	movne	r0, #1
 80070aa:	2006      	moveq	r0, #6
 80070ac:	4770      	bx	lr
	...

080070b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80070b0:	b510      	push	{r4, lr}
 80070b2:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	4604      	mov	r4, r0
 80070b8:	f000 f8e5 	bl	8007286 <_ZNSt9type_infoD1Ev>
 80070bc:	4620      	mov	r0, r4
 80070be:	bd10      	pop	{r4, pc}
 80070c0:	08007e50 	.word	0x08007e50

080070c4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	4604      	mov	r4, r0
 80070c8:	f7ff fff2 	bl	80070b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80070cc:	4620      	mov	r0, r4
 80070ce:	2108      	movs	r1, #8
 80070d0:	f000 f842 	bl	8007158 <_ZdlPvj>
 80070d4:	4620      	mov	r0, r4
 80070d6:	bd10      	pop	{r4, pc}

080070d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80070d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	461f      	mov	r7, r3
 80070de:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80070e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80070e6:	4598      	cmp	r8, r3
 80070e8:	4606      	mov	r6, r0
 80070ea:	4615      	mov	r5, r2
 80070ec:	d107      	bne.n	80070fe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80070ee:	9907      	ldr	r1, [sp, #28]
 80070f0:	f000 f8cc 	bl	800728c <_ZNKSt9type_infoeqERKS_>
 80070f4:	b118      	cbz	r0, 80070fe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80070f6:	7165      	strb	r5, [r4, #5]
 80070f8:	2000      	movs	r0, #0
 80070fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070fe:	4639      	mov	r1, r7
 8007100:	4630      	mov	r0, r6
 8007102:	f000 f8c3 	bl	800728c <_ZNKSt9type_infoeqERKS_>
 8007106:	2800      	cmp	r0, #0
 8007108:	d0f6      	beq.n	80070f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800710a:	2301      	movs	r3, #1
 800710c:	f8c4 8000 	str.w	r8, [r4]
 8007110:	7125      	strb	r5, [r4, #4]
 8007112:	71a3      	strb	r3, [r4, #6]
 8007114:	e7f0      	b.n	80070f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08007116 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8007116:	b538      	push	{r3, r4, r5, lr}
 8007118:	4615      	mov	r5, r2
 800711a:	461c      	mov	r4, r3
 800711c:	f000 f8b6 	bl	800728c <_ZNKSt9type_infoeqERKS_>
 8007120:	b120      	cbz	r0, 800712c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8007122:	2308      	movs	r3, #8
 8007124:	60e3      	str	r3, [r4, #12]
 8007126:	2306      	movs	r3, #6
 8007128:	6025      	str	r5, [r4, #0]
 800712a:	7123      	strb	r3, [r4, #4]
 800712c:	bd38      	pop	{r3, r4, r5, pc}

0800712e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800712e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007130:	4605      	mov	r5, r0
 8007132:	460c      	mov	r4, r1
 8007134:	9201      	str	r2, [sp, #4]
 8007136:	461e      	mov	r6, r3
 8007138:	f000 f8a8 	bl	800728c <_ZNKSt9type_infoeqERKS_>
 800713c:	b950      	cbnz	r0, 8007154 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800713e:	2e03      	cmp	r6, #3
 8007140:	d808      	bhi.n	8007154 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	9a01      	ldr	r2, [sp, #4]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	4629      	mov	r1, r5
 800714a:	4620      	mov	r0, r4
 800714c:	b002      	add	sp, #8
 800714e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007152:	4718      	bx	r3
 8007154:	b002      	add	sp, #8
 8007156:	bd70      	pop	{r4, r5, r6, pc}

08007158 <_ZdlPvj>:
 8007158:	f000 b8ae 	b.w	80072b8 <_ZdlPv>

0800715c <_Znwj>:
 800715c:	2801      	cmp	r0, #1
 800715e:	bf38      	it	cc
 8007160:	2001      	movcc	r0, #1
 8007162:	b510      	push	{r4, lr}
 8007164:	4604      	mov	r4, r0
 8007166:	4620      	mov	r0, r4
 8007168:	f000 f8f4 	bl	8007354 <malloc>
 800716c:	b930      	cbnz	r0, 800717c <_Znwj+0x20>
 800716e:	f000 f8b7 	bl	80072e0 <_ZSt15get_new_handlerv>
 8007172:	b908      	cbnz	r0, 8007178 <_Znwj+0x1c>
 8007174:	f000 f8bc 	bl	80072f0 <abort>
 8007178:	4780      	blx	r0
 800717a:	e7f4      	b.n	8007166 <_Znwj+0xa>
 800717c:	bd10      	pop	{r4, pc}

0800717e <_Znaj>:
 800717e:	f7ff bfed 	b.w	800715c <_Znwj>

08007182 <__cxa_pure_virtual>:
 8007182:	b508      	push	{r3, lr}
 8007184:	f000 f8a6 	bl	80072d4 <_ZSt9terminatev>

08007188 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8007188:	b510      	push	{r4, lr}
 800718a:	4b03      	ldr	r3, [pc, #12]	; (8007198 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800718c:	6003      	str	r3, [r0, #0]
 800718e:	4604      	mov	r4, r0
 8007190:	f7ff ff8e 	bl	80070b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007194:	4620      	mov	r0, r4
 8007196:	bd10      	pop	{r4, pc}
 8007198:	08007eb0 	.word	0x08007eb0

0800719c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800719c:	b510      	push	{r4, lr}
 800719e:	4604      	mov	r4, r0
 80071a0:	f7ff fff2 	bl	8007188 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80071a4:	4620      	mov	r0, r4
 80071a6:	210c      	movs	r1, #12
 80071a8:	f7ff ffd6 	bl	8007158 <_ZdlPvj>
 80071ac:	4620      	mov	r0, r4
 80071ae:	bd10      	pop	{r4, pc}

080071b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80071b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071b2:	9f08      	ldr	r7, [sp, #32]
 80071b4:	4297      	cmp	r7, r2
 80071b6:	4605      	mov	r5, r0
 80071b8:	460e      	mov	r6, r1
 80071ba:	4614      	mov	r4, r2
 80071bc:	d00a      	beq.n	80071d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 80071be:	68a8      	ldr	r0, [r5, #8]
 80071c0:	6802      	ldr	r2, [r0, #0]
 80071c2:	9708      	str	r7, [sp, #32]
 80071c4:	6a15      	ldr	r5, [r2, #32]
 80071c6:	4631      	mov	r1, r6
 80071c8:	4622      	mov	r2, r4
 80071ca:	46ac      	mov	ip, r5
 80071cc:	b003      	add	sp, #12
 80071ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80071d2:	4760      	bx	ip
 80071d4:	4619      	mov	r1, r3
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	f000 f858 	bl	800728c <_ZNKSt9type_infoeqERKS_>
 80071dc:	9b01      	ldr	r3, [sp, #4]
 80071de:	2800      	cmp	r0, #0
 80071e0:	d0ed      	beq.n	80071be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80071e2:	2006      	movs	r0, #6
 80071e4:	b003      	add	sp, #12
 80071e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80071e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	460d      	mov	r5, r1
 80071ee:	4619      	mov	r1, r3
 80071f0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80071f4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80071f8:	4681      	mov	r9, r0
 80071fa:	4617      	mov	r7, r2
 80071fc:	4698      	mov	r8, r3
 80071fe:	f000 f845 	bl	800728c <_ZNKSt9type_infoeqERKS_>
 8007202:	b190      	cbz	r0, 800722a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8007204:	2d00      	cmp	r5, #0
 8007206:	6034      	str	r4, [r6, #0]
 8007208:	7137      	strb	r7, [r6, #4]
 800720a:	db09      	blt.n	8007220 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800720c:	1961      	adds	r1, r4, r5
 800720e:	458a      	cmp	sl, r1
 8007210:	bf0c      	ite	eq
 8007212:	2106      	moveq	r1, #6
 8007214:	2101      	movne	r1, #1
 8007216:	71b1      	strb	r1, [r6, #6]
 8007218:	2000      	movs	r0, #0
 800721a:	b001      	add	sp, #4
 800721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007220:	3502      	adds	r5, #2
 8007222:	d1f9      	bne.n	8007218 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007224:	2301      	movs	r3, #1
 8007226:	71b3      	strb	r3, [r6, #6]
 8007228:	e7f6      	b.n	8007218 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800722a:	4554      	cmp	r4, sl
 800722c:	d106      	bne.n	800723c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800722e:	4659      	mov	r1, fp
 8007230:	4648      	mov	r0, r9
 8007232:	f000 f82b 	bl	800728c <_ZNKSt9type_infoeqERKS_>
 8007236:	b108      	cbz	r0, 800723c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8007238:	7177      	strb	r7, [r6, #5]
 800723a:	e7ed      	b.n	8007218 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800723c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8007240:	6803      	ldr	r3, [r0, #0]
 8007242:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8007246:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 800724a:	69dc      	ldr	r4, [r3, #28]
 800724c:	463a      	mov	r2, r7
 800724e:	4643      	mov	r3, r8
 8007250:	4629      	mov	r1, r5
 8007252:	46a4      	mov	ip, r4
 8007254:	b001      	add	sp, #4
 8007256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725a:	4760      	bx	ip

0800725c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800725c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007260:	4607      	mov	r7, r0
 8007262:	460c      	mov	r4, r1
 8007264:	4615      	mov	r5, r2
 8007266:	461e      	mov	r6, r3
 8007268:	f7ff ff55 	bl	8007116 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800726c:	b948      	cbnz	r0, 8007282 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800726e:	68b8      	ldr	r0, [r7, #8]
 8007270:	6803      	ldr	r3, [r0, #0]
 8007272:	699f      	ldr	r7, [r3, #24]
 8007274:	462a      	mov	r2, r5
 8007276:	4633      	mov	r3, r6
 8007278:	4621      	mov	r1, r4
 800727a:	46bc      	mov	ip, r7
 800727c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007280:	4760      	bx	ip
 8007282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007286 <_ZNSt9type_infoD1Ev>:
 8007286:	4770      	bx	lr

08007288 <_ZNKSt9type_info14__is_pointer_pEv>:
 8007288:	2000      	movs	r0, #0
 800728a:	4770      	bx	lr

0800728c <_ZNKSt9type_infoeqERKS_>:
 800728c:	4281      	cmp	r1, r0
 800728e:	b508      	push	{r3, lr}
 8007290:	d00e      	beq.n	80072b0 <_ZNKSt9type_infoeqERKS_+0x24>
 8007292:	6840      	ldr	r0, [r0, #4]
 8007294:	7803      	ldrb	r3, [r0, #0]
 8007296:	2b2a      	cmp	r3, #42	; 0x2a
 8007298:	d00c      	beq.n	80072b4 <_ZNKSt9type_infoeqERKS_+0x28>
 800729a:	6849      	ldr	r1, [r1, #4]
 800729c:	780b      	ldrb	r3, [r1, #0]
 800729e:	2b2a      	cmp	r3, #42	; 0x2a
 80072a0:	bf08      	it	eq
 80072a2:	3101      	addeq	r1, #1
 80072a4:	f7f9 f976 	bl	8000594 <strcmp>
 80072a8:	fab0 f080 	clz	r0, r0
 80072ac:	0940      	lsrs	r0, r0, #5
 80072ae:	bd08      	pop	{r3, pc}
 80072b0:	2001      	movs	r0, #1
 80072b2:	e7fc      	b.n	80072ae <_ZNKSt9type_infoeqERKS_+0x22>
 80072b4:	2000      	movs	r0, #0
 80072b6:	e7fa      	b.n	80072ae <_ZNKSt9type_infoeqERKS_+0x22>

080072b8 <_ZdlPv>:
 80072b8:	f000 b854 	b.w	8007364 <free>

080072bc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80072bc:	b508      	push	{r3, lr}
 80072be:	4780      	blx	r0
 80072c0:	f000 f816 	bl	80072f0 <abort>

080072c4 <_ZSt13get_terminatev>:
 80072c4:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <_ZSt13get_terminatev+0xc>)
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	f3bf 8f5b 	dmb	ish
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	2000010c 	.word	0x2000010c

080072d4 <_ZSt9terminatev>:
 80072d4:	b508      	push	{r3, lr}
 80072d6:	f7ff fff5 	bl	80072c4 <_ZSt13get_terminatev>
 80072da:	f7ff ffef 	bl	80072bc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080072e0 <_ZSt15get_new_handlerv>:
 80072e0:	4b02      	ldr	r3, [pc, #8]	; (80072ec <_ZSt15get_new_handlerv+0xc>)
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	f3bf 8f5b 	dmb	ish
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	2000162c 	.word	0x2000162c

080072f0 <abort>:
 80072f0:	b508      	push	{r3, lr}
 80072f2:	2006      	movs	r0, #6
 80072f4:	f000 f936 	bl	8007564 <raise>
 80072f8:	2001      	movs	r0, #1
 80072fa:	f7fa fef3 	bl	80020e4 <_exit>
	...

08007300 <__errno>:
 8007300:	4b01      	ldr	r3, [pc, #4]	; (8007308 <__errno+0x8>)
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000110 	.word	0x20000110

0800730c <__libc_init_array>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	4d0d      	ldr	r5, [pc, #52]	; (8007344 <__libc_init_array+0x38>)
 8007310:	4c0d      	ldr	r4, [pc, #52]	; (8007348 <__libc_init_array+0x3c>)
 8007312:	1b64      	subs	r4, r4, r5
 8007314:	10a4      	asrs	r4, r4, #2
 8007316:	2600      	movs	r6, #0
 8007318:	42a6      	cmp	r6, r4
 800731a:	d109      	bne.n	8007330 <__libc_init_array+0x24>
 800731c:	4d0b      	ldr	r5, [pc, #44]	; (800734c <__libc_init_array+0x40>)
 800731e:	4c0c      	ldr	r4, [pc, #48]	; (8007350 <__libc_init_array+0x44>)
 8007320:	f000 fca2 	bl	8007c68 <_init>
 8007324:	1b64      	subs	r4, r4, r5
 8007326:	10a4      	asrs	r4, r4, #2
 8007328:	2600      	movs	r6, #0
 800732a:	42a6      	cmp	r6, r4
 800732c:	d105      	bne.n	800733a <__libc_init_array+0x2e>
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	f855 3b04 	ldr.w	r3, [r5], #4
 8007334:	4798      	blx	r3
 8007336:	3601      	adds	r6, #1
 8007338:	e7ee      	b.n	8007318 <__libc_init_array+0xc>
 800733a:	f855 3b04 	ldr.w	r3, [r5], #4
 800733e:	4798      	blx	r3
 8007340:	3601      	adds	r6, #1
 8007342:	e7f2      	b.n	800732a <__libc_init_array+0x1e>
 8007344:	08008008 	.word	0x08008008
 8007348:	08008008 	.word	0x08008008
 800734c:	08008008 	.word	0x08008008
 8007350:	08008010 	.word	0x08008010

08007354 <malloc>:
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <malloc+0xc>)
 8007356:	4601      	mov	r1, r0
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	f000 b871 	b.w	8007440 <_malloc_r>
 800735e:	bf00      	nop
 8007360:	20000110 	.word	0x20000110

08007364 <free>:
 8007364:	4b02      	ldr	r3, [pc, #8]	; (8007370 <free+0xc>)
 8007366:	4601      	mov	r1, r0
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f000 b819 	b.w	80073a0 <_free_r>
 800736e:	bf00      	nop
 8007370:	20000110 	.word	0x20000110

08007374 <memcpy>:
 8007374:	440a      	add	r2, r1
 8007376:	4291      	cmp	r1, r2
 8007378:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800737c:	d100      	bne.n	8007380 <memcpy+0xc>
 800737e:	4770      	bx	lr
 8007380:	b510      	push	{r4, lr}
 8007382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800738a:	4291      	cmp	r1, r2
 800738c:	d1f9      	bne.n	8007382 <memcpy+0xe>
 800738e:	bd10      	pop	{r4, pc}

08007390 <memset>:
 8007390:	4402      	add	r2, r0
 8007392:	4603      	mov	r3, r0
 8007394:	4293      	cmp	r3, r2
 8007396:	d100      	bne.n	800739a <memset+0xa>
 8007398:	4770      	bx	lr
 800739a:	f803 1b01 	strb.w	r1, [r3], #1
 800739e:	e7f9      	b.n	8007394 <memset+0x4>

080073a0 <_free_r>:
 80073a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073a2:	2900      	cmp	r1, #0
 80073a4:	d048      	beq.n	8007438 <_free_r+0x98>
 80073a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073aa:	9001      	str	r0, [sp, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f1a1 0404 	sub.w	r4, r1, #4
 80073b2:	bfb8      	it	lt
 80073b4:	18e4      	addlt	r4, r4, r3
 80073b6:	f000 f911 	bl	80075dc <__malloc_lock>
 80073ba:	4a20      	ldr	r2, [pc, #128]	; (800743c <_free_r+0x9c>)
 80073bc:	9801      	ldr	r0, [sp, #4]
 80073be:	6813      	ldr	r3, [r2, #0]
 80073c0:	4615      	mov	r5, r2
 80073c2:	b933      	cbnz	r3, 80073d2 <_free_r+0x32>
 80073c4:	6063      	str	r3, [r4, #4]
 80073c6:	6014      	str	r4, [r2, #0]
 80073c8:	b003      	add	sp, #12
 80073ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073ce:	f000 b90b 	b.w	80075e8 <__malloc_unlock>
 80073d2:	42a3      	cmp	r3, r4
 80073d4:	d90b      	bls.n	80073ee <_free_r+0x4e>
 80073d6:	6821      	ldr	r1, [r4, #0]
 80073d8:	1862      	adds	r2, r4, r1
 80073da:	4293      	cmp	r3, r2
 80073dc:	bf04      	itt	eq
 80073de:	681a      	ldreq	r2, [r3, #0]
 80073e0:	685b      	ldreq	r3, [r3, #4]
 80073e2:	6063      	str	r3, [r4, #4]
 80073e4:	bf04      	itt	eq
 80073e6:	1852      	addeq	r2, r2, r1
 80073e8:	6022      	streq	r2, [r4, #0]
 80073ea:	602c      	str	r4, [r5, #0]
 80073ec:	e7ec      	b.n	80073c8 <_free_r+0x28>
 80073ee:	461a      	mov	r2, r3
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	b10b      	cbz	r3, 80073f8 <_free_r+0x58>
 80073f4:	42a3      	cmp	r3, r4
 80073f6:	d9fa      	bls.n	80073ee <_free_r+0x4e>
 80073f8:	6811      	ldr	r1, [r2, #0]
 80073fa:	1855      	adds	r5, r2, r1
 80073fc:	42a5      	cmp	r5, r4
 80073fe:	d10b      	bne.n	8007418 <_free_r+0x78>
 8007400:	6824      	ldr	r4, [r4, #0]
 8007402:	4421      	add	r1, r4
 8007404:	1854      	adds	r4, r2, r1
 8007406:	42a3      	cmp	r3, r4
 8007408:	6011      	str	r1, [r2, #0]
 800740a:	d1dd      	bne.n	80073c8 <_free_r+0x28>
 800740c:	681c      	ldr	r4, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	6053      	str	r3, [r2, #4]
 8007412:	4421      	add	r1, r4
 8007414:	6011      	str	r1, [r2, #0]
 8007416:	e7d7      	b.n	80073c8 <_free_r+0x28>
 8007418:	d902      	bls.n	8007420 <_free_r+0x80>
 800741a:	230c      	movs	r3, #12
 800741c:	6003      	str	r3, [r0, #0]
 800741e:	e7d3      	b.n	80073c8 <_free_r+0x28>
 8007420:	6825      	ldr	r5, [r4, #0]
 8007422:	1961      	adds	r1, r4, r5
 8007424:	428b      	cmp	r3, r1
 8007426:	bf04      	itt	eq
 8007428:	6819      	ldreq	r1, [r3, #0]
 800742a:	685b      	ldreq	r3, [r3, #4]
 800742c:	6063      	str	r3, [r4, #4]
 800742e:	bf04      	itt	eq
 8007430:	1949      	addeq	r1, r1, r5
 8007432:	6021      	streq	r1, [r4, #0]
 8007434:	6054      	str	r4, [r2, #4]
 8007436:	e7c7      	b.n	80073c8 <_free_r+0x28>
 8007438:	b003      	add	sp, #12
 800743a:	bd30      	pop	{r4, r5, pc}
 800743c:	20001630 	.word	0x20001630

08007440 <_malloc_r>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	1ccd      	adds	r5, r1, #3
 8007444:	f025 0503 	bic.w	r5, r5, #3
 8007448:	3508      	adds	r5, #8
 800744a:	2d0c      	cmp	r5, #12
 800744c:	bf38      	it	cc
 800744e:	250c      	movcc	r5, #12
 8007450:	2d00      	cmp	r5, #0
 8007452:	4606      	mov	r6, r0
 8007454:	db01      	blt.n	800745a <_malloc_r+0x1a>
 8007456:	42a9      	cmp	r1, r5
 8007458:	d903      	bls.n	8007462 <_malloc_r+0x22>
 800745a:	230c      	movs	r3, #12
 800745c:	6033      	str	r3, [r6, #0]
 800745e:	2000      	movs	r0, #0
 8007460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007462:	f000 f8bb 	bl	80075dc <__malloc_lock>
 8007466:	4921      	ldr	r1, [pc, #132]	; (80074ec <_malloc_r+0xac>)
 8007468:	680a      	ldr	r2, [r1, #0]
 800746a:	4614      	mov	r4, r2
 800746c:	b99c      	cbnz	r4, 8007496 <_malloc_r+0x56>
 800746e:	4f20      	ldr	r7, [pc, #128]	; (80074f0 <_malloc_r+0xb0>)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	b923      	cbnz	r3, 800747e <_malloc_r+0x3e>
 8007474:	4621      	mov	r1, r4
 8007476:	4630      	mov	r0, r6
 8007478:	f000 f83c 	bl	80074f4 <_sbrk_r>
 800747c:	6038      	str	r0, [r7, #0]
 800747e:	4629      	mov	r1, r5
 8007480:	4630      	mov	r0, r6
 8007482:	f000 f837 	bl	80074f4 <_sbrk_r>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	d123      	bne.n	80074d2 <_malloc_r+0x92>
 800748a:	230c      	movs	r3, #12
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	4630      	mov	r0, r6
 8007490:	f000 f8aa 	bl	80075e8 <__malloc_unlock>
 8007494:	e7e3      	b.n	800745e <_malloc_r+0x1e>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	1b5b      	subs	r3, r3, r5
 800749a:	d417      	bmi.n	80074cc <_malloc_r+0x8c>
 800749c:	2b0b      	cmp	r3, #11
 800749e:	d903      	bls.n	80074a8 <_malloc_r+0x68>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	441c      	add	r4, r3
 80074a4:	6025      	str	r5, [r4, #0]
 80074a6:	e004      	b.n	80074b2 <_malloc_r+0x72>
 80074a8:	6863      	ldr	r3, [r4, #4]
 80074aa:	42a2      	cmp	r2, r4
 80074ac:	bf0c      	ite	eq
 80074ae:	600b      	streq	r3, [r1, #0]
 80074b0:	6053      	strne	r3, [r2, #4]
 80074b2:	4630      	mov	r0, r6
 80074b4:	f000 f898 	bl	80075e8 <__malloc_unlock>
 80074b8:	f104 000b 	add.w	r0, r4, #11
 80074bc:	1d23      	adds	r3, r4, #4
 80074be:	f020 0007 	bic.w	r0, r0, #7
 80074c2:	1ac2      	subs	r2, r0, r3
 80074c4:	d0cc      	beq.n	8007460 <_malloc_r+0x20>
 80074c6:	1a1b      	subs	r3, r3, r0
 80074c8:	50a3      	str	r3, [r4, r2]
 80074ca:	e7c9      	b.n	8007460 <_malloc_r+0x20>
 80074cc:	4622      	mov	r2, r4
 80074ce:	6864      	ldr	r4, [r4, #4]
 80074d0:	e7cc      	b.n	800746c <_malloc_r+0x2c>
 80074d2:	1cc4      	adds	r4, r0, #3
 80074d4:	f024 0403 	bic.w	r4, r4, #3
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d0e3      	beq.n	80074a4 <_malloc_r+0x64>
 80074dc:	1a21      	subs	r1, r4, r0
 80074de:	4630      	mov	r0, r6
 80074e0:	f000 f808 	bl	80074f4 <_sbrk_r>
 80074e4:	3001      	adds	r0, #1
 80074e6:	d1dd      	bne.n	80074a4 <_malloc_r+0x64>
 80074e8:	e7cf      	b.n	800748a <_malloc_r+0x4a>
 80074ea:	bf00      	nop
 80074ec:	20001630 	.word	0x20001630
 80074f0:	20001634 	.word	0x20001634

080074f4 <_sbrk_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d06      	ldr	r5, [pc, #24]	; (8007510 <_sbrk_r+0x1c>)
 80074f8:	2300      	movs	r3, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	602b      	str	r3, [r5, #0]
 8007500:	f7fa fdfa 	bl	80020f8 <_sbrk>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_sbrk_r+0x1a>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_sbrk_r+0x1a>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	200017dc 	.word	0x200017dc

08007514 <_raise_r>:
 8007514:	291f      	cmp	r1, #31
 8007516:	b538      	push	{r3, r4, r5, lr}
 8007518:	4604      	mov	r4, r0
 800751a:	460d      	mov	r5, r1
 800751c:	d904      	bls.n	8007528 <_raise_r+0x14>
 800751e:	2316      	movs	r3, #22
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800752a:	b112      	cbz	r2, 8007532 <_raise_r+0x1e>
 800752c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007530:	b94b      	cbnz	r3, 8007546 <_raise_r+0x32>
 8007532:	4620      	mov	r0, r4
 8007534:	f000 f830 	bl	8007598 <_getpid_r>
 8007538:	462a      	mov	r2, r5
 800753a:	4601      	mov	r1, r0
 800753c:	4620      	mov	r0, r4
 800753e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007542:	f000 b817 	b.w	8007574 <_kill_r>
 8007546:	2b01      	cmp	r3, #1
 8007548:	d00a      	beq.n	8007560 <_raise_r+0x4c>
 800754a:	1c59      	adds	r1, r3, #1
 800754c:	d103      	bne.n	8007556 <_raise_r+0x42>
 800754e:	2316      	movs	r3, #22
 8007550:	6003      	str	r3, [r0, #0]
 8007552:	2001      	movs	r0, #1
 8007554:	e7e7      	b.n	8007526 <_raise_r+0x12>
 8007556:	2400      	movs	r4, #0
 8007558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800755c:	4628      	mov	r0, r5
 800755e:	4798      	blx	r3
 8007560:	2000      	movs	r0, #0
 8007562:	e7e0      	b.n	8007526 <_raise_r+0x12>

08007564 <raise>:
 8007564:	4b02      	ldr	r3, [pc, #8]	; (8007570 <raise+0xc>)
 8007566:	4601      	mov	r1, r0
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	f7ff bfd3 	b.w	8007514 <_raise_r>
 800756e:	bf00      	nop
 8007570:	20000110 	.word	0x20000110

08007574 <_kill_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4d07      	ldr	r5, [pc, #28]	; (8007594 <_kill_r+0x20>)
 8007578:	2300      	movs	r3, #0
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	4611      	mov	r1, r2
 8007580:	602b      	str	r3, [r5, #0]
 8007582:	f7fa fd9f 	bl	80020c4 <_kill>
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	d102      	bne.n	8007590 <_kill_r+0x1c>
 800758a:	682b      	ldr	r3, [r5, #0]
 800758c:	b103      	cbz	r3, 8007590 <_kill_r+0x1c>
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	bd38      	pop	{r3, r4, r5, pc}
 8007592:	bf00      	nop
 8007594:	200017dc 	.word	0x200017dc

08007598 <_getpid_r>:
 8007598:	f7fa bd8c 	b.w	80020b4 <_getpid>

0800759c <siprintf>:
 800759c:	b40e      	push	{r1, r2, r3}
 800759e:	b500      	push	{lr}
 80075a0:	b09c      	sub	sp, #112	; 0x70
 80075a2:	ab1d      	add	r3, sp, #116	; 0x74
 80075a4:	9002      	str	r0, [sp, #8]
 80075a6:	9006      	str	r0, [sp, #24]
 80075a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075ac:	4809      	ldr	r0, [pc, #36]	; (80075d4 <siprintf+0x38>)
 80075ae:	9107      	str	r1, [sp, #28]
 80075b0:	9104      	str	r1, [sp, #16]
 80075b2:	4909      	ldr	r1, [pc, #36]	; (80075d8 <siprintf+0x3c>)
 80075b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075b8:	9105      	str	r1, [sp, #20]
 80075ba:	6800      	ldr	r0, [r0, #0]
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	a902      	add	r1, sp, #8
 80075c0:	f000 f874 	bl	80076ac <_svfiprintf_r>
 80075c4:	9b02      	ldr	r3, [sp, #8]
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	b01c      	add	sp, #112	; 0x70
 80075cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075d0:	b003      	add	sp, #12
 80075d2:	4770      	bx	lr
 80075d4:	20000110 	.word	0x20000110
 80075d8:	ffff0208 	.word	0xffff0208

080075dc <__malloc_lock>:
 80075dc:	4801      	ldr	r0, [pc, #4]	; (80075e4 <__malloc_lock+0x8>)
 80075de:	f000 baf9 	b.w	8007bd4 <__retarget_lock_acquire_recursive>
 80075e2:	bf00      	nop
 80075e4:	200017e4 	.word	0x200017e4

080075e8 <__malloc_unlock>:
 80075e8:	4801      	ldr	r0, [pc, #4]	; (80075f0 <__malloc_unlock+0x8>)
 80075ea:	f000 baf4 	b.w	8007bd6 <__retarget_lock_release_recursive>
 80075ee:	bf00      	nop
 80075f0:	200017e4 	.word	0x200017e4

080075f4 <__ssputs_r>:
 80075f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f8:	688e      	ldr	r6, [r1, #8]
 80075fa:	429e      	cmp	r6, r3
 80075fc:	4682      	mov	sl, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	4690      	mov	r8, r2
 8007602:	461f      	mov	r7, r3
 8007604:	d838      	bhi.n	8007678 <__ssputs_r+0x84>
 8007606:	898a      	ldrh	r2, [r1, #12]
 8007608:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800760c:	d032      	beq.n	8007674 <__ssputs_r+0x80>
 800760e:	6825      	ldr	r5, [r4, #0]
 8007610:	6909      	ldr	r1, [r1, #16]
 8007612:	eba5 0901 	sub.w	r9, r5, r1
 8007616:	6965      	ldr	r5, [r4, #20]
 8007618:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800761c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007620:	3301      	adds	r3, #1
 8007622:	444b      	add	r3, r9
 8007624:	106d      	asrs	r5, r5, #1
 8007626:	429d      	cmp	r5, r3
 8007628:	bf38      	it	cc
 800762a:	461d      	movcc	r5, r3
 800762c:	0553      	lsls	r3, r2, #21
 800762e:	d531      	bpl.n	8007694 <__ssputs_r+0xa0>
 8007630:	4629      	mov	r1, r5
 8007632:	f7ff ff05 	bl	8007440 <_malloc_r>
 8007636:	4606      	mov	r6, r0
 8007638:	b950      	cbnz	r0, 8007650 <__ssputs_r+0x5c>
 800763a:	230c      	movs	r3, #12
 800763c:	f8ca 3000 	str.w	r3, [sl]
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800764c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007650:	6921      	ldr	r1, [r4, #16]
 8007652:	464a      	mov	r2, r9
 8007654:	f7ff fe8e 	bl	8007374 <memcpy>
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800765e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007662:	81a3      	strh	r3, [r4, #12]
 8007664:	6126      	str	r6, [r4, #16]
 8007666:	6165      	str	r5, [r4, #20]
 8007668:	444e      	add	r6, r9
 800766a:	eba5 0509 	sub.w	r5, r5, r9
 800766e:	6026      	str	r6, [r4, #0]
 8007670:	60a5      	str	r5, [r4, #8]
 8007672:	463e      	mov	r6, r7
 8007674:	42be      	cmp	r6, r7
 8007676:	d900      	bls.n	800767a <__ssputs_r+0x86>
 8007678:	463e      	mov	r6, r7
 800767a:	4632      	mov	r2, r6
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	4641      	mov	r1, r8
 8007680:	f000 faaa 	bl	8007bd8 <memmove>
 8007684:	68a3      	ldr	r3, [r4, #8]
 8007686:	6822      	ldr	r2, [r4, #0]
 8007688:	1b9b      	subs	r3, r3, r6
 800768a:	4432      	add	r2, r6
 800768c:	60a3      	str	r3, [r4, #8]
 800768e:	6022      	str	r2, [r4, #0]
 8007690:	2000      	movs	r0, #0
 8007692:	e7db      	b.n	800764c <__ssputs_r+0x58>
 8007694:	462a      	mov	r2, r5
 8007696:	f000 fab9 	bl	8007c0c <_realloc_r>
 800769a:	4606      	mov	r6, r0
 800769c:	2800      	cmp	r0, #0
 800769e:	d1e1      	bne.n	8007664 <__ssputs_r+0x70>
 80076a0:	6921      	ldr	r1, [r4, #16]
 80076a2:	4650      	mov	r0, sl
 80076a4:	f7ff fe7c 	bl	80073a0 <_free_r>
 80076a8:	e7c7      	b.n	800763a <__ssputs_r+0x46>
	...

080076ac <_svfiprintf_r>:
 80076ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b0:	4698      	mov	r8, r3
 80076b2:	898b      	ldrh	r3, [r1, #12]
 80076b4:	061b      	lsls	r3, r3, #24
 80076b6:	b09d      	sub	sp, #116	; 0x74
 80076b8:	4607      	mov	r7, r0
 80076ba:	460d      	mov	r5, r1
 80076bc:	4614      	mov	r4, r2
 80076be:	d50e      	bpl.n	80076de <_svfiprintf_r+0x32>
 80076c0:	690b      	ldr	r3, [r1, #16]
 80076c2:	b963      	cbnz	r3, 80076de <_svfiprintf_r+0x32>
 80076c4:	2140      	movs	r1, #64	; 0x40
 80076c6:	f7ff febb 	bl	8007440 <_malloc_r>
 80076ca:	6028      	str	r0, [r5, #0]
 80076cc:	6128      	str	r0, [r5, #16]
 80076ce:	b920      	cbnz	r0, 80076da <_svfiprintf_r+0x2e>
 80076d0:	230c      	movs	r3, #12
 80076d2:	603b      	str	r3, [r7, #0]
 80076d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076d8:	e0d1      	b.n	800787e <_svfiprintf_r+0x1d2>
 80076da:	2340      	movs	r3, #64	; 0x40
 80076dc:	616b      	str	r3, [r5, #20]
 80076de:	2300      	movs	r3, #0
 80076e0:	9309      	str	r3, [sp, #36]	; 0x24
 80076e2:	2320      	movs	r3, #32
 80076e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ec:	2330      	movs	r3, #48	; 0x30
 80076ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007898 <_svfiprintf_r+0x1ec>
 80076f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076f6:	f04f 0901 	mov.w	r9, #1
 80076fa:	4623      	mov	r3, r4
 80076fc:	469a      	mov	sl, r3
 80076fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007702:	b10a      	cbz	r2, 8007708 <_svfiprintf_r+0x5c>
 8007704:	2a25      	cmp	r2, #37	; 0x25
 8007706:	d1f9      	bne.n	80076fc <_svfiprintf_r+0x50>
 8007708:	ebba 0b04 	subs.w	fp, sl, r4
 800770c:	d00b      	beq.n	8007726 <_svfiprintf_r+0x7a>
 800770e:	465b      	mov	r3, fp
 8007710:	4622      	mov	r2, r4
 8007712:	4629      	mov	r1, r5
 8007714:	4638      	mov	r0, r7
 8007716:	f7ff ff6d 	bl	80075f4 <__ssputs_r>
 800771a:	3001      	adds	r0, #1
 800771c:	f000 80aa 	beq.w	8007874 <_svfiprintf_r+0x1c8>
 8007720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007722:	445a      	add	r2, fp
 8007724:	9209      	str	r2, [sp, #36]	; 0x24
 8007726:	f89a 3000 	ldrb.w	r3, [sl]
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 80a2 	beq.w	8007874 <_svfiprintf_r+0x1c8>
 8007730:	2300      	movs	r3, #0
 8007732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800773a:	f10a 0a01 	add.w	sl, sl, #1
 800773e:	9304      	str	r3, [sp, #16]
 8007740:	9307      	str	r3, [sp, #28]
 8007742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007746:	931a      	str	r3, [sp, #104]	; 0x68
 8007748:	4654      	mov	r4, sl
 800774a:	2205      	movs	r2, #5
 800774c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007750:	4851      	ldr	r0, [pc, #324]	; (8007898 <_svfiprintf_r+0x1ec>)
 8007752:	f7f8 ff35 	bl	80005c0 <memchr>
 8007756:	9a04      	ldr	r2, [sp, #16]
 8007758:	b9d8      	cbnz	r0, 8007792 <_svfiprintf_r+0xe6>
 800775a:	06d0      	lsls	r0, r2, #27
 800775c:	bf44      	itt	mi
 800775e:	2320      	movmi	r3, #32
 8007760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007764:	0711      	lsls	r1, r2, #28
 8007766:	bf44      	itt	mi
 8007768:	232b      	movmi	r3, #43	; 0x2b
 800776a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800776e:	f89a 3000 	ldrb.w	r3, [sl]
 8007772:	2b2a      	cmp	r3, #42	; 0x2a
 8007774:	d015      	beq.n	80077a2 <_svfiprintf_r+0xf6>
 8007776:	9a07      	ldr	r2, [sp, #28]
 8007778:	4654      	mov	r4, sl
 800777a:	2000      	movs	r0, #0
 800777c:	f04f 0c0a 	mov.w	ip, #10
 8007780:	4621      	mov	r1, r4
 8007782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007786:	3b30      	subs	r3, #48	; 0x30
 8007788:	2b09      	cmp	r3, #9
 800778a:	d94e      	bls.n	800782a <_svfiprintf_r+0x17e>
 800778c:	b1b0      	cbz	r0, 80077bc <_svfiprintf_r+0x110>
 800778e:	9207      	str	r2, [sp, #28]
 8007790:	e014      	b.n	80077bc <_svfiprintf_r+0x110>
 8007792:	eba0 0308 	sub.w	r3, r0, r8
 8007796:	fa09 f303 	lsl.w	r3, r9, r3
 800779a:	4313      	orrs	r3, r2
 800779c:	9304      	str	r3, [sp, #16]
 800779e:	46a2      	mov	sl, r4
 80077a0:	e7d2      	b.n	8007748 <_svfiprintf_r+0x9c>
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	1d19      	adds	r1, r3, #4
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	9103      	str	r1, [sp, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bfbb      	ittet	lt
 80077ae:	425b      	neglt	r3, r3
 80077b0:	f042 0202 	orrlt.w	r2, r2, #2
 80077b4:	9307      	strge	r3, [sp, #28]
 80077b6:	9307      	strlt	r3, [sp, #28]
 80077b8:	bfb8      	it	lt
 80077ba:	9204      	strlt	r2, [sp, #16]
 80077bc:	7823      	ldrb	r3, [r4, #0]
 80077be:	2b2e      	cmp	r3, #46	; 0x2e
 80077c0:	d10c      	bne.n	80077dc <_svfiprintf_r+0x130>
 80077c2:	7863      	ldrb	r3, [r4, #1]
 80077c4:	2b2a      	cmp	r3, #42	; 0x2a
 80077c6:	d135      	bne.n	8007834 <_svfiprintf_r+0x188>
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	9203      	str	r2, [sp, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bfb8      	it	lt
 80077d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077d8:	3402      	adds	r4, #2
 80077da:	9305      	str	r3, [sp, #20]
 80077dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078a8 <_svfiprintf_r+0x1fc>
 80077e0:	7821      	ldrb	r1, [r4, #0]
 80077e2:	2203      	movs	r2, #3
 80077e4:	4650      	mov	r0, sl
 80077e6:	f7f8 feeb 	bl	80005c0 <memchr>
 80077ea:	b140      	cbz	r0, 80077fe <_svfiprintf_r+0x152>
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	eba0 000a 	sub.w	r0, r0, sl
 80077f2:	fa03 f000 	lsl.w	r0, r3, r0
 80077f6:	9b04      	ldr	r3, [sp, #16]
 80077f8:	4303      	orrs	r3, r0
 80077fa:	3401      	adds	r4, #1
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007802:	4826      	ldr	r0, [pc, #152]	; (800789c <_svfiprintf_r+0x1f0>)
 8007804:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007808:	2206      	movs	r2, #6
 800780a:	f7f8 fed9 	bl	80005c0 <memchr>
 800780e:	2800      	cmp	r0, #0
 8007810:	d038      	beq.n	8007884 <_svfiprintf_r+0x1d8>
 8007812:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <_svfiprintf_r+0x1f4>)
 8007814:	bb1b      	cbnz	r3, 800785e <_svfiprintf_r+0x1b2>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	3307      	adds	r3, #7
 800781a:	f023 0307 	bic.w	r3, r3, #7
 800781e:	3308      	adds	r3, #8
 8007820:	9303      	str	r3, [sp, #12]
 8007822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007824:	4433      	add	r3, r6
 8007826:	9309      	str	r3, [sp, #36]	; 0x24
 8007828:	e767      	b.n	80076fa <_svfiprintf_r+0x4e>
 800782a:	fb0c 3202 	mla	r2, ip, r2, r3
 800782e:	460c      	mov	r4, r1
 8007830:	2001      	movs	r0, #1
 8007832:	e7a5      	b.n	8007780 <_svfiprintf_r+0xd4>
 8007834:	2300      	movs	r3, #0
 8007836:	3401      	adds	r4, #1
 8007838:	9305      	str	r3, [sp, #20]
 800783a:	4619      	mov	r1, r3
 800783c:	f04f 0c0a 	mov.w	ip, #10
 8007840:	4620      	mov	r0, r4
 8007842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007846:	3a30      	subs	r2, #48	; 0x30
 8007848:	2a09      	cmp	r2, #9
 800784a:	d903      	bls.n	8007854 <_svfiprintf_r+0x1a8>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0c5      	beq.n	80077dc <_svfiprintf_r+0x130>
 8007850:	9105      	str	r1, [sp, #20]
 8007852:	e7c3      	b.n	80077dc <_svfiprintf_r+0x130>
 8007854:	fb0c 2101 	mla	r1, ip, r1, r2
 8007858:	4604      	mov	r4, r0
 800785a:	2301      	movs	r3, #1
 800785c:	e7f0      	b.n	8007840 <_svfiprintf_r+0x194>
 800785e:	ab03      	add	r3, sp, #12
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	462a      	mov	r2, r5
 8007864:	4b0f      	ldr	r3, [pc, #60]	; (80078a4 <_svfiprintf_r+0x1f8>)
 8007866:	a904      	add	r1, sp, #16
 8007868:	4638      	mov	r0, r7
 800786a:	f3af 8000 	nop.w
 800786e:	1c42      	adds	r2, r0, #1
 8007870:	4606      	mov	r6, r0
 8007872:	d1d6      	bne.n	8007822 <_svfiprintf_r+0x176>
 8007874:	89ab      	ldrh	r3, [r5, #12]
 8007876:	065b      	lsls	r3, r3, #25
 8007878:	f53f af2c 	bmi.w	80076d4 <_svfiprintf_r+0x28>
 800787c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800787e:	b01d      	add	sp, #116	; 0x74
 8007880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007884:	ab03      	add	r3, sp, #12
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	462a      	mov	r2, r5
 800788a:	4b06      	ldr	r3, [pc, #24]	; (80078a4 <_svfiprintf_r+0x1f8>)
 800788c:	a904      	add	r1, sp, #16
 800788e:	4638      	mov	r0, r7
 8007890:	f000 f87a 	bl	8007988 <_printf_i>
 8007894:	e7eb      	b.n	800786e <_svfiprintf_r+0x1c2>
 8007896:	bf00      	nop
 8007898:	08007ee9 	.word	0x08007ee9
 800789c:	08007ef3 	.word	0x08007ef3
 80078a0:	00000000 	.word	0x00000000
 80078a4:	080075f5 	.word	0x080075f5
 80078a8:	08007eef 	.word	0x08007eef

080078ac <_printf_common>:
 80078ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b0:	4616      	mov	r6, r2
 80078b2:	4699      	mov	r9, r3
 80078b4:	688a      	ldr	r2, [r1, #8]
 80078b6:	690b      	ldr	r3, [r1, #16]
 80078b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078bc:	4293      	cmp	r3, r2
 80078be:	bfb8      	it	lt
 80078c0:	4613      	movlt	r3, r2
 80078c2:	6033      	str	r3, [r6, #0]
 80078c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078c8:	4607      	mov	r7, r0
 80078ca:	460c      	mov	r4, r1
 80078cc:	b10a      	cbz	r2, 80078d2 <_printf_common+0x26>
 80078ce:	3301      	adds	r3, #1
 80078d0:	6033      	str	r3, [r6, #0]
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	0699      	lsls	r1, r3, #26
 80078d6:	bf42      	ittt	mi
 80078d8:	6833      	ldrmi	r3, [r6, #0]
 80078da:	3302      	addmi	r3, #2
 80078dc:	6033      	strmi	r3, [r6, #0]
 80078de:	6825      	ldr	r5, [r4, #0]
 80078e0:	f015 0506 	ands.w	r5, r5, #6
 80078e4:	d106      	bne.n	80078f4 <_printf_common+0x48>
 80078e6:	f104 0a19 	add.w	sl, r4, #25
 80078ea:	68e3      	ldr	r3, [r4, #12]
 80078ec:	6832      	ldr	r2, [r6, #0]
 80078ee:	1a9b      	subs	r3, r3, r2
 80078f0:	42ab      	cmp	r3, r5
 80078f2:	dc26      	bgt.n	8007942 <_printf_common+0x96>
 80078f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078f8:	1e13      	subs	r3, r2, #0
 80078fa:	6822      	ldr	r2, [r4, #0]
 80078fc:	bf18      	it	ne
 80078fe:	2301      	movne	r3, #1
 8007900:	0692      	lsls	r2, r2, #26
 8007902:	d42b      	bmi.n	800795c <_printf_common+0xb0>
 8007904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007908:	4649      	mov	r1, r9
 800790a:	4638      	mov	r0, r7
 800790c:	47c0      	blx	r8
 800790e:	3001      	adds	r0, #1
 8007910:	d01e      	beq.n	8007950 <_printf_common+0xa4>
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	68e5      	ldr	r5, [r4, #12]
 8007916:	6832      	ldr	r2, [r6, #0]
 8007918:	f003 0306 	and.w	r3, r3, #6
 800791c:	2b04      	cmp	r3, #4
 800791e:	bf08      	it	eq
 8007920:	1aad      	subeq	r5, r5, r2
 8007922:	68a3      	ldr	r3, [r4, #8]
 8007924:	6922      	ldr	r2, [r4, #16]
 8007926:	bf0c      	ite	eq
 8007928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800792c:	2500      	movne	r5, #0
 800792e:	4293      	cmp	r3, r2
 8007930:	bfc4      	itt	gt
 8007932:	1a9b      	subgt	r3, r3, r2
 8007934:	18ed      	addgt	r5, r5, r3
 8007936:	2600      	movs	r6, #0
 8007938:	341a      	adds	r4, #26
 800793a:	42b5      	cmp	r5, r6
 800793c:	d11a      	bne.n	8007974 <_printf_common+0xc8>
 800793e:	2000      	movs	r0, #0
 8007940:	e008      	b.n	8007954 <_printf_common+0xa8>
 8007942:	2301      	movs	r3, #1
 8007944:	4652      	mov	r2, sl
 8007946:	4649      	mov	r1, r9
 8007948:	4638      	mov	r0, r7
 800794a:	47c0      	blx	r8
 800794c:	3001      	adds	r0, #1
 800794e:	d103      	bne.n	8007958 <_printf_common+0xac>
 8007950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007958:	3501      	adds	r5, #1
 800795a:	e7c6      	b.n	80078ea <_printf_common+0x3e>
 800795c:	18e1      	adds	r1, r4, r3
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	2030      	movs	r0, #48	; 0x30
 8007962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007966:	4422      	add	r2, r4
 8007968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800796c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007970:	3302      	adds	r3, #2
 8007972:	e7c7      	b.n	8007904 <_printf_common+0x58>
 8007974:	2301      	movs	r3, #1
 8007976:	4622      	mov	r2, r4
 8007978:	4649      	mov	r1, r9
 800797a:	4638      	mov	r0, r7
 800797c:	47c0      	blx	r8
 800797e:	3001      	adds	r0, #1
 8007980:	d0e6      	beq.n	8007950 <_printf_common+0xa4>
 8007982:	3601      	adds	r6, #1
 8007984:	e7d9      	b.n	800793a <_printf_common+0x8e>
	...

08007988 <_printf_i>:
 8007988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	460c      	mov	r4, r1
 800798e:	4691      	mov	r9, r2
 8007990:	7e27      	ldrb	r7, [r4, #24]
 8007992:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007994:	2f78      	cmp	r7, #120	; 0x78
 8007996:	4680      	mov	r8, r0
 8007998:	469a      	mov	sl, r3
 800799a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800799e:	d807      	bhi.n	80079b0 <_printf_i+0x28>
 80079a0:	2f62      	cmp	r7, #98	; 0x62
 80079a2:	d80a      	bhi.n	80079ba <_printf_i+0x32>
 80079a4:	2f00      	cmp	r7, #0
 80079a6:	f000 80d8 	beq.w	8007b5a <_printf_i+0x1d2>
 80079aa:	2f58      	cmp	r7, #88	; 0x58
 80079ac:	f000 80a3 	beq.w	8007af6 <_printf_i+0x16e>
 80079b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079b8:	e03a      	b.n	8007a30 <_printf_i+0xa8>
 80079ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079be:	2b15      	cmp	r3, #21
 80079c0:	d8f6      	bhi.n	80079b0 <_printf_i+0x28>
 80079c2:	a001      	add	r0, pc, #4	; (adr r0, 80079c8 <_printf_i+0x40>)
 80079c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80079c8:	08007a21 	.word	0x08007a21
 80079cc:	08007a35 	.word	0x08007a35
 80079d0:	080079b1 	.word	0x080079b1
 80079d4:	080079b1 	.word	0x080079b1
 80079d8:	080079b1 	.word	0x080079b1
 80079dc:	080079b1 	.word	0x080079b1
 80079e0:	08007a35 	.word	0x08007a35
 80079e4:	080079b1 	.word	0x080079b1
 80079e8:	080079b1 	.word	0x080079b1
 80079ec:	080079b1 	.word	0x080079b1
 80079f0:	080079b1 	.word	0x080079b1
 80079f4:	08007b41 	.word	0x08007b41
 80079f8:	08007a65 	.word	0x08007a65
 80079fc:	08007b23 	.word	0x08007b23
 8007a00:	080079b1 	.word	0x080079b1
 8007a04:	080079b1 	.word	0x080079b1
 8007a08:	08007b63 	.word	0x08007b63
 8007a0c:	080079b1 	.word	0x080079b1
 8007a10:	08007a65 	.word	0x08007a65
 8007a14:	080079b1 	.word	0x080079b1
 8007a18:	080079b1 	.word	0x080079b1
 8007a1c:	08007b2b 	.word	0x08007b2b
 8007a20:	680b      	ldr	r3, [r1, #0]
 8007a22:	1d1a      	adds	r2, r3, #4
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	600a      	str	r2, [r1, #0]
 8007a28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a30:	2301      	movs	r3, #1
 8007a32:	e0a3      	b.n	8007b7c <_printf_i+0x1f4>
 8007a34:	6825      	ldr	r5, [r4, #0]
 8007a36:	6808      	ldr	r0, [r1, #0]
 8007a38:	062e      	lsls	r6, r5, #24
 8007a3a:	f100 0304 	add.w	r3, r0, #4
 8007a3e:	d50a      	bpl.n	8007a56 <_printf_i+0xce>
 8007a40:	6805      	ldr	r5, [r0, #0]
 8007a42:	600b      	str	r3, [r1, #0]
 8007a44:	2d00      	cmp	r5, #0
 8007a46:	da03      	bge.n	8007a50 <_printf_i+0xc8>
 8007a48:	232d      	movs	r3, #45	; 0x2d
 8007a4a:	426d      	negs	r5, r5
 8007a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a50:	485e      	ldr	r0, [pc, #376]	; (8007bcc <_printf_i+0x244>)
 8007a52:	230a      	movs	r3, #10
 8007a54:	e019      	b.n	8007a8a <_printf_i+0x102>
 8007a56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a5a:	6805      	ldr	r5, [r0, #0]
 8007a5c:	600b      	str	r3, [r1, #0]
 8007a5e:	bf18      	it	ne
 8007a60:	b22d      	sxthne	r5, r5
 8007a62:	e7ef      	b.n	8007a44 <_printf_i+0xbc>
 8007a64:	680b      	ldr	r3, [r1, #0]
 8007a66:	6825      	ldr	r5, [r4, #0]
 8007a68:	1d18      	adds	r0, r3, #4
 8007a6a:	6008      	str	r0, [r1, #0]
 8007a6c:	0628      	lsls	r0, r5, #24
 8007a6e:	d501      	bpl.n	8007a74 <_printf_i+0xec>
 8007a70:	681d      	ldr	r5, [r3, #0]
 8007a72:	e002      	b.n	8007a7a <_printf_i+0xf2>
 8007a74:	0669      	lsls	r1, r5, #25
 8007a76:	d5fb      	bpl.n	8007a70 <_printf_i+0xe8>
 8007a78:	881d      	ldrh	r5, [r3, #0]
 8007a7a:	4854      	ldr	r0, [pc, #336]	; (8007bcc <_printf_i+0x244>)
 8007a7c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a7e:	bf0c      	ite	eq
 8007a80:	2308      	moveq	r3, #8
 8007a82:	230a      	movne	r3, #10
 8007a84:	2100      	movs	r1, #0
 8007a86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a8a:	6866      	ldr	r6, [r4, #4]
 8007a8c:	60a6      	str	r6, [r4, #8]
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	bfa2      	ittt	ge
 8007a92:	6821      	ldrge	r1, [r4, #0]
 8007a94:	f021 0104 	bicge.w	r1, r1, #4
 8007a98:	6021      	strge	r1, [r4, #0]
 8007a9a:	b90d      	cbnz	r5, 8007aa0 <_printf_i+0x118>
 8007a9c:	2e00      	cmp	r6, #0
 8007a9e:	d04d      	beq.n	8007b3c <_printf_i+0x1b4>
 8007aa0:	4616      	mov	r6, r2
 8007aa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007aa6:	fb03 5711 	mls	r7, r3, r1, r5
 8007aaa:	5dc7      	ldrb	r7, [r0, r7]
 8007aac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ab0:	462f      	mov	r7, r5
 8007ab2:	42bb      	cmp	r3, r7
 8007ab4:	460d      	mov	r5, r1
 8007ab6:	d9f4      	bls.n	8007aa2 <_printf_i+0x11a>
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d10b      	bne.n	8007ad4 <_printf_i+0x14c>
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	07df      	lsls	r7, r3, #31
 8007ac0:	d508      	bpl.n	8007ad4 <_printf_i+0x14c>
 8007ac2:	6923      	ldr	r3, [r4, #16]
 8007ac4:	6861      	ldr	r1, [r4, #4]
 8007ac6:	4299      	cmp	r1, r3
 8007ac8:	bfde      	ittt	le
 8007aca:	2330      	movle	r3, #48	; 0x30
 8007acc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ad0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007ad4:	1b92      	subs	r2, r2, r6
 8007ad6:	6122      	str	r2, [r4, #16]
 8007ad8:	f8cd a000 	str.w	sl, [sp]
 8007adc:	464b      	mov	r3, r9
 8007ade:	aa03      	add	r2, sp, #12
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	4640      	mov	r0, r8
 8007ae4:	f7ff fee2 	bl	80078ac <_printf_common>
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d14c      	bne.n	8007b86 <_printf_i+0x1fe>
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007af0:	b004      	add	sp, #16
 8007af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af6:	4835      	ldr	r0, [pc, #212]	; (8007bcc <_printf_i+0x244>)
 8007af8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	680e      	ldr	r6, [r1, #0]
 8007b00:	061f      	lsls	r7, r3, #24
 8007b02:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b06:	600e      	str	r6, [r1, #0]
 8007b08:	d514      	bpl.n	8007b34 <_printf_i+0x1ac>
 8007b0a:	07d9      	lsls	r1, r3, #31
 8007b0c:	bf44      	itt	mi
 8007b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b12:	6023      	strmi	r3, [r4, #0]
 8007b14:	b91d      	cbnz	r5, 8007b1e <_printf_i+0x196>
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	f023 0320 	bic.w	r3, r3, #32
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	2310      	movs	r3, #16
 8007b20:	e7b0      	b.n	8007a84 <_printf_i+0xfc>
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	f043 0320 	orr.w	r3, r3, #32
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	2378      	movs	r3, #120	; 0x78
 8007b2c:	4828      	ldr	r0, [pc, #160]	; (8007bd0 <_printf_i+0x248>)
 8007b2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b32:	e7e3      	b.n	8007afc <_printf_i+0x174>
 8007b34:	065e      	lsls	r6, r3, #25
 8007b36:	bf48      	it	mi
 8007b38:	b2ad      	uxthmi	r5, r5
 8007b3a:	e7e6      	b.n	8007b0a <_printf_i+0x182>
 8007b3c:	4616      	mov	r6, r2
 8007b3e:	e7bb      	b.n	8007ab8 <_printf_i+0x130>
 8007b40:	680b      	ldr	r3, [r1, #0]
 8007b42:	6826      	ldr	r6, [r4, #0]
 8007b44:	6960      	ldr	r0, [r4, #20]
 8007b46:	1d1d      	adds	r5, r3, #4
 8007b48:	600d      	str	r5, [r1, #0]
 8007b4a:	0635      	lsls	r5, r6, #24
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	d501      	bpl.n	8007b54 <_printf_i+0x1cc>
 8007b50:	6018      	str	r0, [r3, #0]
 8007b52:	e002      	b.n	8007b5a <_printf_i+0x1d2>
 8007b54:	0671      	lsls	r1, r6, #25
 8007b56:	d5fb      	bpl.n	8007b50 <_printf_i+0x1c8>
 8007b58:	8018      	strh	r0, [r3, #0]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	4616      	mov	r6, r2
 8007b60:	e7ba      	b.n	8007ad8 <_printf_i+0x150>
 8007b62:	680b      	ldr	r3, [r1, #0]
 8007b64:	1d1a      	adds	r2, r3, #4
 8007b66:	600a      	str	r2, [r1, #0]
 8007b68:	681e      	ldr	r6, [r3, #0]
 8007b6a:	6862      	ldr	r2, [r4, #4]
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f7f8 fd26 	bl	80005c0 <memchr>
 8007b74:	b108      	cbz	r0, 8007b7a <_printf_i+0x1f2>
 8007b76:	1b80      	subs	r0, r0, r6
 8007b78:	6060      	str	r0, [r4, #4]
 8007b7a:	6863      	ldr	r3, [r4, #4]
 8007b7c:	6123      	str	r3, [r4, #16]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b84:	e7a8      	b.n	8007ad8 <_printf_i+0x150>
 8007b86:	6923      	ldr	r3, [r4, #16]
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	47d0      	blx	sl
 8007b90:	3001      	adds	r0, #1
 8007b92:	d0ab      	beq.n	8007aec <_printf_i+0x164>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	079b      	lsls	r3, r3, #30
 8007b98:	d413      	bmi.n	8007bc2 <_printf_i+0x23a>
 8007b9a:	68e0      	ldr	r0, [r4, #12]
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	4298      	cmp	r0, r3
 8007ba0:	bfb8      	it	lt
 8007ba2:	4618      	movlt	r0, r3
 8007ba4:	e7a4      	b.n	8007af0 <_printf_i+0x168>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4632      	mov	r2, r6
 8007baa:	4649      	mov	r1, r9
 8007bac:	4640      	mov	r0, r8
 8007bae:	47d0      	blx	sl
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d09b      	beq.n	8007aec <_printf_i+0x164>
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	68e3      	ldr	r3, [r4, #12]
 8007bb8:	9903      	ldr	r1, [sp, #12]
 8007bba:	1a5b      	subs	r3, r3, r1
 8007bbc:	42ab      	cmp	r3, r5
 8007bbe:	dcf2      	bgt.n	8007ba6 <_printf_i+0x21e>
 8007bc0:	e7eb      	b.n	8007b9a <_printf_i+0x212>
 8007bc2:	2500      	movs	r5, #0
 8007bc4:	f104 0619 	add.w	r6, r4, #25
 8007bc8:	e7f5      	b.n	8007bb6 <_printf_i+0x22e>
 8007bca:	bf00      	nop
 8007bcc:	08007efa 	.word	0x08007efa
 8007bd0:	08007f0b 	.word	0x08007f0b

08007bd4 <__retarget_lock_acquire_recursive>:
 8007bd4:	4770      	bx	lr

08007bd6 <__retarget_lock_release_recursive>:
 8007bd6:	4770      	bx	lr

08007bd8 <memmove>:
 8007bd8:	4288      	cmp	r0, r1
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	eb01 0402 	add.w	r4, r1, r2
 8007be0:	d902      	bls.n	8007be8 <memmove+0x10>
 8007be2:	4284      	cmp	r4, r0
 8007be4:	4623      	mov	r3, r4
 8007be6:	d807      	bhi.n	8007bf8 <memmove+0x20>
 8007be8:	1e43      	subs	r3, r0, #1
 8007bea:	42a1      	cmp	r1, r4
 8007bec:	d008      	beq.n	8007c00 <memmove+0x28>
 8007bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bf6:	e7f8      	b.n	8007bea <memmove+0x12>
 8007bf8:	4402      	add	r2, r0
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	428a      	cmp	r2, r1
 8007bfe:	d100      	bne.n	8007c02 <memmove+0x2a>
 8007c00:	bd10      	pop	{r4, pc}
 8007c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c0a:	e7f7      	b.n	8007bfc <memmove+0x24>

08007c0c <_realloc_r>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	4607      	mov	r7, r0
 8007c10:	4614      	mov	r4, r2
 8007c12:	460e      	mov	r6, r1
 8007c14:	b921      	cbnz	r1, 8007c20 <_realloc_r+0x14>
 8007c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	f7ff bc10 	b.w	8007440 <_malloc_r>
 8007c20:	b922      	cbnz	r2, 8007c2c <_realloc_r+0x20>
 8007c22:	f7ff fbbd 	bl	80073a0 <_free_r>
 8007c26:	4625      	mov	r5, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c2c:	f000 f814 	bl	8007c58 <_malloc_usable_size_r>
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d20f      	bcs.n	8007c54 <_realloc_r+0x48>
 8007c34:	4621      	mov	r1, r4
 8007c36:	4638      	mov	r0, r7
 8007c38:	f7ff fc02 	bl	8007440 <_malloc_r>
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d0f2      	beq.n	8007c28 <_realloc_r+0x1c>
 8007c42:	4631      	mov	r1, r6
 8007c44:	4622      	mov	r2, r4
 8007c46:	f7ff fb95 	bl	8007374 <memcpy>
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	f7ff fba7 	bl	80073a0 <_free_r>
 8007c52:	e7e9      	b.n	8007c28 <_realloc_r+0x1c>
 8007c54:	4635      	mov	r5, r6
 8007c56:	e7e7      	b.n	8007c28 <_realloc_r+0x1c>

08007c58 <_malloc_usable_size_r>:
 8007c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c5c:	1f18      	subs	r0, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	bfbc      	itt	lt
 8007c62:	580b      	ldrlt	r3, [r1, r0]
 8007c64:	18c0      	addlt	r0, r0, r3
 8007c66:	4770      	bx	lr

08007c68 <_init>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr

08007c74 <_fini>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr
