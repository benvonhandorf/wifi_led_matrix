
GraphicsDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000438c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018c0  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d58  08005d58  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005d58  08005d58  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d58  08005d58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  20000070  08005dd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08005dd4  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105bd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025d7  00000000  00000000  00030656  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  00032c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  00033b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b177  00000000  00000000  00034978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4f3  00000000  00000000  0004faef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e374  00000000  00000000  0005bfe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000444c  00000000  00000000  000ea3d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004480 	.word	0x08004480

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004480 	.word	0x08004480

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <cpp_main>:
//1 - test pattern
//2 - advancing pixel
//3 - image
#define DRAW 3

extern "C" int cpp_main(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af02      	add	r7, sp, #8
	__HAL_DBGMCU_FREEZE_IWDG();
 8000162:	4b44      	ldr	r3, [pc, #272]	; (8000274 <cpp_main+0x118>)
 8000164:	685b      	ldr	r3, [r3, #4]
 8000166:	4a43      	ldr	r2, [pc, #268]	; (8000274 <cpp_main+0x118>)
 8000168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800016c:	6053      	str	r3, [r2, #4]

	uint32_t start = HAL_GetTick();
 800016e:	f001 f921 	bl	80013b4 <HAL_GetTick>
 8000172:	6138      	str	r0, [r7, #16]

	uint16_t color_shift = 1;
 8000174:	2301      	movs	r3, #1
 8000176:	81fb      	strh	r3, [r7, #14]

	uint16_t pos = 0;
 8000178:	2300      	movs	r3, #0
 800017a:	81bb      	strh	r3, [r7, #12]
				matrix.SetPixel(col, row, 0, 0, 0);
			}
		}
	}
#elif DRAW == 3
		for (uint16_t col = 0; col < IMAGE_WIDTH; col++) {
 800017c:	2300      	movs	r3, #0
 800017e:	82fb      	strh	r3, [r7, #22]
 8000180:	8afb      	ldrh	r3, [r7, #22]
 8000182:	2b3f      	cmp	r3, #63	; 0x3f
 8000184:	d845      	bhi.n	8000212 <cpp_main+0xb6>
			for (uint16_t row = 0; row < IMAGE_HEIGHT; row++) {
 8000186:	2300      	movs	r3, #0
 8000188:	82bb      	strh	r3, [r7, #20]
 800018a:	8abb      	ldrh	r3, [r7, #20]
 800018c:	2b1f      	cmp	r3, #31
 800018e:	d83c      	bhi.n	800020a <cpp_main+0xae>
				uint8_t r = IMAGE_DATA[col][row][0];
 8000190:	8af9      	ldrh	r1, [r7, #22]
 8000192:	8abb      	ldrh	r3, [r7, #20]
 8000194:	4838      	ldr	r0, [pc, #224]	; (8000278 <cpp_main+0x11c>)
 8000196:	461a      	mov	r2, r3
 8000198:	0052      	lsls	r2, r2, #1
 800019a:	441a      	add	r2, r3
 800019c:	460b      	mov	r3, r1
 800019e:	005b      	lsls	r3, r3, #1
 80001a0:	440b      	add	r3, r1
 80001a2:	015b      	lsls	r3, r3, #5
 80001a4:	4413      	add	r3, r2
 80001a6:	4403      	add	r3, r0
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	72fb      	strb	r3, [r7, #11]
				uint8_t g = IMAGE_DATA[col][row][1];
 80001ac:	8af9      	ldrh	r1, [r7, #22]
 80001ae:	8abb      	ldrh	r3, [r7, #20]
 80001b0:	4831      	ldr	r0, [pc, #196]	; (8000278 <cpp_main+0x11c>)
 80001b2:	461a      	mov	r2, r3
 80001b4:	0052      	lsls	r2, r2, #1
 80001b6:	441a      	add	r2, r3
 80001b8:	460b      	mov	r3, r1
 80001ba:	005b      	lsls	r3, r3, #1
 80001bc:	440b      	add	r3, r1
 80001be:	015b      	lsls	r3, r3, #5
 80001c0:	4413      	add	r3, r2
 80001c2:	4403      	add	r3, r0
 80001c4:	3301      	adds	r3, #1
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	72bb      	strb	r3, [r7, #10]
				uint8_t b = IMAGE_DATA[col][row][2];
 80001ca:	8af9      	ldrh	r1, [r7, #22]
 80001cc:	8abb      	ldrh	r3, [r7, #20]
 80001ce:	482a      	ldr	r0, [pc, #168]	; (8000278 <cpp_main+0x11c>)
 80001d0:	461a      	mov	r2, r3
 80001d2:	0052      	lsls	r2, r2, #1
 80001d4:	441a      	add	r2, r3
 80001d6:	460b      	mov	r3, r1
 80001d8:	005b      	lsls	r3, r3, #1
 80001da:	440b      	add	r3, r1
 80001dc:	015b      	lsls	r3, r3, #5
 80001de:	4413      	add	r3, r2
 80001e0:	4403      	add	r3, r0
 80001e2:	3302      	adds	r3, #2
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	727b      	strb	r3, [r7, #9]

				matrix.SetPixel(col, row, r, g, b);
 80001e8:	8afb      	ldrh	r3, [r7, #22]
 80001ea:	b2d9      	uxtb	r1, r3
 80001ec:	8abb      	ldrh	r3, [r7, #20]
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	7af8      	ldrb	r0, [r7, #11]
 80001f2:	7a7b      	ldrb	r3, [r7, #9]
 80001f4:	9301      	str	r3, [sp, #4]
 80001f6:	7abb      	ldrb	r3, [r7, #10]
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	4603      	mov	r3, r0
 80001fc:	481f      	ldr	r0, [pc, #124]	; (800027c <cpp_main+0x120>)
 80001fe:	f000 fc9b 	bl	8000b38 <_ZN12MatrixDriver8SetPixelEhhhhh>
			for (uint16_t row = 0; row < IMAGE_HEIGHT; row++) {
 8000202:	8abb      	ldrh	r3, [r7, #20]
 8000204:	3301      	adds	r3, #1
 8000206:	82bb      	strh	r3, [r7, #20]
 8000208:	e7bf      	b.n	800018a <cpp_main+0x2e>
		for (uint16_t col = 0; col < IMAGE_WIDTH; col++) {
 800020a:	8afb      	ldrh	r3, [r7, #22]
 800020c:	3301      	adds	r3, #1
 800020e:	82fb      	strh	r3, [r7, #22]
 8000210:	e7b6      	b.n	8000180 <cpp_main+0x24>
			}
		}
#else
#endif

	lastUpdate = HAL_GetTick();
 8000212:	f001 f8cf 	bl	80013b4 <HAL_GetTick>
 8000216:	4602      	mov	r2, r0
 8000218:	4b19      	ldr	r3, [pc, #100]	; (8000280 <cpp_main+0x124>)
 800021a:	601a      	str	r2, [r3, #0]

	color_shift++;
 800021c:	89fb      	ldrh	r3, [r7, #14]
 800021e:	3301      	adds	r3, #1
 8000220:	81fb      	strh	r3, [r7, #14]

//	matrix.Dump();

	matrix.SwapBuffer();
 8000222:	4816      	ldr	r0, [pc, #88]	; (800027c <cpp_main+0x120>)
 8000224:	f000 fd3f 	bl	8000ca6 <_ZN12MatrixDriver10SwapBufferEv>

	uint32_t duration = HAL_GetTick() - start;
 8000228:	f001 f8c4 	bl	80013b4 <HAL_GetTick>
 800022c:	4602      	mov	r2, r0
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	1ad3      	subs	r3, r2, r3
 8000232:	607b      	str	r3, [r7, #4]

	sprintf(buffer, "Setup Duration: %lu\n", duration);
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4913      	ldr	r1, [pc, #76]	; (8000284 <cpp_main+0x128>)
 8000238:	4813      	ldr	r0, [pc, #76]	; (8000288 <cpp_main+0x12c>)
 800023a:	f003 fdc5 	bl	8003dc8 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 500);
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <cpp_main+0x12c>)
 8000240:	f7ff ff84 	bl	800014c <strlen>
 8000244:	4603      	mov	r3, r0
 8000246:	b29a      	uxth	r2, r3
 8000248:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800024c:	490e      	ldr	r1, [pc, #56]	; (8000288 <cpp_main+0x12c>)
 800024e:	480f      	ldr	r0, [pc, #60]	; (800028c <cpp_main+0x130>)
 8000250:	f003 faf8 	bl	8003844 <HAL_UART_Transmit>

	matrix.open();
 8000254:	4809      	ldr	r0, [pc, #36]	; (800027c <cpp_main+0x120>)
 8000256:	f000 fc03 	bl	8000a60 <_ZN12MatrixDriver4openEv>

	while (1) {

		uint32_t now = HAL_GetTick();
 800025a:	f001 f8ab 	bl	80013b4 <HAL_GetTick>
 800025e:	6038      	str	r0, [r7, #0]

		if ((now - lastUpdate) > 10) {
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <cpp_main+0x124>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	683a      	ldr	r2, [r7, #0]
 8000266:	1ad3      	subs	r3, r2, r3
 8000268:	2b0a      	cmp	r3, #10
 800026a:	d9f6      	bls.n	800025a <cpp_main+0xfe>
//
//					matrix.SetPixel(col, row, r, g, b);
//				}
//			}

			lastUpdate = now;
 800026c:	4a04      	ldr	r2, [pc, #16]	; (8000280 <cpp_main+0x124>)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	6013      	str	r3, [r2, #0]
		}
	}
 8000272:	e7f2      	b.n	800025a <cpp_main+0xfe>
 8000274:	e0042000 	.word	0xe0042000
 8000278:	0800450c 	.word	0x0800450c
 800027c:	2000008c 	.word	0x2000008c
 8000280:	200004a0 	.word	0x200004a0
 8000284:	08004498 	.word	0x08004498
 8000288:	200000a0 	.word	0x200000a0
 800028c:	20000550 	.word	0x20000550

08000290 <_Z41__static_initialization_and_destruction_0ii>:
}
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d10a      	bne.n	80002b6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d105      	bne.n	80002b6 <_Z41__static_initialization_and_destruction_0ii+0x26>
MatrixDriver matrix(64, 32, MatrixDriver::ScanType::SCAN_16);
 80002aa:	2300      	movs	r3, #0
 80002ac:	2220      	movs	r2, #32
 80002ae:	2140      	movs	r1, #64	; 0x40
 80002b0:	4803      	ldr	r0, [pc, #12]	; (80002c0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80002b2:	f000 fb37 	bl	8000924 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE>
}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000008c 	.word	0x2000008c

080002c4 <_GLOBAL__sub_I_matrix>:
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002cc:	2001      	movs	r0, #1
 80002ce:	f7ff ffdf 	bl	8000290 <_Z41__static_initialization_and_destruction_0ii>
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d8:	f001 f814 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002dc:	f000 f813 	bl	8000306 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e0:	f000 fa70 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80002e4:	f000 fa50 	bl	8000788 <MX_DMA_Init>
  MX_SPI1_Init();
 80002e8:	f000 f86e 	bl	80003c8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002ec:	f000 fa22 	bl	8000734 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80002f0:	f000 f850 	bl	8000394 <MX_IWDG_Init>
  MX_TIM2_Init();
 80002f4:	f000 f944 	bl	8000580 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002f8:	f000 f9c6 	bl	8000688 <MX_TIM3_Init>
  MX_TIM1_Init();
 80002fc:	f000 f89a 	bl	8000434 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 8000300:	f7ff ff2c 	bl	800015c <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000304:	e7fe      	b.n	8000304 <main+0x30>

08000306 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000306:	b580      	push	{r7, lr}
 8000308:	b090      	sub	sp, #64	; 0x40
 800030a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030c:	f107 0318 	add.w	r3, r7, #24
 8000310:	2228      	movs	r2, #40	; 0x28
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f003 fc55 	bl	8003bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000328:	2309      	movs	r3, #9
 800032a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000330:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	2301      	movs	r3, #1
 8000338:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800033a:	2301      	movs	r3, #1
 800033c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033e:	2302      	movs	r3, #2
 8000340:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000346:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000348:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800034c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0318 	add.w	r3, r7, #24
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fcee 	bl	8001d34 <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800035e:	f000 fa9f 	bl	80008a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2302      	movs	r3, #2
 8000368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800036e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000372:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2102      	movs	r1, #2
 800037c:	4618      	mov	r0, r3
 800037e:	f001 ff59 	bl	8002234 <HAL_RCC_ClockConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000388:	f000 fa8a 	bl	80008a0 <Error_Handler>
  }
}
 800038c:	bf00      	nop
 800038e:	3740      	adds	r7, #64	; 0x40
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_IWDG_Init+0x2c>)
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <MX_IWDG_Init+0x30>)
 800039c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <MX_IWDG_Init+0x2c>)
 80003a0:	2206      	movs	r2, #6
 80003a2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_IWDG_Init+0x2c>)
 80003a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80003aa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <MX_IWDG_Init+0x2c>)
 80003ae:	f001 fc79 	bl	8001ca4 <HAL_IWDG_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80003b8:	f000 fa72 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200004fc 	.word	0x200004fc
 80003c4:	40003000 	.word	0x40003000

080003c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003cc:	4b17      	ldr	r3, [pc, #92]	; (800042c <MX_SPI1_Init+0x64>)
 80003ce:	4a18      	ldr	r2, [pc, #96]	; (8000430 <MX_SPI1_Init+0x68>)
 80003d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80003d2:	4b16      	ldr	r3, [pc, #88]	; (800042c <MX_SPI1_Init+0x64>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_SPI1_Init+0x64>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <MX_SPI1_Init+0x64>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_SPI1_Init+0x64>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <MX_SPI1_Init+0x64>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_SPI1_Init+0x64>)
 80003f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_SPI1_Init+0x64>)
 80003fa:	2228      	movs	r2, #40	; 0x28
 80003fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_SPI1_Init+0x64>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_SPI1_Init+0x64>)
 8000406:	2200      	movs	r2, #0
 8000408:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_SPI1_Init+0x64>)
 800040c:	2200      	movs	r2, #0
 800040e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_SPI1_Init+0x64>)
 8000412:	220a      	movs	r2, #10
 8000414:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_SPI1_Init+0x64>)
 8000418:	f002 f8a8 	bl	800256c <HAL_SPI_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8000422:	f000 fa3d 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200005d8 	.word	0x200005d8
 8000430:	40013000 	.word	0x40013000

08000434 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b096      	sub	sp, #88	; 0x58
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000448:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
 8000460:	611a      	str	r2, [r3, #16]
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2220      	movs	r2, #32
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f003 fba9 	bl	8003bc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000472:	4b41      	ldr	r3, [pc, #260]	; (8000578 <MX_TIM1_Init+0x144>)
 8000474:	4a41      	ldr	r2, [pc, #260]	; (800057c <MX_TIM1_Init+0x148>)
 8000476:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000478:	4b3f      	ldr	r3, [pc, #252]	; (8000578 <MX_TIM1_Init+0x144>)
 800047a:	2200      	movs	r2, #0
 800047c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047e:	4b3e      	ldr	r3, [pc, #248]	; (8000578 <MX_TIM1_Init+0x144>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8000484:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <MX_TIM1_Init+0x144>)
 8000486:	2201      	movs	r2, #1
 8000488:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048a:	4b3b      	ldr	r3, [pc, #236]	; (8000578 <MX_TIM1_Init+0x144>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 7;
 8000490:	4b39      	ldr	r3, [pc, #228]	; (8000578 <MX_TIM1_Init+0x144>)
 8000492:	2207      	movs	r2, #7
 8000494:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000496:	4b38      	ldr	r3, [pc, #224]	; (8000578 <MX_TIM1_Init+0x144>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800049c:	4836      	ldr	r0, [pc, #216]	; (8000578 <MX_TIM1_Init+0x144>)
 800049e:	f002 f8e9 	bl	8002674 <HAL_TIM_Base_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80004a8:	f000 f9fa 	bl	80008a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004b6:	4619      	mov	r1, r3
 80004b8:	482f      	ldr	r0, [pc, #188]	; (8000578 <MX_TIM1_Init+0x144>)
 80004ba:	f002 fc65 	bl	8002d88 <HAL_TIM_ConfigClockSource>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80004c4:	f000 f9ec 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004c8:	482b      	ldr	r0, [pc, #172]	; (8000578 <MX_TIM1_Init+0x144>)
 80004ca:	f002 f9e5 	bl	8002898 <HAL_TIM_PWM_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80004d4:	f000 f9e4 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80004d8:	2108      	movs	r1, #8
 80004da:	4827      	ldr	r0, [pc, #156]	; (8000578 <MX_TIM1_Init+0x144>)
 80004dc:	f002 fa34 	bl	8002948 <HAL_TIM_OnePulse_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80004e6:	f000 f9db 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80004ea:	2340      	movs	r3, #64	; 0x40
 80004ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ee:	2300      	movs	r3, #0
 80004f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004f6:	4619      	mov	r1, r3
 80004f8:	481f      	ldr	r0, [pc, #124]	; (8000578 <MX_TIM1_Init+0x144>)
 80004fa:	f003 f895 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000504:	f000 f9cc 	bl	80008a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000508:	2360      	movs	r3, #96	; 0x60
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 800050c:	2301      	movs	r3, #1
 800050e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000510:	2300      	movs	r3, #0
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000514:	2300      	movs	r3, #0
 8000516:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800051c:	2300      	movs	r3, #0
 800051e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000520:	2300      	movs	r3, #0
 8000522:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000528:	2200      	movs	r2, #0
 800052a:	4619      	mov	r1, r3
 800052c:	4812      	ldr	r0, [pc, #72]	; (8000578 <MX_TIM1_Init+0x144>)
 800052e:	f002 fb6d 	bl	8002c0c <HAL_TIM_PWM_ConfigChannel>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000538:	f000 f9b2 	bl	80008a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000554:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <MX_TIM1_Init+0x144>)
 8000560:	f003 f8c0 	bl	80036e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800056a:	f000 f999 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	3758      	adds	r7, #88	; 0x58
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000590 	.word	0x20000590
 800057c:	40012c00 	.word	0x40012c00

08000580 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08e      	sub	sp, #56	; 0x38
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005b2:	4b34      	ldr	r3, [pc, #208]	; (8000684 <MX_TIM2_Init+0x104>)
 80005b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005ba:	4b32      	ldr	r3, [pc, #200]	; (8000684 <MX_TIM2_Init+0x104>)
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c0:	4b30      	ldr	r3, [pc, #192]	; (8000684 <MX_TIM2_Init+0x104>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 80005c6:	4b2f      	ldr	r3, [pc, #188]	; (8000684 <MX_TIM2_Init+0x104>)
 80005c8:	2207      	movs	r2, #7
 80005ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005cc:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_TIM2_Init+0x104>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <MX_TIM2_Init+0x104>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005d8:	482a      	ldr	r0, [pc, #168]	; (8000684 <MX_TIM2_Init+0x104>)
 80005da:	f002 f84b 	bl	8002674 <HAL_TIM_Base_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80005e4:	f000 f95c 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005e8:	4826      	ldr	r0, [pc, #152]	; (8000684 <MX_TIM2_Init+0x104>)
 80005ea:	f002 f955 	bl	8002898 <HAL_TIM_PWM_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80005f4:	f000 f954 	bl	80008a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80005f8:	2307      	movs	r3, #7
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000604:	4619      	mov	r1, r3
 8000606:	481f      	ldr	r0, [pc, #124]	; (8000684 <MX_TIM2_Init+0x104>)
 8000608:	f002 fc75 	bl	8002ef6 <HAL_TIM_SlaveConfigSynchro>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000612:	f000 f945 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	4619      	mov	r1, r3
 8000624:	4817      	ldr	r0, [pc, #92]	; (8000684 <MX_TIM2_Init+0x104>)
 8000626:	f002 ffff 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000630:	f000 f936 	bl	80008a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000634:	2360      	movs	r3, #96	; 0x60
 8000636:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800063c:	2302      	movs	r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	4619      	mov	r1, r3
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <MX_TIM2_Init+0x104>)
 800064c:	f002 fade 	bl	8002c0c <HAL_TIM_PWM_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000656:	f000 f923 	bl	80008a0 <Error_Handler>
  }
  sConfigOC.Pulse = 7;
 800065a:	2307      	movs	r3, #7
 800065c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	2204      	movs	r2, #4
 8000662:	4619      	mov	r1, r3
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <MX_TIM2_Init+0x104>)
 8000666:	f002 fad1 	bl	8002c0c <HAL_TIM_PWM_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000670:	f000 f916 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <MX_TIM2_Init+0x104>)
 8000676:	f000 fd07 	bl	8001088 <HAL_TIM_MspPostInit>

}
 800067a:	bf00      	nop
 800067c:	3738      	adds	r7, #56	; 0x38
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000630 	.word	0x20000630

08000688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_TIM3_Init+0xa4>)
 80006a6:	4a22      	ldr	r2, [pc, #136]	; (8000730 <MX_TIM3_Init+0xa8>)
 80006a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_TIM3_Init+0xa4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_TIM3_Init+0xa4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 700;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_TIM3_Init+0xa4>)
 80006b8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80006bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_TIM3_Init+0xa4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_TIM3_Init+0xa4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006ca:	4818      	ldr	r0, [pc, #96]	; (800072c <MX_TIM3_Init+0xa4>)
 80006cc:	f001 ffd2 	bl	8002674 <HAL_TIM_Base_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80006d6:	f000 f8e3 	bl	80008a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	4619      	mov	r1, r3
 80006e6:	4811      	ldr	r0, [pc, #68]	; (800072c <MX_TIM3_Init+0xa4>)
 80006e8:	f002 fb4e 	bl	8002d88 <HAL_TIM_ConfigClockSource>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f000 f8d5 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80006f6:	2108      	movs	r1, #8
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_TIM3_Init+0xa4>)
 80006fa:	f002 f925 	bl	8002948 <HAL_TIM_OnePulse_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000704:	f000 f8cc 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000708:	2310      	movs	r3, #16
 800070a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_TIM3_Init+0xa4>)
 8000716:	f002 ff87 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000720:	f000 f8be 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000508 	.word	0x20000508
 8000730:	40000400 	.word	0x40000400

08000734 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART1_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800076c:	f003 f81d 	bl	80037aa <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f893 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000550 	.word	0x20000550
 8000784:	40013800 	.word	0x40013800

08000788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_DMA_Init+0x38>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <MX_DMA_Init+0x38>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_DMA_Init+0x38>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	200f      	movs	r0, #15
 80007ac:	f000 fee3 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007b0:	200f      	movs	r0, #15
 80007b2:	f000 fefc 	bl	80015ae <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d8:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0310 	and.w	r3, r3, #16
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f0:	4b28      	ldr	r3, [pc, #160]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a27      	ldr	r2, [pc, #156]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007f6:	f043 0320 	orr.w	r3, r3, #32
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b25      	ldr	r3, [pc, #148]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0320 	and.w	r3, r3, #32
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <MX_GPIO_Init+0xd0>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <MX_GPIO_Init+0xd0>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_GPIO_Init+0xd0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0308 	and.w	r3, r3, #8
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Matrix_A_Pin|Matrix_B_Pin|Matrix_C_Pin|Matrix_D_Pin
 8000838:	2200      	movs	r2, #0
 800083a:	f649 111c 	movw	r1, #39196	; 0x991c
 800083e:	4816      	ldr	r0, [pc, #88]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000840:	f001 fa18 	bl	8001c74 <HAL_GPIO_WritePin>
                          |Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix2_G1_Pin
 8000844:	2200      	movs	r2, #0
 8000846:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <MX_GPIO_Init+0xd8>)
 800084c:	f001 fa12 	bl	8001c74 <HAL_GPIO_WritePin>
                          |LED_8B_Pin|Matrix_R1_Pin|Matrix_G1_Pin|Matrix_B1_Pin
                          |Matrix2_R0_Pin|Matrix2_G0_Pin|Matrix2_B0_Pin|Matrix2_R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Matrix_A_Pin Matrix_B_Pin Matrix_C_Pin Matrix_D_Pin
                           Matrix_LAT_Pin Matrix_OE_Pin Matrix_E_Pin */
  GPIO_InitStruct.Pin = Matrix_A_Pin|Matrix_B_Pin|Matrix_C_Pin|Matrix_D_Pin
 8000850:	f649 131c 	movw	r3, #39196	; 0x991c
 8000854:	613b      	str	r3, [r7, #16]
                          |Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2302      	movs	r3, #2
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0xd4>)
 800086a:	f001 f8a9 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B0_Pin Matrix2_G1_Pin
                           Matrix2_B1_Pin LED_7A_Pin LED_7B_Pin LED_8A_Pin
                           LED_8B_Pin Matrix_R1_Pin Matrix_G1_Pin Matrix_B1_Pin
                           Matrix2_R0_Pin Matrix2_G0_Pin Matrix2_B0_Pin Matrix2_R1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix2_G1_Pin
 800086e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000872:	613b      	str	r3, [r7, #16]
                          |Matrix2_B1_Pin|LED_7A_Pin|LED_7B_Pin|LED_8A_Pin
                          |LED_8B_Pin|Matrix_R1_Pin|Matrix_G1_Pin|Matrix_B1_Pin
                          |Matrix2_R0_Pin|Matrix2_G0_Pin|Matrix2_B0_Pin|Matrix2_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_GPIO_Init+0xd8>)
 8000888:	f001 f89a 	bl	80019c0 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800
 800089c:	40010c00 	.word	0x40010c00

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <_Z12DMA_CompleteP19__DMA_HandleTypeDef>:
//		instance->handleNeeded = true;
//		instance->Handle();
//	}
//}

void DMA_Complete(DMA_HandleTypeDef *hdma) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	instance->handleNeeded = true;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x24>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]

	instance->Handle();
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x24>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fa03 	bl	8000ccc <_ZN12MatrixDriver6HandleEv>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200004a4 	.word	0x200004a4

080008d4 <_ZN12MatrixDriver12BufferOffsetEhhh>:

uint16_t MatrixDriver::BufferOffset(uint8_t x, uint8_t y, uint8_t plane) {
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	4608      	mov	r0, r1
 80008de:	4611      	mov	r1, r2
 80008e0:	461a      	mov	r2, r3
 80008e2:	4603      	mov	r3, r0
 80008e4:	70fb      	strb	r3, [r7, #3]
 80008e6:	460b      	mov	r3, r1
 80008e8:	70bb      	strb	r3, [r7, #2]
 80008ea:	4613      	mov	r3, r2
 80008ec:	707b      	strb	r3, [r7, #1]
	//TODO: Take plane into account for offset
	return ((y % (height / 2)) * width) + x;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	789b      	ldrb	r3, [r3, #2]
 80008f2:	085b      	lsrs	r3, r3, #1
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	78bb      	ldrb	r3, [r7, #2]
 80008f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80008fc:	fb02 f201 	mul.w	r2, r2, r1
 8000900:	1a9b      	subs	r3, r3, r2
 8000902:	b2db      	uxtb	r3, r3
 8000904:	b29b      	uxth	r3, r3
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	7852      	ldrb	r2, [r2, #1]
 800090a:	b292      	uxth	r2, r2
 800090c:	fb02 f303 	mul.w	r3, r2, r3
 8000910:	b29a      	uxth	r2, r3
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	b29b      	uxth	r3, r3
 8000916:	4413      	add	r3, r2
 8000918:	b29b      	uxth	r3, r3
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE>:

#define MIN(a,b) (((a)<(b))?(a):(b))

MatrixDriver::MatrixDriver(uint8_t width, uint8_t height, ScanType scanType) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	4608      	mov	r0, r1
 800092e:	4611      	mov	r1, r2
 8000930:	461a      	mov	r2, r3
 8000932:	4603      	mov	r3, r0
 8000934:	70fb      	strb	r3, [r7, #3]
 8000936:	460b      	mov	r3, r1
 8000938:	70bb      	strb	r3, [r7, #2]
 800093a:	4613      	mov	r3, r2
 800093c:	707b      	strb	r3, [r7, #1]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	825a      	strh	r2, [r3, #18]
	this->width = width;
 800094a:	78fa      	ldrb	r2, [r7, #3]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	705a      	strb	r2, [r3, #1]
	this->height = height;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	78ba      	ldrb	r2, [r7, #2]
 8000954:	709a      	strb	r2, [r3, #2]
	this->scanType = scanType;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	787a      	ldrb	r2, [r7, #1]
 800095a:	711a      	strb	r2, [r3, #4]
	this->planes = 1;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2201      	movs	r2, #1
 8000960:	70da      	strb	r2, [r3, #3]

	this->bufferSize = (width * (height / 2) * planes);
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	b29b      	uxth	r3, r3
 8000966:	78ba      	ldrb	r2, [r7, #2]
 8000968:	0852      	lsrs	r2, r2, #1
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	b292      	uxth	r2, r2
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	b29b      	uxth	r3, r3
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	78d2      	ldrb	r2, [r2, #3]
 8000978:	b292      	uxth	r2, r2
 800097a:	fb02 f303 	mul.w	r3, r2, r3
 800097e:	b29a      	uxth	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	80da      	strh	r2, [r3, #6]

	this->sendBufferA = true;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2201      	movs	r2, #1
 8000988:	715a      	strb	r2, [r3, #5]
	this->bufferA = new uint16_t[bufferSize];
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	88db      	ldrh	r3, [r3, #6]
 800098e:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x134>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d801      	bhi.n	8000998 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x74>
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	e001      	b.n	800099c <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x78>
 8000998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800099c:	4618      	mov	r0, r3
 800099e:	f003 f8bb 	bl	8003b18 <_Znaj>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	609a      	str	r2, [r3, #8]
	this->bufferB = new uint16_t[bufferSize];
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	88db      	ldrh	r3, [r3, #6]
 80009ae:	4a2a      	ldr	r2, [pc, #168]	; (8000a58 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x134>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d801      	bhi.n	80009b8 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x94>
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	e001      	b.n	80009bc <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x98>
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 f8ab 	bl	8003b18 <_Znaj>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60da      	str	r2, [r3, #12]

	for (uint8_t y = 0; y < height / 2; y++) {
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	78bb      	ldrb	r3, [r7, #2]
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	7bfa      	ldrb	r2, [r7, #15]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d22e      	bcs.n	8000a38 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x114>

		for (uint8_t plane = 0; plane < planes; plane++) {
 80009da:	2300      	movs	r3, #0
 80009dc:	73bb      	strb	r3, [r7, #14]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	78db      	ldrb	r3, [r3, #3]
 80009e2:	7bba      	ldrb	r2, [r7, #14]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d223      	bcs.n	8000a30 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x10c>
			for (uint8_t x = 0; x < width; x++) {
 80009e8:	2300      	movs	r3, #0
 80009ea:	737b      	strb	r3, [r7, #13]
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	7b7a      	ldrb	r2, [r7, #13]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d219      	bcs.n	8000a28 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x104>

				uint16_t offset = BufferOffset(x, y, plane);
 80009f4:	7bbb      	ldrb	r3, [r7, #14]
 80009f6:	7bfa      	ldrb	r2, [r7, #15]
 80009f8:	7b79      	ldrb	r1, [r7, #13]
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ff6a 	bl	80008d4 <_ZN12MatrixDriver12BufferOffsetEhhh>
 8000a00:	4603      	mov	r3, r0
 8000a02:	817b      	strh	r3, [r7, #10]

				bufferA[offset] = 0x00;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	897b      	ldrh	r3, [r7, #10]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2200      	movs	r2, #0
 8000a10:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = 0x00;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68da      	ldr	r2, [r3, #12]
 8000a16:	897b      	ldrh	r3, [r7, #10]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	801a      	strh	r2, [r3, #0]
			for (uint8_t x = 0; x < width; x++) {
 8000a20:	7b7b      	ldrb	r3, [r7, #13]
 8000a22:	3301      	adds	r3, #1
 8000a24:	737b      	strb	r3, [r7, #13]
 8000a26:	e7e1      	b.n	80009ec <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xc8>
		for (uint8_t plane = 0; plane < planes; plane++) {
 8000a28:	7bbb      	ldrb	r3, [r7, #14]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	73bb      	strb	r3, [r7, #14]
 8000a2e:	e7d6      	b.n	80009de <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xba>
	for (uint8_t y = 0; y < height / 2; y++) {
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	3301      	adds	r3, #1
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	e7ca      	b.n	80009ce <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xaa>
	//DMA must complete at the end of a row to allow
	//an opportunity to latch the data but it cannot exceed
	//32 DMA operations due to the TIM1 RCR being limited to a uint8_t
	//and an effective 7 RCR / operation.
	//RCR = (OPS * 7) - 1
	maxDmaOperations = MIN(32, width);
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	2b20      	cmp	r3, #32
 8000a3c:	bf28      	it	cs
 8000a3e:	2320      	movcs	r3, #32
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	741a      	strb	r2, [r3, #16]

	instance = this;
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x138>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	3ffffffc 	.word	0x3ffffffc
 8000a5c:	200004a4 	.word	0x200004a4

08000a60 <_ZN12MatrixDriver4openEv>:

void MatrixDriver::open() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "OPEN\n", 5, 10);
 8000a68:	230a      	movs	r3, #10
 8000a6a:	2205      	movs	r2, #5
 8000a6c:	4920      	ldr	r1, [pc, #128]	; (8000af0 <_ZN12MatrixDriver4openEv+0x90>)
 8000a6e:	4821      	ldr	r0, [pc, #132]	; (8000af4 <_ZN12MatrixDriver4openEv+0x94>)
 8000a70:	f002 fee8 	bl	8003844 <HAL_UART_Transmit>

	hdma_tim2_ch1.XferCpltCallback = DMA_Complete;
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <_ZN12MatrixDriver4openEv+0x98>)
 8000a76:	4a21      	ldr	r2, [pc, #132]	; (8000afc <_ZN12MatrixDriver4openEv+0x9c>)
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	201c      	movs	r0, #28
 8000a80:	f000 fd79 	bl	8001576 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a84:	201c      	movs	r0, #28
 8000a86:	f000 fd92 	bl	80015ae <HAL_NVIC_EnableIRQ>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <_ZN12MatrixDriver4openEv+0xa0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <_ZN12MatrixDriver4openEv+0xa0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 0201 	orr.w	r2, r2, #1
 8000a98:	60da      	str	r2, [r3, #12]

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <_ZN12MatrixDriver4openEv+0xa4>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <_ZN12MatrixDriver4openEv+0xa4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000aa8:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <_ZN12MatrixDriver4openEv+0xa4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fd94 	bl	80035e0 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <_ZN12MatrixDriver4openEv+0xa4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2201      	movs	r2, #1
 8000abe:	2104      	movs	r1, #4
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f002 fd8d 	bl	80035e0 <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start(&htim2);
 8000ac6:	480f      	ldr	r0, [pc, #60]	; (8000b04 <_ZN12MatrixDriver4openEv+0xa4>)
 8000ac8:	f001 fe24 	bl	8002714 <HAL_TIM_Base_Start>

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <_ZN12MatrixDriver4openEv+0xa0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 fd83 	bl	80035e0 <TIM_CCxChannelCmd>

	nextDmaOffset = 0;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	825a      	strh	r2, [r3, #18]

	StartNextDma();
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f913 	bl	8000d0c <_ZN12MatrixDriver12StartNextDmaEv>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	080044b0 	.word	0x080044b0
 8000af4:	20000550 	.word	0x20000550
 8000af8:	200004b8 	.word	0x200004b8
 8000afc:	080008ad 	.word	0x080008ad
 8000b00:	20000590 	.word	0x20000590
 8000b04:	20000630 	.word	0x20000630

08000b08 <_ZN12MatrixDriver9PlaneBitsEh>:

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0x00;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]
//	if (value > 31) {
//		result |= 0x02;
//		value -= 31;
//	}

	if (value > 50) {
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b32      	cmp	r3, #50	; 0x32
 8000b1c:	d906      	bls.n	8000b2c <_ZN12MatrixDriver9PlaneBitsEh+0x24>
		result |= 0x01;
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	73fb      	strb	r3, [r7, #15]
		value -= 1;
 8000b26:	78fb      	ldrb	r3, [r7, #3]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	70fb      	strb	r3, [r7, #3]
	}

	return result;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <_ZN12MatrixDriver8SetPixelEhhhhh>:
		}
	}
}

void MatrixDriver::SetPixel(uint8_t x, uint8_t y, uint8_t r, uint8_t g,
		uint8_t b) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	4608      	mov	r0, r1
 8000b42:	4611      	mov	r1, r2
 8000b44:	461a      	mov	r2, r3
 8000b46:	4603      	mov	r3, r0
 8000b48:	70fb      	strb	r3, [r7, #3]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	70bb      	strb	r3, [r7, #2]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	707b      	strb	r3, [r7, #1]
	uint8_t rShift, gShift, bShift;

	//Set data into the buffer we aren't sending at the moment
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	795b      	ldrb	r3, [r3, #5]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <_ZN12MatrixDriver8SetPixelEhhhhh+0x28>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	e001      	b.n	8000b64 <_ZN12MatrixDriver8SetPixelEhhhhh+0x2c>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	617b      	str	r3, [r7, #20]

	if (y < (height / 2)) {
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	789b      	ldrb	r3, [r3, #2]
 8000b6a:	085b      	lsrs	r3, r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	78ba      	ldrb	r2, [r7, #2]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d206      	bcs.n	8000b82 <_ZN12MatrixDriver8SetPixelEhhhhh+0x4a>
		rShift = R0_SHIFT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	77fb      	strb	r3, [r7, #31]
		gShift = G0_SHIFT;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	77bb      	strb	r3, [r7, #30]
		bShift = B0_SHIFT;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	777b      	strb	r3, [r7, #29]
 8000b80:	e005      	b.n	8000b8e <_ZN12MatrixDriver8SetPixelEhhhhh+0x56>
	} else {
		rShift = R1_SHIFT;
 8000b82:	2303      	movs	r3, #3
 8000b84:	77fb      	strb	r3, [r7, #31]
		gShift = G1_SHIFT;
 8000b86:	2304      	movs	r3, #4
 8000b88:	77bb      	strb	r3, [r7, #30]
		bShift = B1_SHIFT;
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	777b      	strb	r3, [r7, #29]
	}

	uint16_t pixelMask = (0x0001 << rShift) | (0x0001 << gShift)
 8000b8e:	7ffb      	ldrb	r3, [r7, #31]
 8000b90:	2201      	movs	r2, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	7fbb      	ldrb	r3, [r7, #30]
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	b21a      	sxth	r2, r3
			| (0x0001 << bShift);
 8000ba6:	7f7b      	ldrb	r3, [r7, #29]
 8000ba8:	2101      	movs	r1, #1
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b21b      	sxth	r3, r3
	uint16_t pixelMask = (0x0001 << rShift) | (0x0001 << gShift)
 8000bb4:	827b      	strh	r3, [r7, #18]
	uint8_t rPlanes = PlaneBits(r);
 8000bb6:	787b      	ldrb	r3, [r7, #1]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffa4 	bl	8000b08 <_ZN12MatrixDriver9PlaneBitsEh>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	747b      	strb	r3, [r7, #17]
	uint8_t gPlanes = PlaneBits(g);
 8000bc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff9c 	bl	8000b08 <_ZN12MatrixDriver9PlaneBitsEh>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	743b      	strb	r3, [r7, #16]
	uint8_t bPlanes = PlaneBits(b);
 8000bd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff94 	bl	8000b08 <_ZN12MatrixDriver9PlaneBitsEh>
 8000be0:	4603      	mov	r3, r0
 8000be2:	73fb      	strb	r3, [r7, #15]

	for (int plane = 0; plane < planes; plane++) {
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	78db      	ldrb	r3, [r3, #3]
 8000bec:	461a      	mov	r2, r3
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	da54      	bge.n	8000c9e <_ZN12MatrixDriver8SetPixelEhhhhh+0x166>
		uint16_t planePixelBits = (
				(rPlanes & (0x01 << plane)) ? 0x0001 << rShift : 0)
 8000bf4:	7c7a      	ldrb	r2, [r7, #17]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	fa42 f303 	asr.w	r3, r2, r3
 8000bfc:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & (0x01 << plane)) ? 0x0001 << gShift : 0)
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d005      	beq.n	8000c10 <_ZN12MatrixDriver8SetPixelEhhhhh+0xd8>
				(rPlanes & (0x01 << plane)) ? 0x0001 << rShift : 0)
 8000c04:	7ffb      	ldrb	r3, [r7, #31]
 8000c06:	2201      	movs	r2, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
				| ((gPlanes & (0x01 << plane)) ? 0x0001 << gShift : 0)
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	e000      	b.n	8000c12 <_ZN12MatrixDriver8SetPixelEhhhhh+0xda>
 8000c10:	2200      	movs	r2, #0
 8000c12:	7c39      	ldrb	r1, [r7, #16]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa41 f303 	asr.w	r3, r1, r3
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d005      	beq.n	8000c2e <_ZN12MatrixDriver8SetPixelEhhhhh+0xf6>
 8000c22:	7fbb      	ldrb	r3, [r7, #30]
 8000c24:	2101      	movs	r1, #1
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	e000      	b.n	8000c30 <_ZN12MatrixDriver8SetPixelEhhhhh+0xf8>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b21a      	sxth	r2, r3
				| ((bPlanes & (0x01 << plane)) ? 0x0001 << bShift : 0);
 8000c34:	7bf9      	ldrb	r1, [r7, #15]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	fa41 f303 	asr.w	r3, r1, r3
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d005      	beq.n	8000c50 <_ZN12MatrixDriver8SetPixelEhhhhh+0x118>
 8000c44:	7f7b      	ldrb	r3, [r7, #29]
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	e000      	b.n	8000c52 <_ZN12MatrixDriver8SetPixelEhhhhh+0x11a>
 8000c50:	2300      	movs	r3, #0
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = (
 8000c56:	81bb      	strh	r3, [r7, #12]
//				x, y, rPlanes, gPlanes, bPlanes, planePixelBits, pixelMask);

//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
//				10);

		uint16_t offset = BufferOffset(x, y, plane);
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	78ba      	ldrb	r2, [r7, #2]
 8000c5e:	78f9      	ldrb	r1, [r7, #3]
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff fe37 	bl	80008d4 <_ZN12MatrixDriver12BufferOffsetEhhh>
 8000c66:	4603      	mov	r3, r0
 8000c68:	817b      	strh	r3, [r7, #10]

		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000c6a:	897b      	ldrh	r3, [r7, #10]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	4413      	add	r3, r2
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	4013      	ands	r3, r2
 8000c80:	b21a      	sxth	r2, r3
				| planePixelBits;
 8000c82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	b219      	sxth	r1, r3
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000c8a:	897b      	ldrh	r3, [r7, #10]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4413      	add	r3, r2
				| planePixelBits;
 8000c92:	b28a      	uxth	r2, r1
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000c94:	801a      	strh	r2, [r3, #0]
	for (int plane = 0; plane < planes; plane++) {
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	e7a4      	b.n	8000be8 <_ZN12MatrixDriver8SetPixelEhhhhh+0xb0>
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	sendBufferA = !sendBufferA;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	795b      	ldrb	r3, [r3, #5]
 8000cb2:	f083 0301 	eor.w	r3, r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	715a      	strb	r2, [r3, #5]

	nextDmaOffset = 0;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	825a      	strh	r2, [r3, #18]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <_ZN12MatrixDriver6HandleEv>:

void MatrixDriver::Handle() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	if (handleNeeded) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d013      	beq.n	8000d04 <_ZN12MatrixDriver6HandleEv+0x38>
		if ((nextDmaOffset % width) == 0) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	8a5b      	ldrh	r3, [r3, #18]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	7852      	ldrb	r2, [r2, #1]
 8000ce4:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ce8:	fb02 f201 	mul.w	r2, r2, r1
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <_ZN12MatrixDriver6HandleEv+0x2c>
			Latch();
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f866 	bl	8000dc4 <_ZN12MatrixDriver5LatchEv>
		}

		StartNextDma();
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f807 	bl	8000d0c <_ZN12MatrixDriver12StartNextDmaEv>

		handleNeeded = false;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
	}
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_ZN12MatrixDriver12StartNextDmaEv>:

void MatrixDriver::StartNextDma() {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	uint16_t *outputBuffer = sendBufferA ? bufferA : bufferB;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	795b      	ldrb	r3, [r3, #5]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <_ZN12MatrixDriver12StartNextDmaEv+0x16>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	e001      	b.n	8000d26 <_ZN12MatrixDriver12StartNextDmaEv+0x1a>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	617b      	str	r3, [r7, #20]
	outputBuffer += nextDmaOffset;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	8a5b      	ldrh	r3, [r3, #18]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4413      	add	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]

	uint32_t operations = MIN(maxDmaOperations, bufferSize - nextDmaOffset);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	88db      	ldrh	r3, [r3, #6]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	8a5b      	ldrh	r3, [r3, #18]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	7c12      	ldrb	r2, [r2, #16]
 8000d44:	4293      	cmp	r3, r2
 8000d46:	bfa8      	it	ge
 8000d48:	4613      	movge	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]

	HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) outputBuffer,
 8000d4c:	6979      	ldr	r1, [r7, #20]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <_ZN12MatrixDriver12StartNextDmaEv+0xa8>)
 8000d52:	4819      	ldr	r0, [pc, #100]	; (8000db8 <_ZN12MatrixDriver12StartNextDmaEv+0xac>)
 8000d54:	f000 fca0 	bl	8001698 <HAL_DMA_Start_IT>
			(uint32_t) &(GPIOB->ODR), operations);

	//Number of TIM1 ticks to drive data_size elements.
	uint8_t rcr = (operations * 8) - 1;
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	3b01      	subs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]

	htim1.Instance->RCR = rcr;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	631a      	str	r2, [r3, #48]	; 0x30
	htim1.Instance->EGR = TIM_EGR_UG; //Generate an update event to absorb RCR
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2201      	movs	r2, #1
 8000d72:	615a      	str	r2, [r3, #20]
	htim2.Instance->CNT = 0;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <_ZN12MatrixDriver12StartNextDmaEv+0xb4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim1);
 8000d7c:	480f      	ldr	r0, [pc, #60]	; (8000dbc <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 8000d7e:	f001 fd13 	bl	80027a8 <HAL_TIM_Base_Stop>

	HAL_TIM_Base_Start_IT(&htim1);
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 8000d84:	f001 fd36 	bl	80027f4 <HAL_TIM_Base_Start_IT>

	nextDmaOffset += operations;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	8a5a      	ldrh	r2, [r3, #18]
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	825a      	strh	r2, [r3, #18]

	if (nextDmaOffset >= bufferSize) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	8a5a      	ldrh	r2, [r3, #18]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	88db      	ldrh	r3, [r3, #6]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d302      	bcc.n	8000daa <_ZN12MatrixDriver12StartNextDmaEv+0x9e>
		nextDmaOffset = 0;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	825a      	strh	r2, [r3, #18]
	}
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40010c0c 	.word	0x40010c0c
 8000db8:	200004b8 	.word	0x200004b8
 8000dbc:	20000590 	.word	0x20000590
 8000dc0:	20000630 	.word	0x20000630

08000dc4 <_ZN12MatrixDriver5LatchEv>:

void MatrixDriver::Latch() {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
//
//	sprintf(buffer, "LAT Duration: %lu\n", duration);
//
//	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);

	HAL_IWDG_Refresh(&hiwdg);
 8000dcc:	4832      	ldr	r0, [pc, #200]	; (8000e98 <_ZN12MatrixDriver5LatchEv+0xd4>)
 8000dce:	f000 ffa2 	bl	8001d16 <HAL_IWDG_Refresh>

	uint16_t row = nextDmaOffset / width;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	8a5b      	ldrh	r3, [r3, #18]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	785b      	ldrb	r3, [r3, #1]
 8000ddc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000de0:	81fb      	strh	r3, [r7, #14]

	uint8_t previousRow = row == 0 ? (height / 2) - 1 : row - 1;
 8000de2:	89fb      	ldrh	r3, [r7, #14]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d106      	bne.n	8000df6 <_ZN12MatrixDriver5LatchEv+0x32>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	789b      	ldrb	r3, [r3, #2]
 8000dec:	085b      	lsrs	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	3b01      	subs	r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	e003      	b.n	8000dfe <_ZN12MatrixDriver5LatchEv+0x3a>
 8000df6:	89fb      	ldrh	r3, [r7, #14]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	737b      	strb	r3, [r7, #13]

	//Set or reset each specific line for selection
	uint32_t bsrr = (previousRow & 0x01 ? 0x0001 << A_SHIFT : 0x0001 << (A_SHIFT + 16))
 8000e00:	7b7b      	ldrb	r3, [r7, #13]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <_ZN12MatrixDriver5LatchEv+0x4a>
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	e001      	b.n	8000e12 <_ZN12MatrixDriver5LatchEv+0x4e>
 8000e0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
			| (previousRow & 0x02 ? 0x0001 << B_SHIFT : 0x0001 << (B_SHIFT + 16))
 8000e12:	7b7b      	ldrb	r3, [r7, #13]
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <_ZN12MatrixDriver5LatchEv+0x5c>
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	e001      	b.n	8000e24 <_ZN12MatrixDriver5LatchEv+0x60>
 8000e20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e24:	4313      	orrs	r3, r2
			| (previousRow & 0x04 ? 0x0001 << C_SHIFT : 0x0001 << (C_SHIFT + 16))
 8000e26:	7b7a      	ldrb	r2, [r7, #13]
 8000e28:	f002 0204 	and.w	r2, r2, #4
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d001      	beq.n	8000e34 <_ZN12MatrixDriver5LatchEv+0x70>
 8000e30:	2210      	movs	r2, #16
 8000e32:	e001      	b.n	8000e38 <_ZN12MatrixDriver5LatchEv+0x74>
 8000e34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e38:	4313      	orrs	r3, r2
			| (previousRow & 0x08 ? 0x0001 << D_SHIFT : 0x0001 << (D_SHIFT + 16))
 8000e3a:	7b7a      	ldrb	r2, [r7, #13]
 8000e3c:	f002 0208 	and.w	r2, r2, #8
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d002      	beq.n	8000e4a <_ZN12MatrixDriver5LatchEv+0x86>
 8000e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e48:	e001      	b.n	8000e4e <_ZN12MatrixDriver5LatchEv+0x8a>
 8000e4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e4e:	4313      	orrs	r3, r2
			| (previousRow & 0x10 ? 0x0001 << E_SHIFT : 0x0001 << (E_SHIFT + 16));
 8000e50:	7b7a      	ldrb	r2, [r7, #13]
 8000e52:	f002 0210 	and.w	r2, r2, #16
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d002      	beq.n	8000e60 <_ZN12MatrixDriver5LatchEv+0x9c>
 8000e5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e5e:	e001      	b.n	8000e64 <_ZN12MatrixDriver5LatchEv+0xa0>
 8000e60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e64:	4313      	orrs	r3, r2
	uint32_t bsrr = (previousRow & 0x01 ? 0x0001 << A_SHIFT : 0x0001 << (A_SHIFT + 16))
 8000e66:	60bb      	str	r3, [r7, #8]


	//Disable output & latch
	GPIOA->BSRR = (0x0001 << OE_SHIFT) ;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <_ZN12MatrixDriver5LatchEv+0xd8>)
 8000e6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e6e:	611a      	str	r2, [r3, #16]

	GPIOA->BSRR = (0x0001 << LAT_SHIFT);
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <_ZN12MatrixDriver5LatchEv+0xd8>)
 8000e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e76:	611a      	str	r2, [r3, #16]

	GPIOA->BSRR = (0x0001 << (LAT_SHIFT + 16));
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <_ZN12MatrixDriver5LatchEv+0xd8>)
 8000e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7e:	611a      	str	r2, [r3, #16]
	//Configure row lines
	GPIOA->BSRR = bsrr;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <_ZN12MatrixDriver5LatchEv+0xd8>)
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	6113      	str	r3, [r2, #16]

	//Enable output
	GPIOA->BSRR = (0x0001 << (OE_SHIFT + 16)) ;
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <_ZN12MatrixDriver5LatchEv+0xd8>)
 8000e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e8c:	611a      	str	r2, [r3, #16]
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200004fc 	.word	0x200004fc
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_MspInit+0x5c>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_MspInit+0x5c>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6193      	str	r3, [r2, #24]
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_MspInit+0x5c>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_MspInit+0x5c>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_MspInit+0x5c>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_MspInit+0x5c>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_MspInit+0x60>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_MspInit+0x60>)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010000 	.word	0x40010000

08000f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d12f      	bne.n	8000f84 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <HAL_SPI_MspInit+0x8c>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_SPI_MspInit+0x8c>)
 8000f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_SPI_MspInit+0x8c>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_SPI_MspInit+0x8c>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a13      	ldr	r2, [pc, #76]	; (8000f90 <HAL_SPI_MspInit+0x8c>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_SPI_MspInit+0x8c>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f54:	23a0      	movs	r3, #160	; 0xa0
 8000f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	4619      	mov	r1, r3
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <HAL_SPI_MspInit+0x90>)
 8000f68:	f000 fd2a 	bl	80019c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f6c:	2340      	movs	r3, #64	; 0x40
 8000f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <HAL_SPI_MspInit+0x90>)
 8000f80:	f000 fd1e 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40013000 	.word	0x40013000
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010800 	.word	0x40010800

08000f98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a33      	ldr	r2, [pc, #204]	; (8001074 <HAL_TIM_Base_MspInit+0xdc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000faa:	4b33      	ldr	r3, [pc, #204]	; (8001078 <HAL_TIM_Base_MspInit+0xe0>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a32      	ldr	r2, [pc, #200]	; (8001078 <HAL_TIM_Base_MspInit+0xe0>)
 8000fb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <HAL_TIM_Base_MspInit+0xe0>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fc2:	e052      	b.n	800106a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fcc:	d134      	bne.n	8001038 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <HAL_TIM_Base_MspInit+0xe0>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a29      	ldr	r2, [pc, #164]	; (8001078 <HAL_TIM_Base_MspInit+0xe0>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	61d3      	str	r3, [r2, #28]
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <HAL_TIM_Base_MspInit+0xe0>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_TIM_Base_MspInit+0xe4>)
 8000fe8:	4a25      	ldr	r2, [pc, #148]	; (8001080 <HAL_TIM_Base_MspInit+0xe8>)
 8000fea:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_TIM_Base_MspInit+0xe4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_TIM_Base_MspInit+0xe4>)
 8000ff4:	2240      	movs	r2, #64	; 0x40
 8000ff6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_TIM_Base_MspInit+0xe4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_TIM_Base_MspInit+0xe4>)
 8001000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001004:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_TIM_Base_MspInit+0xe4>)
 8001008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_TIM_Base_MspInit+0xe4>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_TIM_Base_MspInit+0xe4>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800101a:	4818      	ldr	r0, [pc, #96]	; (800107c <HAL_TIM_Base_MspInit+0xe4>)
 800101c:	f000 fae2 	bl	80015e4 <HAL_DMA_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8001026:	f7ff fc3b 	bl	80008a0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a13      	ldr	r2, [pc, #76]	; (800107c <HAL_TIM_Base_MspInit+0xe4>)
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_TIM_Base_MspInit+0xe4>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001036:	e018      	b.n	800106a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a11      	ldr	r2, [pc, #68]	; (8001084 <HAL_TIM_Base_MspInit+0xec>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d113      	bne.n	800106a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_TIM_Base_MspInit+0xe0>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <HAL_TIM_Base_MspInit+0xe0>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_TIM_Base_MspInit+0xe0>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	201d      	movs	r0, #29
 8001060:	f000 fa89 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001064:	201d      	movs	r0, #29
 8001066:	f000 faa2 	bl	80015ae <HAL_NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40012c00 	.word	0x40012c00
 8001078:	40021000 	.word	0x40021000
 800107c:	200004b8 	.word	0x200004b8
 8001080:	40020058 	.word	0x40020058
 8001084:	40000400 	.word	0x40000400

08001088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a6:	d117      	bne.n	80010d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_TIM_MspPostInit+0x58>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <HAL_TIM_MspPostInit+0x58>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_TIM_MspPostInit+0x58>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010c0:	2302      	movs	r3, #2
 80010c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4619      	mov	r1, r3
 80010d2:	4804      	ldr	r0, [pc, #16]	; (80010e4 <HAL_TIM_MspPostInit+0x5c>)
 80010d4:	f000 fc74 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010800 	.word	0x40010800

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <HAL_UART_MspInit+0x8c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d131      	bne.n	800116c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_UART_MspInit+0x90>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_UART_MspInit+0x90>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_UART_MspInit+0x90>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_UART_MspInit+0x90>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <HAL_UART_MspInit+0x90>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_UART_MspInit+0x90>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <HAL_UART_MspInit+0x94>)
 800114e:	f000 fc37 	bl	80019c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_UART_MspInit+0x94>)
 8001168:	f000 fc2a 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40013800 	.word	0x40013800
 8001178:	40021000 	.word	0x40021000
 800117c:	40010800 	.word	0x40010800

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <HardFault_Handler+0x4>

08001192 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <MemManage_Handler+0x4>

08001198 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <BusFault_Handler+0x4>

0800119e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <UsageFault_Handler+0x4>

080011a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f8e0 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA1_Channel5_IRQHandler+0x10>)
 80011da:	f000 fabd 	bl	8001758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200004b8 	.word	0x200004b8

080011e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <TIM3_IRQHandler+0x10>)
 80011ee:	f001 fc04 	bl	80029fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000508 	.word	0x20000508

080011fc <_getpid>:
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
 8001200:	2301      	movs	r3, #1
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <_kill>:
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
 8001214:	f002 fca4 	bl	8003b60 <__errno>
 8001218:	4602      	mov	r2, r0
 800121a:	2316      	movs	r3, #22
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_exit>:
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffe7 	bl	800120a <_kill>
 800123c:	e7fe      	b.n	800123c <_exit+0x12>
	...

08001240 <_sbrk>:
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
 8001270:	f002 fc76 	bl	8003b60 <__errno>
 8001274:	4602      	mov	r2, r0
 8001276:	230c      	movs	r3, #12
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <_sbrk+0x64>)
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20005000 	.word	0x20005000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	200004a8 	.word	0x200004a8
 80012a8:	20000680 	.word	0x20000680

080012ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <Reset_Handler>:
 80012b8:	2100      	movs	r1, #0
 80012ba:	e003      	b.n	80012c4 <LoopCopyDataInit>

080012bc <CopyDataInit>:
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <LoopFillZerobss+0x14>)
 80012be:	585b      	ldr	r3, [r3, r1]
 80012c0:	5043      	str	r3, [r0, r1]
 80012c2:	3104      	adds	r1, #4

080012c4 <LoopCopyDataInit>:
 80012c4:	480a      	ldr	r0, [pc, #40]	; (80012f0 <LoopFillZerobss+0x18>)
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <LoopFillZerobss+0x1c>)
 80012c8:	1842      	adds	r2, r0, r1
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3f6      	bcc.n	80012bc <CopyDataInit>
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <LoopFillZerobss+0x20>)
 80012d0:	e002      	b.n	80012d8 <LoopFillZerobss>

080012d2 <FillZerobss>:
 80012d2:	2300      	movs	r3, #0
 80012d4:	f842 3b04 	str.w	r3, [r2], #4

080012d8 <LoopFillZerobss>:
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <LoopFillZerobss+0x24>)
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3f9      	bcc.n	80012d2 <FillZerobss>
 80012de:	f7ff ffe5 	bl	80012ac <SystemInit>
 80012e2:	f002 fc43 	bl	8003b6c <__libc_init_array>
 80012e6:	f7fe fff5 	bl	80002d4 <main>
 80012ea:	4770      	bx	lr
 80012ec:	08005d64 	.word	0x08005d64
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000070 	.word	0x20000070
 80012f8:	20000070 	.word	0x20000070
 80012fc:	20000680 	.word	0x20000680

08001300 <ADC1_2_IRQHandler>:
 8001300:	e7fe      	b.n	8001300 <ADC1_2_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x28>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x28>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f923 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fdbe 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40022000 	.word	0x40022000

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f93b 	bl	80015ca <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800136c:	f000 f903 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	20000008 	.word	0x20000008
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_IncTick+0x1c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x20>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <HAL_IncTick+0x20>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000678 	.word	0x20000678

080013b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <HAL_GetTick+0x10>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	20000678 	.word	0x20000678

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4906      	ldr	r1, [pc, #24]	; (8001460 <__NVIC_EnableIRQ+0x34>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001540:	f7ff ff90 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff2d 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff42 	bl	8001410 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff90 	bl	80014b8 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5f 	bl	8001464 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff35 	bl	800142c <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa2 	bl	800151c <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e043      	b.n	8001682 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_DMA_Init+0xa8>)
 8001602:	4413      	add	r3, r2
 8001604:	4a22      	ldr	r2, [pc, #136]	; (8001690 <HAL_DMA_Init+0xac>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <HAL_DMA_Init+0xb0>)
 8001616:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800162e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001632:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	bffdfff8 	.word	0xbffdfff8
 8001690:	cccccccd 	.word	0xcccccccd
 8001694:	40020000 	.word	0x40020000

08001698 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_DMA_Start_IT+0x20>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e04a      	b.n	800174e <HAL_DMA_Start_IT+0xb6>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d13a      	bne.n	8001740 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2202      	movs	r2, #2
 80016ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f938 	bl	8001964 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 020e 	orr.w	r2, r2, #14
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e00f      	b.n	800172e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0204 	bic.w	r2, r2, #4
 800171c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 020a 	orr.w	r2, r2, #10
 800172c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0201 	orr.w	r2, r2, #1
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	e005      	b.n	800174c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001748:	2302      	movs	r3, #2
 800174a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800174c:	7dfb      	ldrb	r3, [r7, #23]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	2204      	movs	r2, #4
 8001776:	409a      	lsls	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d04f      	beq.n	8001820 <HAL_DMA_IRQHandler+0xc8>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	d04a      	beq.n	8001820 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0204 	bic.w	r2, r2, #4
 80017a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a66      	ldr	r2, [pc, #408]	; (8001948 <HAL_DMA_IRQHandler+0x1f0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d029      	beq.n	8001806 <HAL_DMA_IRQHandler+0xae>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a65      	ldr	r2, [pc, #404]	; (800194c <HAL_DMA_IRQHandler+0x1f4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d022      	beq.n	8001802 <HAL_DMA_IRQHandler+0xaa>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a63      	ldr	r2, [pc, #396]	; (8001950 <HAL_DMA_IRQHandler+0x1f8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d01a      	beq.n	80017fc <HAL_DMA_IRQHandler+0xa4>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a62      	ldr	r2, [pc, #392]	; (8001954 <HAL_DMA_IRQHandler+0x1fc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d012      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x9e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a60      	ldr	r2, [pc, #384]	; (8001958 <HAL_DMA_IRQHandler+0x200>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00a      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x98>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a5f      	ldr	r2, [pc, #380]	; (800195c <HAL_DMA_IRQHandler+0x204>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d102      	bne.n	80017ea <HAL_DMA_IRQHandler+0x92>
 80017e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017e8:	e00e      	b.n	8001808 <HAL_DMA_IRQHandler+0xb0>
 80017ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017ee:	e00b      	b.n	8001808 <HAL_DMA_IRQHandler+0xb0>
 80017f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017f4:	e008      	b.n	8001808 <HAL_DMA_IRQHandler+0xb0>
 80017f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017fa:	e005      	b.n	8001808 <HAL_DMA_IRQHandler+0xb0>
 80017fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001800:	e002      	b.n	8001808 <HAL_DMA_IRQHandler+0xb0>
 8001802:	2340      	movs	r3, #64	; 0x40
 8001804:	e000      	b.n	8001808 <HAL_DMA_IRQHandler+0xb0>
 8001806:	2304      	movs	r3, #4
 8001808:	4a55      	ldr	r2, [pc, #340]	; (8001960 <HAL_DMA_IRQHandler+0x208>)
 800180a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8094 	beq.w	800193e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800181e:	e08e      	b.n	800193e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	2202      	movs	r2, #2
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d056      	beq.n	80018de <HAL_DMA_IRQHandler+0x186>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d051      	beq.n	80018de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10b      	bne.n	8001860 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 020a 	bic.w	r2, r2, #10
 8001856:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a38      	ldr	r2, [pc, #224]	; (8001948 <HAL_DMA_IRQHandler+0x1f0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d029      	beq.n	80018be <HAL_DMA_IRQHandler+0x166>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a37      	ldr	r2, [pc, #220]	; (800194c <HAL_DMA_IRQHandler+0x1f4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d022      	beq.n	80018ba <HAL_DMA_IRQHandler+0x162>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a35      	ldr	r2, [pc, #212]	; (8001950 <HAL_DMA_IRQHandler+0x1f8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01a      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x15c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a34      	ldr	r2, [pc, #208]	; (8001954 <HAL_DMA_IRQHandler+0x1fc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d012      	beq.n	80018ae <HAL_DMA_IRQHandler+0x156>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_DMA_IRQHandler+0x200>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00a      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x150>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a31      	ldr	r2, [pc, #196]	; (800195c <HAL_DMA_IRQHandler+0x204>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d102      	bne.n	80018a2 <HAL_DMA_IRQHandler+0x14a>
 800189c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018a0:	e00e      	b.n	80018c0 <HAL_DMA_IRQHandler+0x168>
 80018a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a6:	e00b      	b.n	80018c0 <HAL_DMA_IRQHandler+0x168>
 80018a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ac:	e008      	b.n	80018c0 <HAL_DMA_IRQHandler+0x168>
 80018ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b2:	e005      	b.n	80018c0 <HAL_DMA_IRQHandler+0x168>
 80018b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b8:	e002      	b.n	80018c0 <HAL_DMA_IRQHandler+0x168>
 80018ba:	2320      	movs	r3, #32
 80018bc:	e000      	b.n	80018c0 <HAL_DMA_IRQHandler+0x168>
 80018be:	2302      	movs	r3, #2
 80018c0:	4a27      	ldr	r2, [pc, #156]	; (8001960 <HAL_DMA_IRQHandler+0x208>)
 80018c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d034      	beq.n	800193e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018dc:	e02f      	b.n	800193e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2208      	movs	r2, #8
 80018e4:	409a      	lsls	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d028      	beq.n	8001940 <HAL_DMA_IRQHandler+0x1e8>
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d023      	beq.n	8001940 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 020e 	bic.w	r2, r2, #14
 8001906:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4798      	blx	r3
    }
  }
  return;
 800193e:	bf00      	nop
 8001940:	bf00      	nop
}
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020008 	.word	0x40020008
 800194c:	4002001c 	.word	0x4002001c
 8001950:	40020030 	.word	0x40020030
 8001954:	40020044 	.word	0x40020044
 8001958:	40020058 	.word	0x40020058
 800195c:	4002006c 	.word	0x4002006c
 8001960:	40020000 	.word	0x40020000

08001964 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f202 	lsl.w	r2, r1, r2
 8001980:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b10      	cmp	r3, #16
 8001990:	d108      	bne.n	80019a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019a2:	e007      	b.n	80019b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	60da      	str	r2, [r3, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b08b      	sub	sp, #44	; 0x2c
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d2:	e127      	b.n	8001c24 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d4:	2201      	movs	r2, #1
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8116 	bne.w	8001c1e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d034      	beq.n	8001a64 <HAL_GPIO_Init+0xa4>
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d80d      	bhi.n	8001a1a <HAL_GPIO_Init+0x5a>
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d02b      	beq.n	8001a5a <HAL_GPIO_Init+0x9a>
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d804      	bhi.n	8001a10 <HAL_GPIO_Init+0x50>
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d031      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d01c      	beq.n	8001a48 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a0e:	e048      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d043      	beq.n	8001a9c <HAL_GPIO_Init+0xdc>
 8001a14:	2b11      	cmp	r3, #17
 8001a16:	d01b      	beq.n	8001a50 <HAL_GPIO_Init+0x90>
          break;
 8001a18:	e043      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a1a:	4a89      	ldr	r2, [pc, #548]	; (8001c40 <HAL_GPIO_Init+0x280>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d026      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
 8001a20:	4a87      	ldr	r2, [pc, #540]	; (8001c40 <HAL_GPIO_Init+0x280>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d806      	bhi.n	8001a34 <HAL_GPIO_Init+0x74>
 8001a26:	4a87      	ldr	r2, [pc, #540]	; (8001c44 <HAL_GPIO_Init+0x284>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d020      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
 8001a2c:	4a86      	ldr	r2, [pc, #536]	; (8001c48 <HAL_GPIO_Init+0x288>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d01d      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
          break;
 8001a32:	e036      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a34:	4a85      	ldr	r2, [pc, #532]	; (8001c4c <HAL_GPIO_Init+0x28c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d019      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
 8001a3a:	4a85      	ldr	r2, [pc, #532]	; (8001c50 <HAL_GPIO_Init+0x290>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d016      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
 8001a40:	4a84      	ldr	r2, [pc, #528]	; (8001c54 <HAL_GPIO_Init+0x294>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0xae>
          break;
 8001a46:	e02c      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e028      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	3304      	adds	r3, #4
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e023      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	3308      	adds	r3, #8
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e01e      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	330c      	adds	r3, #12
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e019      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a76:	2304      	movs	r3, #4
 8001a78:	623b      	str	r3, [r7, #32]
          break;
 8001a7a:	e012      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a84:	2308      	movs	r3, #8
 8001a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	611a      	str	r2, [r3, #16]
          break;
 8001a8e:	e008      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	615a      	str	r2, [r3, #20]
          break;
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2bff      	cmp	r3, #255	; 0xff
 8001aa6:	d801      	bhi.n	8001aac <HAL_GPIO_Init+0xec>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	e001      	b.n	8001ab0 <HAL_GPIO_Init+0xf0>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2bff      	cmp	r3, #255	; 0xff
 8001ab6:	d802      	bhi.n	8001abe <HAL_GPIO_Init+0xfe>
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_Init+0x104>
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	3b08      	subs	r3, #8
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	210f      	movs	r1, #15
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	6a39      	ldr	r1, [r7, #32]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8096 	beq.w	8001c1e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af2:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_GPIO_Init+0x298>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_GPIO_Init+0x298>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6193      	str	r3, [r2, #24]
 8001afe:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <HAL_GPIO_Init+0x298>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b0a:	4a54      	ldr	r2, [pc, #336]	; (8001c5c <HAL_GPIO_Init+0x29c>)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4b      	ldr	r2, [pc, #300]	; (8001c60 <HAL_GPIO_Init+0x2a0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x19e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4a      	ldr	r2, [pc, #296]	; (8001c64 <HAL_GPIO_Init+0x2a4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x19a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a49      	ldr	r2, [pc, #292]	; (8001c68 <HAL_GPIO_Init+0x2a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x196>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a48      	ldr	r2, [pc, #288]	; (8001c6c <HAL_GPIO_Init+0x2ac>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x192>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x1a0>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e004      	b.n	8001b60 <HAL_GPIO_Init+0x1a0>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x1a0>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x1a0>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b62:	f002 0203 	and.w	r2, r2, #3
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b70:	493a      	ldr	r1, [pc, #232]	; (8001c5c <HAL_GPIO_Init+0x29c>)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b8a:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4938      	ldr	r1, [pc, #224]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
 8001b96:	e006      	b.n	8001ba6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	4933      	ldr	r1, [pc, #204]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	492e      	ldr	r1, [pc, #184]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
 8001bbe:	e006      	b.n	8001bce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4929      	ldr	r1, [pc, #164]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4924      	ldr	r1, [pc, #144]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
 8001be6:	e006      	b.n	8001bf6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	491f      	ldr	r1, [pc, #124]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d006      	beq.n	8001c10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	491a      	ldr	r1, [pc, #104]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60cb      	str	r3, [r1, #12]
 8001c0e:	e006      	b.n	8001c1e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4915      	ldr	r1, [pc, #84]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	3301      	adds	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f47f aed0 	bne.w	80019d4 <HAL_GPIO_Init+0x14>
  }
}
 8001c34:	bf00      	nop
 8001c36:	372c      	adds	r7, #44	; 0x2c
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	10210000 	.word	0x10210000
 8001c44:	10110000 	.word	0x10110000
 8001c48:	10120000 	.word	0x10120000
 8001c4c:	10310000 	.word	0x10310000
 8001c50:	10320000 	.word	0x10320000
 8001c54:	10220000 	.word	0x10220000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40010800 	.word	0x40010800
 8001c64:	40010c00 	.word	0x40010c00
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	40011400 	.word	0x40011400
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
 8001c80:	4613      	mov	r3, r2
 8001c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c84:	787b      	ldrb	r3, [r7, #1]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8a:	887a      	ldrh	r2, [r7, #2]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c90:	e003      	b.n	8001c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c92:	887b      	ldrh	r3, [r7, #2]
 8001c94:	041a      	lsls	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	611a      	str	r2, [r3, #16]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e02b      	b.n	8001d0e <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f245 5255 	movw	r2, #21845	; 0x5555
 8001cc8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6852      	ldr	r2, [r2, #4]
 8001cd2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6892      	ldr	r2, [r2, #8]
 8001cdc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001cde:	f7ff fb69 	bl	80013b4 <HAL_GetTick>
 8001ce2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001ce4:	e008      	b.n	8001cf8 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001ce6:	f7ff fb65 	bl	80013b4 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b26      	cmp	r3, #38	; 0x26
 8001cf2:	d901      	bls.n	8001cf8 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e00a      	b.n	8001d0e <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f1      	bne.n	8001ce6 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e26c      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8087 	beq.w	8001e62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d54:	4b92      	ldr	r3, [pc, #584]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d00c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d60:	4b8f      	ldr	r3, [pc, #572]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d112      	bne.n	8001d92 <HAL_RCC_OscConfig+0x5e>
 8001d6c:	4b8c      	ldr	r3, [pc, #560]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d78:	d10b      	bne.n	8001d92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d06c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x12c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d168      	bne.n	8001e60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e246      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x76>
 8001d9c:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a7f      	ldr	r2, [pc, #508]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	e02e      	b.n	8001e08 <HAL_RCC_OscConfig+0xd4>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x98>
 8001db2:	4b7b      	ldr	r3, [pc, #492]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7a      	ldr	r2, [pc, #488]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a77      	ldr	r2, [pc, #476]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e01d      	b.n	8001e08 <HAL_RCC_OscConfig+0xd4>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0xbc>
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a71      	ldr	r2, [pc, #452]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6e      	ldr	r2, [pc, #440]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0xd4>
 8001df0:	4b6b      	ldr	r3, [pc, #428]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a6a      	ldr	r2, [pc, #424]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a67      	ldr	r2, [pc, #412]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fad0 	bl	80013b4 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff facc 	bl	80013b4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e1fa      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0xe4>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fabc 	bl	80013b4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fab8 	bl	80013b4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1e6      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x10c>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e6e:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e7a:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x18c>
 8001e86:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x176>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1ba      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4939      	ldr	r1, [pc, #228]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e03a      	b.n	8001f36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fa71 	bl	80013b4 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fa6d 	bl	80013b4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e19b      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4927      	ldr	r1, [pc, #156]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fa50 	bl	80013b4 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff fa4c 	bl	80013b4 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e17a      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d03a      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d019      	beq.n	8001f7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f50:	f7ff fa30 	bl	80013b4 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fa2c 	bl	80013b4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e15a      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f76:	2001      	movs	r0, #1
 8001f78:	f000 fada 	bl	8002530 <RCC_Delay>
 8001f7c:	e01c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_RCC_OscConfig+0x274>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f84:	f7ff fa16 	bl	80013b4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8a:	e00f      	b.n	8001fac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fa12 	bl	80013b4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d908      	bls.n	8001fac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e140      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	42420000 	.word	0x42420000
 8001fa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fac:	4b9e      	ldr	r3, [pc, #632]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e9      	bne.n	8001f8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80a6 	beq.w	8002112 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fca:	4b97      	ldr	r3, [pc, #604]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b94      	ldr	r3, [pc, #592]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a93      	ldr	r2, [pc, #588]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b91      	ldr	r3, [pc, #580]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff2:	4b8e      	ldr	r3, [pc, #568]	; (800222c <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffe:	4b8b      	ldr	r3, [pc, #556]	; (800222c <HAL_RCC_OscConfig+0x4f8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a8a      	ldr	r2, [pc, #552]	; (800222c <HAL_RCC_OscConfig+0x4f8>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200a:	f7ff f9d3 	bl	80013b4 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7ff f9cf 	bl	80013b4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	; 0x64
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0fd      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	4b81      	ldr	r3, [pc, #516]	; (800222c <HAL_RCC_OscConfig+0x4f8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x312>
 8002038:	4b7b      	ldr	r3, [pc, #492]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4a7a      	ldr	r2, [pc, #488]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6213      	str	r3, [r2, #32]
 8002044:	e02d      	b.n	80020a2 <HAL_RCC_OscConfig+0x36e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x334>
 800204e:	4b76      	ldr	r3, [pc, #472]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a75      	ldr	r2, [pc, #468]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6213      	str	r3, [r2, #32]
 800205a:	4b73      	ldr	r3, [pc, #460]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a72      	ldr	r2, [pc, #456]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	e01c      	b.n	80020a2 <HAL_RCC_OscConfig+0x36e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b05      	cmp	r3, #5
 800206e:	d10c      	bne.n	800208a <HAL_RCC_OscConfig+0x356>
 8002070:	4b6d      	ldr	r3, [pc, #436]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4a6c      	ldr	r2, [pc, #432]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	6213      	str	r3, [r2, #32]
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4a69      	ldr	r2, [pc, #420]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6213      	str	r3, [r2, #32]
 8002088:	e00b      	b.n	80020a2 <HAL_RCC_OscConfig+0x36e>
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a66      	ldr	r2, [pc, #408]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6213      	str	r3, [r2, #32]
 8002096:	4b64      	ldr	r3, [pc, #400]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a63      	ldr	r2, [pc, #396]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d015      	beq.n	80020d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7ff f983 	bl	80013b4 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7ff f97f 	bl	80013b4 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0ab      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c8:	4b57      	ldr	r3, [pc, #348]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ee      	beq.n	80020b2 <HAL_RCC_OscConfig+0x37e>
 80020d4:	e014      	b.n	8002100 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7ff f96d 	bl	80013b4 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7ff f969 	bl	80013b4 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e095      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f4:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ee      	bne.n	80020de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d105      	bne.n	8002112 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002106:	4b48      	ldr	r3, [pc, #288]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a47      	ldr	r2, [pc, #284]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002110:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8081 	beq.w	800221e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800211c:	4b42      	ldr	r3, [pc, #264]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b08      	cmp	r3, #8
 8002126:	d061      	beq.n	80021ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d146      	bne.n	80021be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002130:	4b3f      	ldr	r3, [pc, #252]	; (8002230 <HAL_RCC_OscConfig+0x4fc>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7ff f93d 	bl	80013b4 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7ff f939 	bl	80013b4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e067      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d108      	bne.n	8002178 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002166:	4b30      	ldr	r3, [pc, #192]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	492d      	ldr	r1, [pc, #180]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002178:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a19      	ldr	r1, [r3, #32]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	430b      	orrs	r3, r1
 800218a:	4927      	ldr	r1, [pc, #156]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <HAL_RCC_OscConfig+0x4fc>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002196:	f7ff f90d 	bl	80013b4 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219e:	f7ff f909 	bl	80013b4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e037      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x46a>
 80021bc:	e02f      	b.n	800221e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <HAL_RCC_OscConfig+0x4fc>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f8f6 	bl	80013b4 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7ff f8f2 	bl	80013b4 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e020      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x498>
 80021ea:	e018      	b.n	800221e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e013      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	429a      	cmp	r2, r3
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	40007000 	.word	0x40007000
 8002230:	42420060 	.word	0x42420060

08002234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0d0      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002248:	4b6a      	ldr	r3, [pc, #424]	; (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d910      	bls.n	8002278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b67      	ldr	r3, [pc, #412]	; (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0207 	bic.w	r2, r3, #7
 800225e:	4965      	ldr	r1, [pc, #404]	; (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b8      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002290:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800229a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a8:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a52      	ldr	r2, [pc, #328]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	494d      	ldr	r1, [pc, #308]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d040      	beq.n	8002354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d115      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e07f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f2:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e073      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002302:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e06b      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002312:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f023 0203 	bic.w	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4936      	ldr	r1, [pc, #216]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002324:	f7ff f846 	bl	80013b4 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	e00a      	b.n	8002342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232c:	f7ff f842 	bl	80013b4 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e053      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 020c 	and.w	r2, r3, #12
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	429a      	cmp	r2, r3
 8002352:	d1eb      	bne.n	800232c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d210      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0207 	bic.w	r2, r3, #7
 800236a:	4922      	ldr	r1, [pc, #136]	; (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e032      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4916      	ldr	r1, [pc, #88]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	490e      	ldr	r1, [pc, #56]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023c2:	f000 f821 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023c6:	4601      	mov	r1, r0
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	5cd3      	ldrb	r3, [r2, r3]
 80023d6:	fa21 f303 	lsr.w	r3, r1, r3
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x1cc>)
 80023dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_ClockConfig+0x1d0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe ffa4 	bl	8001330 <HAL_InitTick>

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40022000 	.word	0x40022000
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08005d0c 	.word	0x08005d0c
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004

08002408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	b490      	push	{r4, r7}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800240e:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002410:	1d3c      	adds	r4, r7, #4
 8002412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b04      	cmp	r3, #4
 8002440:	d002      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x40>
 8002442:	2b08      	cmp	r3, #8
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x46>
 8002446:	e02d      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800244a:	623b      	str	r3, [r7, #32]
      break;
 800244c:	e02d      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	0c9b      	lsrs	r3, r3, #18
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800245a:	4413      	add	r3, r2
 800245c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002460:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	0c5b      	lsrs	r3, r3, #17
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800247a:	4413      	add	r3, r2
 800247c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002480:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002486:	fb02 f203 	mul.w	r2, r2, r3
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
 8002492:	e004      	b.n	800249e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	4a0c      	ldr	r2, [pc, #48]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	623b      	str	r3, [r7, #32]
      break;
 80024a2:	e002      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024a6:	623b      	str	r3, [r7, #32]
      break;
 80024a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024aa:	6a3b      	ldr	r3, [r7, #32]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3728      	adds	r7, #40	; 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc90      	pop	{r4, r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	080044f8 	.word	0x080044f8
 80024bc:	08004508 	.word	0x08004508
 80024c0:	40021000 	.word	0x40021000
 80024c4:	007a1200 	.word	0x007a1200
 80024c8:	003d0900 	.word	0x003d0900

080024cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <HAL_RCC_GetHCLKFreq+0x10>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	20000000 	.word	0x20000000

080024e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024e4:	f7ff fff2 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024e8:	4601      	mov	r1, r0
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4a03      	ldr	r2, [pc, #12]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	08005d1c 	.word	0x08005d1c

08002508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800250c:	f7ff ffde 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002510:	4601      	mov	r1, r0
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	0adb      	lsrs	r3, r3, #11
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4a03      	ldr	r2, [pc, #12]	; (800252c <HAL_RCC_GetPCLK2Freq+0x24>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	08005d1c 	.word	0x08005d1c

08002530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <RCC_Delay+0x34>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <RCC_Delay+0x38>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0a5b      	lsrs	r3, r3, #9
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800254c:	bf00      	nop
  }
  while (Delay --);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f9      	bne.n	800254c <RCC_Delay+0x1c>
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000000 	.word	0x20000000
 8002568:	10624dd3 	.word	0x10624dd3

0800256c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e076      	b.n	800266c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d108      	bne.n	8002598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800258e:	d009      	beq.n	80025a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
 8002596:	e005      	b.n	80025a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe fca0 	bl	8000f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002628:	ea42 0103 	orr.w	r1, r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	0c1a      	lsrs	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f002 0204 	and.w	r2, r2, #4
 800264a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e041      	b.n	800270a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe fc7c 	bl	8000f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f000 fc8e 	bl	8002fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d001      	beq.n	800272c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e032      	b.n	8002792 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_TIM_Base_Start+0x88>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00e      	beq.n	800275c <HAL_TIM_Base_Start+0x48>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002746:	d009      	beq.n	800275c <HAL_TIM_Base_Start+0x48>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <HAL_TIM_Base_Start+0x8c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_TIM_Base_Start+0x48>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <HAL_TIM_Base_Start+0x90>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d111      	bne.n	8002780 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b06      	cmp	r3, #6
 800276c:	d010      	beq.n	8002790 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0201 	orr.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277e:	e007      	b.n	8002790 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40000800 	.word	0x40000800

080027a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6a1a      	ldr	r2, [r3, #32]
 80027b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10f      	bne.n	80027e0 <HAL_TIM_Base_Stop+0x38>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a1a      	ldr	r2, [r3, #32]
 80027c6:	f240 4344 	movw	r3, #1092	; 0x444
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d107      	bne.n	80027e0 <HAL_TIM_Base_Stop+0x38>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d001      	beq.n	800280c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e03a      	b.n	8002882 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_TIM_Base_Start_IT+0x98>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00e      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x58>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002836:	d009      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x58>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a14      	ldr	r2, [pc, #80]	; (8002890 <HAL_TIM_Base_Start_IT+0x9c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x58>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a13      	ldr	r2, [pc, #76]	; (8002894 <HAL_TIM_Base_Start_IT+0xa0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d111      	bne.n	8002870 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b06      	cmp	r3, #6
 800285c:	d010      	beq.n	8002880 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0201 	orr.w	r2, r2, #1
 800286c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286e:	e007      	b.n	8002880 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800

08002898 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e041      	b.n	800292e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f839 	bl	8002936 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f000 fb7c 	bl	8002fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e041      	b.n	80029e0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d106      	bne.n	8002976 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f839 	bl	80029e8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f000 fb23 	bl	8002fd4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0208 	bic.w	r2, r2, #8
 800299c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d122      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d11b      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f06f 0202 	mvn.w	r2, #2
 8002a26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 faae 	bl	8002f9e <HAL_TIM_IC_CaptureCallback>
 8002a42:	e005      	b.n	8002a50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 faa1 	bl	8002f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fab0 	bl	8002fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d122      	bne.n	8002aaa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d11b      	bne.n	8002aaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0204 	mvn.w	r2, #4
 8002a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fa84 	bl	8002f9e <HAL_TIM_IC_CaptureCallback>
 8002a96:	e005      	b.n	8002aa4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fa77 	bl	8002f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fa86 	bl	8002fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d122      	bne.n	8002afe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d11b      	bne.n	8002afe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f06f 0208 	mvn.w	r2, #8
 8002ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fa5a 	bl	8002f9e <HAL_TIM_IC_CaptureCallback>
 8002aea:	e005      	b.n	8002af8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fa4d 	bl	8002f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa5c 	bl	8002fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d122      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d11b      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0210 	mvn.w	r2, #16
 8002b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2208      	movs	r2, #8
 8002b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fa30 	bl	8002f9e <HAL_TIM_IC_CaptureCallback>
 8002b3e:	e005      	b.n	8002b4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa23 	bl	8002f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa32 	bl	8002fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10e      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0201 	mvn.w	r2, #1
 8002b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f9fe 	bl	8002f7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b80      	cmp	r3, #128	; 0x80
 8002b8a:	d10e      	bne.n	8002baa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	2b80      	cmp	r3, #128	; 0x80
 8002b98:	d107      	bne.n	8002baa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fdf7 	bl	8003798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
 8002bc4:	d107      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f9f6 	bl	8002fc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d10e      	bne.n	8002c02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d107      	bne.n	8002c02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f06f 0220 	mvn.w	r2, #32
 8002bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fdc2 	bl	8003786 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0ac      	b.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	f200 809f 	bhi.w	8002d74 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c36:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c71 	.word	0x08002c71
 8002c40:	08002d75 	.word	0x08002d75
 8002c44:	08002d75 	.word	0x08002d75
 8002c48:	08002d75 	.word	0x08002d75
 8002c4c:	08002cb1 	.word	0x08002cb1
 8002c50:	08002d75 	.word	0x08002d75
 8002c54:	08002d75 	.word	0x08002d75
 8002c58:	08002d75 	.word	0x08002d75
 8002c5c:	08002cf3 	.word	0x08002cf3
 8002c60:	08002d75 	.word	0x08002d75
 8002c64:	08002d75 	.word	0x08002d75
 8002c68:	08002d75 	.word	0x08002d75
 8002c6c:	08002d33 	.word	0x08002d33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fa0e 	bl	8003098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0208 	orr.w	r2, r2, #8
 8002c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6999      	ldr	r1, [r3, #24]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	619a      	str	r2, [r3, #24]
      break;
 8002cae:	e062      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fa54 	bl	8003164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6999      	ldr	r1, [r3, #24]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	021a      	lsls	r2, r3, #8
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	619a      	str	r2, [r3, #24]
      break;
 8002cf0:	e041      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fa9d 	bl	8003238 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0208 	orr.w	r2, r2, #8
 8002d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0204 	bic.w	r2, r2, #4
 8002d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69d9      	ldr	r1, [r3, #28]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	61da      	str	r2, [r3, #28]
      break;
 8002d30:	e021      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fae7 	bl	800330c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69d9      	ldr	r1, [r3, #28]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	021a      	lsls	r2, r3, #8
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	61da      	str	r2, [r3, #28]
      break;
 8002d72:	e000      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_TIM_ConfigClockSource+0x18>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e0a6      	b.n	8002eee <HAL_TIM_ConfigClockSource+0x166>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d067      	beq.n	8002ea8 <HAL_TIM_ConfigClockSource+0x120>
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	d80b      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x6c>
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d073      	beq.n	8002ec8 <HAL_TIM_ConfigClockSource+0x140>
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d802      	bhi.n	8002dea <HAL_TIM_ConfigClockSource+0x62>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d06f      	beq.n	8002ec8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002de8:	e078      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d06c      	beq.n	8002ec8 <HAL_TIM_ConfigClockSource+0x140>
 8002dee:	2b30      	cmp	r3, #48	; 0x30
 8002df0:	d06a      	beq.n	8002ec8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002df2:	e073      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002df4:	2b70      	cmp	r3, #112	; 0x70
 8002df6:	d00d      	beq.n	8002e14 <HAL_TIM_ConfigClockSource+0x8c>
 8002df8:	2b70      	cmp	r3, #112	; 0x70
 8002dfa:	d804      	bhi.n	8002e06 <HAL_TIM_ConfigClockSource+0x7e>
 8002dfc:	2b50      	cmp	r3, #80	; 0x50
 8002dfe:	d033      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0xe0>
 8002e00:	2b60      	cmp	r3, #96	; 0x60
 8002e02:	d041      	beq.n	8002e88 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e04:	e06a      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0a:	d066      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x152>
 8002e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e10:	d017      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e12:	e063      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	6899      	ldr	r1, [r3, #8]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f000 fbbd 	bl	80035a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	609a      	str	r2, [r3, #8]
      break;
 8002e40:	e04c      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f000 fba6 	bl	80035a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e64:	609a      	str	r2, [r3, #8]
      break;
 8002e66:	e039      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f000 fb1d 	bl	80034b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2150      	movs	r1, #80	; 0x50
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fb74 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002e86:	e029      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	461a      	mov	r2, r3
 8002e96:	f000 fb3b 	bl	8003510 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2160      	movs	r1, #96	; 0x60
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fb64 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002ea6:	e019      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f000 fafd 	bl	80034b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2140      	movs	r1, #64	; 0x40
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fb54 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002ec6:	e009      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f000 fb4b 	bl	800356e <TIM_ITRx_SetConfig>
        break;
 8002ed8:	e000      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_SlaveConfigSynchro+0x18>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e031      	b.n	8002f72 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002f1e:	6839      	ldr	r1, [r7, #0]
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fa41 	bl	80033a8 <TIM_SlaveTimer_SetConfig>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e018      	b.n	8002f72 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f4e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f5e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a29      	ldr	r2, [pc, #164]	; (800308c <TIM_Base_SetConfig+0xb8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00b      	beq.n	8003004 <TIM_Base_SetConfig+0x30>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff2:	d007      	beq.n	8003004 <TIM_Base_SetConfig+0x30>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a26      	ldr	r2, [pc, #152]	; (8003090 <TIM_Base_SetConfig+0xbc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d003      	beq.n	8003004 <TIM_Base_SetConfig+0x30>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a25      	ldr	r2, [pc, #148]	; (8003094 <TIM_Base_SetConfig+0xc0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d108      	bne.n	8003016 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a1c      	ldr	r2, [pc, #112]	; (800308c <TIM_Base_SetConfig+0xb8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00b      	beq.n	8003036 <TIM_Base_SetConfig+0x62>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003024:	d007      	beq.n	8003036 <TIM_Base_SetConfig+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <TIM_Base_SetConfig+0xbc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d003      	beq.n	8003036 <TIM_Base_SetConfig+0x62>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a18      	ldr	r2, [pc, #96]	; (8003094 <TIM_Base_SetConfig+0xc0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d108      	bne.n	8003048 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <TIM_Base_SetConfig+0xb8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d103      	bne.n	800307c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	615a      	str	r2, [r3, #20]
}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800

08003098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f023 0302 	bic.w	r3, r3, #2
 80030e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <TIM_OC1_SetConfig+0xc8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d10c      	bne.n	800310e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0308 	bic.w	r3, r3, #8
 80030fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f023 0304 	bic.w	r3, r3, #4
 800310c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a13      	ldr	r2, [pc, #76]	; (8003160 <TIM_OC1_SetConfig+0xc8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d111      	bne.n	800313a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	621a      	str	r2, [r3, #32]
}
 8003154:	bf00      	nop
 8003156:	371c      	adds	r7, #28
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40012c00 	.word	0x40012c00

08003164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f023 0210 	bic.w	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0320 	bic.w	r3, r3, #32
 80031ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <TIM_OC2_SetConfig+0xd0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d10d      	bne.n	80031e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a14      	ldr	r2, [pc, #80]	; (8003234 <TIM_OC2_SetConfig+0xd0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d113      	bne.n	8003210 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	40012c00 	.word	0x40012c00

08003238 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <TIM_OC3_SetConfig+0xd0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10d      	bne.n	80032b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800329c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a14      	ldr	r2, [pc, #80]	; (8003308 <TIM_OC3_SetConfig+0xd0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d113      	bne.n	80032e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	621a      	str	r2, [r3, #32]
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40012c00 	.word	0x40012c00

0800330c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	031b      	lsls	r3, r3, #12
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <TIM_OC4_SetConfig+0x98>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d109      	bne.n	8003380 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	019b      	lsls	r3, r3, #6
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	40012c00 	.word	0x40012c00

080033a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0307 	bic.w	r3, r3, #7
 80033d2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b30      	cmp	r3, #48	; 0x30
 80033ec:	d05c      	beq.n	80034a8 <TIM_SlaveTimer_SetConfig+0x100>
 80033ee:	2b30      	cmp	r3, #48	; 0x30
 80033f0:	d806      	bhi.n	8003400 <TIM_SlaveTimer_SetConfig+0x58>
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d058      	beq.n	80034a8 <TIM_SlaveTimer_SetConfig+0x100>
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d056      	beq.n	80034a8 <TIM_SlaveTimer_SetConfig+0x100>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d054      	beq.n	80034a8 <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80033fe:	e054      	b.n	80034aa <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003400:	2b50      	cmp	r3, #80	; 0x50
 8003402:	d03d      	beq.n	8003480 <TIM_SlaveTimer_SetConfig+0xd8>
 8003404:	2b50      	cmp	r3, #80	; 0x50
 8003406:	d802      	bhi.n	800340e <TIM_SlaveTimer_SetConfig+0x66>
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	d010      	beq.n	800342e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800340c:	e04d      	b.n	80034aa <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800340e:	2b60      	cmp	r3, #96	; 0x60
 8003410:	d040      	beq.n	8003494 <TIM_SlaveTimer_SetConfig+0xec>
 8003412:	2b70      	cmp	r3, #112	; 0x70
 8003414:	d000      	beq.n	8003418 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003416:	e048      	b.n	80034aa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68d9      	ldr	r1, [r3, #12]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f000 f8bb 	bl	80035a2 <TIM_ETR_SetConfig>
      break;
 800342c:	e03d      	b.n	80034aa <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b05      	cmp	r3, #5
 8003434:	d101      	bne.n	800343a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e038      	b.n	80034ac <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a1a      	ldr	r2, [r3, #32]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003460:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	621a      	str	r2, [r3, #32]
      break;
 800347e:	e014      	b.n	80034aa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6899      	ldr	r1, [r3, #8]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	461a      	mov	r2, r3
 800348e:	f000 f811 	bl	80034b4 <TIM_TI1_ConfigInputStage>
      break;
 8003492:	e00a      	b.n	80034aa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6899      	ldr	r1, [r3, #8]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	461a      	mov	r2, r3
 80034a2:	f000 f835 	bl	8003510 <TIM_TI2_ConfigInputStage>
      break;
 80034a6:	e000      	b.n	80034aa <TIM_SlaveTimer_SetConfig+0x102>
        break;
 80034a8:	bf00      	nop
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f023 0201 	bic.w	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 030a 	bic.w	r3, r3, #10
 80034f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f023 0210 	bic.w	r2, r3, #16
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800353a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	031b      	lsls	r3, r3, #12
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800354c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	621a      	str	r2, [r3, #32]
}
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	f043 0307 	orr.w	r3, r3, #7
 8003590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b087      	sub	sp, #28
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	021a      	lsls	r2, r3, #8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	609a      	str	r2, [r3, #8]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	2201      	movs	r2, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	43db      	mvns	r3, r3
 8003602:	401a      	ands	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800363c:	2302      	movs	r3, #2
 800363e:	e046      	b.n	80036ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d009      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a12      	ldr	r2, [pc, #72]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10c      	bne.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800

080036e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e03d      	b.n	800377c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e03f      	b.n	800383c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d106      	bne.n	80037d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7fd fc89 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2224      	movs	r2, #36	; 0x24
 80037da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f904 	bl	80039fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003802:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003812:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003822:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b20      	cmp	r3, #32
 8003862:	d17c      	bne.n	800395e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_UART_Transmit+0x2c>
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e075      	b.n	8003960 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_UART_Transmit+0x3e>
 800387e:	2302      	movs	r3, #2
 8003880:	e06e      	b.n	8003960 <HAL_UART_Transmit+0x11c>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2221      	movs	r2, #33	; 0x21
 8003894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003898:	f7fd fd8c 	bl	80013b4 <HAL_GetTick>
 800389c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	88fa      	ldrh	r2, [r7, #6]
 80038a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b2:	d108      	bne.n	80038c6 <HAL_UART_Transmit+0x82>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d104      	bne.n	80038c6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	e003      	b.n	80038ce <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80038d6:	e02a      	b.n	800392e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2200      	movs	r2, #0
 80038e0:	2180      	movs	r1, #128	; 0x80
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f840 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e036      	b.n	8003960 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003906:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	3302      	adds	r3, #2
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	e007      	b.n	8003920 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	781a      	ldrb	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3301      	adds	r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1cf      	bne.n	80038d8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f810 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e006      	b.n	8003960 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003978:	e02c      	b.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003980:	d028      	beq.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x30>
 8003988:	f7fd fd14 	bl	80013b4 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	429a      	cmp	r2, r3
 8003996:	d21d      	bcs.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e00f      	b.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4013      	ands	r3, r2
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d0c3      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a36:	f023 030c 	bic.w	r3, r3, #12
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	430b      	orrs	r3, r1
 8003a42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <UART_SetConfig+0x114>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d103      	bne.n	8003a6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a64:	f7fe fd50 	bl	8002508 <HAL_RCC_GetPCLK2Freq>
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	e002      	b.n	8003a72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a6c:	f7fe fd38 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003a70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009a      	lsls	r2, r3, #2
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <UART_SetConfig+0x118>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	0119      	lsls	r1, r3, #4
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009a      	lsls	r2, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <UART_SetConfig+0x118>)
 8003aaa:	fba3 0302 	umull	r0, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2064      	movs	r0, #100	; 0x64
 8003ab2:	fb00 f303 	mul.w	r3, r0, r3
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	3332      	adds	r3, #50	; 0x32
 8003abc:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <UART_SetConfig+0x118>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac8:	4419      	add	r1, r3
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009a      	lsls	r2, r3, #2
 8003ad4:	441a      	add	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <UART_SetConfig+0x118>)
 8003ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2064      	movs	r0, #100	; 0x64
 8003aea:	fb00 f303 	mul.w	r3, r0, r3
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	3332      	adds	r3, #50	; 0x32
 8003af4:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <UART_SetConfig+0x118>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	440a      	add	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40013800 	.word	0x40013800
 8003b14:	51eb851f 	.word	0x51eb851f

08003b18 <_Znaj>:
 8003b18:	f000 b800 	b.w	8003b1c <_Znwj>

08003b1c <_Znwj>:
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	bf14      	ite	ne
 8003b22:	4604      	movne	r4, r0
 8003b24:	2401      	moveq	r4, #1
 8003b26:	4620      	mov	r0, r4
 8003b28:	f000 f844 	bl	8003bb4 <malloc>
 8003b2c:	b930      	cbnz	r0, 8003b3c <_Znwj+0x20>
 8003b2e:	f000 f807 	bl	8003b40 <_ZSt15get_new_handlerv>
 8003b32:	b908      	cbnz	r0, 8003b38 <_Znwj+0x1c>
 8003b34:	f000 f80c 	bl	8003b50 <abort>
 8003b38:	4780      	blx	r0
 8003b3a:	e7f4      	b.n	8003b26 <_Znwj+0xa>
 8003b3c:	bd10      	pop	{r4, pc}
	...

08003b40 <_ZSt15get_new_handlerv>:
 8003b40:	4b02      	ldr	r3, [pc, #8]	; (8003b4c <_ZSt15get_new_handlerv+0xc>)
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	f3bf 8f5b 	dmb	ish
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	200004ac 	.word	0x200004ac

08003b50 <abort>:
 8003b50:	b508      	push	{r3, lr}
 8003b52:	2006      	movs	r0, #6
 8003b54:	f000 f91c 	bl	8003d90 <raise>
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f7fd fb66 	bl	800122a <_exit>
	...

08003b60 <__errno>:
 8003b60:	4b01      	ldr	r3, [pc, #4]	; (8003b68 <__errno+0x8>)
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	2000000c 	.word	0x2000000c

08003b6c <__libc_init_array>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	2500      	movs	r5, #0
 8003b70:	4e0c      	ldr	r6, [pc, #48]	; (8003ba4 <__libc_init_array+0x38>)
 8003b72:	4c0d      	ldr	r4, [pc, #52]	; (8003ba8 <__libc_init_array+0x3c>)
 8003b74:	1ba4      	subs	r4, r4, r6
 8003b76:	10a4      	asrs	r4, r4, #2
 8003b78:	42a5      	cmp	r5, r4
 8003b7a:	d109      	bne.n	8003b90 <__libc_init_array+0x24>
 8003b7c:	f000 fc80 	bl	8004480 <_init>
 8003b80:	2500      	movs	r5, #0
 8003b82:	4e0a      	ldr	r6, [pc, #40]	; (8003bac <__libc_init_array+0x40>)
 8003b84:	4c0a      	ldr	r4, [pc, #40]	; (8003bb0 <__libc_init_array+0x44>)
 8003b86:	1ba4      	subs	r4, r4, r6
 8003b88:	10a4      	asrs	r4, r4, #2
 8003b8a:	42a5      	cmp	r5, r4
 8003b8c:	d105      	bne.n	8003b9a <__libc_init_array+0x2e>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b94:	4798      	blx	r3
 8003b96:	3501      	adds	r5, #1
 8003b98:	e7ee      	b.n	8003b78 <__libc_init_array+0xc>
 8003b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b9e:	4798      	blx	r3
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	e7f2      	b.n	8003b8a <__libc_init_array+0x1e>
 8003ba4:	08005d58 	.word	0x08005d58
 8003ba8:	08005d58 	.word	0x08005d58
 8003bac:	08005d58 	.word	0x08005d58
 8003bb0:	08005d60 	.word	0x08005d60

08003bb4 <malloc>:
 8003bb4:	4b02      	ldr	r3, [pc, #8]	; (8003bc0 <malloc+0xc>)
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	f000 b857 	b.w	8003c6c <_malloc_r>
 8003bbe:	bf00      	nop
 8003bc0:	2000000c 	.word	0x2000000c

08003bc4 <memset>:
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4402      	add	r2, r0
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d100      	bne.n	8003bce <memset+0xa>
 8003bcc:	4770      	bx	lr
 8003bce:	f803 1b01 	strb.w	r1, [r3], #1
 8003bd2:	e7f9      	b.n	8003bc8 <memset+0x4>

08003bd4 <_free_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	2900      	cmp	r1, #0
 8003bda:	d043      	beq.n	8003c64 <_free_r+0x90>
 8003bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003be0:	1f0c      	subs	r4, r1, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bfb8      	it	lt
 8003be6:	18e4      	addlt	r4, r4, r3
 8003be8:	f000 f90e 	bl	8003e08 <__malloc_lock>
 8003bec:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <_free_r+0x94>)
 8003bee:	6813      	ldr	r3, [r2, #0]
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	b933      	cbnz	r3, 8003c02 <_free_r+0x2e>
 8003bf4:	6063      	str	r3, [r4, #4]
 8003bf6:	6014      	str	r4, [r2, #0]
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bfe:	f000 b904 	b.w	8003e0a <__malloc_unlock>
 8003c02:	42a3      	cmp	r3, r4
 8003c04:	d90b      	bls.n	8003c1e <_free_r+0x4a>
 8003c06:	6821      	ldr	r1, [r4, #0]
 8003c08:	1862      	adds	r2, r4, r1
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	bf01      	itttt	eq
 8003c0e:	681a      	ldreq	r2, [r3, #0]
 8003c10:	685b      	ldreq	r3, [r3, #4]
 8003c12:	1852      	addeq	r2, r2, r1
 8003c14:	6022      	streq	r2, [r4, #0]
 8003c16:	6063      	str	r3, [r4, #4]
 8003c18:	6004      	str	r4, [r0, #0]
 8003c1a:	e7ed      	b.n	8003bf8 <_free_r+0x24>
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	b10a      	cbz	r2, 8003c26 <_free_r+0x52>
 8003c22:	42a2      	cmp	r2, r4
 8003c24:	d9fa      	bls.n	8003c1c <_free_r+0x48>
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	1858      	adds	r0, r3, r1
 8003c2a:	42a0      	cmp	r0, r4
 8003c2c:	d10b      	bne.n	8003c46 <_free_r+0x72>
 8003c2e:	6820      	ldr	r0, [r4, #0]
 8003c30:	4401      	add	r1, r0
 8003c32:	1858      	adds	r0, r3, r1
 8003c34:	4282      	cmp	r2, r0
 8003c36:	6019      	str	r1, [r3, #0]
 8003c38:	d1de      	bne.n	8003bf8 <_free_r+0x24>
 8003c3a:	6810      	ldr	r0, [r2, #0]
 8003c3c:	6852      	ldr	r2, [r2, #4]
 8003c3e:	4401      	add	r1, r0
 8003c40:	6019      	str	r1, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	e7d8      	b.n	8003bf8 <_free_r+0x24>
 8003c46:	d902      	bls.n	8003c4e <_free_r+0x7a>
 8003c48:	230c      	movs	r3, #12
 8003c4a:	602b      	str	r3, [r5, #0]
 8003c4c:	e7d4      	b.n	8003bf8 <_free_r+0x24>
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	1821      	adds	r1, r4, r0
 8003c52:	428a      	cmp	r2, r1
 8003c54:	bf01      	itttt	eq
 8003c56:	6811      	ldreq	r1, [r2, #0]
 8003c58:	6852      	ldreq	r2, [r2, #4]
 8003c5a:	1809      	addeq	r1, r1, r0
 8003c5c:	6021      	streq	r1, [r4, #0]
 8003c5e:	6062      	str	r2, [r4, #4]
 8003c60:	605c      	str	r4, [r3, #4]
 8003c62:	e7c9      	b.n	8003bf8 <_free_r+0x24>
 8003c64:	bd38      	pop	{r3, r4, r5, pc}
 8003c66:	bf00      	nop
 8003c68:	200004b0 	.word	0x200004b0

08003c6c <_malloc_r>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	1ccd      	adds	r5, r1, #3
 8003c70:	f025 0503 	bic.w	r5, r5, #3
 8003c74:	3508      	adds	r5, #8
 8003c76:	2d0c      	cmp	r5, #12
 8003c78:	bf38      	it	cc
 8003c7a:	250c      	movcc	r5, #12
 8003c7c:	2d00      	cmp	r5, #0
 8003c7e:	4606      	mov	r6, r0
 8003c80:	db01      	blt.n	8003c86 <_malloc_r+0x1a>
 8003c82:	42a9      	cmp	r1, r5
 8003c84:	d903      	bls.n	8003c8e <_malloc_r+0x22>
 8003c86:	230c      	movs	r3, #12
 8003c88:	6033      	str	r3, [r6, #0]
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
 8003c8e:	f000 f8bb 	bl	8003e08 <__malloc_lock>
 8003c92:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <_malloc_r+0xac>)
 8003c94:	6814      	ldr	r4, [r2, #0]
 8003c96:	4621      	mov	r1, r4
 8003c98:	b991      	cbnz	r1, 8003cc0 <_malloc_r+0x54>
 8003c9a:	4c20      	ldr	r4, [pc, #128]	; (8003d1c <_malloc_r+0xb0>)
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	b91b      	cbnz	r3, 8003ca8 <_malloc_r+0x3c>
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f000 f83d 	bl	8003d20 <_sbrk_r>
 8003ca6:	6020      	str	r0, [r4, #0]
 8003ca8:	4629      	mov	r1, r5
 8003caa:	4630      	mov	r0, r6
 8003cac:	f000 f838 	bl	8003d20 <_sbrk_r>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d124      	bne.n	8003cfe <_malloc_r+0x92>
 8003cb4:	230c      	movs	r3, #12
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	6033      	str	r3, [r6, #0]
 8003cba:	f000 f8a6 	bl	8003e0a <__malloc_unlock>
 8003cbe:	e7e4      	b.n	8003c8a <_malloc_r+0x1e>
 8003cc0:	680b      	ldr	r3, [r1, #0]
 8003cc2:	1b5b      	subs	r3, r3, r5
 8003cc4:	d418      	bmi.n	8003cf8 <_malloc_r+0x8c>
 8003cc6:	2b0b      	cmp	r3, #11
 8003cc8:	d90f      	bls.n	8003cea <_malloc_r+0x7e>
 8003cca:	600b      	str	r3, [r1, #0]
 8003ccc:	18cc      	adds	r4, r1, r3
 8003cce:	50cd      	str	r5, [r1, r3]
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f000 f89a 	bl	8003e0a <__malloc_unlock>
 8003cd6:	f104 000b 	add.w	r0, r4, #11
 8003cda:	1d23      	adds	r3, r4, #4
 8003cdc:	f020 0007 	bic.w	r0, r0, #7
 8003ce0:	1ac3      	subs	r3, r0, r3
 8003ce2:	d0d3      	beq.n	8003c8c <_malloc_r+0x20>
 8003ce4:	425a      	negs	r2, r3
 8003ce6:	50e2      	str	r2, [r4, r3]
 8003ce8:	e7d0      	b.n	8003c8c <_malloc_r+0x20>
 8003cea:	684b      	ldr	r3, [r1, #4]
 8003cec:	428c      	cmp	r4, r1
 8003cee:	bf16      	itet	ne
 8003cf0:	6063      	strne	r3, [r4, #4]
 8003cf2:	6013      	streq	r3, [r2, #0]
 8003cf4:	460c      	movne	r4, r1
 8003cf6:	e7eb      	b.n	8003cd0 <_malloc_r+0x64>
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	6849      	ldr	r1, [r1, #4]
 8003cfc:	e7cc      	b.n	8003c98 <_malloc_r+0x2c>
 8003cfe:	1cc4      	adds	r4, r0, #3
 8003d00:	f024 0403 	bic.w	r4, r4, #3
 8003d04:	42a0      	cmp	r0, r4
 8003d06:	d005      	beq.n	8003d14 <_malloc_r+0xa8>
 8003d08:	1a21      	subs	r1, r4, r0
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	f000 f808 	bl	8003d20 <_sbrk_r>
 8003d10:	3001      	adds	r0, #1
 8003d12:	d0cf      	beq.n	8003cb4 <_malloc_r+0x48>
 8003d14:	6025      	str	r5, [r4, #0]
 8003d16:	e7db      	b.n	8003cd0 <_malloc_r+0x64>
 8003d18:	200004b0 	.word	0x200004b0
 8003d1c:	200004b4 	.word	0x200004b4

08003d20 <_sbrk_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	2300      	movs	r3, #0
 8003d24:	4c05      	ldr	r4, [pc, #20]	; (8003d3c <_sbrk_r+0x1c>)
 8003d26:	4605      	mov	r5, r0
 8003d28:	4608      	mov	r0, r1
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	f7fd fa88 	bl	8001240 <_sbrk>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d102      	bne.n	8003d3a <_sbrk_r+0x1a>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	b103      	cbz	r3, 8003d3a <_sbrk_r+0x1a>
 8003d38:	602b      	str	r3, [r5, #0]
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	2000067c 	.word	0x2000067c

08003d40 <_raise_r>:
 8003d40:	291f      	cmp	r1, #31
 8003d42:	b538      	push	{r3, r4, r5, lr}
 8003d44:	4604      	mov	r4, r0
 8003d46:	460d      	mov	r5, r1
 8003d48:	d904      	bls.n	8003d54 <_raise_r+0x14>
 8003d4a:	2316      	movs	r3, #22
 8003d4c:	6003      	str	r3, [r0, #0]
 8003d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d52:	bd38      	pop	{r3, r4, r5, pc}
 8003d54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d56:	b112      	cbz	r2, 8003d5e <_raise_r+0x1e>
 8003d58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d5c:	b94b      	cbnz	r3, 8003d72 <_raise_r+0x32>
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f000 f830 	bl	8003dc4 <_getpid_r>
 8003d64:	462a      	mov	r2, r5
 8003d66:	4601      	mov	r1, r0
 8003d68:	4620      	mov	r0, r4
 8003d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d6e:	f000 b817 	b.w	8003da0 <_kill_r>
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d00a      	beq.n	8003d8c <_raise_r+0x4c>
 8003d76:	1c59      	adds	r1, r3, #1
 8003d78:	d103      	bne.n	8003d82 <_raise_r+0x42>
 8003d7a:	2316      	movs	r3, #22
 8003d7c:	6003      	str	r3, [r0, #0]
 8003d7e:	2001      	movs	r0, #1
 8003d80:	e7e7      	b.n	8003d52 <_raise_r+0x12>
 8003d82:	2400      	movs	r4, #0
 8003d84:	4628      	mov	r0, r5
 8003d86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003d8a:	4798      	blx	r3
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	e7e0      	b.n	8003d52 <_raise_r+0x12>

08003d90 <raise>:
 8003d90:	4b02      	ldr	r3, [pc, #8]	; (8003d9c <raise+0xc>)
 8003d92:	4601      	mov	r1, r0
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	f7ff bfd3 	b.w	8003d40 <_raise_r>
 8003d9a:	bf00      	nop
 8003d9c:	2000000c 	.word	0x2000000c

08003da0 <_kill_r>:
 8003da0:	b538      	push	{r3, r4, r5, lr}
 8003da2:	2300      	movs	r3, #0
 8003da4:	4c06      	ldr	r4, [pc, #24]	; (8003dc0 <_kill_r+0x20>)
 8003da6:	4605      	mov	r5, r0
 8003da8:	4608      	mov	r0, r1
 8003daa:	4611      	mov	r1, r2
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	f7fd fa2c 	bl	800120a <_kill>
 8003db2:	1c43      	adds	r3, r0, #1
 8003db4:	d102      	bne.n	8003dbc <_kill_r+0x1c>
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	b103      	cbz	r3, 8003dbc <_kill_r+0x1c>
 8003dba:	602b      	str	r3, [r5, #0]
 8003dbc:	bd38      	pop	{r3, r4, r5, pc}
 8003dbe:	bf00      	nop
 8003dc0:	2000067c 	.word	0x2000067c

08003dc4 <_getpid_r>:
 8003dc4:	f7fd ba1a 	b.w	80011fc <_getpid>

08003dc8 <siprintf>:
 8003dc8:	b40e      	push	{r1, r2, r3}
 8003dca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dce:	b500      	push	{lr}
 8003dd0:	b09c      	sub	sp, #112	; 0x70
 8003dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8003dd4:	9002      	str	r0, [sp, #8]
 8003dd6:	9006      	str	r0, [sp, #24]
 8003dd8:	9107      	str	r1, [sp, #28]
 8003dda:	9104      	str	r1, [sp, #16]
 8003ddc:	4808      	ldr	r0, [pc, #32]	; (8003e00 <siprintf+0x38>)
 8003dde:	4909      	ldr	r1, [pc, #36]	; (8003e04 <siprintf+0x3c>)
 8003de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003de4:	9105      	str	r1, [sp, #20]
 8003de6:	6800      	ldr	r0, [r0, #0]
 8003de8:	a902      	add	r1, sp, #8
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	f000 f868 	bl	8003ec0 <_svfiprintf_r>
 8003df0:	2200      	movs	r2, #0
 8003df2:	9b02      	ldr	r3, [sp, #8]
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	b01c      	add	sp, #112	; 0x70
 8003df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dfc:	b003      	add	sp, #12
 8003dfe:	4770      	bx	lr
 8003e00:	2000000c 	.word	0x2000000c
 8003e04:	ffff0208 	.word	0xffff0208

08003e08 <__malloc_lock>:
 8003e08:	4770      	bx	lr

08003e0a <__malloc_unlock>:
 8003e0a:	4770      	bx	lr

08003e0c <__ssputs_r>:
 8003e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e10:	688e      	ldr	r6, [r1, #8]
 8003e12:	4682      	mov	sl, r0
 8003e14:	429e      	cmp	r6, r3
 8003e16:	460c      	mov	r4, r1
 8003e18:	4690      	mov	r8, r2
 8003e1a:	4699      	mov	r9, r3
 8003e1c:	d837      	bhi.n	8003e8e <__ssputs_r+0x82>
 8003e1e:	898a      	ldrh	r2, [r1, #12]
 8003e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e24:	d031      	beq.n	8003e8a <__ssputs_r+0x7e>
 8003e26:	2302      	movs	r3, #2
 8003e28:	6825      	ldr	r5, [r4, #0]
 8003e2a:	6909      	ldr	r1, [r1, #16]
 8003e2c:	1a6f      	subs	r7, r5, r1
 8003e2e:	6965      	ldr	r5, [r4, #20]
 8003e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e34:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e38:	f109 0301 	add.w	r3, r9, #1
 8003e3c:	443b      	add	r3, r7
 8003e3e:	429d      	cmp	r5, r3
 8003e40:	bf38      	it	cc
 8003e42:	461d      	movcc	r5, r3
 8003e44:	0553      	lsls	r3, r2, #21
 8003e46:	d530      	bpl.n	8003eaa <__ssputs_r+0x9e>
 8003e48:	4629      	mov	r1, r5
 8003e4a:	f7ff ff0f 	bl	8003c6c <_malloc_r>
 8003e4e:	4606      	mov	r6, r0
 8003e50:	b950      	cbnz	r0, 8003e68 <__ssputs_r+0x5c>
 8003e52:	230c      	movs	r3, #12
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e58:	f8ca 3000 	str.w	r3, [sl]
 8003e5c:	89a3      	ldrh	r3, [r4, #12]
 8003e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e62:	81a3      	strh	r3, [r4, #12]
 8003e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e68:	463a      	mov	r2, r7
 8003e6a:	6921      	ldr	r1, [r4, #16]
 8003e6c:	f000 fab6 	bl	80043dc <memcpy>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	6126      	str	r6, [r4, #16]
 8003e7e:	443e      	add	r6, r7
 8003e80:	6026      	str	r6, [r4, #0]
 8003e82:	464e      	mov	r6, r9
 8003e84:	6165      	str	r5, [r4, #20]
 8003e86:	1bed      	subs	r5, r5, r7
 8003e88:	60a5      	str	r5, [r4, #8]
 8003e8a:	454e      	cmp	r6, r9
 8003e8c:	d900      	bls.n	8003e90 <__ssputs_r+0x84>
 8003e8e:	464e      	mov	r6, r9
 8003e90:	4632      	mov	r2, r6
 8003e92:	4641      	mov	r1, r8
 8003e94:	6820      	ldr	r0, [r4, #0]
 8003e96:	f000 faac 	bl	80043f2 <memmove>
 8003e9a:	68a3      	ldr	r3, [r4, #8]
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	1b9b      	subs	r3, r3, r6
 8003ea0:	60a3      	str	r3, [r4, #8]
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	441e      	add	r6, r3
 8003ea6:	6026      	str	r6, [r4, #0]
 8003ea8:	e7dc      	b.n	8003e64 <__ssputs_r+0x58>
 8003eaa:	462a      	mov	r2, r5
 8003eac:	f000 faba 	bl	8004424 <_realloc_r>
 8003eb0:	4606      	mov	r6, r0
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d1e2      	bne.n	8003e7c <__ssputs_r+0x70>
 8003eb6:	6921      	ldr	r1, [r4, #16]
 8003eb8:	4650      	mov	r0, sl
 8003eba:	f7ff fe8b 	bl	8003bd4 <_free_r>
 8003ebe:	e7c8      	b.n	8003e52 <__ssputs_r+0x46>

08003ec0 <_svfiprintf_r>:
 8003ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec4:	461d      	mov	r5, r3
 8003ec6:	898b      	ldrh	r3, [r1, #12]
 8003ec8:	b09d      	sub	sp, #116	; 0x74
 8003eca:	061f      	lsls	r7, r3, #24
 8003ecc:	4680      	mov	r8, r0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	4616      	mov	r6, r2
 8003ed2:	d50f      	bpl.n	8003ef4 <_svfiprintf_r+0x34>
 8003ed4:	690b      	ldr	r3, [r1, #16]
 8003ed6:	b96b      	cbnz	r3, 8003ef4 <_svfiprintf_r+0x34>
 8003ed8:	2140      	movs	r1, #64	; 0x40
 8003eda:	f7ff fec7 	bl	8003c6c <_malloc_r>
 8003ede:	6020      	str	r0, [r4, #0]
 8003ee0:	6120      	str	r0, [r4, #16]
 8003ee2:	b928      	cbnz	r0, 8003ef0 <_svfiprintf_r+0x30>
 8003ee4:	230c      	movs	r3, #12
 8003ee6:	f8c8 3000 	str.w	r3, [r8]
 8003eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eee:	e0c8      	b.n	8004082 <_svfiprintf_r+0x1c2>
 8003ef0:	2340      	movs	r3, #64	; 0x40
 8003ef2:	6163      	str	r3, [r4, #20]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef8:	2320      	movs	r3, #32
 8003efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003efe:	2330      	movs	r3, #48	; 0x30
 8003f00:	f04f 0b01 	mov.w	fp, #1
 8003f04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f08:	9503      	str	r5, [sp, #12]
 8003f0a:	4637      	mov	r7, r6
 8003f0c:	463d      	mov	r5, r7
 8003f0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f12:	b10b      	cbz	r3, 8003f18 <_svfiprintf_r+0x58>
 8003f14:	2b25      	cmp	r3, #37	; 0x25
 8003f16:	d13e      	bne.n	8003f96 <_svfiprintf_r+0xd6>
 8003f18:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f1c:	d00b      	beq.n	8003f36 <_svfiprintf_r+0x76>
 8003f1e:	4653      	mov	r3, sl
 8003f20:	4632      	mov	r2, r6
 8003f22:	4621      	mov	r1, r4
 8003f24:	4640      	mov	r0, r8
 8003f26:	f7ff ff71 	bl	8003e0c <__ssputs_r>
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	f000 80a4 	beq.w	8004078 <_svfiprintf_r+0x1b8>
 8003f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f32:	4453      	add	r3, sl
 8003f34:	9309      	str	r3, [sp, #36]	; 0x24
 8003f36:	783b      	ldrb	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 809d 	beq.w	8004078 <_svfiprintf_r+0x1b8>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f48:	9304      	str	r3, [sp, #16]
 8003f4a:	9307      	str	r3, [sp, #28]
 8003f4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f50:	931a      	str	r3, [sp, #104]	; 0x68
 8003f52:	462f      	mov	r7, r5
 8003f54:	2205      	movs	r2, #5
 8003f56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003f5a:	4850      	ldr	r0, [pc, #320]	; (800409c <_svfiprintf_r+0x1dc>)
 8003f5c:	f000 fa30 	bl	80043c0 <memchr>
 8003f60:	9b04      	ldr	r3, [sp, #16]
 8003f62:	b9d0      	cbnz	r0, 8003f9a <_svfiprintf_r+0xda>
 8003f64:	06d9      	lsls	r1, r3, #27
 8003f66:	bf44      	itt	mi
 8003f68:	2220      	movmi	r2, #32
 8003f6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f6e:	071a      	lsls	r2, r3, #28
 8003f70:	bf44      	itt	mi
 8003f72:	222b      	movmi	r2, #43	; 0x2b
 8003f74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f78:	782a      	ldrb	r2, [r5, #0]
 8003f7a:	2a2a      	cmp	r2, #42	; 0x2a
 8003f7c:	d015      	beq.n	8003faa <_svfiprintf_r+0xea>
 8003f7e:	462f      	mov	r7, r5
 8003f80:	2000      	movs	r0, #0
 8003f82:	250a      	movs	r5, #10
 8003f84:	9a07      	ldr	r2, [sp, #28]
 8003f86:	4639      	mov	r1, r7
 8003f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f8c:	3b30      	subs	r3, #48	; 0x30
 8003f8e:	2b09      	cmp	r3, #9
 8003f90:	d94d      	bls.n	800402e <_svfiprintf_r+0x16e>
 8003f92:	b1b8      	cbz	r0, 8003fc4 <_svfiprintf_r+0x104>
 8003f94:	e00f      	b.n	8003fb6 <_svfiprintf_r+0xf6>
 8003f96:	462f      	mov	r7, r5
 8003f98:	e7b8      	b.n	8003f0c <_svfiprintf_r+0x4c>
 8003f9a:	4a40      	ldr	r2, [pc, #256]	; (800409c <_svfiprintf_r+0x1dc>)
 8003f9c:	463d      	mov	r5, r7
 8003f9e:	1a80      	subs	r0, r0, r2
 8003fa0:	fa0b f000 	lsl.w	r0, fp, r0
 8003fa4:	4318      	orrs	r0, r3
 8003fa6:	9004      	str	r0, [sp, #16]
 8003fa8:	e7d3      	b.n	8003f52 <_svfiprintf_r+0x92>
 8003faa:	9a03      	ldr	r2, [sp, #12]
 8003fac:	1d11      	adds	r1, r2, #4
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	9103      	str	r1, [sp, #12]
 8003fb2:	2a00      	cmp	r2, #0
 8003fb4:	db01      	blt.n	8003fba <_svfiprintf_r+0xfa>
 8003fb6:	9207      	str	r2, [sp, #28]
 8003fb8:	e004      	b.n	8003fc4 <_svfiprintf_r+0x104>
 8003fba:	4252      	negs	r2, r2
 8003fbc:	f043 0302 	orr.w	r3, r3, #2
 8003fc0:	9207      	str	r2, [sp, #28]
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	783b      	ldrb	r3, [r7, #0]
 8003fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8003fc8:	d10c      	bne.n	8003fe4 <_svfiprintf_r+0x124>
 8003fca:	787b      	ldrb	r3, [r7, #1]
 8003fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8003fce:	d133      	bne.n	8004038 <_svfiprintf_r+0x178>
 8003fd0:	9b03      	ldr	r3, [sp, #12]
 8003fd2:	3702      	adds	r7, #2
 8003fd4:	1d1a      	adds	r2, r3, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	9203      	str	r2, [sp, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bfb8      	it	lt
 8003fde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003fe2:	9305      	str	r3, [sp, #20]
 8003fe4:	4d2e      	ldr	r5, [pc, #184]	; (80040a0 <_svfiprintf_r+0x1e0>)
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	7839      	ldrb	r1, [r7, #0]
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 f9e8 	bl	80043c0 <memchr>
 8003ff0:	b138      	cbz	r0, 8004002 <_svfiprintf_r+0x142>
 8003ff2:	2340      	movs	r3, #64	; 0x40
 8003ff4:	1b40      	subs	r0, r0, r5
 8003ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8003ffa:	9b04      	ldr	r3, [sp, #16]
 8003ffc:	3701      	adds	r7, #1
 8003ffe:	4303      	orrs	r3, r0
 8004000:	9304      	str	r3, [sp, #16]
 8004002:	7839      	ldrb	r1, [r7, #0]
 8004004:	2206      	movs	r2, #6
 8004006:	4827      	ldr	r0, [pc, #156]	; (80040a4 <_svfiprintf_r+0x1e4>)
 8004008:	1c7e      	adds	r6, r7, #1
 800400a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800400e:	f000 f9d7 	bl	80043c0 <memchr>
 8004012:	2800      	cmp	r0, #0
 8004014:	d038      	beq.n	8004088 <_svfiprintf_r+0x1c8>
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <_svfiprintf_r+0x1e8>)
 8004018:	bb13      	cbnz	r3, 8004060 <_svfiprintf_r+0x1a0>
 800401a:	9b03      	ldr	r3, [sp, #12]
 800401c:	3307      	adds	r3, #7
 800401e:	f023 0307 	bic.w	r3, r3, #7
 8004022:	3308      	adds	r3, #8
 8004024:	9303      	str	r3, [sp, #12]
 8004026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004028:	444b      	add	r3, r9
 800402a:	9309      	str	r3, [sp, #36]	; 0x24
 800402c:	e76d      	b.n	8003f0a <_svfiprintf_r+0x4a>
 800402e:	fb05 3202 	mla	r2, r5, r2, r3
 8004032:	2001      	movs	r0, #1
 8004034:	460f      	mov	r7, r1
 8004036:	e7a6      	b.n	8003f86 <_svfiprintf_r+0xc6>
 8004038:	2300      	movs	r3, #0
 800403a:	250a      	movs	r5, #10
 800403c:	4619      	mov	r1, r3
 800403e:	3701      	adds	r7, #1
 8004040:	9305      	str	r3, [sp, #20]
 8004042:	4638      	mov	r0, r7
 8004044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004048:	3a30      	subs	r2, #48	; 0x30
 800404a:	2a09      	cmp	r2, #9
 800404c:	d903      	bls.n	8004056 <_svfiprintf_r+0x196>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0c8      	beq.n	8003fe4 <_svfiprintf_r+0x124>
 8004052:	9105      	str	r1, [sp, #20]
 8004054:	e7c6      	b.n	8003fe4 <_svfiprintf_r+0x124>
 8004056:	fb05 2101 	mla	r1, r5, r1, r2
 800405a:	2301      	movs	r3, #1
 800405c:	4607      	mov	r7, r0
 800405e:	e7f0      	b.n	8004042 <_svfiprintf_r+0x182>
 8004060:	ab03      	add	r3, sp, #12
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	4622      	mov	r2, r4
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <_svfiprintf_r+0x1ec>)
 8004068:	a904      	add	r1, sp, #16
 800406a:	4640      	mov	r0, r8
 800406c:	f3af 8000 	nop.w
 8004070:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004074:	4681      	mov	r9, r0
 8004076:	d1d6      	bne.n	8004026 <_svfiprintf_r+0x166>
 8004078:	89a3      	ldrh	r3, [r4, #12]
 800407a:	065b      	lsls	r3, r3, #25
 800407c:	f53f af35 	bmi.w	8003eea <_svfiprintf_r+0x2a>
 8004080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004082:	b01d      	add	sp, #116	; 0x74
 8004084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004088:	ab03      	add	r3, sp, #12
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4622      	mov	r2, r4
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <_svfiprintf_r+0x1ec>)
 8004090:	a904      	add	r1, sp, #16
 8004092:	4640      	mov	r0, r8
 8004094:	f000 f882 	bl	800419c <_printf_i>
 8004098:	e7ea      	b.n	8004070 <_svfiprintf_r+0x1b0>
 800409a:	bf00      	nop
 800409c:	08005d24 	.word	0x08005d24
 80040a0:	08005d2a 	.word	0x08005d2a
 80040a4:	08005d2e 	.word	0x08005d2e
 80040a8:	00000000 	.word	0x00000000
 80040ac:	08003e0d 	.word	0x08003e0d

080040b0 <_printf_common>:
 80040b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b4:	4691      	mov	r9, r2
 80040b6:	461f      	mov	r7, r3
 80040b8:	688a      	ldr	r2, [r1, #8]
 80040ba:	690b      	ldr	r3, [r1, #16]
 80040bc:	4606      	mov	r6, r0
 80040be:	4293      	cmp	r3, r2
 80040c0:	bfb8      	it	lt
 80040c2:	4613      	movlt	r3, r2
 80040c4:	f8c9 3000 	str.w	r3, [r9]
 80040c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040cc:	460c      	mov	r4, r1
 80040ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040d2:	b112      	cbz	r2, 80040da <_printf_common+0x2a>
 80040d4:	3301      	adds	r3, #1
 80040d6:	f8c9 3000 	str.w	r3, [r9]
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	0699      	lsls	r1, r3, #26
 80040de:	bf42      	ittt	mi
 80040e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040e4:	3302      	addmi	r3, #2
 80040e6:	f8c9 3000 	strmi.w	r3, [r9]
 80040ea:	6825      	ldr	r5, [r4, #0]
 80040ec:	f015 0506 	ands.w	r5, r5, #6
 80040f0:	d107      	bne.n	8004102 <_printf_common+0x52>
 80040f2:	f104 0a19 	add.w	sl, r4, #25
 80040f6:	68e3      	ldr	r3, [r4, #12]
 80040f8:	f8d9 2000 	ldr.w	r2, [r9]
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	42ab      	cmp	r3, r5
 8004100:	dc29      	bgt.n	8004156 <_printf_common+0xa6>
 8004102:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	3300      	adds	r3, #0
 800410a:	bf18      	it	ne
 800410c:	2301      	movne	r3, #1
 800410e:	0692      	lsls	r2, r2, #26
 8004110:	d42e      	bmi.n	8004170 <_printf_common+0xc0>
 8004112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004116:	4639      	mov	r1, r7
 8004118:	4630      	mov	r0, r6
 800411a:	47c0      	blx	r8
 800411c:	3001      	adds	r0, #1
 800411e:	d021      	beq.n	8004164 <_printf_common+0xb4>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	68e5      	ldr	r5, [r4, #12]
 8004124:	f003 0306 	and.w	r3, r3, #6
 8004128:	2b04      	cmp	r3, #4
 800412a:	bf18      	it	ne
 800412c:	2500      	movne	r5, #0
 800412e:	f8d9 2000 	ldr.w	r2, [r9]
 8004132:	f04f 0900 	mov.w	r9, #0
 8004136:	bf08      	it	eq
 8004138:	1aad      	subeq	r5, r5, r2
 800413a:	68a3      	ldr	r3, [r4, #8]
 800413c:	6922      	ldr	r2, [r4, #16]
 800413e:	bf08      	it	eq
 8004140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004144:	4293      	cmp	r3, r2
 8004146:	bfc4      	itt	gt
 8004148:	1a9b      	subgt	r3, r3, r2
 800414a:	18ed      	addgt	r5, r5, r3
 800414c:	341a      	adds	r4, #26
 800414e:	454d      	cmp	r5, r9
 8004150:	d11a      	bne.n	8004188 <_printf_common+0xd8>
 8004152:	2000      	movs	r0, #0
 8004154:	e008      	b.n	8004168 <_printf_common+0xb8>
 8004156:	2301      	movs	r3, #1
 8004158:	4652      	mov	r2, sl
 800415a:	4639      	mov	r1, r7
 800415c:	4630      	mov	r0, r6
 800415e:	47c0      	blx	r8
 8004160:	3001      	adds	r0, #1
 8004162:	d103      	bne.n	800416c <_printf_common+0xbc>
 8004164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800416c:	3501      	adds	r5, #1
 800416e:	e7c2      	b.n	80040f6 <_printf_common+0x46>
 8004170:	2030      	movs	r0, #48	; 0x30
 8004172:	18e1      	adds	r1, r4, r3
 8004174:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800417e:	4422      	add	r2, r4
 8004180:	3302      	adds	r3, #2
 8004182:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004186:	e7c4      	b.n	8004112 <_printf_common+0x62>
 8004188:	2301      	movs	r3, #1
 800418a:	4622      	mov	r2, r4
 800418c:	4639      	mov	r1, r7
 800418e:	4630      	mov	r0, r6
 8004190:	47c0      	blx	r8
 8004192:	3001      	adds	r0, #1
 8004194:	d0e6      	beq.n	8004164 <_printf_common+0xb4>
 8004196:	f109 0901 	add.w	r9, r9, #1
 800419a:	e7d8      	b.n	800414e <_printf_common+0x9e>

0800419c <_printf_i>:
 800419c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80041a4:	460c      	mov	r4, r1
 80041a6:	7e09      	ldrb	r1, [r1, #24]
 80041a8:	b085      	sub	sp, #20
 80041aa:	296e      	cmp	r1, #110	; 0x6e
 80041ac:	4617      	mov	r7, r2
 80041ae:	4606      	mov	r6, r0
 80041b0:	4698      	mov	r8, r3
 80041b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041b4:	f000 80b3 	beq.w	800431e <_printf_i+0x182>
 80041b8:	d822      	bhi.n	8004200 <_printf_i+0x64>
 80041ba:	2963      	cmp	r1, #99	; 0x63
 80041bc:	d036      	beq.n	800422c <_printf_i+0x90>
 80041be:	d80a      	bhi.n	80041d6 <_printf_i+0x3a>
 80041c0:	2900      	cmp	r1, #0
 80041c2:	f000 80b9 	beq.w	8004338 <_printf_i+0x19c>
 80041c6:	2958      	cmp	r1, #88	; 0x58
 80041c8:	f000 8083 	beq.w	80042d2 <_printf_i+0x136>
 80041cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80041d4:	e032      	b.n	800423c <_printf_i+0xa0>
 80041d6:	2964      	cmp	r1, #100	; 0x64
 80041d8:	d001      	beq.n	80041de <_printf_i+0x42>
 80041da:	2969      	cmp	r1, #105	; 0x69
 80041dc:	d1f6      	bne.n	80041cc <_printf_i+0x30>
 80041de:	6820      	ldr	r0, [r4, #0]
 80041e0:	6813      	ldr	r3, [r2, #0]
 80041e2:	0605      	lsls	r5, r0, #24
 80041e4:	f103 0104 	add.w	r1, r3, #4
 80041e8:	d52a      	bpl.n	8004240 <_printf_i+0xa4>
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6011      	str	r1, [r2, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	da03      	bge.n	80041fa <_printf_i+0x5e>
 80041f2:	222d      	movs	r2, #45	; 0x2d
 80041f4:	425b      	negs	r3, r3
 80041f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80041fa:	486f      	ldr	r0, [pc, #444]	; (80043b8 <_printf_i+0x21c>)
 80041fc:	220a      	movs	r2, #10
 80041fe:	e039      	b.n	8004274 <_printf_i+0xd8>
 8004200:	2973      	cmp	r1, #115	; 0x73
 8004202:	f000 809d 	beq.w	8004340 <_printf_i+0x1a4>
 8004206:	d808      	bhi.n	800421a <_printf_i+0x7e>
 8004208:	296f      	cmp	r1, #111	; 0x6f
 800420a:	d020      	beq.n	800424e <_printf_i+0xb2>
 800420c:	2970      	cmp	r1, #112	; 0x70
 800420e:	d1dd      	bne.n	80041cc <_printf_i+0x30>
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	f043 0320 	orr.w	r3, r3, #32
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	e003      	b.n	8004222 <_printf_i+0x86>
 800421a:	2975      	cmp	r1, #117	; 0x75
 800421c:	d017      	beq.n	800424e <_printf_i+0xb2>
 800421e:	2978      	cmp	r1, #120	; 0x78
 8004220:	d1d4      	bne.n	80041cc <_printf_i+0x30>
 8004222:	2378      	movs	r3, #120	; 0x78
 8004224:	4865      	ldr	r0, [pc, #404]	; (80043bc <_printf_i+0x220>)
 8004226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800422a:	e055      	b.n	80042d8 <_printf_i+0x13c>
 800422c:	6813      	ldr	r3, [r2, #0]
 800422e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004232:	1d19      	adds	r1, r3, #4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6011      	str	r1, [r2, #0]
 8004238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423c:	2301      	movs	r3, #1
 800423e:	e08c      	b.n	800435a <_printf_i+0x1be>
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004246:	6011      	str	r1, [r2, #0]
 8004248:	bf18      	it	ne
 800424a:	b21b      	sxthne	r3, r3
 800424c:	e7cf      	b.n	80041ee <_printf_i+0x52>
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	6825      	ldr	r5, [r4, #0]
 8004252:	1d18      	adds	r0, r3, #4
 8004254:	6010      	str	r0, [r2, #0]
 8004256:	0628      	lsls	r0, r5, #24
 8004258:	d501      	bpl.n	800425e <_printf_i+0xc2>
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	e002      	b.n	8004264 <_printf_i+0xc8>
 800425e:	0668      	lsls	r0, r5, #25
 8004260:	d5fb      	bpl.n	800425a <_printf_i+0xbe>
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	296f      	cmp	r1, #111	; 0x6f
 8004266:	bf14      	ite	ne
 8004268:	220a      	movne	r2, #10
 800426a:	2208      	moveq	r2, #8
 800426c:	4852      	ldr	r0, [pc, #328]	; (80043b8 <_printf_i+0x21c>)
 800426e:	2100      	movs	r1, #0
 8004270:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004274:	6865      	ldr	r5, [r4, #4]
 8004276:	2d00      	cmp	r5, #0
 8004278:	60a5      	str	r5, [r4, #8]
 800427a:	f2c0 8095 	blt.w	80043a8 <_printf_i+0x20c>
 800427e:	6821      	ldr	r1, [r4, #0]
 8004280:	f021 0104 	bic.w	r1, r1, #4
 8004284:	6021      	str	r1, [r4, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d13d      	bne.n	8004306 <_printf_i+0x16a>
 800428a:	2d00      	cmp	r5, #0
 800428c:	f040 808e 	bne.w	80043ac <_printf_i+0x210>
 8004290:	4665      	mov	r5, ip
 8004292:	2a08      	cmp	r2, #8
 8004294:	d10b      	bne.n	80042ae <_printf_i+0x112>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	07db      	lsls	r3, r3, #31
 800429a:	d508      	bpl.n	80042ae <_printf_i+0x112>
 800429c:	6923      	ldr	r3, [r4, #16]
 800429e:	6862      	ldr	r2, [r4, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	bfde      	ittt	le
 80042a4:	2330      	movle	r3, #48	; 0x30
 80042a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80042ae:	ebac 0305 	sub.w	r3, ip, r5
 80042b2:	6123      	str	r3, [r4, #16]
 80042b4:	f8cd 8000 	str.w	r8, [sp]
 80042b8:	463b      	mov	r3, r7
 80042ba:	aa03      	add	r2, sp, #12
 80042bc:	4621      	mov	r1, r4
 80042be:	4630      	mov	r0, r6
 80042c0:	f7ff fef6 	bl	80040b0 <_printf_common>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d14d      	bne.n	8004364 <_printf_i+0x1c8>
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042cc:	b005      	add	sp, #20
 80042ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042d2:	4839      	ldr	r0, [pc, #228]	; (80043b8 <_printf_i+0x21c>)
 80042d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80042d8:	6813      	ldr	r3, [r2, #0]
 80042da:	6821      	ldr	r1, [r4, #0]
 80042dc:	1d1d      	adds	r5, r3, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6015      	str	r5, [r2, #0]
 80042e2:	060a      	lsls	r2, r1, #24
 80042e4:	d50b      	bpl.n	80042fe <_printf_i+0x162>
 80042e6:	07ca      	lsls	r2, r1, #31
 80042e8:	bf44      	itt	mi
 80042ea:	f041 0120 	orrmi.w	r1, r1, #32
 80042ee:	6021      	strmi	r1, [r4, #0]
 80042f0:	b91b      	cbnz	r3, 80042fa <_printf_i+0x15e>
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	f022 0220 	bic.w	r2, r2, #32
 80042f8:	6022      	str	r2, [r4, #0]
 80042fa:	2210      	movs	r2, #16
 80042fc:	e7b7      	b.n	800426e <_printf_i+0xd2>
 80042fe:	064d      	lsls	r5, r1, #25
 8004300:	bf48      	it	mi
 8004302:	b29b      	uxthmi	r3, r3
 8004304:	e7ef      	b.n	80042e6 <_printf_i+0x14a>
 8004306:	4665      	mov	r5, ip
 8004308:	fbb3 f1f2 	udiv	r1, r3, r2
 800430c:	fb02 3311 	mls	r3, r2, r1, r3
 8004310:	5cc3      	ldrb	r3, [r0, r3]
 8004312:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004316:	460b      	mov	r3, r1
 8004318:	2900      	cmp	r1, #0
 800431a:	d1f5      	bne.n	8004308 <_printf_i+0x16c>
 800431c:	e7b9      	b.n	8004292 <_printf_i+0xf6>
 800431e:	6813      	ldr	r3, [r2, #0]
 8004320:	6825      	ldr	r5, [r4, #0]
 8004322:	1d18      	adds	r0, r3, #4
 8004324:	6961      	ldr	r1, [r4, #20]
 8004326:	6010      	str	r0, [r2, #0]
 8004328:	0628      	lsls	r0, r5, #24
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	d501      	bpl.n	8004332 <_printf_i+0x196>
 800432e:	6019      	str	r1, [r3, #0]
 8004330:	e002      	b.n	8004338 <_printf_i+0x19c>
 8004332:	066a      	lsls	r2, r5, #25
 8004334:	d5fb      	bpl.n	800432e <_printf_i+0x192>
 8004336:	8019      	strh	r1, [r3, #0]
 8004338:	2300      	movs	r3, #0
 800433a:	4665      	mov	r5, ip
 800433c:	6123      	str	r3, [r4, #16]
 800433e:	e7b9      	b.n	80042b4 <_printf_i+0x118>
 8004340:	6813      	ldr	r3, [r2, #0]
 8004342:	1d19      	adds	r1, r3, #4
 8004344:	6011      	str	r1, [r2, #0]
 8004346:	681d      	ldr	r5, [r3, #0]
 8004348:	6862      	ldr	r2, [r4, #4]
 800434a:	2100      	movs	r1, #0
 800434c:	4628      	mov	r0, r5
 800434e:	f000 f837 	bl	80043c0 <memchr>
 8004352:	b108      	cbz	r0, 8004358 <_printf_i+0x1bc>
 8004354:	1b40      	subs	r0, r0, r5
 8004356:	6060      	str	r0, [r4, #4]
 8004358:	6863      	ldr	r3, [r4, #4]
 800435a:	6123      	str	r3, [r4, #16]
 800435c:	2300      	movs	r3, #0
 800435e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004362:	e7a7      	b.n	80042b4 <_printf_i+0x118>
 8004364:	6923      	ldr	r3, [r4, #16]
 8004366:	462a      	mov	r2, r5
 8004368:	4639      	mov	r1, r7
 800436a:	4630      	mov	r0, r6
 800436c:	47c0      	blx	r8
 800436e:	3001      	adds	r0, #1
 8004370:	d0aa      	beq.n	80042c8 <_printf_i+0x12c>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	079b      	lsls	r3, r3, #30
 8004376:	d413      	bmi.n	80043a0 <_printf_i+0x204>
 8004378:	68e0      	ldr	r0, [r4, #12]
 800437a:	9b03      	ldr	r3, [sp, #12]
 800437c:	4298      	cmp	r0, r3
 800437e:	bfb8      	it	lt
 8004380:	4618      	movlt	r0, r3
 8004382:	e7a3      	b.n	80042cc <_printf_i+0x130>
 8004384:	2301      	movs	r3, #1
 8004386:	464a      	mov	r2, r9
 8004388:	4639      	mov	r1, r7
 800438a:	4630      	mov	r0, r6
 800438c:	47c0      	blx	r8
 800438e:	3001      	adds	r0, #1
 8004390:	d09a      	beq.n	80042c8 <_printf_i+0x12c>
 8004392:	3501      	adds	r5, #1
 8004394:	68e3      	ldr	r3, [r4, #12]
 8004396:	9a03      	ldr	r2, [sp, #12]
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	42ab      	cmp	r3, r5
 800439c:	dcf2      	bgt.n	8004384 <_printf_i+0x1e8>
 800439e:	e7eb      	b.n	8004378 <_printf_i+0x1dc>
 80043a0:	2500      	movs	r5, #0
 80043a2:	f104 0919 	add.w	r9, r4, #25
 80043a6:	e7f5      	b.n	8004394 <_printf_i+0x1f8>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1ac      	bne.n	8004306 <_printf_i+0x16a>
 80043ac:	7803      	ldrb	r3, [r0, #0]
 80043ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043b6:	e76c      	b.n	8004292 <_printf_i+0xf6>
 80043b8:	08005d35 	.word	0x08005d35
 80043bc:	08005d46 	.word	0x08005d46

080043c0 <memchr>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	b2c9      	uxtb	r1, r1
 80043c4:	4402      	add	r2, r0
 80043c6:	4290      	cmp	r0, r2
 80043c8:	4603      	mov	r3, r0
 80043ca:	d101      	bne.n	80043d0 <memchr+0x10>
 80043cc:	2300      	movs	r3, #0
 80043ce:	e003      	b.n	80043d8 <memchr+0x18>
 80043d0:	781c      	ldrb	r4, [r3, #0]
 80043d2:	3001      	adds	r0, #1
 80043d4:	428c      	cmp	r4, r1
 80043d6:	d1f6      	bne.n	80043c6 <memchr+0x6>
 80043d8:	4618      	mov	r0, r3
 80043da:	bd10      	pop	{r4, pc}

080043dc <memcpy>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	1e43      	subs	r3, r0, #1
 80043e0:	440a      	add	r2, r1
 80043e2:	4291      	cmp	r1, r2
 80043e4:	d100      	bne.n	80043e8 <memcpy+0xc>
 80043e6:	bd10      	pop	{r4, pc}
 80043e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043f0:	e7f7      	b.n	80043e2 <memcpy+0x6>

080043f2 <memmove>:
 80043f2:	4288      	cmp	r0, r1
 80043f4:	b510      	push	{r4, lr}
 80043f6:	eb01 0302 	add.w	r3, r1, r2
 80043fa:	d807      	bhi.n	800440c <memmove+0x1a>
 80043fc:	1e42      	subs	r2, r0, #1
 80043fe:	4299      	cmp	r1, r3
 8004400:	d00a      	beq.n	8004418 <memmove+0x26>
 8004402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004406:	f802 4f01 	strb.w	r4, [r2, #1]!
 800440a:	e7f8      	b.n	80043fe <memmove+0xc>
 800440c:	4283      	cmp	r3, r0
 800440e:	d9f5      	bls.n	80043fc <memmove+0xa>
 8004410:	1881      	adds	r1, r0, r2
 8004412:	1ad2      	subs	r2, r2, r3
 8004414:	42d3      	cmn	r3, r2
 8004416:	d100      	bne.n	800441a <memmove+0x28>
 8004418:	bd10      	pop	{r4, pc}
 800441a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800441e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004422:	e7f7      	b.n	8004414 <memmove+0x22>

08004424 <_realloc_r>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	4607      	mov	r7, r0
 8004428:	4614      	mov	r4, r2
 800442a:	460e      	mov	r6, r1
 800442c:	b921      	cbnz	r1, 8004438 <_realloc_r+0x14>
 800442e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004432:	4611      	mov	r1, r2
 8004434:	f7ff bc1a 	b.w	8003c6c <_malloc_r>
 8004438:	b922      	cbnz	r2, 8004444 <_realloc_r+0x20>
 800443a:	f7ff fbcb 	bl	8003bd4 <_free_r>
 800443e:	4625      	mov	r5, r4
 8004440:	4628      	mov	r0, r5
 8004442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004444:	f000 f814 	bl	8004470 <_malloc_usable_size_r>
 8004448:	42a0      	cmp	r0, r4
 800444a:	d20f      	bcs.n	800446c <_realloc_r+0x48>
 800444c:	4621      	mov	r1, r4
 800444e:	4638      	mov	r0, r7
 8004450:	f7ff fc0c 	bl	8003c6c <_malloc_r>
 8004454:	4605      	mov	r5, r0
 8004456:	2800      	cmp	r0, #0
 8004458:	d0f2      	beq.n	8004440 <_realloc_r+0x1c>
 800445a:	4631      	mov	r1, r6
 800445c:	4622      	mov	r2, r4
 800445e:	f7ff ffbd 	bl	80043dc <memcpy>
 8004462:	4631      	mov	r1, r6
 8004464:	4638      	mov	r0, r7
 8004466:	f7ff fbb5 	bl	8003bd4 <_free_r>
 800446a:	e7e9      	b.n	8004440 <_realloc_r+0x1c>
 800446c:	4635      	mov	r5, r6
 800446e:	e7e7      	b.n	8004440 <_realloc_r+0x1c>

08004470 <_malloc_usable_size_r>:
 8004470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004474:	1f18      	subs	r0, r3, #4
 8004476:	2b00      	cmp	r3, #0
 8004478:	bfbc      	itt	lt
 800447a:	580b      	ldrlt	r3, [r1, r0]
 800447c:	18c0      	addlt	r0, r0, r3
 800447e:	4770      	bx	lr

08004480 <_init>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr

0800448c <_fini>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr
