
GraphicsDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b4  080045b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080045b4  080045b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045b4  080045b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  20000070  08004630  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08004630  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010711  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025f1  00000000  00000000  000307aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f50  00000000  00000000  00032da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00033cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b0c2  00000000  00000000  00034b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c543  00000000  00000000  0004fbda  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e18e  00000000  00000000  0005c11d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea2ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c0  00000000  00000000  000ea328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080044d4 	.word	0x080044d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080044d4 	.word	0x080044d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <cpp_main>:

char buffer[1024];

uint32_t lastUpdate = 0;

extern "C" int cpp_main(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af02      	add	r7, sp, #8
	__HAL_DBGMCU_FREEZE_IWDG();
 8000162:	4b76      	ldr	r3, [pc, #472]	; (800033c <cpp_main+0x1e0>)
 8000164:	685b      	ldr	r3, [r3, #4]
 8000166:	4a75      	ldr	r2, [pc, #468]	; (800033c <cpp_main+0x1e0>)
 8000168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800016c:	6053      	str	r3, [r2, #4]

	uint32_t start = HAL_GetTick();
 800016e:	f001 f94b 	bl	8001408 <HAL_GetTick>
 8000172:	6138      	str	r0, [r7, #16]

	uint16_t color_shift = 1;
 8000174:	2301      	movs	r3, #1
 8000176:	83fb      	strh	r3, [r7, #30]

	for (uint16_t row = 0; row < 32; row++) {
 8000178:	2300      	movs	r3, #0
 800017a:	83bb      	strh	r3, [r7, #28]
 800017c:	8bbb      	ldrh	r3, [r7, #28]
 800017e:	2b1f      	cmp	r3, #31
 8000180:	d84a      	bhi.n	8000218 <cpp_main+0xbc>
		for (uint16_t col = 0; col < 64; col++) {
 8000182:	2300      	movs	r3, #0
 8000184:	837b      	strh	r3, [r7, #26]
 8000186:	8b7b      	ldrh	r3, [r7, #26]
 8000188:	2b3f      	cmp	r3, #63	; 0x3f
 800018a:	d841      	bhi.n	8000210 <cpp_main+0xb4>
			uint8_t r, g, b;

			r = ((row + col + color_shift) % 4) == 0 ? 255 : 0;
 800018c:	8bba      	ldrh	r2, [r7, #28]
 800018e:	8b7b      	ldrh	r3, [r7, #26]
 8000190:	441a      	add	r2, r3
 8000192:	8bfb      	ldrh	r3, [r7, #30]
 8000194:	4413      	add	r3, r2
 8000196:	f003 0303 	and.w	r3, r3, #3
 800019a:	2b00      	cmp	r3, #0
 800019c:	d101      	bne.n	80001a2 <cpp_main+0x46>
 800019e:	23ff      	movs	r3, #255	; 0xff
 80001a0:	e000      	b.n	80001a4 <cpp_main+0x48>
 80001a2:	2300      	movs	r3, #0
 80001a4:	73fb      	strb	r3, [r7, #15]
			g = ((row + col + color_shift) % 4) == 1 ? 255 : 0;
 80001a6:	8bba      	ldrh	r2, [r7, #28]
 80001a8:	8b7b      	ldrh	r3, [r7, #26]
 80001aa:	441a      	add	r2, r3
 80001ac:	8bfb      	ldrh	r3, [r7, #30]
 80001ae:	4413      	add	r3, r2
 80001b0:	425a      	negs	r2, r3
 80001b2:	f003 0303 	and.w	r3, r3, #3
 80001b6:	f002 0203 	and.w	r2, r2, #3
 80001ba:	bf58      	it	pl
 80001bc:	4253      	negpl	r3, r2
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d101      	bne.n	80001c6 <cpp_main+0x6a>
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	e000      	b.n	80001c8 <cpp_main+0x6c>
 80001c6:	2300      	movs	r3, #0
 80001c8:	73bb      	strb	r3, [r7, #14]
			b = ((row + col + color_shift) % 4) == 2 ? 255 : 0;
 80001ca:	8bba      	ldrh	r2, [r7, #28]
 80001cc:	8b7b      	ldrh	r3, [r7, #26]
 80001ce:	441a      	add	r2, r3
 80001d0:	8bfb      	ldrh	r3, [r7, #30]
 80001d2:	4413      	add	r3, r2
 80001d4:	425a      	negs	r2, r3
 80001d6:	f003 0303 	and.w	r3, r3, #3
 80001da:	f002 0203 	and.w	r2, r2, #3
 80001de:	bf58      	it	pl
 80001e0:	4253      	negpl	r3, r2
 80001e2:	2b02      	cmp	r3, #2
 80001e4:	d101      	bne.n	80001ea <cpp_main+0x8e>
 80001e6:	23ff      	movs	r3, #255	; 0xff
 80001e8:	e000      	b.n	80001ec <cpp_main+0x90>
 80001ea:	2300      	movs	r3, #0
 80001ec:	737b      	strb	r3, [r7, #13]

			matrix.SetPixel(col, row, r, g, b);
 80001ee:	8b7b      	ldrh	r3, [r7, #26]
 80001f0:	b2d9      	uxtb	r1, r3
 80001f2:	8bbb      	ldrh	r3, [r7, #28]
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	7bf8      	ldrb	r0, [r7, #15]
 80001f8:	7b7b      	ldrb	r3, [r7, #13]
 80001fa:	9301      	str	r3, [sp, #4]
 80001fc:	7bbb      	ldrb	r3, [r7, #14]
 80001fe:	9300      	str	r3, [sp, #0]
 8000200:	4603      	mov	r3, r0
 8000202:	484f      	ldr	r0, [pc, #316]	; (8000340 <cpp_main+0x1e4>)
 8000204:	f000 fcee 	bl	8000be4 <_ZN12MatrixDriver8SetPixelEhhhhh>
		for (uint16_t col = 0; col < 64; col++) {
 8000208:	8b7b      	ldrh	r3, [r7, #26]
 800020a:	3301      	adds	r3, #1
 800020c:	837b      	strh	r3, [r7, #26]
 800020e:	e7ba      	b.n	8000186 <cpp_main+0x2a>
	for (uint16_t row = 0; row < 32; row++) {
 8000210:	8bbb      	ldrh	r3, [r7, #28]
 8000212:	3301      	adds	r3, #1
 8000214:	83bb      	strh	r3, [r7, #28]
 8000216:	e7b1      	b.n	800017c <cpp_main+0x20>
		}
	}

	lastUpdate = HAL_GetTick();
 8000218:	f001 f8f6 	bl	8001408 <HAL_GetTick>
 800021c:	4602      	mov	r2, r0
 800021e:	4b49      	ldr	r3, [pc, #292]	; (8000344 <cpp_main+0x1e8>)
 8000220:	601a      	str	r2, [r3, #0]

	color_shift++;
 8000222:	8bfb      	ldrh	r3, [r7, #30]
 8000224:	3301      	adds	r3, #1
 8000226:	83fb      	strh	r3, [r7, #30]

//	matrix.Dump();

	matrix.SwapBuffer();
 8000228:	4845      	ldr	r0, [pc, #276]	; (8000340 <cpp_main+0x1e4>)
 800022a:	f000 fd92 	bl	8000d52 <_ZN12MatrixDriver10SwapBufferEv>

	uint32_t duration = HAL_GetTick() - start;
 800022e:	f001 f8eb 	bl	8001408 <HAL_GetTick>
 8000232:	4602      	mov	r2, r0
 8000234:	693b      	ldr	r3, [r7, #16]
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	60bb      	str	r3, [r7, #8]

	sprintf(buffer, "Setup Duration: %lu\n", duration);
 800023a:	68ba      	ldr	r2, [r7, #8]
 800023c:	4942      	ldr	r1, [pc, #264]	; (8000348 <cpp_main+0x1ec>)
 800023e:	4843      	ldr	r0, [pc, #268]	; (800034c <cpp_main+0x1f0>)
 8000240:	f003 fdec 	bl	8003e1c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 500);
 8000244:	4841      	ldr	r0, [pc, #260]	; (800034c <cpp_main+0x1f0>)
 8000246:	f7ff ff81 	bl	800014c <strlen>
 800024a:	4603      	mov	r3, r0
 800024c:	b29a      	uxth	r2, r3
 800024e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000252:	493e      	ldr	r1, [pc, #248]	; (800034c <cpp_main+0x1f0>)
 8000254:	483e      	ldr	r0, [pc, #248]	; (8000350 <cpp_main+0x1f4>)
 8000256:	f003 fb1f 	bl	8003898 <HAL_UART_Transmit>

//	HAL_IWDG_Init(&hiwdg);

//	HAL_TIM_OC_Start(&htim2, TIM_IT_CC1);

	matrix.open();
 800025a:	4839      	ldr	r0, [pc, #228]	; (8000340 <cpp_main+0x1e4>)
 800025c:	f000 fc56 	bl	8000b0c <_ZN12MatrixDriver4openEv>

	while (1) {

//		matrix.Handle();

		uint32_t now = HAL_GetTick();
 8000260:	f001 f8d2 	bl	8001408 <HAL_GetTick>
 8000264:	6078      	str	r0, [r7, #4]

		if ((now - lastUpdate) > 100) {
 8000266:	4b37      	ldr	r3, [pc, #220]	; (8000344 <cpp_main+0x1e8>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	1ad3      	subs	r3, r2, r3
 800026e:	2b64      	cmp	r3, #100	; 0x64
 8000270:	d9f6      	bls.n	8000260 <cpp_main+0x104>
			for (uint16_t row = 0; row < 32; row++) {
 8000272:	2300      	movs	r3, #0
 8000274:	833b      	strh	r3, [r7, #24]
 8000276:	8b3b      	ldrh	r3, [r7, #24]
 8000278:	2b1f      	cmp	r3, #31
 800027a:	d855      	bhi.n	8000328 <cpp_main+0x1cc>
				for (uint16_t col = 0; col < 64; col++) {
 800027c:	2300      	movs	r3, #0
 800027e:	82fb      	strh	r3, [r7, #22]
 8000280:	8afb      	ldrh	r3, [r7, #22]
 8000282:	2b3f      	cmp	r3, #63	; 0x3f
 8000284:	d84c      	bhi.n	8000320 <cpp_main+0x1c4>
					uint8_t r, g, b;

					r = ((row + col + color_shift) % 3) == 0 ? 255 : 0;
 8000286:	8b3a      	ldrh	r2, [r7, #24]
 8000288:	8afb      	ldrh	r3, [r7, #22]
 800028a:	441a      	add	r2, r3
 800028c:	8bfb      	ldrh	r3, [r7, #30]
 800028e:	18d1      	adds	r1, r2, r3
 8000290:	4b30      	ldr	r3, [pc, #192]	; (8000354 <cpp_main+0x1f8>)
 8000292:	fb83 3201 	smull	r3, r2, r3, r1
 8000296:	17cb      	asrs	r3, r1, #31
 8000298:	1ad2      	subs	r2, r2, r3
 800029a:	4613      	mov	r3, r2
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	4413      	add	r3, r2
 80002a0:	1aca      	subs	r2, r1, r3
 80002a2:	2a00      	cmp	r2, #0
 80002a4:	d101      	bne.n	80002aa <cpp_main+0x14e>
 80002a6:	23ff      	movs	r3, #255	; 0xff
 80002a8:	e000      	b.n	80002ac <cpp_main+0x150>
 80002aa:	2300      	movs	r3, #0
 80002ac:	70fb      	strb	r3, [r7, #3]
					g = ((row + col + color_shift) % 3) == 1 ? 255 : 0;
 80002ae:	8b3a      	ldrh	r2, [r7, #24]
 80002b0:	8afb      	ldrh	r3, [r7, #22]
 80002b2:	441a      	add	r2, r3
 80002b4:	8bfb      	ldrh	r3, [r7, #30]
 80002b6:	18d1      	adds	r1, r2, r3
 80002b8:	4b26      	ldr	r3, [pc, #152]	; (8000354 <cpp_main+0x1f8>)
 80002ba:	fb83 3201 	smull	r3, r2, r3, r1
 80002be:	17cb      	asrs	r3, r1, #31
 80002c0:	1ad2      	subs	r2, r2, r3
 80002c2:	4613      	mov	r3, r2
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	4413      	add	r3, r2
 80002c8:	1aca      	subs	r2, r1, r3
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	d101      	bne.n	80002d2 <cpp_main+0x176>
 80002ce:	23ff      	movs	r3, #255	; 0xff
 80002d0:	e000      	b.n	80002d4 <cpp_main+0x178>
 80002d2:	2300      	movs	r3, #0
 80002d4:	70bb      	strb	r3, [r7, #2]
					b = ((row + col + color_shift) % 3) == 2 ? 255 : 0;
 80002d6:	8b3a      	ldrh	r2, [r7, #24]
 80002d8:	8afb      	ldrh	r3, [r7, #22]
 80002da:	441a      	add	r2, r3
 80002dc:	8bfb      	ldrh	r3, [r7, #30]
 80002de:	18d1      	adds	r1, r2, r3
 80002e0:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <cpp_main+0x1f8>)
 80002e2:	fb83 3201 	smull	r3, r2, r3, r1
 80002e6:	17cb      	asrs	r3, r1, #31
 80002e8:	1ad2      	subs	r2, r2, r3
 80002ea:	4613      	mov	r3, r2
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	4413      	add	r3, r2
 80002f0:	1aca      	subs	r2, r1, r3
 80002f2:	2a02      	cmp	r2, #2
 80002f4:	d101      	bne.n	80002fa <cpp_main+0x19e>
 80002f6:	23ff      	movs	r3, #255	; 0xff
 80002f8:	e000      	b.n	80002fc <cpp_main+0x1a0>
 80002fa:	2300      	movs	r3, #0
 80002fc:	707b      	strb	r3, [r7, #1]

					matrix.SetPixel(col, row, r, g, b);
 80002fe:	8afb      	ldrh	r3, [r7, #22]
 8000300:	b2d9      	uxtb	r1, r3
 8000302:	8b3b      	ldrh	r3, [r7, #24]
 8000304:	b2da      	uxtb	r2, r3
 8000306:	78f8      	ldrb	r0, [r7, #3]
 8000308:	787b      	ldrb	r3, [r7, #1]
 800030a:	9301      	str	r3, [sp, #4]
 800030c:	78bb      	ldrb	r3, [r7, #2]
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	4603      	mov	r3, r0
 8000312:	480b      	ldr	r0, [pc, #44]	; (8000340 <cpp_main+0x1e4>)
 8000314:	f000 fc66 	bl	8000be4 <_ZN12MatrixDriver8SetPixelEhhhhh>
				for (uint16_t col = 0; col < 64; col++) {
 8000318:	8afb      	ldrh	r3, [r7, #22]
 800031a:	3301      	adds	r3, #1
 800031c:	82fb      	strh	r3, [r7, #22]
 800031e:	e7af      	b.n	8000280 <cpp_main+0x124>
			for (uint16_t row = 0; row < 32; row++) {
 8000320:	8b3b      	ldrh	r3, [r7, #24]
 8000322:	3301      	adds	r3, #1
 8000324:	833b      	strh	r3, [r7, #24]
 8000326:	e7a6      	b.n	8000276 <cpp_main+0x11a>
				}
			}

			matrix.SwapBuffer();
 8000328:	4805      	ldr	r0, [pc, #20]	; (8000340 <cpp_main+0x1e4>)
 800032a:	f000 fd12 	bl	8000d52 <_ZN12MatrixDriver10SwapBufferEv>

			color_shift++;
 800032e:	8bfb      	ldrh	r3, [r7, #30]
 8000330:	3301      	adds	r3, #1
 8000332:	83fb      	strh	r3, [r7, #30]

			lastUpdate = now;
 8000334:	4a03      	ldr	r2, [pc, #12]	; (8000344 <cpp_main+0x1e8>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	6013      	str	r3, [r2, #0]
		}
	}
 800033a:	e791      	b.n	8000260 <cpp_main+0x104>
 800033c:	e0042000 	.word	0xe0042000
 8000340:	2000008c 	.word	0x2000008c
 8000344:	200004a0 	.word	0x200004a0
 8000348:	080044ec 	.word	0x080044ec
 800034c:	200000a0 	.word	0x200000a0
 8000350:	20000550 	.word	0x20000550
 8000354:	55555556 	.word	0x55555556

08000358 <_Z41__static_initialization_and_destruction_0ii>:
}
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d10a      	bne.n	800037e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800036e:	4293      	cmp	r3, r2
 8000370:	d105      	bne.n	800037e <_Z41__static_initialization_and_destruction_0ii+0x26>
MatrixDriver matrix(64, 32, MatrixDriver::ScanType::SCAN_16);
 8000372:	2300      	movs	r3, #0
 8000374:	2220      	movs	r2, #32
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	4803      	ldr	r0, [pc, #12]	; (8000388 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800037a:	f000 fb17 	bl	80009ac <_ZN12MatrixDriverC1EhhNS_8ScanTypeE>
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	2000008c 	.word	0x2000008c

0800038c <_GLOBAL__sub_I_matrix>:
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
 8000390:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000394:	2001      	movs	r0, #1
 8000396:	f7ff ffdf 	bl	8000358 <_Z41__static_initialization_and_destruction_0ii>
 800039a:	bd80      	pop	{r7, pc}

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a0:	f000 ffda 	bl	8001358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a4:	f000 f813 	bl	80003ce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a8:	f000 fa72 	bl	8000890 <MX_GPIO_Init>
  MX_DMA_Init();
 80003ac:	f000 fa52 	bl	8000854 <MX_DMA_Init>
  MX_SPI1_Init();
 80003b0:	f000 f86e 	bl	8000490 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80003b4:	f000 fa24 	bl	8000800 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80003b8:	f000 f850 	bl	800045c <MX_IWDG_Init>
  MX_TIM2_Init();
 80003bc:	f000 f946 	bl	800064c <MX_TIM2_Init>
  MX_TIM3_Init();
 80003c0:	f000 f9c8 	bl	8000754 <MX_TIM3_Init>
  MX_TIM1_Init();
 80003c4:	f000 f89a 	bl	80004fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 80003c8:	f7ff fec8 	bl	800015c <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <main+0x30>

080003ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b090      	sub	sp, #64	; 0x40
 80003d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d4:	f107 0318 	add.w	r3, r7, #24
 80003d8:	2228      	movs	r2, #40	; 0x28
 80003da:	2100      	movs	r1, #0
 80003dc:	4618      	mov	r0, r3
 80003de:	f003 fc1b 	bl	8003c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80003f0:	2309      	movs	r3, #9
 80003f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fe:	2301      	movs	r3, #1
 8000400:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000402:	2301      	movs	r3, #1
 8000404:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000406:	2302      	movs	r3, #2
 8000408:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800040a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000410:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000414:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000416:	f107 0318 	add.w	r3, r7, #24
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fcb4 	bl	8001d88 <HAL_RCC_OscConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000426:	f000 fa7f 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042a:	230f      	movs	r3, #15
 800042c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042e:	2302      	movs	r3, #2
 8000430:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2102      	movs	r1, #2
 8000444:	4618      	mov	r0, r3
 8000446:	f001 ff1f 	bl	8002288 <HAL_RCC_ClockConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000450:	f000 fa6a 	bl	8000928 <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3740      	adds	r7, #64	; 0x40
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <MX_IWDG_Init+0x2c>)
 8000462:	4a0a      	ldr	r2, [pc, #40]	; (800048c <MX_IWDG_Init+0x30>)
 8000464:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <MX_IWDG_Init+0x2c>)
 8000468:	2206      	movs	r2, #6
 800046a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <MX_IWDG_Init+0x2c>)
 800046e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000472:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000474:	4804      	ldr	r0, [pc, #16]	; (8000488 <MX_IWDG_Init+0x2c>)
 8000476:	f001 fc3f 	bl	8001cf8 <HAL_IWDG_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000480:	f000 fa52 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200004fc 	.word	0x200004fc
 800048c:	40003000 	.word	0x40003000

08000490 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000494:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <MX_SPI1_Init+0x64>)
 8000496:	4a18      	ldr	r2, [pc, #96]	; (80004f8 <MX_SPI1_Init+0x68>)
 8000498:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800049a:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <MX_SPI1_Init+0x64>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <MX_SPI1_Init+0x64>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004a6:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <MX_SPI1_Init+0x64>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_SPI1_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <MX_SPI1_Init+0x64>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004b8:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_SPI1_Init+0x64>)
 80004ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_SPI1_Init+0x64>)
 80004c2:	2228      	movs	r2, #40	; 0x28
 80004c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_SPI1_Init+0x64>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_SPI1_Init+0x64>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_SPI1_Init+0x64>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_SPI1_Init+0x64>)
 80004da:	220a      	movs	r2, #10
 80004dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_SPI1_Init+0x64>)
 80004e0:	f002 f86e 	bl	80025c0 <HAL_SPI_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80004ea:	f000 fa1d 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200005d8 	.word	0x200005d8
 80004f8:	40013000 	.word	0x40013000

080004fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b096      	sub	sp, #88	; 0x58
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800051a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
 800052a:	615a      	str	r2, [r3, #20]
 800052c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2220      	movs	r2, #32
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f003 fb6f 	bl	8003c18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800053a:	4b42      	ldr	r3, [pc, #264]	; (8000644 <MX_TIM1_Init+0x148>)
 800053c:	4a42      	ldr	r2, [pc, #264]	; (8000648 <MX_TIM1_Init+0x14c>)
 800053e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000540:	4b40      	ldr	r3, [pc, #256]	; (8000644 <MX_TIM1_Init+0x148>)
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000546:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <MX_TIM1_Init+0x148>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 800054c:	4b3d      	ldr	r3, [pc, #244]	; (8000644 <MX_TIM1_Init+0x148>)
 800054e:	2201      	movs	r2, #1
 8000550:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000552:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <MX_TIM1_Init+0x148>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 7;
 8000558:	4b3a      	ldr	r3, [pc, #232]	; (8000644 <MX_TIM1_Init+0x148>)
 800055a:	2207      	movs	r2, #7
 800055c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800055e:	4b39      	ldr	r3, [pc, #228]	; (8000644 <MX_TIM1_Init+0x148>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000564:	4837      	ldr	r0, [pc, #220]	; (8000644 <MX_TIM1_Init+0x148>)
 8000566:	f002 f8af 	bl	80026c8 <HAL_TIM_Base_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000570:	f000 f9da 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800057a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800057e:	4619      	mov	r1, r3
 8000580:	4830      	ldr	r0, [pc, #192]	; (8000644 <MX_TIM1_Init+0x148>)
 8000582:	f002 fc2b 	bl	8002ddc <HAL_TIM_ConfigClockSource>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800058c:	f000 f9cc 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000590:	482c      	ldr	r0, [pc, #176]	; (8000644 <MX_TIM1_Init+0x148>)
 8000592:	f002 f9ab 	bl	80028ec <HAL_TIM_PWM_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800059c:	f000 f9c4 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80005a0:	2108      	movs	r1, #8
 80005a2:	4828      	ldr	r0, [pc, #160]	; (8000644 <MX_TIM1_Init+0x148>)
 80005a4:	f002 f9fa 	bl	800299c <HAL_TIM_OnePulse_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80005ae:	f000 f9bb 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005be:	4619      	mov	r1, r3
 80005c0:	4820      	ldr	r0, [pc, #128]	; (8000644 <MX_TIM1_Init+0x148>)
 80005c2:	f003 f85b 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80005cc:	f000 f9ac 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d0:	2360      	movs	r3, #96	; 0x60
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d8:	2300      	movs	r3, #0
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005dc:	2300      	movs	r3, #0
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	4813      	ldr	r0, [pc, #76]	; (8000644 <MX_TIM1_Init+0x148>)
 80005f6:	f002 fb33 	bl	8002c60 <HAL_TIM_PWM_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000600:	f000 f992 	bl	8000928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4619      	mov	r1, r3
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <MX_TIM1_Init+0x148>)
 8000628:	f003 f886 	bl	8003738 <HAL_TIMEx_ConfigBreakDeadTime>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000632:	f000 f979 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <MX_TIM1_Init+0x148>)
 8000638:	f000 fd2e 	bl	8001098 <HAL_TIM_MspPostInit>

}
 800063c:	bf00      	nop
 800063e:	3758      	adds	r7, #88	; 0x58
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000590 	.word	0x20000590
 8000648:	40012c00 	.word	0x40012c00

0800064c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08e      	sub	sp, #56	; 0x38
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800067e:	4b34      	ldr	r3, [pc, #208]	; (8000750 <MX_TIM2_Init+0x104>)
 8000680:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000684:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <MX_TIM2_Init+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068c:	4b30      	ldr	r3, [pc, #192]	; (8000750 <MX_TIM2_Init+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000692:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <MX_TIM2_Init+0x104>)
 8000694:	2207      	movs	r2, #7
 8000696:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000698:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <MX_TIM2_Init+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069e:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <MX_TIM2_Init+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a4:	482a      	ldr	r0, [pc, #168]	; (8000750 <MX_TIM2_Init+0x104>)
 80006a6:	f002 f80f 	bl	80026c8 <HAL_TIM_Base_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006b0:	f000 f93a 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006b4:	4826      	ldr	r0, [pc, #152]	; (8000750 <MX_TIM2_Init+0x104>)
 80006b6:	f002 f919 	bl	80028ec <HAL_TIM_PWM_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80006c0:	f000 f932 	bl	8000928 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80006c4:	2307      	movs	r3, #7
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80006cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d0:	4619      	mov	r1, r3
 80006d2:	481f      	ldr	r0, [pc, #124]	; (8000750 <MX_TIM2_Init+0x104>)
 80006d4:	f002 fc39 	bl	8002f4a <HAL_TIM_SlaveConfigSynchro>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006de:	f000 f923 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4817      	ldr	r0, [pc, #92]	; (8000750 <MX_TIM2_Init+0x104>)
 80006f2:	f002 ffc3 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80006fc:	f000 f914 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000700:	2360      	movs	r3, #96	; 0x60
 8000702:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000708:	2302      	movs	r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	4619      	mov	r1, r3
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <MX_TIM2_Init+0x104>)
 8000718:	f002 faa2 	bl	8002c60 <HAL_TIM_PWM_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000722:	f000 f901 	bl	8000928 <Error_Handler>
  }
  sConfigOC.Pulse = 7;
 8000726:	2307      	movs	r3, #7
 8000728:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	2204      	movs	r2, #4
 800072e:	4619      	mov	r1, r3
 8000730:	4807      	ldr	r0, [pc, #28]	; (8000750 <MX_TIM2_Init+0x104>)
 8000732:	f002 fa95 	bl	8002c60 <HAL_TIM_PWM_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 800073c:	f000 f8f4 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <MX_TIM2_Init+0x104>)
 8000742:	f000 fca9 	bl	8001098 <HAL_TIM_MspPostInit>

}
 8000746:	bf00      	nop
 8000748:	3738      	adds	r7, #56	; 0x38
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000630 	.word	0x20000630

08000754 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_TIM3_Init+0xa4>)
 8000772:	4a22      	ldr	r2, [pc, #136]	; (80007fc <MX_TIM3_Init+0xa8>)
 8000774:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_TIM3_Init+0xa4>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_TIM3_Init+0xa4>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 700;
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_TIM3_Init+0xa4>)
 8000784:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000788:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_TIM3_Init+0xa4>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_TIM3_Init+0xa4>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000796:	4818      	ldr	r0, [pc, #96]	; (80007f8 <MX_TIM3_Init+0xa4>)
 8000798:	f001 ff96 	bl	80026c8 <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f8c1 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4619      	mov	r1, r3
 80007b2:	4811      	ldr	r0, [pc, #68]	; (80007f8 <MX_TIM3_Init+0xa4>)
 80007b4:	f002 fb12 	bl	8002ddc <HAL_TIM_ConfigClockSource>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 f8b3 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80007c2:	2108      	movs	r1, #8
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <MX_TIM3_Init+0xa4>)
 80007c6:	f002 f8e9 	bl	800299c <HAL_TIM_OnePulse_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80007d0:	f000 f8aa 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80007d4:	2310      	movs	r3, #16
 80007d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_TIM3_Init+0xa4>)
 80007e2:	f002 ff4b 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80007ec:	f000 f89c 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000508 	.word	0x20000508
 80007fc:	40000400 	.word	0x40000400

08000800 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <MX_USART1_UART_Init+0x50>)
 8000808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_USART1_UART_Init+0x4c>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000838:	f002 ffe1 	bl	80037fe <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000842:	f000 f871 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000550 	.word	0x20000550
 8000850:	40013800 	.word	0x40013800

08000854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_DMA_Init+0x38>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a0b      	ldr	r2, [pc, #44]	; (800088c <MX_DMA_Init+0x38>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_DMA_Init+0x38>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	200f      	movs	r0, #15
 8000878:	f000 fea7 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800087c:	200f      	movs	r0, #15
 800087e:	f000 fec0 	bl	8001602 <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_GPIO_Init+0x90>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <MX_GPIO_Init+0x90>)
 80008aa:	f043 0320 	orr.w	r3, r3, #32
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_GPIO_Init+0x90>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0320 	and.w	r3, r3, #32
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_GPIO_Init+0x90>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a17      	ldr	r2, [pc, #92]	; (8000920 <MX_GPIO_Init+0x90>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_GPIO_Init+0x90>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_GPIO_Init+0x90>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a11      	ldr	r2, [pc, #68]	; (8000920 <MX_GPIO_Init+0x90>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_GPIO_Init+0x90>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B1_Pin|Matrix_CLK_Pin
 80008ec:	2200      	movs	r2, #0
 80008ee:	f64b 71fb 	movw	r1, #49147	; 0xbffb
 80008f2:	480c      	ldr	r0, [pc, #48]	; (8000924 <MX_GPIO_Init+0x94>)
 80008f4:	f001 f9e8 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B1_Pin Matrix_CLK_Pin
                           Matrix_LAT_Pin Matrix_OE_Pin Matrix_B0_Pin Matrix_A_Pin
                           Matrix_B_Pin Matrix_C_Pin Matrix_D_Pin Matrix_E_Pin
                           Matrix_R1_Pin Matrix_G1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B1_Pin|Matrix_CLK_Pin
 80008f8:	f64b 73fb 	movw	r3, #49147	; 0xbffb
 80008fc:	613b      	str	r3, [r7, #16]
                          |Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_B0_Pin|Matrix_A_Pin
                          |Matrix_B_Pin|Matrix_C_Pin|Matrix_D_Pin|Matrix_E_Pin
                          |Matrix_R1_Pin|Matrix_G1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2302      	movs	r3, #2
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_GPIO_Init+0x94>)
 8000912:	f001 f87f 	bl	8001a14 <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000
 8000924:	40010c00 	.word	0x40010c00

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <_Z12DMA_CompleteP19__DMA_HandleTypeDef>:
//		instance->handleNeeded = true;
//		instance->Handle();
//	}
//}

void DMA_Complete(DMA_HandleTypeDef *hdma) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	instance->handleNeeded = true;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x24>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]

	instance->Handle();
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x24>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fa15 	bl	8000d78 <_ZN12MatrixDriver6HandleEv>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200004a4 	.word	0x200004a4

0800095c <_ZN12MatrixDriver12BufferOffsetEhhh>:

uint16_t MatrixDriver::BufferOffset(uint8_t x, uint8_t y, uint8_t plane) {
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	4608      	mov	r0, r1
 8000966:	4611      	mov	r1, r2
 8000968:	461a      	mov	r2, r3
 800096a:	4603      	mov	r3, r0
 800096c:	70fb      	strb	r3, [r7, #3]
 800096e:	460b      	mov	r3, r1
 8000970:	70bb      	strb	r3, [r7, #2]
 8000972:	4613      	mov	r3, r2
 8000974:	707b      	strb	r3, [r7, #1]
	//TODO: Take plane into account for offset
	return ((y % (height / 2)) * width) + x;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	085b      	lsrs	r3, r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	78bb      	ldrb	r3, [r7, #2]
 8000980:	fbb3 f1f2 	udiv	r1, r3, r2
 8000984:	fb02 f201 	mul.w	r2, r2, r1
 8000988:	1a9b      	subs	r3, r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	b29b      	uxth	r3, r3
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	7852      	ldrb	r2, [r2, #1]
 8000992:	b292      	uxth	r2, r2
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	b29a      	uxth	r2, r3
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	b29b      	uxth	r3, r3
 800099e:	4413      	add	r3, r2
 80009a0:	b29b      	uxth	r3, r3
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <_ZN12MatrixDriverC1EhhNS_8ScanTypeE>:

#define MIN(a,b) (((a)<(b))?(a):(b))

MatrixDriver::MatrixDriver(uint8_t width, uint8_t height, ScanType scanType) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	4608      	mov	r0, r1
 80009b6:	4611      	mov	r1, r2
 80009b8:	461a      	mov	r2, r3
 80009ba:	4603      	mov	r3, r0
 80009bc:	70fb      	strb	r3, [r7, #3]
 80009be:	460b      	mov	r3, r1
 80009c0:	70bb      	strb	r3, [r7, #2]
 80009c2:	4613      	mov	r3, r2
 80009c4:	707b      	strb	r3, [r7, #1]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	825a      	strh	r2, [r3, #18]
	this->width = width;
 80009d2:	78fa      	ldrb	r2, [r7, #3]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	705a      	strb	r2, [r3, #1]
	this->height = height;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	78ba      	ldrb	r2, [r7, #2]
 80009dc:	709a      	strb	r2, [r3, #2]
	this->scanType = scanType;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	787a      	ldrb	r2, [r7, #1]
 80009e2:	711a      	strb	r2, [r3, #4]
	this->planes = 1;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2201      	movs	r2, #1
 80009e8:	70da      	strb	r2, [r3, #3]

	this->bufferSize = (width * (height / 2) * planes);
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	78ba      	ldrb	r2, [r7, #2]
 80009f0:	0852      	lsrs	r2, r2, #1
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	b292      	uxth	r2, r2
 80009f6:	fb02 f303 	mul.w	r3, r2, r3
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	78d2      	ldrb	r2, [r2, #3]
 8000a00:	b292      	uxth	r2, r2
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	80da      	strh	r2, [r3, #6]

	this->sendBufferA = true;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	715a      	strb	r2, [r3, #5]
	this->bufferA = new uint16_t[bufferSize];
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	88db      	ldrh	r3, [r3, #6]
 8000a16:	4a3b      	ldr	r2, [pc, #236]	; (8000b04 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x158>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d801      	bhi.n	8000a20 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x74>
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	e001      	b.n	8000a24 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x78>
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 f8a1 	bl	8003b6c <_Znaj>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	609a      	str	r2, [r3, #8]
	this->bufferB = new uint16_t[bufferSize];
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	88db      	ldrh	r3, [r3, #6]
 8000a36:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x158>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d801      	bhi.n	8000a40 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x94>
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	e001      	b.n	8000a44 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x98>
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a44:	4618      	mov	r0, r3
 8000a46:	f003 f891 	bl	8003b6c <_Znaj>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60da      	str	r2, [r3, #12]

	for (uint8_t y = 0; y < height / 2; y++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]
 8000a56:	78bb      	ldrb	r3, [r7, #2]
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	7bfa      	ldrb	r2, [r7, #15]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d241      	bcs.n	8000ae6 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x13a>
		uint8_t previousRow = y == 0 ? (height / 2) - 1 : y - 1;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d105      	bne.n	8000a74 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xc8>
 8000a68:	78bb      	ldrb	r3, [r7, #2]
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	e002      	b.n	8000a7a <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xce>
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	733b      	strb	r3, [r7, #12]

		uint16_t rowLines = (previousRow & 0x01 ? 0x0001 << A_SHIFT : 0)
 8000a7c:	7b3b      	ldrb	r3, [r7, #12]
 8000a7e:	00db      	lsls	r3, r3, #3
				| (previousRow & 0x02 ? 0x0001 << B_SHIFT : 0)
				| (previousRow & 0x04 ? 0x0001 << C_SHIFT : 0)
				| (previousRow & 0x08 ? 0x0001 << D_SHIFT : 0);
 8000a80:	b29b      	uxth	r3, r3
		uint16_t rowLines = (previousRow & 0x01 ? 0x0001 << A_SHIFT : 0)
 8000a82:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8000a86:	817b      	strh	r3, [r7, #10]

		for (uint8_t plane = 0; plane < planes; plane++) {
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73bb      	strb	r3, [r7, #14]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	78db      	ldrb	r3, [r3, #3]
 8000a90:	7bba      	ldrb	r2, [r7, #14]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d223      	bcs.n	8000ade <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x132>
			for (uint8_t x = 0; x < width; x++) {
 8000a96:	2300      	movs	r3, #0
 8000a98:	737b      	strb	r3, [r7, #13]
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	7b7a      	ldrb	r2, [r7, #13]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d219      	bcs.n	8000ad6 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x12a>

				uint16_t offset = BufferOffset(x, y, plane);
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	7bfa      	ldrb	r2, [r7, #15]
 8000aa6:	7b79      	ldrb	r1, [r7, #13]
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff57 	bl	800095c <_ZN12MatrixDriver12BufferOffsetEhhh>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	813b      	strh	r3, [r7, #8]

				bufferA[offset] = rowLines;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	893b      	ldrh	r3, [r7, #8]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	897a      	ldrh	r2, [r7, #10]
 8000abe:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = rowLines;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	893b      	ldrh	r3, [r7, #8]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	897a      	ldrh	r2, [r7, #10]
 8000acc:	801a      	strh	r2, [r3, #0]
			for (uint8_t x = 0; x < width; x++) {
 8000ace:	7b7b      	ldrb	r3, [r7, #13]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	737b      	strb	r3, [r7, #13]
 8000ad4:	e7e1      	b.n	8000a9a <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xee>
		for (uint8_t plane = 0; plane < planes; plane++) {
 8000ad6:	7bbb      	ldrb	r3, [r7, #14]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	73bb      	strb	r3, [r7, #14]
 8000adc:	e7d6      	b.n	8000a8c <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xe0>
	for (uint8_t y = 0; y < height / 2; y++) {
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e7b7      	b.n	8000a56 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xaa>
	//DMA must complete at the end of a row to allow
	//an opportunity to latch the data but it cannot exceed
	//32 DMA operations due to the TIM1 RCR being limited to a uint8_t
	//and an effective 7 RCR / operation.
	//RCR = (OPS * 7) - 1
	maxDmaOperations = MIN(32, width);
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	2b20      	cmp	r3, #32
 8000aea:	bf28      	it	cs
 8000aec:	2320      	movcs	r3, #32
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	741a      	strb	r2, [r3, #16]

	instance = this;
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x15c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
}
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	3ffffffc 	.word	0x3ffffffc
 8000b08:	200004a4 	.word	0x200004a4

08000b0c <_ZN12MatrixDriver4openEv>:

void MatrixDriver::open() {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "Open\n", 5, 10);
 8000b14:	230a      	movs	r3, #10
 8000b16:	2205      	movs	r2, #5
 8000b18:	4920      	ldr	r1, [pc, #128]	; (8000b9c <_ZN12MatrixDriver4openEv+0x90>)
 8000b1a:	4821      	ldr	r0, [pc, #132]	; (8000ba0 <_ZN12MatrixDriver4openEv+0x94>)
 8000b1c:	f002 febc 	bl	8003898 <HAL_UART_Transmit>

	hdma_tim2_ch1.XferCpltCallback = DMA_Complete;
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <_ZN12MatrixDriver4openEv+0x98>)
 8000b22:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <_ZN12MatrixDriver4openEv+0x9c>)
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	201c      	movs	r0, #28
 8000b2c:	f000 fd4d 	bl	80015ca <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b30:	201c      	movs	r0, #28
 8000b32:	f000 fd66 	bl	8001602 <HAL_NVIC_EnableIRQ>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <_ZN12MatrixDriver4openEv+0xa0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <_ZN12MatrixDriver4openEv+0xa0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f042 0201 	orr.w	r2, r2, #1
 8000b44:	60da      	str	r2, [r3, #12]

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <_ZN12MatrixDriver4openEv+0xa4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <_ZN12MatrixDriver4openEv+0xa4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b54:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <_ZN12MatrixDriver4openEv+0xa4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fd68 	bl	8003634 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <_ZN12MatrixDriver4openEv+0xa4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fd61 	bl	8003634 <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start(&htim2);
 8000b72:	480f      	ldr	r0, [pc, #60]	; (8000bb0 <_ZN12MatrixDriver4openEv+0xa4>)
 8000b74:	f001 fdf8 	bl	8002768 <HAL_TIM_Base_Start>

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <_ZN12MatrixDriver4openEv+0xa0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 fd57 	bl	8003634 <TIM_CCxChannelCmd>

	nextDmaOffset = 0;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	825a      	strh	r2, [r3, #18]

	StartNextDma();
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f913 	bl	8000db8 <_ZN12MatrixDriver12StartNextDmaEv>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	08004504 	.word	0x08004504
 8000ba0:	20000550 	.word	0x20000550
 8000ba4:	200004b8 	.word	0x200004b8
 8000ba8:	08000935 	.word	0x08000935
 8000bac:	20000590 	.word	0x20000590
 8000bb0:	20000630 	.word	0x20000630

08000bb4 <_ZN12MatrixDriver9PlaneBitsEh>:
//
//	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel3, (uint32_t) outputBuffer,
//			(uint32_t) &(GPIOB->ODR), bufferSize);
}

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0x00;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]
//	if (value > 31) {
//		result |= 0x02;
//		value -= 31;
//	}

	if (value > 1) {
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d906      	bls.n	8000bd8 <_ZN12MatrixDriver9PlaneBitsEh+0x24>
		result |= 0x01;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
		value -= 1;
 8000bd2:	78fb      	ldrb	r3, [r7, #3]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	70fb      	strb	r3, [r7, #3]
	}

	return result;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <_ZN12MatrixDriver8SetPixelEhhhhh>:
		}
	}
}

void MatrixDriver::SetPixel(uint8_t x, uint8_t y, uint8_t r, uint8_t g,
		uint8_t b) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	4608      	mov	r0, r1
 8000bee:	4611      	mov	r1, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	70fb      	strb	r3, [r7, #3]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	70bb      	strb	r3, [r7, #2]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	707b      	strb	r3, [r7, #1]
	uint8_t rShift, gShift, bShift;

	//Set data into the buffer we aren't sending at the moment
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	795b      	ldrb	r3, [r3, #5]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <_ZN12MatrixDriver8SetPixelEhhhhh+0x28>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	e001      	b.n	8000c10 <_ZN12MatrixDriver8SetPixelEhhhhh+0x2c>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	617b      	str	r3, [r7, #20]

	if (y < (height / 2)) {
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	789b      	ldrb	r3, [r3, #2]
 8000c16:	085b      	lsrs	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	78ba      	ldrb	r2, [r7, #2]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d206      	bcs.n	8000c2e <_ZN12MatrixDriver8SetPixelEhhhhh+0x4a>
		rShift = R0_SHIFT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	77fb      	strb	r3, [r7, #31]
		gShift = G0_SHIFT;
 8000c24:	2301      	movs	r3, #1
 8000c26:	77bb      	strb	r3, [r7, #30]
		bShift = B0_SHIFT;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	777b      	strb	r3, [r7, #29]
 8000c2c:	e005      	b.n	8000c3a <_ZN12MatrixDriver8SetPixelEhhhhh+0x56>
	} else {
		rShift = R1_SHIFT;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	77fb      	strb	r3, [r7, #31]
		gShift = G1_SHIFT;
 8000c32:	2309      	movs	r3, #9
 8000c34:	77bb      	strb	r3, [r7, #30]
		bShift = B1_SHIFT;
 8000c36:	230a      	movs	r3, #10
 8000c38:	777b      	strb	r3, [r7, #29]
	}

	uint16_t pixelMask = (0x0001 << rShift) | (0x0001 << gShift)
 8000c3a:	7ffb      	ldrb	r3, [r7, #31]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	b21a      	sxth	r2, r3
 8000c44:	7fbb      	ldrb	r3, [r7, #30]
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21a      	sxth	r2, r3
			| (0x0001 << bShift);
 8000c52:	7f7b      	ldrb	r3, [r7, #29]
 8000c54:	2101      	movs	r1, #1
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b21b      	sxth	r3, r3
	uint16_t pixelMask = (0x0001 << rShift) | (0x0001 << gShift)
 8000c60:	827b      	strh	r3, [r7, #18]
	uint8_t rPlanes = PlaneBits(r);
 8000c62:	787b      	ldrb	r3, [r7, #1]
 8000c64:	4619      	mov	r1, r3
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffa4 	bl	8000bb4 <_ZN12MatrixDriver9PlaneBitsEh>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	747b      	strb	r3, [r7, #17]
	uint8_t gPlanes = PlaneBits(g);
 8000c70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c74:	4619      	mov	r1, r3
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ff9c 	bl	8000bb4 <_ZN12MatrixDriver9PlaneBitsEh>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	743b      	strb	r3, [r7, #16]
	uint8_t bPlanes = PlaneBits(b);
 8000c80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c84:	4619      	mov	r1, r3
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ff94 	bl	8000bb4 <_ZN12MatrixDriver9PlaneBitsEh>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	73fb      	strb	r3, [r7, #15]

	for (int plane = 0; plane < planes; plane++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	78db      	ldrb	r3, [r3, #3]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	da54      	bge.n	8000d4a <_ZN12MatrixDriver8SetPixelEhhhhh+0x166>
		uint16_t planePixelBits = (
				(rPlanes & (0x01 << plane)) ? 0x0001 << rShift : 0)
 8000ca0:	7c7a      	ldrb	r2, [r7, #17]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	fa42 f303 	asr.w	r3, r2, r3
 8000ca8:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & (0x01 << plane)) ? 0x0001 << gShift : 0)
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <_ZN12MatrixDriver8SetPixelEhhhhh+0xd8>
				(rPlanes & (0x01 << plane)) ? 0x0001 << rShift : 0)
 8000cb0:	7ffb      	ldrb	r3, [r7, #31]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
				| ((gPlanes & (0x01 << plane)) ? 0x0001 << gShift : 0)
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	e000      	b.n	8000cbe <_ZN12MatrixDriver8SetPixelEhhhhh+0xda>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	7c39      	ldrb	r1, [r7, #16]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa41 f303 	asr.w	r3, r1, r3
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d005      	beq.n	8000cda <_ZN12MatrixDriver8SetPixelEhhhhh+0xf6>
 8000cce:	7fbb      	ldrb	r3, [r7, #30]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	e000      	b.n	8000cdc <_ZN12MatrixDriver8SetPixelEhhhhh+0xf8>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b21a      	sxth	r2, r3
				| ((bPlanes & (0x01 << plane)) ? 0x0001 << bShift : 0);
 8000ce0:	7bf9      	ldrb	r1, [r7, #15]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	fa41 f303 	asr.w	r3, r1, r3
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d005      	beq.n	8000cfc <_ZN12MatrixDriver8SetPixelEhhhhh+0x118>
 8000cf0:	7f7b      	ldrb	r3, [r7, #29]
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	e000      	b.n	8000cfe <_ZN12MatrixDriver8SetPixelEhhhhh+0x11a>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = (
 8000d02:	81bb      	strh	r3, [r7, #12]
//				x, y, rPlanes, gPlanes, bPlanes, planePixelBits, pixelMask);

//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
//				10);

		uint16_t offset = BufferOffset(x, y, plane);
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	78ba      	ldrb	r2, [r7, #2]
 8000d0a:	78f9      	ldrb	r1, [r7, #3]
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fe25 	bl	800095c <_ZN12MatrixDriver12BufferOffsetEhhh>
 8000d12:	4603      	mov	r3, r0
 8000d14:	817b      	strh	r3, [r7, #10]

		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000d16:	897b      	ldrh	r3, [r7, #10]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d26:	43db      	mvns	r3, r3
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	b21a      	sxth	r2, r3
				| planePixelBits;
 8000d2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b219      	sxth	r1, r3
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000d36:	897b      	ldrh	r3, [r7, #10]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4413      	add	r3, r2
				| planePixelBits;
 8000d3e:	b28a      	uxth	r2, r1
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000d40:	801a      	strh	r2, [r3, #0]
	for (int plane = 0; plane < planes; plane++) {
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	3301      	adds	r3, #1
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	e7a4      	b.n	8000c94 <_ZN12MatrixDriver8SetPixelEhhhhh+0xb0>
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
	sendBufferA = !sendBufferA;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	795b      	ldrb	r3, [r3, #5]
 8000d5e:	f083 0301 	eor.w	r3, r3, #1
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	715a      	strb	r2, [r3, #5]

	nextDmaOffset = 0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	825a      	strh	r2, [r3, #18]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <_ZN12MatrixDriver6HandleEv>:
void MatrixDriver::Clock() {
//	GPIOB->BSRR = (0x0001 << CLK_SHIFT);
	//Clock will be cleared on next output
}

void MatrixDriver::Handle() {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	if (handleNeeded) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d013      	beq.n	8000db0 <_ZN12MatrixDriver6HandleEv+0x38>
		if((nextDmaOffset % width) == 0 )  {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	8a5b      	ldrh	r3, [r3, #18]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	7852      	ldrb	r2, [r2, #1]
 8000d90:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d94:	fb02 f201 	mul.w	r2, r2, r1
 8000d98:	1a9b      	subs	r3, r3, r2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d102      	bne.n	8000da4 <_ZN12MatrixDriver6HandleEv+0x2c>
			Latch();
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f866 	bl	8000e70 <_ZN12MatrixDriver5LatchEv>
		}

		StartNextDma();
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f807 	bl	8000db8 <_ZN12MatrixDriver12StartNextDmaEv>

		handleNeeded = false;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
	}
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_ZN12MatrixDriver12StartNextDmaEv>:

void MatrixDriver::StartNextDma() {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	uint16_t *outputBuffer = sendBufferA ? bufferA : bufferB;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	795b      	ldrb	r3, [r3, #5]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d002      	beq.n	8000dce <_ZN12MatrixDriver12StartNextDmaEv+0x16>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	e001      	b.n	8000dd2 <_ZN12MatrixDriver12StartNextDmaEv+0x1a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	617b      	str	r3, [r7, #20]
	outputBuffer += nextDmaOffset;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	8a5b      	ldrh	r3, [r3, #18]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4413      	add	r3, r2
 8000dde:	617b      	str	r3, [r7, #20]

	uint32_t operations = MIN(maxDmaOperations, bufferSize - nextDmaOffset);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	88db      	ldrh	r3, [r3, #6]
 8000de4:	461a      	mov	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	8a5b      	ldrh	r3, [r3, #18]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	7c12      	ldrb	r2, [r2, #16]
 8000df0:	4293      	cmp	r3, r2
 8000df2:	bfa8      	it	ge
 8000df4:	4613      	movge	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

	HAL_DMA_Start_IT(&hdma_tim2_ch1,
 8000df8:	6979      	ldr	r1, [r7, #20]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <_ZN12MatrixDriver12StartNextDmaEv+0xa8>)
 8000dfe:	4819      	ldr	r0, [pc, #100]	; (8000e64 <_ZN12MatrixDriver12StartNextDmaEv+0xac>)
 8000e00:	f000 fc74 	bl	80016ec <HAL_DMA_Start_IT>
			(uint32_t) outputBuffer,
			(uint32_t) &(GPIOB->ODR), operations);

	//Number of TIM1 ticks to drive data_size elements.
	uint8_t rcr = (operations * 8) - 1;
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]

	htim1.Instance->RCR = rcr;
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	7bfa      	ldrb	r2, [r7, #15]
 8000e16:	631a      	str	r2, [r3, #48]	; 0x30
	htim1.Instance->EGR = TIM_EGR_UG; //Generate an update event to absorb RCR
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	615a      	str	r2, [r3, #20]
	htim2.Instance->CNT = 0;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <_ZN12MatrixDriver12StartNextDmaEv+0xb4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim1);
 8000e28:	480f      	ldr	r0, [pc, #60]	; (8000e68 <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 8000e2a:	f001 fce7 	bl	80027fc <HAL_TIM_Base_Stop>

	HAL_TIM_Base_Start_IT(&htim1);
 8000e2e:	480e      	ldr	r0, [pc, #56]	; (8000e68 <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 8000e30:	f001 fd0a 	bl	8002848 <HAL_TIM_Base_Start_IT>

	nextDmaOffset += operations;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	8a5a      	ldrh	r2, [r3, #18]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	825a      	strh	r2, [r3, #18]

	if(nextDmaOffset >= bufferSize) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	8a5a      	ldrh	r2, [r3, #18]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	88db      	ldrh	r3, [r3, #6]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d302      	bcc.n	8000e56 <_ZN12MatrixDriver12StartNextDmaEv+0x9e>
		nextDmaOffset = 0;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	825a      	strh	r2, [r3, #18]
	}
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40010c0c 	.word	0x40010c0c
 8000e64:	200004b8 	.word	0x200004b8
 8000e68:	20000590 	.word	0x20000590
 8000e6c:	20000630 	.word	0x20000630

08000e70 <_ZN12MatrixDriver5LatchEv>:

void MatrixDriver::Latch() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
//
//	sprintf(buffer, "LAT Duration: %lu\n", duration);
//
//	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);

	HAL_IWDG_Refresh(&hiwdg);
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <_ZN12MatrixDriver5LatchEv+0x38>)
 8000e7a:	f000 ff76 	bl	8001d6a <HAL_IWDG_Refresh>

	//Disable output
	GPIOB->BSRR = (0x0001 << OE_SHIFT);
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <_ZN12MatrixDriver5LatchEv+0x3c>)
 8000e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e84:	611a      	str	r2, [r3, #16]
	//Latch output
	GPIOB->BSRR = (0x0001 << LAT_SHIFT);
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <_ZN12MatrixDriver5LatchEv+0x3c>)
 8000e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e8c:	611a      	str	r2, [r3, #16]
	//Reset Latch
	GPIOB->BSRR = (0x0001 << (LAT_SHIFT + 16));
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <_ZN12MatrixDriver5LatchEv+0x3c>)
 8000e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e94:	611a      	str	r2, [r3, #16]
	//Reset ~OE
	GPIOB->BSRR = (0x0001 << (OE_SHIFT + 16));
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <_ZN12MatrixDriver5LatchEv+0x3c>)
 8000e98:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e9c:	611a      	str	r2, [r3, #16]
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200004fc 	.word	0x200004fc
 8000eac:	40010c00 	.word	0x40010c00

08000eb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_MspInit+0x5c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_MspInit+0x60>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_MspInit+0x60>)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000

08000f14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <HAL_SPI_MspInit+0x88>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d12f      	bne.n	8000f94 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f64:	23a0      	movs	r3, #160	; 0xa0
 8000f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <HAL_SPI_MspInit+0x90>)
 8000f78:	f000 fd4c 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f7c:	2340      	movs	r3, #64	; 0x40
 8000f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_SPI_MspInit+0x90>)
 8000f90:	f000 fd40 	bl	8001a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40013000 	.word	0x40013000
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010800 	.word	0x40010800

08000fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a33      	ldr	r2, [pc, #204]	; (8001084 <HAL_TIM_Base_MspInit+0xdc>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fba:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HAL_TIM_Base_MspInit+0xe0>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4a32      	ldr	r2, [pc, #200]	; (8001088 <HAL_TIM_Base_MspInit+0xe0>)
 8000fc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fc4:	6193      	str	r3, [r2, #24]
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <HAL_TIM_Base_MspInit+0xe0>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fd2:	e052      	b.n	800107a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fdc:	d134      	bne.n	8001048 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_TIM_Base_MspInit+0xe0>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a29      	ldr	r2, [pc, #164]	; (8001088 <HAL_TIM_Base_MspInit+0xe0>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <HAL_TIM_Base_MspInit+0xe0>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <HAL_TIM_Base_MspInit+0xe4>)
 8000ff8:	4a25      	ldr	r2, [pc, #148]	; (8001090 <HAL_TIM_Base_MspInit+0xe8>)
 8000ffa:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <HAL_TIM_Base_MspInit+0xe4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001002:	4b22      	ldr	r3, [pc, #136]	; (800108c <HAL_TIM_Base_MspInit+0xe4>)
 8001004:	2240      	movs	r2, #64	; 0x40
 8001006:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <HAL_TIM_Base_MspInit+0xe4>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <HAL_TIM_Base_MspInit+0xe4>)
 8001010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001014:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_TIM_Base_MspInit+0xe4>)
 8001018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_TIM_Base_MspInit+0xe4>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_TIM_Base_MspInit+0xe4>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <HAL_TIM_Base_MspInit+0xe4>)
 800102c:	f000 fb04 	bl	8001638 <HAL_DMA_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8001036:	f7ff fc77 	bl	8000928 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <HAL_TIM_Base_MspInit+0xe4>)
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <HAL_TIM_Base_MspInit+0xe4>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001046:	e018      	b.n	800107a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a11      	ldr	r2, [pc, #68]	; (8001094 <HAL_TIM_Base_MspInit+0xec>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d113      	bne.n	800107a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_TIM_Base_MspInit+0xe0>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <HAL_TIM_Base_MspInit+0xe0>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_TIM_Base_MspInit+0xe0>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	201d      	movs	r0, #29
 8001070:	f000 faab 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001074:	201d      	movs	r0, #29
 8001076:	f000 fac4 	bl	8001602 <HAL_NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40012c00 	.word	0x40012c00
 8001088:	40021000 	.word	0x40021000
 800108c:	200004b8 	.word	0x200004b8
 8001090:	40020058 	.word	0x40020058
 8001094:	40000400 	.word	0x40000400

08001098 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <HAL_TIM_MspPostInit+0x98>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d119      	bne.n	80010ec <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_TIM_MspPostInit+0x9c>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_TIM_MspPostInit+0x9c>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_TIM_MspPostInit+0x9c>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2302      	movs	r3, #2
 80010dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <HAL_TIM_MspPostInit+0xa0>)
 80010e6:	f000 fc95 	bl	8001a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010ea:	e01c      	b.n	8001126 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f4:	d117      	bne.n	8001126 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_TIM_MspPostInit+0x9c>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_TIM_MspPostInit+0x9c>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	6193      	str	r3, [r2, #24]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_TIM_MspPostInit+0x9c>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800110e:	2302      	movs	r3, #2
 8001110:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2302      	movs	r3, #2
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <HAL_TIM_MspPostInit+0xa0>)
 8001122:	f000 fc77 	bl	8001a14 <HAL_GPIO_Init>
}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40012c00 	.word	0x40012c00
 8001134:	40021000 	.word	0x40021000
 8001138:	40010800 	.word	0x40010800

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <HAL_UART_MspInit+0x8c>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d131      	bne.n	80011c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_UART_MspInit+0x90>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <HAL_UART_MspInit+0x90>)
 8001162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_UART_MspInit+0x90>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_UART_MspInit+0x90>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <HAL_UART_MspInit+0x90>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_UART_MspInit+0x90>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800118c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001190:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	480b      	ldr	r0, [pc, #44]	; (80011d0 <HAL_UART_MspInit+0x94>)
 80011a2:	f000 fc37 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_UART_MspInit+0x94>)
 80011bc:	f000 fc2a 	bl	8001a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40013800 	.word	0x40013800
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010800 	.word	0x40010800

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <HardFault_Handler+0x4>

080011e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <MemManage_Handler+0x4>

080011ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <BusFault_Handler+0x4>

080011f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <UsageFault_Handler+0x4>

080011f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 f8e0 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <DMA1_Channel5_IRQHandler+0x10>)
 800122e:	f000 fabd 	bl	80017ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200004b8 	.word	0x200004b8

0800123c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <TIM3_IRQHandler+0x10>)
 8001242:	f001 fc04 	bl	8002a4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000508 	.word	0x20000508

08001250 <_getpid>:
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
 8001254:	2301      	movs	r3, #1
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <_kill>:
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
 8001268:	f002 fca4 	bl	8003bb4 <__errno>
 800126c:	4602      	mov	r2, r0
 800126e:	2316      	movs	r3, #22
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_exit>:
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffe7 	bl	800125e <_kill>
 8001290:	e7fe      	b.n	8001290 <_exit+0x12>
	...

08001294 <_sbrk>:
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
 80012c4:	f002 fc76 	bl	8003bb4 <__errno>
 80012c8:	4602      	mov	r2, r0
 80012ca:	230c      	movs	r3, #12
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20005000 	.word	0x20005000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	200004a8 	.word	0x200004a8
 80012fc:	20000680 	.word	0x20000680

08001300 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <Reset_Handler>:
 800130c:	2100      	movs	r1, #0
 800130e:	e003      	b.n	8001318 <LoopCopyDataInit>

08001310 <CopyDataInit>:
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <LoopFillZerobss+0x14>)
 8001312:	585b      	ldr	r3, [r3, r1]
 8001314:	5043      	str	r3, [r0, r1]
 8001316:	3104      	adds	r1, #4

08001318 <LoopCopyDataInit>:
 8001318:	480a      	ldr	r0, [pc, #40]	; (8001344 <LoopFillZerobss+0x18>)
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <LoopFillZerobss+0x1c>)
 800131c:	1842      	adds	r2, r0, r1
 800131e:	429a      	cmp	r2, r3
 8001320:	d3f6      	bcc.n	8001310 <CopyDataInit>
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <LoopFillZerobss+0x20>)
 8001324:	e002      	b.n	800132c <LoopFillZerobss>

08001326 <FillZerobss>:
 8001326:	2300      	movs	r3, #0
 8001328:	f842 3b04 	str.w	r3, [r2], #4

0800132c <LoopFillZerobss>:
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <LoopFillZerobss+0x24>)
 800132e:	429a      	cmp	r2, r3
 8001330:	d3f9      	bcc.n	8001326 <FillZerobss>
 8001332:	f7ff ffe5 	bl	8001300 <SystemInit>
 8001336:	f002 fc43 	bl	8003bc0 <__libc_init_array>
 800133a:	f7ff f82f 	bl	800039c <main>
 800133e:	4770      	bx	lr
 8001340:	080045c0 	.word	0x080045c0
 8001344:	20000000 	.word	0x20000000
 8001348:	20000070 	.word	0x20000070
 800134c:	20000070 	.word	0x20000070
 8001350:	20000680 	.word	0x20000680

08001354 <ADC1_2_IRQHandler>:
 8001354:	e7fe      	b.n	8001354 <ADC1_2_IRQHandler>
	...

08001358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_Init+0x28>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_Init+0x28>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f923 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f808 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff fd9c 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40022000 	.word	0x40022000

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x54>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x58>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f93b 	bl	800161e <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c0:	f000 f903 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_InitTick+0x5c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_IncTick+0x1c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_IncTick+0x20>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a03      	ldr	r2, [pc, #12]	; (8001404 <HAL_IncTick+0x20>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	20000008 	.word	0x20000008
 8001404:	20000678 	.word	0x20000678

08001408 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b02      	ldr	r3, [pc, #8]	; (8001418 <HAL_GetTick+0x10>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000678 	.word	0x20000678

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4906      	ldr	r1, [pc, #24]	; (80014b4 <__NVIC_EnableIRQ+0x34>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001594:	f7ff ff90 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff2d 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff42 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff90 	bl	800150c <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5f 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff35 	bl	8001480 <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa2 	bl	8001570 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e043      	b.n	80016d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_DMA_Init+0xa8>)
 8001656:	4413      	add	r3, r2
 8001658:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <HAL_DMA_Init+0xac>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	009a      	lsls	r2, r3, #2
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <HAL_DMA_Init+0xb0>)
 800166a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001682:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001686:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800169c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	bffdfff8 	.word	0xbffdfff8
 80016e4:	cccccccd 	.word	0xcccccccd
 80016e8:	40020000 	.word	0x40020000

080016ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_DMA_Start_IT+0x20>
 8001708:	2302      	movs	r3, #2
 800170a:	e04a      	b.n	80017a2 <HAL_DMA_Start_IT+0xb6>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800171a:	2b01      	cmp	r3, #1
 800171c:	d13a      	bne.n	8001794 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2202      	movs	r2, #2
 8001722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f938 	bl	80019b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 020e 	orr.w	r2, r2, #14
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e00f      	b.n	8001782 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0204 	bic.w	r2, r2, #4
 8001770:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 020a 	orr.w	r2, r2, #10
 8001780:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 0201 	orr.w	r2, r2, #1
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e005      	b.n	80017a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800179c:	2302      	movs	r3, #2
 800179e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	2204      	movs	r2, #4
 80017ca:	409a      	lsls	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d04f      	beq.n	8001874 <HAL_DMA_IRQHandler+0xc8>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d04a      	beq.n	8001874 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a66      	ldr	r2, [pc, #408]	; (800199c <HAL_DMA_IRQHandler+0x1f0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d029      	beq.n	800185a <HAL_DMA_IRQHandler+0xae>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a65      	ldr	r2, [pc, #404]	; (80019a0 <HAL_DMA_IRQHandler+0x1f4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d022      	beq.n	8001856 <HAL_DMA_IRQHandler+0xaa>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a63      	ldr	r2, [pc, #396]	; (80019a4 <HAL_DMA_IRQHandler+0x1f8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01a      	beq.n	8001850 <HAL_DMA_IRQHandler+0xa4>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a62      	ldr	r2, [pc, #392]	; (80019a8 <HAL_DMA_IRQHandler+0x1fc>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d012      	beq.n	800184a <HAL_DMA_IRQHandler+0x9e>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a60      	ldr	r2, [pc, #384]	; (80019ac <HAL_DMA_IRQHandler+0x200>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00a      	beq.n	8001844 <HAL_DMA_IRQHandler+0x98>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a5f      	ldr	r2, [pc, #380]	; (80019b0 <HAL_DMA_IRQHandler+0x204>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d102      	bne.n	800183e <HAL_DMA_IRQHandler+0x92>
 8001838:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800183c:	e00e      	b.n	800185c <HAL_DMA_IRQHandler+0xb0>
 800183e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001842:	e00b      	b.n	800185c <HAL_DMA_IRQHandler+0xb0>
 8001844:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001848:	e008      	b.n	800185c <HAL_DMA_IRQHandler+0xb0>
 800184a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800184e:	e005      	b.n	800185c <HAL_DMA_IRQHandler+0xb0>
 8001850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001854:	e002      	b.n	800185c <HAL_DMA_IRQHandler+0xb0>
 8001856:	2340      	movs	r3, #64	; 0x40
 8001858:	e000      	b.n	800185c <HAL_DMA_IRQHandler+0xb0>
 800185a:	2304      	movs	r3, #4
 800185c:	4a55      	ldr	r2, [pc, #340]	; (80019b4 <HAL_DMA_IRQHandler+0x208>)
 800185e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 8094 	beq.w	8001992 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001872:	e08e      	b.n	8001992 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	2202      	movs	r2, #2
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d056      	beq.n	8001932 <HAL_DMA_IRQHandler+0x186>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d051      	beq.n	8001932 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10b      	bne.n	80018b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 020a 	bic.w	r2, r2, #10
 80018aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a38      	ldr	r2, [pc, #224]	; (800199c <HAL_DMA_IRQHandler+0x1f0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d029      	beq.n	8001912 <HAL_DMA_IRQHandler+0x166>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a37      	ldr	r2, [pc, #220]	; (80019a0 <HAL_DMA_IRQHandler+0x1f4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d022      	beq.n	800190e <HAL_DMA_IRQHandler+0x162>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a35      	ldr	r2, [pc, #212]	; (80019a4 <HAL_DMA_IRQHandler+0x1f8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d01a      	beq.n	8001908 <HAL_DMA_IRQHandler+0x15c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a34      	ldr	r2, [pc, #208]	; (80019a8 <HAL_DMA_IRQHandler+0x1fc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d012      	beq.n	8001902 <HAL_DMA_IRQHandler+0x156>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a32      	ldr	r2, [pc, #200]	; (80019ac <HAL_DMA_IRQHandler+0x200>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00a      	beq.n	80018fc <HAL_DMA_IRQHandler+0x150>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a31      	ldr	r2, [pc, #196]	; (80019b0 <HAL_DMA_IRQHandler+0x204>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <HAL_DMA_IRQHandler+0x14a>
 80018f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018f4:	e00e      	b.n	8001914 <HAL_DMA_IRQHandler+0x168>
 80018f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fa:	e00b      	b.n	8001914 <HAL_DMA_IRQHandler+0x168>
 80018fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001900:	e008      	b.n	8001914 <HAL_DMA_IRQHandler+0x168>
 8001902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001906:	e005      	b.n	8001914 <HAL_DMA_IRQHandler+0x168>
 8001908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800190c:	e002      	b.n	8001914 <HAL_DMA_IRQHandler+0x168>
 800190e:	2320      	movs	r3, #32
 8001910:	e000      	b.n	8001914 <HAL_DMA_IRQHandler+0x168>
 8001912:	2302      	movs	r3, #2
 8001914:	4a27      	ldr	r2, [pc, #156]	; (80019b4 <HAL_DMA_IRQHandler+0x208>)
 8001916:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	2b00      	cmp	r3, #0
 8001926:	d034      	beq.n	8001992 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001930:	e02f      	b.n	8001992 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	2208      	movs	r2, #8
 8001938:	409a      	lsls	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d028      	beq.n	8001994 <HAL_DMA_IRQHandler+0x1e8>
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d023      	beq.n	8001994 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 020e 	bic.w	r2, r2, #14
 800195a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001964:	2101      	movs	r1, #1
 8001966:	fa01 f202 	lsl.w	r2, r1, r2
 800196a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
    }
  }
  return;
 8001992:	bf00      	nop
 8001994:	bf00      	nop
}
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40020008 	.word	0x40020008
 80019a0:	4002001c 	.word	0x4002001c
 80019a4:	40020030 	.word	0x40020030
 80019a8:	40020044 	.word	0x40020044
 80019ac:	40020058 	.word	0x40020058
 80019b0:	4002006c 	.word	0x4002006c
 80019b4:	40020000 	.word	0x40020000

080019b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f202 	lsl.w	r2, r1, r2
 80019d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d108      	bne.n	80019f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019f6:	e007      	b.n	8001a08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	60da      	str	r2, [r3, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b08b      	sub	sp, #44	; 0x2c
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a26:	e127      	b.n	8001c78 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	f040 8116 	bne.w	8001c72 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b12      	cmp	r3, #18
 8001a4c:	d034      	beq.n	8001ab8 <HAL_GPIO_Init+0xa4>
 8001a4e:	2b12      	cmp	r3, #18
 8001a50:	d80d      	bhi.n	8001a6e <HAL_GPIO_Init+0x5a>
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d02b      	beq.n	8001aae <HAL_GPIO_Init+0x9a>
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d804      	bhi.n	8001a64 <HAL_GPIO_Init+0x50>
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d031      	beq.n	8001ac2 <HAL_GPIO_Init+0xae>
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d01c      	beq.n	8001a9c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a62:	e048      	b.n	8001af6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d043      	beq.n	8001af0 <HAL_GPIO_Init+0xdc>
 8001a68:	2b11      	cmp	r3, #17
 8001a6a:	d01b      	beq.n	8001aa4 <HAL_GPIO_Init+0x90>
          break;
 8001a6c:	e043      	b.n	8001af6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a6e:	4a89      	ldr	r2, [pc, #548]	; (8001c94 <HAL_GPIO_Init+0x280>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d026      	beq.n	8001ac2 <HAL_GPIO_Init+0xae>
 8001a74:	4a87      	ldr	r2, [pc, #540]	; (8001c94 <HAL_GPIO_Init+0x280>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d806      	bhi.n	8001a88 <HAL_GPIO_Init+0x74>
 8001a7a:	4a87      	ldr	r2, [pc, #540]	; (8001c98 <HAL_GPIO_Init+0x284>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d020      	beq.n	8001ac2 <HAL_GPIO_Init+0xae>
 8001a80:	4a86      	ldr	r2, [pc, #536]	; (8001c9c <HAL_GPIO_Init+0x288>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01d      	beq.n	8001ac2 <HAL_GPIO_Init+0xae>
          break;
 8001a86:	e036      	b.n	8001af6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a88:	4a85      	ldr	r2, [pc, #532]	; (8001ca0 <HAL_GPIO_Init+0x28c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <HAL_GPIO_Init+0xae>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	; (8001ca4 <HAL_GPIO_Init+0x290>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d016      	beq.n	8001ac2 <HAL_GPIO_Init+0xae>
 8001a94:	4a84      	ldr	r2, [pc, #528]	; (8001ca8 <HAL_GPIO_Init+0x294>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_GPIO_Init+0xae>
          break;
 8001a9a:	e02c      	b.n	8001af6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	623b      	str	r3, [r7, #32]
          break;
 8001aa2:	e028      	b.n	8001af6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e023      	b.n	8001af6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	623b      	str	r3, [r7, #32]
          break;
 8001ab6:	e01e      	b.n	8001af6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	330c      	adds	r3, #12
 8001abe:	623b      	str	r3, [r7, #32]
          break;
 8001ac0:	e019      	b.n	8001af6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aca:	2304      	movs	r3, #4
 8001acc:	623b      	str	r3, [r7, #32]
          break;
 8001ace:	e012      	b.n	8001af6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d105      	bne.n	8001ae4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	611a      	str	r2, [r3, #16]
          break;
 8001ae2:	e008      	b.n	8001af6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	615a      	str	r2, [r3, #20]
          break;
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
          break;
 8001af4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2bff      	cmp	r3, #255	; 0xff
 8001afa:	d801      	bhi.n	8001b00 <HAL_GPIO_Init+0xec>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	e001      	b.n	8001b04 <HAL_GPIO_Init+0xf0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3304      	adds	r3, #4
 8001b04:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2bff      	cmp	r3, #255	; 0xff
 8001b0a:	d802      	bhi.n	8001b12 <HAL_GPIO_Init+0xfe>
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x104>
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	3b08      	subs	r3, #8
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	210f      	movs	r1, #15
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	401a      	ands	r2, r3
 8001b2a:	6a39      	ldr	r1, [r7, #32]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	431a      	orrs	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8096 	beq.w	8001c72 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b46:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_GPIO_Init+0x298>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_GPIO_Init+0x298>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6193      	str	r3, [r2, #24]
 8001b52:	4b56      	ldr	r3, [pc, #344]	; (8001cac <HAL_GPIO_Init+0x298>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b5e:	4a54      	ldr	r2, [pc, #336]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4b      	ldr	r2, [pc, #300]	; (8001cb4 <HAL_GPIO_Init+0x2a0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x19e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4a      	ldr	r2, [pc, #296]	; (8001cb8 <HAL_GPIO_Init+0x2a4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x19a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a49      	ldr	r2, [pc, #292]	; (8001cbc <HAL_GPIO_Init+0x2a8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x196>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a48      	ldr	r2, [pc, #288]	; (8001cc0 <HAL_GPIO_Init+0x2ac>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x192>
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x1a0>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x1a0>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x1a0>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x1a0>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bc4:	493a      	ldr	r1, [pc, #232]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bde:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4938      	ldr	r1, [pc, #224]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
 8001bea:	e006      	b.n	8001bfa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bec:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	4933      	ldr	r1, [pc, #204]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	492e      	ldr	r1, [pc, #184]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
 8001c12:	e006      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	4929      	ldr	r1, [pc, #164]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	4924      	ldr	r1, [pc, #144]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
 8001c3a:	e006      	b.n	8001c4a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	491f      	ldr	r1, [pc, #124]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	491a      	ldr	r1, [pc, #104]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60cb      	str	r3, [r1, #12]
 8001c62:	e006      	b.n	8001c72 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	4915      	ldr	r1, [pc, #84]	; (8001cc4 <HAL_GPIO_Init+0x2b0>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f47f aed0 	bne.w	8001a28 <HAL_GPIO_Init+0x14>
  }
}
 8001c88:	bf00      	nop
 8001c8a:	372c      	adds	r7, #44	; 0x2c
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	10210000 	.word	0x10210000
 8001c98:	10110000 	.word	0x10110000
 8001c9c:	10120000 	.word	0x10120000
 8001ca0:	10310000 	.word	0x10310000
 8001ca4:	10320000 	.word	0x10320000
 8001ca8:	10220000 	.word	0x10220000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40010800 	.word	0x40010800
 8001cb8:	40010c00 	.word	0x40010c00
 8001cbc:	40011000 	.word	0x40011000
 8001cc0:	40011400 	.word	0x40011400
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ce4:	e003      	b.n	8001cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	041a      	lsls	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	611a      	str	r2, [r3, #16]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e02b      	b.n	8001d62 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001d12:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f245 5255 	movw	r2, #21845	; 0x5555
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6852      	ldr	r2, [r2, #4]
 8001d26:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6892      	ldr	r2, [r2, #8]
 8001d30:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001d32:	f7ff fb69 	bl	8001408 <HAL_GetTick>
 8001d36:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001d38:	e008      	b.n	8001d4c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001d3a:	f7ff fb65 	bl	8001408 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b26      	cmp	r3, #38	; 0x26
 8001d46:	d901      	bls.n	8001d4c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e00a      	b.n	8001d62 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f1      	bne.n	8001d3a <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d7a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e26c      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8087 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da8:	4b92      	ldr	r3, [pc, #584]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d00c      	beq.n	8001dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db4:	4b8f      	ldr	r3, [pc, #572]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d112      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d10b      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dce:	4b89      	ldr	r3, [pc, #548]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d06c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d168      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e246      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x76>
 8001df0:	4b80      	ldr	r3, [pc, #512]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a7f      	ldr	r2, [pc, #508]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	e02e      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x98>
 8001e06:	4b7b      	ldr	r3, [pc, #492]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b78      	ldr	r3, [pc, #480]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a77      	ldr	r2, [pc, #476]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e01d      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0xbc>
 8001e2a:	4b72      	ldr	r3, [pc, #456]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a71      	ldr	r2, [pc, #452]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6e      	ldr	r2, [pc, #440]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e44:	4b6b      	ldr	r3, [pc, #428]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6a      	ldr	r2, [pc, #424]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a67      	ldr	r2, [pc, #412]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fad0 	bl	8001408 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff facc 	bl	8001408 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1fa      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0xe4>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fabc 	bl	8001408 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff fab8 	bl	8001408 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1e6      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	4b53      	ldr	r3, [pc, #332]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x10c>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d063      	beq.n	8001f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec2:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ece:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d116      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1ba      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4939      	ldr	r1, [pc, #228]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	e03a      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa71 	bl	8001408 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fa6d 	bl	8001408 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e19b      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4927      	ldr	r1, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fa50 	bl	8001408 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fa4c 	bl	8001408 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e17a      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d03a      	beq.n	800200c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d019      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa4:	f7ff fa30 	bl	8001408 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7ff fa2c 	bl	8001408 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e15a      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f000 fada 	bl	8002584 <RCC_Delay>
 8001fd0:	e01c      	b.n	800200c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7ff fa16 	bl	8001408 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fde:	e00f      	b.n	8002000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fa12 	bl	8001408 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d908      	bls.n	8002000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e140      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	42420000 	.word	0x42420000
 8001ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	4b9e      	ldr	r3, [pc, #632]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e9      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a6 	beq.w	8002166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201e:	4b97      	ldr	r3, [pc, #604]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10d      	bne.n	8002046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b94      	ldr	r3, [pc, #592]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a93      	ldr	r2, [pc, #588]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b91      	ldr	r3, [pc, #580]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002042:	2301      	movs	r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b8e      	ldr	r3, [pc, #568]	; (8002280 <HAL_RCC_OscConfig+0x4f8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <HAL_RCC_OscConfig+0x4f8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a8a      	ldr	r2, [pc, #552]	; (8002280 <HAL_RCC_OscConfig+0x4f8>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7ff f9d3 	bl	8001408 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002066:	f7ff f9cf 	bl	8001408 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b64      	cmp	r3, #100	; 0x64
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0fd      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4b81      	ldr	r3, [pc, #516]	; (8002280 <HAL_RCC_OscConfig+0x4f8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x312>
 800208c:	4b7b      	ldr	r3, [pc, #492]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a7a      	ldr	r2, [pc, #488]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	e02d      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x334>
 80020a2:	4b76      	ldr	r3, [pc, #472]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a75      	ldr	r2, [pc, #468]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	4b73      	ldr	r3, [pc, #460]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a72      	ldr	r2, [pc, #456]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	e01c      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d10c      	bne.n	80020de <HAL_RCC_OscConfig+0x356>
 80020c4:	4b6d      	ldr	r3, [pc, #436]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a6c      	ldr	r2, [pc, #432]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	4b6a      	ldr	r3, [pc, #424]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a69      	ldr	r2, [pc, #420]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6213      	str	r3, [r2, #32]
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020de:	4b67      	ldr	r3, [pc, #412]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a66      	ldr	r2, [pc, #408]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	4b64      	ldr	r3, [pc, #400]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a63      	ldr	r2, [pc, #396]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d015      	beq.n	800212a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff f983 	bl	8001408 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7ff f97f 	bl	8001408 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0ab      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	4b57      	ldr	r3, [pc, #348]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ee      	beq.n	8002106 <HAL_RCC_OscConfig+0x37e>
 8002128:	e014      	b.n	8002154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7ff f96d 	bl	8001408 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7ff f969 	bl	8001408 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e095      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002148:	4b4c      	ldr	r3, [pc, #304]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ee      	bne.n	8002132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b48      	ldr	r3, [pc, #288]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a47      	ldr	r2, [pc, #284]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8081 	beq.w	8002272 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002170:	4b42      	ldr	r3, [pc, #264]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d061      	beq.n	8002240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d146      	bne.n	8002212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <HAL_RCC_OscConfig+0x4fc>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff f93d 	bl	8001408 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff f939 	bl	8001408 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e067      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	4b35      	ldr	r3, [pc, #212]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b8:	d108      	bne.n	80021cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	492d      	ldr	r1, [pc, #180]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a19      	ldr	r1, [r3, #32]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	430b      	orrs	r3, r1
 80021de:	4927      	ldr	r1, [pc, #156]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e4:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_RCC_OscConfig+0x4fc>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff f90d 	bl	8001408 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f2:	f7ff f909 	bl	8001408 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e037      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x46a>
 8002210:	e02f      	b.n	8002272 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_RCC_OscConfig+0x4fc>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff f8f6 	bl	8001408 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7ff f8f2 	bl	8001408 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e020      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x498>
 800223e:	e018      	b.n	8002272 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e013      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	429a      	cmp	r2, r3
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
 8002284:	42420060 	.word	0x42420060

08002288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0d0      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800229c:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d910      	bls.n	80022cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b67      	ldr	r3, [pc, #412]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 0207 	bic.w	r2, r3, #7
 80022b2:	4965      	ldr	r1, [pc, #404]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0b8      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e4:	4b59      	ldr	r3, [pc, #356]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022fc:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a52      	ldr	r2, [pc, #328]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002306:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	494d      	ldr	r1, [pc, #308]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d040      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d115      	bne.n	8002366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e07f      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002346:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e073      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e06b      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002366:	4b39      	ldr	r3, [pc, #228]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f023 0203 	bic.w	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4936      	ldr	r1, [pc, #216]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002378:	f7ff f846 	bl	8001408 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	e00a      	b.n	8002396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002380:	f7ff f842 	bl	8001408 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e053      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 020c 	and.w	r2, r3, #12
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d1eb      	bne.n	8002380 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d210      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0207 	bic.w	r2, r3, #7
 80023be:	4922      	ldr	r1, [pc, #136]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e032      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4916      	ldr	r1, [pc, #88]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	490e      	ldr	r1, [pc, #56]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002416:	f000 f821 	bl	800245c <HAL_RCC_GetSysClockFreq>
 800241a:	4601      	mov	r1, r0
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 8002428:	5cd3      	ldrb	r3, [r2, r3]
 800242a:	fa21 f303 	lsr.w	r3, r1, r3
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <HAL_RCC_ClockConfig+0x1cc>)
 8002430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x1d0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe ffa4 	bl	8001384 <HAL_InitTick>

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40022000 	.word	0x40022000
 800244c:	40021000 	.word	0x40021000
 8002450:	08004568 	.word	0x08004568
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b490      	push	{r4, r7}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002462:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002464:	1d3c      	adds	r4, r7, #4
 8002466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800246c:	4b28      	ldr	r3, [pc, #160]	; (8002510 <HAL_RCC_GetSysClockFreq+0xb4>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b04      	cmp	r3, #4
 8002494:	d002      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x40>
 8002496:	2b08      	cmp	r3, #8
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x46>
 800249a:	e02d      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <HAL_RCC_GetSysClockFreq+0xbc>)
 800249e:	623b      	str	r3, [r7, #32]
      break;
 80024a0:	e02d      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	0c9b      	lsrs	r3, r3, #18
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024ae:	4413      	add	r3, r2
 80024b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	0c5b      	lsrs	r3, r3, #17
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024ce:	4413      	add	r3, r2
 80024d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024da:	fb02 f203 	mul.w	r2, r2, r3
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
 80024e6:	e004      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	623b      	str	r3, [r7, #32]
      break;
 80024f6:	e002      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024fa:	623b      	str	r3, [r7, #32]
      break;
 80024fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bc90      	pop	{r4, r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	08004554 	.word	0x08004554
 8002510:	08004564 	.word	0x08004564
 8002514:	40021000 	.word	0x40021000
 8002518:	007a1200 	.word	0x007a1200
 800251c:	003d0900 	.word	0x003d0900

08002520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002524:	4b02      	ldr	r3, [pc, #8]	; (8002530 <HAL_RCC_GetHCLKFreq+0x10>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	20000000 	.word	0x20000000

08002534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002538:	f7ff fff2 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 800253c:	4601      	mov	r1, r0
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	4a03      	ldr	r2, [pc, #12]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	08004578 	.word	0x08004578

0800255c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002560:	f7ff ffde 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002564:	4601      	mov	r1, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0adb      	lsrs	r3, r3, #11
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4a03      	ldr	r2, [pc, #12]	; (8002580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	08004578 	.word	0x08004578

08002584 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <RCC_Delay+0x34>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <RCC_Delay+0x38>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0a5b      	lsrs	r3, r3, #9
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025a0:	bf00      	nop
  }
  while (Delay --);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	60fa      	str	r2, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f9      	bne.n	80025a0 <RCC_Delay+0x1c>
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000000 	.word	0x20000000
 80025bc:	10624dd3 	.word	0x10624dd3

080025c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e076      	b.n	80026c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d108      	bne.n	80025ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e2:	d009      	beq.n	80025f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
 80025ea:	e005      	b.n	80025f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe fc7e 	bl	8000f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	ea42 0103 	orr.w	r1, r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	0c1a      	lsrs	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f002 0204 	and.w	r2, r2, #4
 800269e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e041      	b.n	800275e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe fc5a 	bl	8000fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f000 fc8e 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e032      	b.n	80027e6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_TIM_Base_Start+0x88>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_TIM_Base_Start+0x48>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279a:	d009      	beq.n	80027b0 <HAL_TIM_Base_Start+0x48>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_TIM_Base_Start+0x8c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_TIM_Base_Start+0x48>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <HAL_TIM_Base_Start+0x90>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d111      	bne.n	80027d4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d010      	beq.n	80027e4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d2:	e007      	b.n	80027e4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40012c00 	.word	0x40012c00
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40000800 	.word	0x40000800

080027fc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	f241 1311 	movw	r3, #4369	; 0x1111
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10f      	bne.n	8002834 <HAL_TIM_Base_Stop+0x38>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	f240 4344 	movw	r3, #1092	; 0x444
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_TIM_Base_Stop+0x38>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e03a      	b.n	80028d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <HAL_TIM_Base_Start_IT+0x98>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00e      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x58>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d009      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x58>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x58>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a13      	ldr	r2, [pc, #76]	; (80028e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d111      	bne.n	80028c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d010      	beq.n	80028d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c2:	e007      	b.n	80028d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40000800 	.word	0x40000800

080028ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f839 	bl	800298a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 fb7c 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e041      	b.n	8002a34 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d106      	bne.n	80029ca <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f839 	bl	8002a3c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f000 fb23 	bl	8003028 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0208 	bic.w	r2, r2, #8
 80029f0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6819      	ldr	r1, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d122      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d11b      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0202 	mvn.w	r2, #2
 8002a7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 faae 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002a96:	e005      	b.n	8002aa4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 faa1 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fab0 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d122      	bne.n	8002afe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d11b      	bne.n	8002afe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f06f 0204 	mvn.w	r2, #4
 8002ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fa84 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002aea:	e005      	b.n	8002af8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fa77 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa86 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d122      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d11b      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0208 	mvn.w	r2, #8
 8002b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2204      	movs	r2, #4
 8002b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fa5a 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002b3e:	e005      	b.n	8002b4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa4d 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa5c 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	d122      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0210 	mvn.w	r2, #16
 8002b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fa30 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002b92:	e005      	b.n	8002ba0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fa23 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa32 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d10e      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f06f 0201 	mvn.w	r2, #1
 8002bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f9fe 	bl	8002fce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d10e      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d107      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fdf7 	bl	80037ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d10e      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d107      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f9f6 	bl	8003016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d10e      	bne.n	8002c56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d107      	bne.n	8002c56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f06f 0220 	mvn.w	r2, #32
 8002c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fdc2 	bl	80037da <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e0ac      	b.n	8002dd4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	f200 809f 	bhi.w	8002dc8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08002dc9 	.word	0x08002dc9
 8002c98:	08002dc9 	.word	0x08002dc9
 8002c9c:	08002dc9 	.word	0x08002dc9
 8002ca0:	08002d05 	.word	0x08002d05
 8002ca4:	08002dc9 	.word	0x08002dc9
 8002ca8:	08002dc9 	.word	0x08002dc9
 8002cac:	08002dc9 	.word	0x08002dc9
 8002cb0:	08002d47 	.word	0x08002d47
 8002cb4:	08002dc9 	.word	0x08002dc9
 8002cb8:	08002dc9 	.word	0x08002dc9
 8002cbc:	08002dc9 	.word	0x08002dc9
 8002cc0:	08002d87 	.word	0x08002d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fa0e 	bl	80030ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0208 	orr.w	r2, r2, #8
 8002cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0204 	bic.w	r2, r2, #4
 8002cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6999      	ldr	r1, [r3, #24]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	619a      	str	r2, [r3, #24]
      break;
 8002d02:	e062      	b.n	8002dca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fa54 	bl	80031b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6999      	ldr	r1, [r3, #24]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	021a      	lsls	r2, r3, #8
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	619a      	str	r2, [r3, #24]
      break;
 8002d44:	e041      	b.n	8002dca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fa9d 	bl	800328c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69da      	ldr	r2, [r3, #28]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0208 	orr.w	r2, r2, #8
 8002d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0204 	bic.w	r2, r2, #4
 8002d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69d9      	ldr	r1, [r3, #28]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	61da      	str	r2, [r3, #28]
      break;
 8002d84:	e021      	b.n	8002dca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fae7 	bl	8003360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69d9      	ldr	r1, [r3, #28]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	021a      	lsls	r2, r3, #8
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	61da      	str	r2, [r3, #28]
      break;
 8002dc6:	e000      	b.n	8002dca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002dc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_TIM_ConfigClockSource+0x18>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e0a6      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x166>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d067      	beq.n	8002efc <HAL_TIM_ConfigClockSource+0x120>
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d80b      	bhi.n	8002e48 <HAL_TIM_ConfigClockSource+0x6c>
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d073      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x140>
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d802      	bhi.n	8002e3e <HAL_TIM_ConfigClockSource+0x62>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d06f      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e3c:	e078      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d06c      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x140>
 8002e42:	2b30      	cmp	r3, #48	; 0x30
 8002e44:	d06a      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e46:	e073      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e48:	2b70      	cmp	r3, #112	; 0x70
 8002e4a:	d00d      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0x8c>
 8002e4c:	2b70      	cmp	r3, #112	; 0x70
 8002e4e:	d804      	bhi.n	8002e5a <HAL_TIM_ConfigClockSource+0x7e>
 8002e50:	2b50      	cmp	r3, #80	; 0x50
 8002e52:	d033      	beq.n	8002ebc <HAL_TIM_ConfigClockSource+0xe0>
 8002e54:	2b60      	cmp	r3, #96	; 0x60
 8002e56:	d041      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e58:	e06a      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5e:	d066      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x152>
 8002e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e64:	d017      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e66:	e063      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6899      	ldr	r1, [r3, #8]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f000 fbbd 	bl	80035f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]
      break;
 8002e94:	e04c      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f000 fba6 	bl	80035f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eb8:	609a      	str	r2, [r3, #8]
      break;
 8002eba:	e039      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f000 fb1d 	bl	8003508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2150      	movs	r1, #80	; 0x50
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fb74 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8002eda:	e029      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f000 fb3b 	bl	8003564 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2160      	movs	r1, #96	; 0x60
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fb64 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8002efa:	e019      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f000 fafd 	bl	8003508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fb54 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8002f1a:	e009      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f000 fb4b 	bl	80035c2 <TIM_ITRx_SetConfig>
        break;
 8002f2c:	e000      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e031      	b.n	8002fc6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002f72:	6839      	ldr	r1, [r7, #0]
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fa41 	bl	80033fc <TIM_SlaveTimer_SetConfig>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e018      	b.n	8002fc6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fb2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a29      	ldr	r2, [pc, #164]	; (80030e0 <TIM_Base_SetConfig+0xb8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00b      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d007      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <TIM_Base_SetConfig+0xbc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a25      	ldr	r2, [pc, #148]	; (80030e8 <TIM_Base_SetConfig+0xc0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <TIM_Base_SetConfig+0xb8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00b      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003078:	d007      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <TIM_Base_SetConfig+0xbc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a18      	ldr	r2, [pc, #96]	; (80030e8 <TIM_Base_SetConfig+0xc0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <TIM_Base_SetConfig+0xb8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d103      	bne.n	80030d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	615a      	str	r2, [r3, #20]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800

080030ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f023 0201 	bic.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f023 0302 	bic.w	r3, r3, #2
 8003134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <TIM_OC1_SetConfig+0xc8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d10c      	bne.n	8003162 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0308 	bic.w	r3, r3, #8
 800314e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f023 0304 	bic.w	r3, r3, #4
 8003160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <TIM_OC1_SetConfig+0xc8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d111      	bne.n	800318e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	621a      	str	r2, [r3, #32]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00

080031b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f023 0210 	bic.w	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f023 0320 	bic.w	r3, r3, #32
 8003202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <TIM_OC2_SetConfig+0xd0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d10d      	bne.n	8003234 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800321e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003232:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a14      	ldr	r2, [pc, #80]	; (8003288 <TIM_OC2_SetConfig+0xd0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d113      	bne.n	8003264 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800324a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40012c00 	.word	0x40012c00

0800328c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <TIM_OC3_SetConfig+0xd0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10d      	bne.n	8003306 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a14      	ldr	r2, [pc, #80]	; (800335c <TIM_OC3_SetConfig+0xd0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d113      	bne.n	8003336 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800331c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	621a      	str	r2, [r3, #32]
}
 8003350:	bf00      	nop
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00

08003360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	031b      	lsls	r3, r3, #12
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <TIM_OC4_SetConfig+0x98>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d109      	bne.n	80033d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	621a      	str	r2, [r3, #32]
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00

080033fc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003414:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0307 	bic.w	r3, r3, #7
 8003426:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b30      	cmp	r3, #48	; 0x30
 8003440:	d05c      	beq.n	80034fc <TIM_SlaveTimer_SetConfig+0x100>
 8003442:	2b30      	cmp	r3, #48	; 0x30
 8003444:	d806      	bhi.n	8003454 <TIM_SlaveTimer_SetConfig+0x58>
 8003446:	2b10      	cmp	r3, #16
 8003448:	d058      	beq.n	80034fc <TIM_SlaveTimer_SetConfig+0x100>
 800344a:	2b20      	cmp	r3, #32
 800344c:	d056      	beq.n	80034fc <TIM_SlaveTimer_SetConfig+0x100>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d054      	beq.n	80034fc <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003452:	e054      	b.n	80034fe <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003454:	2b50      	cmp	r3, #80	; 0x50
 8003456:	d03d      	beq.n	80034d4 <TIM_SlaveTimer_SetConfig+0xd8>
 8003458:	2b50      	cmp	r3, #80	; 0x50
 800345a:	d802      	bhi.n	8003462 <TIM_SlaveTimer_SetConfig+0x66>
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d010      	beq.n	8003482 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003460:	e04d      	b.n	80034fe <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003462:	2b60      	cmp	r3, #96	; 0x60
 8003464:	d040      	beq.n	80034e8 <TIM_SlaveTimer_SetConfig+0xec>
 8003466:	2b70      	cmp	r3, #112	; 0x70
 8003468:	d000      	beq.n	800346c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800346a:	e048      	b.n	80034fe <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68d9      	ldr	r1, [r3, #12]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f000 f8bb 	bl	80035f6 <TIM_ETR_SetConfig>
      break;
 8003480:	e03d      	b.n	80034fe <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b05      	cmp	r3, #5
 8003488:	d101      	bne.n	800348e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e038      	b.n	8003500 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	621a      	str	r2, [r3, #32]
      break;
 80034d2:	e014      	b.n	80034fe <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6899      	ldr	r1, [r3, #8]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	461a      	mov	r2, r3
 80034e2:	f000 f811 	bl	8003508 <TIM_TI1_ConfigInputStage>
      break;
 80034e6:	e00a      	b.n	80034fe <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6899      	ldr	r1, [r3, #8]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f000 f835 	bl	8003564 <TIM_TI2_ConfigInputStage>
      break;
 80034fa:	e000      	b.n	80034fe <TIM_SlaveTimer_SetConfig+0x102>
        break;
 80034fc:	bf00      	nop
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f023 0201 	bic.w	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 030a 	bic.w	r3, r3, #10
 8003544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f023 0210 	bic.w	r2, r3, #16
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800358e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	031b      	lsls	r3, r3, #12
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	621a      	str	r2, [r3, #32]
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	f043 0307 	orr.w	r3, r3, #7
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	609a      	str	r2, [r3, #8]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b087      	sub	sp, #28
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003610:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	021a      	lsls	r2, r3, #8
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	431a      	orrs	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4313      	orrs	r3, r2
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	609a      	str	r2, [r3, #8]
}
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	2201      	movs	r2, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	43db      	mvns	r3, r3
 8003656:	401a      	ands	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003690:	2302      	movs	r3, #2
 8003692:	e046      	b.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a16      	ldr	r2, [pc, #88]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d009      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a10      	ldr	r2, [pc, #64]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10c      	bne.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	4313      	orrs	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800

08003738 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003750:	2302      	movs	r3, #2
 8003752:	e03d      	b.n	80037d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e03f      	b.n	8003890 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7fd fc89 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2224      	movs	r2, #36	; 0x24
 800382e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003840:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f904 	bl	8003a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003856:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003866:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003876:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d17c      	bne.n	80039b2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_UART_Transmit+0x2c>
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e075      	b.n	80039b4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Transmit+0x3e>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e06e      	b.n	80039b4 <HAL_UART_Transmit+0x11c>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2221      	movs	r2, #33	; 0x21
 80038e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038ec:	f7fd fd8c 	bl	8001408 <HAL_GetTick>
 80038f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003906:	d108      	bne.n	800391a <HAL_UART_Transmit+0x82>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003910:	2300      	movs	r3, #0
 8003912:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	e003      	b.n	8003922 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800392a:	e02a      	b.n	8003982 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2200      	movs	r2, #0
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f840 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e036      	b.n	80039b4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800395a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	3302      	adds	r3, #2
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e007      	b.n	8003974 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3301      	adds	r3, #1
 8003972:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1cf      	bne.n	800392c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2200      	movs	r2, #0
 8003994:	2140      	movs	r1, #64	; 0x40
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f810 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e006      	b.n	80039b4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039cc:	e02c      	b.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d4:	d028      	beq.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <UART_WaitOnFlagUntilTimeout+0x30>
 80039dc:	f7fd fd14 	bl	8001408 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d21d      	bcs.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e00f      	b.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d0c3      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a8a:	f023 030c 	bic.w	r3, r3, #12
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a2c      	ldr	r2, [pc, #176]	; (8003b64 <UART_SetConfig+0x114>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d103      	bne.n	8003ac0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7fe fd50 	bl	800255c <HAL_RCC_GetPCLK2Freq>
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	e002      	b.n	8003ac6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ac0:	f7fe fd38 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 8003ac4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	009a      	lsls	r2, r3, #2
 8003ad0:	441a      	add	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <UART_SetConfig+0x118>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	0119      	lsls	r1, r3, #4
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009a      	lsls	r2, r3, #2
 8003af0:	441a      	add	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003afc:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <UART_SetConfig+0x118>)
 8003afe:	fba3 0302 	umull	r0, r3, r3, r2
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2064      	movs	r0, #100	; 0x64
 8003b06:	fb00 f303 	mul.w	r3, r0, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	3332      	adds	r3, #50	; 0x32
 8003b10:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <UART_SetConfig+0x118>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b1c:	4419      	add	r1, r3
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	009a      	lsls	r2, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <UART_SetConfig+0x118>)
 8003b36:	fba3 0302 	umull	r0, r3, r3, r2
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	2064      	movs	r0, #100	; 0x64
 8003b3e:	fb00 f303 	mul.w	r3, r0, r3
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	3332      	adds	r3, #50	; 0x32
 8003b48:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <UART_SetConfig+0x118>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	f003 020f 	and.w	r2, r3, #15
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	440a      	add	r2, r1
 8003b5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40013800 	.word	0x40013800
 8003b68:	51eb851f 	.word	0x51eb851f

08003b6c <_Znaj>:
 8003b6c:	f000 b800 	b.w	8003b70 <_Znwj>

08003b70 <_Znwj>:
 8003b70:	b510      	push	{r4, lr}
 8003b72:	2800      	cmp	r0, #0
 8003b74:	bf14      	ite	ne
 8003b76:	4604      	movne	r4, r0
 8003b78:	2401      	moveq	r4, #1
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f000 f844 	bl	8003c08 <malloc>
 8003b80:	b930      	cbnz	r0, 8003b90 <_Znwj+0x20>
 8003b82:	f000 f807 	bl	8003b94 <_ZSt15get_new_handlerv>
 8003b86:	b908      	cbnz	r0, 8003b8c <_Znwj+0x1c>
 8003b88:	f000 f80c 	bl	8003ba4 <abort>
 8003b8c:	4780      	blx	r0
 8003b8e:	e7f4      	b.n	8003b7a <_Znwj+0xa>
 8003b90:	bd10      	pop	{r4, pc}
	...

08003b94 <_ZSt15get_new_handlerv>:
 8003b94:	4b02      	ldr	r3, [pc, #8]	; (8003ba0 <_ZSt15get_new_handlerv+0xc>)
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	f3bf 8f5b 	dmb	ish
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	200004ac 	.word	0x200004ac

08003ba4 <abort>:
 8003ba4:	b508      	push	{r3, lr}
 8003ba6:	2006      	movs	r0, #6
 8003ba8:	f000 f91c 	bl	8003de4 <raise>
 8003bac:	2001      	movs	r0, #1
 8003bae:	f7fd fb66 	bl	800127e <_exit>
	...

08003bb4 <__errno>:
 8003bb4:	4b01      	ldr	r3, [pc, #4]	; (8003bbc <__errno+0x8>)
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	2000000c 	.word	0x2000000c

08003bc0 <__libc_init_array>:
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	2500      	movs	r5, #0
 8003bc4:	4e0c      	ldr	r6, [pc, #48]	; (8003bf8 <__libc_init_array+0x38>)
 8003bc6:	4c0d      	ldr	r4, [pc, #52]	; (8003bfc <__libc_init_array+0x3c>)
 8003bc8:	1ba4      	subs	r4, r4, r6
 8003bca:	10a4      	asrs	r4, r4, #2
 8003bcc:	42a5      	cmp	r5, r4
 8003bce:	d109      	bne.n	8003be4 <__libc_init_array+0x24>
 8003bd0:	f000 fc80 	bl	80044d4 <_init>
 8003bd4:	2500      	movs	r5, #0
 8003bd6:	4e0a      	ldr	r6, [pc, #40]	; (8003c00 <__libc_init_array+0x40>)
 8003bd8:	4c0a      	ldr	r4, [pc, #40]	; (8003c04 <__libc_init_array+0x44>)
 8003bda:	1ba4      	subs	r4, r4, r6
 8003bdc:	10a4      	asrs	r4, r4, #2
 8003bde:	42a5      	cmp	r5, r4
 8003be0:	d105      	bne.n	8003bee <__libc_init_array+0x2e>
 8003be2:	bd70      	pop	{r4, r5, r6, pc}
 8003be4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003be8:	4798      	blx	r3
 8003bea:	3501      	adds	r5, #1
 8003bec:	e7ee      	b.n	8003bcc <__libc_init_array+0xc>
 8003bee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bf2:	4798      	blx	r3
 8003bf4:	3501      	adds	r5, #1
 8003bf6:	e7f2      	b.n	8003bde <__libc_init_array+0x1e>
 8003bf8:	080045b4 	.word	0x080045b4
 8003bfc:	080045b4 	.word	0x080045b4
 8003c00:	080045b4 	.word	0x080045b4
 8003c04:	080045bc 	.word	0x080045bc

08003c08 <malloc>:
 8003c08:	4b02      	ldr	r3, [pc, #8]	; (8003c14 <malloc+0xc>)
 8003c0a:	4601      	mov	r1, r0
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	f000 b857 	b.w	8003cc0 <_malloc_r>
 8003c12:	bf00      	nop
 8003c14:	2000000c 	.word	0x2000000c

08003c18 <memset>:
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4402      	add	r2, r0
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <memset+0xa>
 8003c20:	4770      	bx	lr
 8003c22:	f803 1b01 	strb.w	r1, [r3], #1
 8003c26:	e7f9      	b.n	8003c1c <memset+0x4>

08003c28 <_free_r>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	4605      	mov	r5, r0
 8003c2c:	2900      	cmp	r1, #0
 8003c2e:	d043      	beq.n	8003cb8 <_free_r+0x90>
 8003c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c34:	1f0c      	subs	r4, r1, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bfb8      	it	lt
 8003c3a:	18e4      	addlt	r4, r4, r3
 8003c3c:	f000 f90e 	bl	8003e5c <__malloc_lock>
 8003c40:	4a1e      	ldr	r2, [pc, #120]	; (8003cbc <_free_r+0x94>)
 8003c42:	6813      	ldr	r3, [r2, #0]
 8003c44:	4610      	mov	r0, r2
 8003c46:	b933      	cbnz	r3, 8003c56 <_free_r+0x2e>
 8003c48:	6063      	str	r3, [r4, #4]
 8003c4a:	6014      	str	r4, [r2, #0]
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c52:	f000 b904 	b.w	8003e5e <__malloc_unlock>
 8003c56:	42a3      	cmp	r3, r4
 8003c58:	d90b      	bls.n	8003c72 <_free_r+0x4a>
 8003c5a:	6821      	ldr	r1, [r4, #0]
 8003c5c:	1862      	adds	r2, r4, r1
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	bf01      	itttt	eq
 8003c62:	681a      	ldreq	r2, [r3, #0]
 8003c64:	685b      	ldreq	r3, [r3, #4]
 8003c66:	1852      	addeq	r2, r2, r1
 8003c68:	6022      	streq	r2, [r4, #0]
 8003c6a:	6063      	str	r3, [r4, #4]
 8003c6c:	6004      	str	r4, [r0, #0]
 8003c6e:	e7ed      	b.n	8003c4c <_free_r+0x24>
 8003c70:	4613      	mov	r3, r2
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	b10a      	cbz	r2, 8003c7a <_free_r+0x52>
 8003c76:	42a2      	cmp	r2, r4
 8003c78:	d9fa      	bls.n	8003c70 <_free_r+0x48>
 8003c7a:	6819      	ldr	r1, [r3, #0]
 8003c7c:	1858      	adds	r0, r3, r1
 8003c7e:	42a0      	cmp	r0, r4
 8003c80:	d10b      	bne.n	8003c9a <_free_r+0x72>
 8003c82:	6820      	ldr	r0, [r4, #0]
 8003c84:	4401      	add	r1, r0
 8003c86:	1858      	adds	r0, r3, r1
 8003c88:	4282      	cmp	r2, r0
 8003c8a:	6019      	str	r1, [r3, #0]
 8003c8c:	d1de      	bne.n	8003c4c <_free_r+0x24>
 8003c8e:	6810      	ldr	r0, [r2, #0]
 8003c90:	6852      	ldr	r2, [r2, #4]
 8003c92:	4401      	add	r1, r0
 8003c94:	6019      	str	r1, [r3, #0]
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	e7d8      	b.n	8003c4c <_free_r+0x24>
 8003c9a:	d902      	bls.n	8003ca2 <_free_r+0x7a>
 8003c9c:	230c      	movs	r3, #12
 8003c9e:	602b      	str	r3, [r5, #0]
 8003ca0:	e7d4      	b.n	8003c4c <_free_r+0x24>
 8003ca2:	6820      	ldr	r0, [r4, #0]
 8003ca4:	1821      	adds	r1, r4, r0
 8003ca6:	428a      	cmp	r2, r1
 8003ca8:	bf01      	itttt	eq
 8003caa:	6811      	ldreq	r1, [r2, #0]
 8003cac:	6852      	ldreq	r2, [r2, #4]
 8003cae:	1809      	addeq	r1, r1, r0
 8003cb0:	6021      	streq	r1, [r4, #0]
 8003cb2:	6062      	str	r2, [r4, #4]
 8003cb4:	605c      	str	r4, [r3, #4]
 8003cb6:	e7c9      	b.n	8003c4c <_free_r+0x24>
 8003cb8:	bd38      	pop	{r3, r4, r5, pc}
 8003cba:	bf00      	nop
 8003cbc:	200004b0 	.word	0x200004b0

08003cc0 <_malloc_r>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	1ccd      	adds	r5, r1, #3
 8003cc4:	f025 0503 	bic.w	r5, r5, #3
 8003cc8:	3508      	adds	r5, #8
 8003cca:	2d0c      	cmp	r5, #12
 8003ccc:	bf38      	it	cc
 8003cce:	250c      	movcc	r5, #12
 8003cd0:	2d00      	cmp	r5, #0
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	db01      	blt.n	8003cda <_malloc_r+0x1a>
 8003cd6:	42a9      	cmp	r1, r5
 8003cd8:	d903      	bls.n	8003ce2 <_malloc_r+0x22>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	6033      	str	r3, [r6, #0]
 8003cde:	2000      	movs	r0, #0
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
 8003ce2:	f000 f8bb 	bl	8003e5c <__malloc_lock>
 8003ce6:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <_malloc_r+0xac>)
 8003ce8:	6814      	ldr	r4, [r2, #0]
 8003cea:	4621      	mov	r1, r4
 8003cec:	b991      	cbnz	r1, 8003d14 <_malloc_r+0x54>
 8003cee:	4c20      	ldr	r4, [pc, #128]	; (8003d70 <_malloc_r+0xb0>)
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	b91b      	cbnz	r3, 8003cfc <_malloc_r+0x3c>
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f000 f83d 	bl	8003d74 <_sbrk_r>
 8003cfa:	6020      	str	r0, [r4, #0]
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	4630      	mov	r0, r6
 8003d00:	f000 f838 	bl	8003d74 <_sbrk_r>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d124      	bne.n	8003d52 <_malloc_r+0x92>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	6033      	str	r3, [r6, #0]
 8003d0e:	f000 f8a6 	bl	8003e5e <__malloc_unlock>
 8003d12:	e7e4      	b.n	8003cde <_malloc_r+0x1e>
 8003d14:	680b      	ldr	r3, [r1, #0]
 8003d16:	1b5b      	subs	r3, r3, r5
 8003d18:	d418      	bmi.n	8003d4c <_malloc_r+0x8c>
 8003d1a:	2b0b      	cmp	r3, #11
 8003d1c:	d90f      	bls.n	8003d3e <_malloc_r+0x7e>
 8003d1e:	600b      	str	r3, [r1, #0]
 8003d20:	18cc      	adds	r4, r1, r3
 8003d22:	50cd      	str	r5, [r1, r3]
 8003d24:	4630      	mov	r0, r6
 8003d26:	f000 f89a 	bl	8003e5e <__malloc_unlock>
 8003d2a:	f104 000b 	add.w	r0, r4, #11
 8003d2e:	1d23      	adds	r3, r4, #4
 8003d30:	f020 0007 	bic.w	r0, r0, #7
 8003d34:	1ac3      	subs	r3, r0, r3
 8003d36:	d0d3      	beq.n	8003ce0 <_malloc_r+0x20>
 8003d38:	425a      	negs	r2, r3
 8003d3a:	50e2      	str	r2, [r4, r3]
 8003d3c:	e7d0      	b.n	8003ce0 <_malloc_r+0x20>
 8003d3e:	684b      	ldr	r3, [r1, #4]
 8003d40:	428c      	cmp	r4, r1
 8003d42:	bf16      	itet	ne
 8003d44:	6063      	strne	r3, [r4, #4]
 8003d46:	6013      	streq	r3, [r2, #0]
 8003d48:	460c      	movne	r4, r1
 8003d4a:	e7eb      	b.n	8003d24 <_malloc_r+0x64>
 8003d4c:	460c      	mov	r4, r1
 8003d4e:	6849      	ldr	r1, [r1, #4]
 8003d50:	e7cc      	b.n	8003cec <_malloc_r+0x2c>
 8003d52:	1cc4      	adds	r4, r0, #3
 8003d54:	f024 0403 	bic.w	r4, r4, #3
 8003d58:	42a0      	cmp	r0, r4
 8003d5a:	d005      	beq.n	8003d68 <_malloc_r+0xa8>
 8003d5c:	1a21      	subs	r1, r4, r0
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f000 f808 	bl	8003d74 <_sbrk_r>
 8003d64:	3001      	adds	r0, #1
 8003d66:	d0cf      	beq.n	8003d08 <_malloc_r+0x48>
 8003d68:	6025      	str	r5, [r4, #0]
 8003d6a:	e7db      	b.n	8003d24 <_malloc_r+0x64>
 8003d6c:	200004b0 	.word	0x200004b0
 8003d70:	200004b4 	.word	0x200004b4

08003d74 <_sbrk_r>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	2300      	movs	r3, #0
 8003d78:	4c05      	ldr	r4, [pc, #20]	; (8003d90 <_sbrk_r+0x1c>)
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	6023      	str	r3, [r4, #0]
 8003d80:	f7fd fa88 	bl	8001294 <_sbrk>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d102      	bne.n	8003d8e <_sbrk_r+0x1a>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	b103      	cbz	r3, 8003d8e <_sbrk_r+0x1a>
 8003d8c:	602b      	str	r3, [r5, #0]
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
 8003d90:	2000067c 	.word	0x2000067c

08003d94 <_raise_r>:
 8003d94:	291f      	cmp	r1, #31
 8003d96:	b538      	push	{r3, r4, r5, lr}
 8003d98:	4604      	mov	r4, r0
 8003d9a:	460d      	mov	r5, r1
 8003d9c:	d904      	bls.n	8003da8 <_raise_r+0x14>
 8003d9e:	2316      	movs	r3, #22
 8003da0:	6003      	str	r3, [r0, #0]
 8003da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003daa:	b112      	cbz	r2, 8003db2 <_raise_r+0x1e>
 8003dac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003db0:	b94b      	cbnz	r3, 8003dc6 <_raise_r+0x32>
 8003db2:	4620      	mov	r0, r4
 8003db4:	f000 f830 	bl	8003e18 <_getpid_r>
 8003db8:	462a      	mov	r2, r5
 8003dba:	4601      	mov	r1, r0
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dc2:	f000 b817 	b.w	8003df4 <_kill_r>
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d00a      	beq.n	8003de0 <_raise_r+0x4c>
 8003dca:	1c59      	adds	r1, r3, #1
 8003dcc:	d103      	bne.n	8003dd6 <_raise_r+0x42>
 8003dce:	2316      	movs	r3, #22
 8003dd0:	6003      	str	r3, [r0, #0]
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	e7e7      	b.n	8003da6 <_raise_r+0x12>
 8003dd6:	2400      	movs	r4, #0
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003dde:	4798      	blx	r3
 8003de0:	2000      	movs	r0, #0
 8003de2:	e7e0      	b.n	8003da6 <_raise_r+0x12>

08003de4 <raise>:
 8003de4:	4b02      	ldr	r3, [pc, #8]	; (8003df0 <raise+0xc>)
 8003de6:	4601      	mov	r1, r0
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	f7ff bfd3 	b.w	8003d94 <_raise_r>
 8003dee:	bf00      	nop
 8003df0:	2000000c 	.word	0x2000000c

08003df4 <_kill_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	2300      	movs	r3, #0
 8003df8:	4c06      	ldr	r4, [pc, #24]	; (8003e14 <_kill_r+0x20>)
 8003dfa:	4605      	mov	r5, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	f7fd fa2c 	bl	800125e <_kill>
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	d102      	bne.n	8003e10 <_kill_r+0x1c>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	b103      	cbz	r3, 8003e10 <_kill_r+0x1c>
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	bd38      	pop	{r3, r4, r5, pc}
 8003e12:	bf00      	nop
 8003e14:	2000067c 	.word	0x2000067c

08003e18 <_getpid_r>:
 8003e18:	f7fd ba1a 	b.w	8001250 <_getpid>

08003e1c <siprintf>:
 8003e1c:	b40e      	push	{r1, r2, r3}
 8003e1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e22:	b500      	push	{lr}
 8003e24:	b09c      	sub	sp, #112	; 0x70
 8003e26:	ab1d      	add	r3, sp, #116	; 0x74
 8003e28:	9002      	str	r0, [sp, #8]
 8003e2a:	9006      	str	r0, [sp, #24]
 8003e2c:	9107      	str	r1, [sp, #28]
 8003e2e:	9104      	str	r1, [sp, #16]
 8003e30:	4808      	ldr	r0, [pc, #32]	; (8003e54 <siprintf+0x38>)
 8003e32:	4909      	ldr	r1, [pc, #36]	; (8003e58 <siprintf+0x3c>)
 8003e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e38:	9105      	str	r1, [sp, #20]
 8003e3a:	6800      	ldr	r0, [r0, #0]
 8003e3c:	a902      	add	r1, sp, #8
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	f000 f868 	bl	8003f14 <_svfiprintf_r>
 8003e44:	2200      	movs	r2, #0
 8003e46:	9b02      	ldr	r3, [sp, #8]
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	b01c      	add	sp, #112	; 0x70
 8003e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e50:	b003      	add	sp, #12
 8003e52:	4770      	bx	lr
 8003e54:	2000000c 	.word	0x2000000c
 8003e58:	ffff0208 	.word	0xffff0208

08003e5c <__malloc_lock>:
 8003e5c:	4770      	bx	lr

08003e5e <__malloc_unlock>:
 8003e5e:	4770      	bx	lr

08003e60 <__ssputs_r>:
 8003e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e64:	688e      	ldr	r6, [r1, #8]
 8003e66:	4682      	mov	sl, r0
 8003e68:	429e      	cmp	r6, r3
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	4690      	mov	r8, r2
 8003e6e:	4699      	mov	r9, r3
 8003e70:	d837      	bhi.n	8003ee2 <__ssputs_r+0x82>
 8003e72:	898a      	ldrh	r2, [r1, #12]
 8003e74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e78:	d031      	beq.n	8003ede <__ssputs_r+0x7e>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	6825      	ldr	r5, [r4, #0]
 8003e7e:	6909      	ldr	r1, [r1, #16]
 8003e80:	1a6f      	subs	r7, r5, r1
 8003e82:	6965      	ldr	r5, [r4, #20]
 8003e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e88:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e8c:	f109 0301 	add.w	r3, r9, #1
 8003e90:	443b      	add	r3, r7
 8003e92:	429d      	cmp	r5, r3
 8003e94:	bf38      	it	cc
 8003e96:	461d      	movcc	r5, r3
 8003e98:	0553      	lsls	r3, r2, #21
 8003e9a:	d530      	bpl.n	8003efe <__ssputs_r+0x9e>
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	f7ff ff0f 	bl	8003cc0 <_malloc_r>
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	b950      	cbnz	r0, 8003ebc <__ssputs_r+0x5c>
 8003ea6:	230c      	movs	r3, #12
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eac:	f8ca 3000 	str.w	r3, [sl]
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb6:	81a3      	strh	r3, [r4, #12]
 8003eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ebc:	463a      	mov	r2, r7
 8003ebe:	6921      	ldr	r1, [r4, #16]
 8003ec0:	f000 fab6 	bl	8004430 <memcpy>
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ece:	81a3      	strh	r3, [r4, #12]
 8003ed0:	6126      	str	r6, [r4, #16]
 8003ed2:	443e      	add	r6, r7
 8003ed4:	6026      	str	r6, [r4, #0]
 8003ed6:	464e      	mov	r6, r9
 8003ed8:	6165      	str	r5, [r4, #20]
 8003eda:	1bed      	subs	r5, r5, r7
 8003edc:	60a5      	str	r5, [r4, #8]
 8003ede:	454e      	cmp	r6, r9
 8003ee0:	d900      	bls.n	8003ee4 <__ssputs_r+0x84>
 8003ee2:	464e      	mov	r6, r9
 8003ee4:	4632      	mov	r2, r6
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	f000 faac 	bl	8004446 <memmove>
 8003eee:	68a3      	ldr	r3, [r4, #8]
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	1b9b      	subs	r3, r3, r6
 8003ef4:	60a3      	str	r3, [r4, #8]
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	441e      	add	r6, r3
 8003efa:	6026      	str	r6, [r4, #0]
 8003efc:	e7dc      	b.n	8003eb8 <__ssputs_r+0x58>
 8003efe:	462a      	mov	r2, r5
 8003f00:	f000 faba 	bl	8004478 <_realloc_r>
 8003f04:	4606      	mov	r6, r0
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d1e2      	bne.n	8003ed0 <__ssputs_r+0x70>
 8003f0a:	6921      	ldr	r1, [r4, #16]
 8003f0c:	4650      	mov	r0, sl
 8003f0e:	f7ff fe8b 	bl	8003c28 <_free_r>
 8003f12:	e7c8      	b.n	8003ea6 <__ssputs_r+0x46>

08003f14 <_svfiprintf_r>:
 8003f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f18:	461d      	mov	r5, r3
 8003f1a:	898b      	ldrh	r3, [r1, #12]
 8003f1c:	b09d      	sub	sp, #116	; 0x74
 8003f1e:	061f      	lsls	r7, r3, #24
 8003f20:	4680      	mov	r8, r0
 8003f22:	460c      	mov	r4, r1
 8003f24:	4616      	mov	r6, r2
 8003f26:	d50f      	bpl.n	8003f48 <_svfiprintf_r+0x34>
 8003f28:	690b      	ldr	r3, [r1, #16]
 8003f2a:	b96b      	cbnz	r3, 8003f48 <_svfiprintf_r+0x34>
 8003f2c:	2140      	movs	r1, #64	; 0x40
 8003f2e:	f7ff fec7 	bl	8003cc0 <_malloc_r>
 8003f32:	6020      	str	r0, [r4, #0]
 8003f34:	6120      	str	r0, [r4, #16]
 8003f36:	b928      	cbnz	r0, 8003f44 <_svfiprintf_r+0x30>
 8003f38:	230c      	movs	r3, #12
 8003f3a:	f8c8 3000 	str.w	r3, [r8]
 8003f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f42:	e0c8      	b.n	80040d6 <_svfiprintf_r+0x1c2>
 8003f44:	2340      	movs	r3, #64	; 0x40
 8003f46:	6163      	str	r3, [r4, #20]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f52:	2330      	movs	r3, #48	; 0x30
 8003f54:	f04f 0b01 	mov.w	fp, #1
 8003f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f5c:	9503      	str	r5, [sp, #12]
 8003f5e:	4637      	mov	r7, r6
 8003f60:	463d      	mov	r5, r7
 8003f62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f66:	b10b      	cbz	r3, 8003f6c <_svfiprintf_r+0x58>
 8003f68:	2b25      	cmp	r3, #37	; 0x25
 8003f6a:	d13e      	bne.n	8003fea <_svfiprintf_r+0xd6>
 8003f6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f70:	d00b      	beq.n	8003f8a <_svfiprintf_r+0x76>
 8003f72:	4653      	mov	r3, sl
 8003f74:	4632      	mov	r2, r6
 8003f76:	4621      	mov	r1, r4
 8003f78:	4640      	mov	r0, r8
 8003f7a:	f7ff ff71 	bl	8003e60 <__ssputs_r>
 8003f7e:	3001      	adds	r0, #1
 8003f80:	f000 80a4 	beq.w	80040cc <_svfiprintf_r+0x1b8>
 8003f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f86:	4453      	add	r3, sl
 8003f88:	9309      	str	r3, [sp, #36]	; 0x24
 8003f8a:	783b      	ldrb	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 809d 	beq.w	80040cc <_svfiprintf_r+0x1b8>
 8003f92:	2300      	movs	r3, #0
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	9307      	str	r3, [sp, #28]
 8003fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8003fa6:	462f      	mov	r7, r5
 8003fa8:	2205      	movs	r2, #5
 8003faa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003fae:	4850      	ldr	r0, [pc, #320]	; (80040f0 <_svfiprintf_r+0x1dc>)
 8003fb0:	f000 fa30 	bl	8004414 <memchr>
 8003fb4:	9b04      	ldr	r3, [sp, #16]
 8003fb6:	b9d0      	cbnz	r0, 8003fee <_svfiprintf_r+0xda>
 8003fb8:	06d9      	lsls	r1, r3, #27
 8003fba:	bf44      	itt	mi
 8003fbc:	2220      	movmi	r2, #32
 8003fbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fc2:	071a      	lsls	r2, r3, #28
 8003fc4:	bf44      	itt	mi
 8003fc6:	222b      	movmi	r2, #43	; 0x2b
 8003fc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fcc:	782a      	ldrb	r2, [r5, #0]
 8003fce:	2a2a      	cmp	r2, #42	; 0x2a
 8003fd0:	d015      	beq.n	8003ffe <_svfiprintf_r+0xea>
 8003fd2:	462f      	mov	r7, r5
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	250a      	movs	r5, #10
 8003fd8:	9a07      	ldr	r2, [sp, #28]
 8003fda:	4639      	mov	r1, r7
 8003fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fe0:	3b30      	subs	r3, #48	; 0x30
 8003fe2:	2b09      	cmp	r3, #9
 8003fe4:	d94d      	bls.n	8004082 <_svfiprintf_r+0x16e>
 8003fe6:	b1b8      	cbz	r0, 8004018 <_svfiprintf_r+0x104>
 8003fe8:	e00f      	b.n	800400a <_svfiprintf_r+0xf6>
 8003fea:	462f      	mov	r7, r5
 8003fec:	e7b8      	b.n	8003f60 <_svfiprintf_r+0x4c>
 8003fee:	4a40      	ldr	r2, [pc, #256]	; (80040f0 <_svfiprintf_r+0x1dc>)
 8003ff0:	463d      	mov	r5, r7
 8003ff2:	1a80      	subs	r0, r0, r2
 8003ff4:	fa0b f000 	lsl.w	r0, fp, r0
 8003ff8:	4318      	orrs	r0, r3
 8003ffa:	9004      	str	r0, [sp, #16]
 8003ffc:	e7d3      	b.n	8003fa6 <_svfiprintf_r+0x92>
 8003ffe:	9a03      	ldr	r2, [sp, #12]
 8004000:	1d11      	adds	r1, r2, #4
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	9103      	str	r1, [sp, #12]
 8004006:	2a00      	cmp	r2, #0
 8004008:	db01      	blt.n	800400e <_svfiprintf_r+0xfa>
 800400a:	9207      	str	r2, [sp, #28]
 800400c:	e004      	b.n	8004018 <_svfiprintf_r+0x104>
 800400e:	4252      	negs	r2, r2
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	9207      	str	r2, [sp, #28]
 8004016:	9304      	str	r3, [sp, #16]
 8004018:	783b      	ldrb	r3, [r7, #0]
 800401a:	2b2e      	cmp	r3, #46	; 0x2e
 800401c:	d10c      	bne.n	8004038 <_svfiprintf_r+0x124>
 800401e:	787b      	ldrb	r3, [r7, #1]
 8004020:	2b2a      	cmp	r3, #42	; 0x2a
 8004022:	d133      	bne.n	800408c <_svfiprintf_r+0x178>
 8004024:	9b03      	ldr	r3, [sp, #12]
 8004026:	3702      	adds	r7, #2
 8004028:	1d1a      	adds	r2, r3, #4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	9203      	str	r2, [sp, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	bfb8      	it	lt
 8004032:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004036:	9305      	str	r3, [sp, #20]
 8004038:	4d2e      	ldr	r5, [pc, #184]	; (80040f4 <_svfiprintf_r+0x1e0>)
 800403a:	2203      	movs	r2, #3
 800403c:	7839      	ldrb	r1, [r7, #0]
 800403e:	4628      	mov	r0, r5
 8004040:	f000 f9e8 	bl	8004414 <memchr>
 8004044:	b138      	cbz	r0, 8004056 <_svfiprintf_r+0x142>
 8004046:	2340      	movs	r3, #64	; 0x40
 8004048:	1b40      	subs	r0, r0, r5
 800404a:	fa03 f000 	lsl.w	r0, r3, r0
 800404e:	9b04      	ldr	r3, [sp, #16]
 8004050:	3701      	adds	r7, #1
 8004052:	4303      	orrs	r3, r0
 8004054:	9304      	str	r3, [sp, #16]
 8004056:	7839      	ldrb	r1, [r7, #0]
 8004058:	2206      	movs	r2, #6
 800405a:	4827      	ldr	r0, [pc, #156]	; (80040f8 <_svfiprintf_r+0x1e4>)
 800405c:	1c7e      	adds	r6, r7, #1
 800405e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004062:	f000 f9d7 	bl	8004414 <memchr>
 8004066:	2800      	cmp	r0, #0
 8004068:	d038      	beq.n	80040dc <_svfiprintf_r+0x1c8>
 800406a:	4b24      	ldr	r3, [pc, #144]	; (80040fc <_svfiprintf_r+0x1e8>)
 800406c:	bb13      	cbnz	r3, 80040b4 <_svfiprintf_r+0x1a0>
 800406e:	9b03      	ldr	r3, [sp, #12]
 8004070:	3307      	adds	r3, #7
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	3308      	adds	r3, #8
 8004078:	9303      	str	r3, [sp, #12]
 800407a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407c:	444b      	add	r3, r9
 800407e:	9309      	str	r3, [sp, #36]	; 0x24
 8004080:	e76d      	b.n	8003f5e <_svfiprintf_r+0x4a>
 8004082:	fb05 3202 	mla	r2, r5, r2, r3
 8004086:	2001      	movs	r0, #1
 8004088:	460f      	mov	r7, r1
 800408a:	e7a6      	b.n	8003fda <_svfiprintf_r+0xc6>
 800408c:	2300      	movs	r3, #0
 800408e:	250a      	movs	r5, #10
 8004090:	4619      	mov	r1, r3
 8004092:	3701      	adds	r7, #1
 8004094:	9305      	str	r3, [sp, #20]
 8004096:	4638      	mov	r0, r7
 8004098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800409c:	3a30      	subs	r2, #48	; 0x30
 800409e:	2a09      	cmp	r2, #9
 80040a0:	d903      	bls.n	80040aa <_svfiprintf_r+0x196>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0c8      	beq.n	8004038 <_svfiprintf_r+0x124>
 80040a6:	9105      	str	r1, [sp, #20]
 80040a8:	e7c6      	b.n	8004038 <_svfiprintf_r+0x124>
 80040aa:	fb05 2101 	mla	r1, r5, r1, r2
 80040ae:	2301      	movs	r3, #1
 80040b0:	4607      	mov	r7, r0
 80040b2:	e7f0      	b.n	8004096 <_svfiprintf_r+0x182>
 80040b4:	ab03      	add	r3, sp, #12
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	4622      	mov	r2, r4
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <_svfiprintf_r+0x1ec>)
 80040bc:	a904      	add	r1, sp, #16
 80040be:	4640      	mov	r0, r8
 80040c0:	f3af 8000 	nop.w
 80040c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80040c8:	4681      	mov	r9, r0
 80040ca:	d1d6      	bne.n	800407a <_svfiprintf_r+0x166>
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	065b      	lsls	r3, r3, #25
 80040d0:	f53f af35 	bmi.w	8003f3e <_svfiprintf_r+0x2a>
 80040d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040d6:	b01d      	add	sp, #116	; 0x74
 80040d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040dc:	ab03      	add	r3, sp, #12
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	4622      	mov	r2, r4
 80040e2:	4b07      	ldr	r3, [pc, #28]	; (8004100 <_svfiprintf_r+0x1ec>)
 80040e4:	a904      	add	r1, sp, #16
 80040e6:	4640      	mov	r0, r8
 80040e8:	f000 f882 	bl	80041f0 <_printf_i>
 80040ec:	e7ea      	b.n	80040c4 <_svfiprintf_r+0x1b0>
 80040ee:	bf00      	nop
 80040f0:	08004580 	.word	0x08004580
 80040f4:	08004586 	.word	0x08004586
 80040f8:	0800458a 	.word	0x0800458a
 80040fc:	00000000 	.word	0x00000000
 8004100:	08003e61 	.word	0x08003e61

08004104 <_printf_common>:
 8004104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004108:	4691      	mov	r9, r2
 800410a:	461f      	mov	r7, r3
 800410c:	688a      	ldr	r2, [r1, #8]
 800410e:	690b      	ldr	r3, [r1, #16]
 8004110:	4606      	mov	r6, r0
 8004112:	4293      	cmp	r3, r2
 8004114:	bfb8      	it	lt
 8004116:	4613      	movlt	r3, r2
 8004118:	f8c9 3000 	str.w	r3, [r9]
 800411c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004120:	460c      	mov	r4, r1
 8004122:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004126:	b112      	cbz	r2, 800412e <_printf_common+0x2a>
 8004128:	3301      	adds	r3, #1
 800412a:	f8c9 3000 	str.w	r3, [r9]
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	0699      	lsls	r1, r3, #26
 8004132:	bf42      	ittt	mi
 8004134:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004138:	3302      	addmi	r3, #2
 800413a:	f8c9 3000 	strmi.w	r3, [r9]
 800413e:	6825      	ldr	r5, [r4, #0]
 8004140:	f015 0506 	ands.w	r5, r5, #6
 8004144:	d107      	bne.n	8004156 <_printf_common+0x52>
 8004146:	f104 0a19 	add.w	sl, r4, #25
 800414a:	68e3      	ldr	r3, [r4, #12]
 800414c:	f8d9 2000 	ldr.w	r2, [r9]
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	42ab      	cmp	r3, r5
 8004154:	dc29      	bgt.n	80041aa <_printf_common+0xa6>
 8004156:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800415a:	6822      	ldr	r2, [r4, #0]
 800415c:	3300      	adds	r3, #0
 800415e:	bf18      	it	ne
 8004160:	2301      	movne	r3, #1
 8004162:	0692      	lsls	r2, r2, #26
 8004164:	d42e      	bmi.n	80041c4 <_printf_common+0xc0>
 8004166:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800416a:	4639      	mov	r1, r7
 800416c:	4630      	mov	r0, r6
 800416e:	47c0      	blx	r8
 8004170:	3001      	adds	r0, #1
 8004172:	d021      	beq.n	80041b8 <_printf_common+0xb4>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	68e5      	ldr	r5, [r4, #12]
 8004178:	f003 0306 	and.w	r3, r3, #6
 800417c:	2b04      	cmp	r3, #4
 800417e:	bf18      	it	ne
 8004180:	2500      	movne	r5, #0
 8004182:	f8d9 2000 	ldr.w	r2, [r9]
 8004186:	f04f 0900 	mov.w	r9, #0
 800418a:	bf08      	it	eq
 800418c:	1aad      	subeq	r5, r5, r2
 800418e:	68a3      	ldr	r3, [r4, #8]
 8004190:	6922      	ldr	r2, [r4, #16]
 8004192:	bf08      	it	eq
 8004194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004198:	4293      	cmp	r3, r2
 800419a:	bfc4      	itt	gt
 800419c:	1a9b      	subgt	r3, r3, r2
 800419e:	18ed      	addgt	r5, r5, r3
 80041a0:	341a      	adds	r4, #26
 80041a2:	454d      	cmp	r5, r9
 80041a4:	d11a      	bne.n	80041dc <_printf_common+0xd8>
 80041a6:	2000      	movs	r0, #0
 80041a8:	e008      	b.n	80041bc <_printf_common+0xb8>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4652      	mov	r2, sl
 80041ae:	4639      	mov	r1, r7
 80041b0:	4630      	mov	r0, r6
 80041b2:	47c0      	blx	r8
 80041b4:	3001      	adds	r0, #1
 80041b6:	d103      	bne.n	80041c0 <_printf_common+0xbc>
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c0:	3501      	adds	r5, #1
 80041c2:	e7c2      	b.n	800414a <_printf_common+0x46>
 80041c4:	2030      	movs	r0, #48	; 0x30
 80041c6:	18e1      	adds	r1, r4, r3
 80041c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041d2:	4422      	add	r2, r4
 80041d4:	3302      	adds	r3, #2
 80041d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041da:	e7c4      	b.n	8004166 <_printf_common+0x62>
 80041dc:	2301      	movs	r3, #1
 80041de:	4622      	mov	r2, r4
 80041e0:	4639      	mov	r1, r7
 80041e2:	4630      	mov	r0, r6
 80041e4:	47c0      	blx	r8
 80041e6:	3001      	adds	r0, #1
 80041e8:	d0e6      	beq.n	80041b8 <_printf_common+0xb4>
 80041ea:	f109 0901 	add.w	r9, r9, #1
 80041ee:	e7d8      	b.n	80041a2 <_printf_common+0x9e>

080041f0 <_printf_i>:
 80041f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80041f8:	460c      	mov	r4, r1
 80041fa:	7e09      	ldrb	r1, [r1, #24]
 80041fc:	b085      	sub	sp, #20
 80041fe:	296e      	cmp	r1, #110	; 0x6e
 8004200:	4617      	mov	r7, r2
 8004202:	4606      	mov	r6, r0
 8004204:	4698      	mov	r8, r3
 8004206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004208:	f000 80b3 	beq.w	8004372 <_printf_i+0x182>
 800420c:	d822      	bhi.n	8004254 <_printf_i+0x64>
 800420e:	2963      	cmp	r1, #99	; 0x63
 8004210:	d036      	beq.n	8004280 <_printf_i+0x90>
 8004212:	d80a      	bhi.n	800422a <_printf_i+0x3a>
 8004214:	2900      	cmp	r1, #0
 8004216:	f000 80b9 	beq.w	800438c <_printf_i+0x19c>
 800421a:	2958      	cmp	r1, #88	; 0x58
 800421c:	f000 8083 	beq.w	8004326 <_printf_i+0x136>
 8004220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004224:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004228:	e032      	b.n	8004290 <_printf_i+0xa0>
 800422a:	2964      	cmp	r1, #100	; 0x64
 800422c:	d001      	beq.n	8004232 <_printf_i+0x42>
 800422e:	2969      	cmp	r1, #105	; 0x69
 8004230:	d1f6      	bne.n	8004220 <_printf_i+0x30>
 8004232:	6820      	ldr	r0, [r4, #0]
 8004234:	6813      	ldr	r3, [r2, #0]
 8004236:	0605      	lsls	r5, r0, #24
 8004238:	f103 0104 	add.w	r1, r3, #4
 800423c:	d52a      	bpl.n	8004294 <_printf_i+0xa4>
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6011      	str	r1, [r2, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	da03      	bge.n	800424e <_printf_i+0x5e>
 8004246:	222d      	movs	r2, #45	; 0x2d
 8004248:	425b      	negs	r3, r3
 800424a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800424e:	486f      	ldr	r0, [pc, #444]	; (800440c <_printf_i+0x21c>)
 8004250:	220a      	movs	r2, #10
 8004252:	e039      	b.n	80042c8 <_printf_i+0xd8>
 8004254:	2973      	cmp	r1, #115	; 0x73
 8004256:	f000 809d 	beq.w	8004394 <_printf_i+0x1a4>
 800425a:	d808      	bhi.n	800426e <_printf_i+0x7e>
 800425c:	296f      	cmp	r1, #111	; 0x6f
 800425e:	d020      	beq.n	80042a2 <_printf_i+0xb2>
 8004260:	2970      	cmp	r1, #112	; 0x70
 8004262:	d1dd      	bne.n	8004220 <_printf_i+0x30>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	f043 0320 	orr.w	r3, r3, #32
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	e003      	b.n	8004276 <_printf_i+0x86>
 800426e:	2975      	cmp	r1, #117	; 0x75
 8004270:	d017      	beq.n	80042a2 <_printf_i+0xb2>
 8004272:	2978      	cmp	r1, #120	; 0x78
 8004274:	d1d4      	bne.n	8004220 <_printf_i+0x30>
 8004276:	2378      	movs	r3, #120	; 0x78
 8004278:	4865      	ldr	r0, [pc, #404]	; (8004410 <_printf_i+0x220>)
 800427a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800427e:	e055      	b.n	800432c <_printf_i+0x13c>
 8004280:	6813      	ldr	r3, [r2, #0]
 8004282:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004286:	1d19      	adds	r1, r3, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6011      	str	r1, [r2, #0]
 800428c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004290:	2301      	movs	r3, #1
 8004292:	e08c      	b.n	80043ae <_printf_i+0x1be>
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f010 0f40 	tst.w	r0, #64	; 0x40
 800429a:	6011      	str	r1, [r2, #0]
 800429c:	bf18      	it	ne
 800429e:	b21b      	sxthne	r3, r3
 80042a0:	e7cf      	b.n	8004242 <_printf_i+0x52>
 80042a2:	6813      	ldr	r3, [r2, #0]
 80042a4:	6825      	ldr	r5, [r4, #0]
 80042a6:	1d18      	adds	r0, r3, #4
 80042a8:	6010      	str	r0, [r2, #0]
 80042aa:	0628      	lsls	r0, r5, #24
 80042ac:	d501      	bpl.n	80042b2 <_printf_i+0xc2>
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	e002      	b.n	80042b8 <_printf_i+0xc8>
 80042b2:	0668      	lsls	r0, r5, #25
 80042b4:	d5fb      	bpl.n	80042ae <_printf_i+0xbe>
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	296f      	cmp	r1, #111	; 0x6f
 80042ba:	bf14      	ite	ne
 80042bc:	220a      	movne	r2, #10
 80042be:	2208      	moveq	r2, #8
 80042c0:	4852      	ldr	r0, [pc, #328]	; (800440c <_printf_i+0x21c>)
 80042c2:	2100      	movs	r1, #0
 80042c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042c8:	6865      	ldr	r5, [r4, #4]
 80042ca:	2d00      	cmp	r5, #0
 80042cc:	60a5      	str	r5, [r4, #8]
 80042ce:	f2c0 8095 	blt.w	80043fc <_printf_i+0x20c>
 80042d2:	6821      	ldr	r1, [r4, #0]
 80042d4:	f021 0104 	bic.w	r1, r1, #4
 80042d8:	6021      	str	r1, [r4, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d13d      	bne.n	800435a <_printf_i+0x16a>
 80042de:	2d00      	cmp	r5, #0
 80042e0:	f040 808e 	bne.w	8004400 <_printf_i+0x210>
 80042e4:	4665      	mov	r5, ip
 80042e6:	2a08      	cmp	r2, #8
 80042e8:	d10b      	bne.n	8004302 <_printf_i+0x112>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	07db      	lsls	r3, r3, #31
 80042ee:	d508      	bpl.n	8004302 <_printf_i+0x112>
 80042f0:	6923      	ldr	r3, [r4, #16]
 80042f2:	6862      	ldr	r2, [r4, #4]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	bfde      	ittt	le
 80042f8:	2330      	movle	r3, #48	; 0x30
 80042fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004302:	ebac 0305 	sub.w	r3, ip, r5
 8004306:	6123      	str	r3, [r4, #16]
 8004308:	f8cd 8000 	str.w	r8, [sp]
 800430c:	463b      	mov	r3, r7
 800430e:	aa03      	add	r2, sp, #12
 8004310:	4621      	mov	r1, r4
 8004312:	4630      	mov	r0, r6
 8004314:	f7ff fef6 	bl	8004104 <_printf_common>
 8004318:	3001      	adds	r0, #1
 800431a:	d14d      	bne.n	80043b8 <_printf_i+0x1c8>
 800431c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004320:	b005      	add	sp, #20
 8004322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004326:	4839      	ldr	r0, [pc, #228]	; (800440c <_printf_i+0x21c>)
 8004328:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800432c:	6813      	ldr	r3, [r2, #0]
 800432e:	6821      	ldr	r1, [r4, #0]
 8004330:	1d1d      	adds	r5, r3, #4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6015      	str	r5, [r2, #0]
 8004336:	060a      	lsls	r2, r1, #24
 8004338:	d50b      	bpl.n	8004352 <_printf_i+0x162>
 800433a:	07ca      	lsls	r2, r1, #31
 800433c:	bf44      	itt	mi
 800433e:	f041 0120 	orrmi.w	r1, r1, #32
 8004342:	6021      	strmi	r1, [r4, #0]
 8004344:	b91b      	cbnz	r3, 800434e <_printf_i+0x15e>
 8004346:	6822      	ldr	r2, [r4, #0]
 8004348:	f022 0220 	bic.w	r2, r2, #32
 800434c:	6022      	str	r2, [r4, #0]
 800434e:	2210      	movs	r2, #16
 8004350:	e7b7      	b.n	80042c2 <_printf_i+0xd2>
 8004352:	064d      	lsls	r5, r1, #25
 8004354:	bf48      	it	mi
 8004356:	b29b      	uxthmi	r3, r3
 8004358:	e7ef      	b.n	800433a <_printf_i+0x14a>
 800435a:	4665      	mov	r5, ip
 800435c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004360:	fb02 3311 	mls	r3, r2, r1, r3
 8004364:	5cc3      	ldrb	r3, [r0, r3]
 8004366:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800436a:	460b      	mov	r3, r1
 800436c:	2900      	cmp	r1, #0
 800436e:	d1f5      	bne.n	800435c <_printf_i+0x16c>
 8004370:	e7b9      	b.n	80042e6 <_printf_i+0xf6>
 8004372:	6813      	ldr	r3, [r2, #0]
 8004374:	6825      	ldr	r5, [r4, #0]
 8004376:	1d18      	adds	r0, r3, #4
 8004378:	6961      	ldr	r1, [r4, #20]
 800437a:	6010      	str	r0, [r2, #0]
 800437c:	0628      	lsls	r0, r5, #24
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	d501      	bpl.n	8004386 <_printf_i+0x196>
 8004382:	6019      	str	r1, [r3, #0]
 8004384:	e002      	b.n	800438c <_printf_i+0x19c>
 8004386:	066a      	lsls	r2, r5, #25
 8004388:	d5fb      	bpl.n	8004382 <_printf_i+0x192>
 800438a:	8019      	strh	r1, [r3, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	4665      	mov	r5, ip
 8004390:	6123      	str	r3, [r4, #16]
 8004392:	e7b9      	b.n	8004308 <_printf_i+0x118>
 8004394:	6813      	ldr	r3, [r2, #0]
 8004396:	1d19      	adds	r1, r3, #4
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	681d      	ldr	r5, [r3, #0]
 800439c:	6862      	ldr	r2, [r4, #4]
 800439e:	2100      	movs	r1, #0
 80043a0:	4628      	mov	r0, r5
 80043a2:	f000 f837 	bl	8004414 <memchr>
 80043a6:	b108      	cbz	r0, 80043ac <_printf_i+0x1bc>
 80043a8:	1b40      	subs	r0, r0, r5
 80043aa:	6060      	str	r0, [r4, #4]
 80043ac:	6863      	ldr	r3, [r4, #4]
 80043ae:	6123      	str	r3, [r4, #16]
 80043b0:	2300      	movs	r3, #0
 80043b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b6:	e7a7      	b.n	8004308 <_printf_i+0x118>
 80043b8:	6923      	ldr	r3, [r4, #16]
 80043ba:	462a      	mov	r2, r5
 80043bc:	4639      	mov	r1, r7
 80043be:	4630      	mov	r0, r6
 80043c0:	47c0      	blx	r8
 80043c2:	3001      	adds	r0, #1
 80043c4:	d0aa      	beq.n	800431c <_printf_i+0x12c>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	079b      	lsls	r3, r3, #30
 80043ca:	d413      	bmi.n	80043f4 <_printf_i+0x204>
 80043cc:	68e0      	ldr	r0, [r4, #12]
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	4298      	cmp	r0, r3
 80043d2:	bfb8      	it	lt
 80043d4:	4618      	movlt	r0, r3
 80043d6:	e7a3      	b.n	8004320 <_printf_i+0x130>
 80043d8:	2301      	movs	r3, #1
 80043da:	464a      	mov	r2, r9
 80043dc:	4639      	mov	r1, r7
 80043de:	4630      	mov	r0, r6
 80043e0:	47c0      	blx	r8
 80043e2:	3001      	adds	r0, #1
 80043e4:	d09a      	beq.n	800431c <_printf_i+0x12c>
 80043e6:	3501      	adds	r5, #1
 80043e8:	68e3      	ldr	r3, [r4, #12]
 80043ea:	9a03      	ldr	r2, [sp, #12]
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	42ab      	cmp	r3, r5
 80043f0:	dcf2      	bgt.n	80043d8 <_printf_i+0x1e8>
 80043f2:	e7eb      	b.n	80043cc <_printf_i+0x1dc>
 80043f4:	2500      	movs	r5, #0
 80043f6:	f104 0919 	add.w	r9, r4, #25
 80043fa:	e7f5      	b.n	80043e8 <_printf_i+0x1f8>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ac      	bne.n	800435a <_printf_i+0x16a>
 8004400:	7803      	ldrb	r3, [r0, #0]
 8004402:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004406:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800440a:	e76c      	b.n	80042e6 <_printf_i+0xf6>
 800440c:	08004591 	.word	0x08004591
 8004410:	080045a2 	.word	0x080045a2

08004414 <memchr>:
 8004414:	b510      	push	{r4, lr}
 8004416:	b2c9      	uxtb	r1, r1
 8004418:	4402      	add	r2, r0
 800441a:	4290      	cmp	r0, r2
 800441c:	4603      	mov	r3, r0
 800441e:	d101      	bne.n	8004424 <memchr+0x10>
 8004420:	2300      	movs	r3, #0
 8004422:	e003      	b.n	800442c <memchr+0x18>
 8004424:	781c      	ldrb	r4, [r3, #0]
 8004426:	3001      	adds	r0, #1
 8004428:	428c      	cmp	r4, r1
 800442a:	d1f6      	bne.n	800441a <memchr+0x6>
 800442c:	4618      	mov	r0, r3
 800442e:	bd10      	pop	{r4, pc}

08004430 <memcpy>:
 8004430:	b510      	push	{r4, lr}
 8004432:	1e43      	subs	r3, r0, #1
 8004434:	440a      	add	r2, r1
 8004436:	4291      	cmp	r1, r2
 8004438:	d100      	bne.n	800443c <memcpy+0xc>
 800443a:	bd10      	pop	{r4, pc}
 800443c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004440:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004444:	e7f7      	b.n	8004436 <memcpy+0x6>

08004446 <memmove>:
 8004446:	4288      	cmp	r0, r1
 8004448:	b510      	push	{r4, lr}
 800444a:	eb01 0302 	add.w	r3, r1, r2
 800444e:	d807      	bhi.n	8004460 <memmove+0x1a>
 8004450:	1e42      	subs	r2, r0, #1
 8004452:	4299      	cmp	r1, r3
 8004454:	d00a      	beq.n	800446c <memmove+0x26>
 8004456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800445a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800445e:	e7f8      	b.n	8004452 <memmove+0xc>
 8004460:	4283      	cmp	r3, r0
 8004462:	d9f5      	bls.n	8004450 <memmove+0xa>
 8004464:	1881      	adds	r1, r0, r2
 8004466:	1ad2      	subs	r2, r2, r3
 8004468:	42d3      	cmn	r3, r2
 800446a:	d100      	bne.n	800446e <memmove+0x28>
 800446c:	bd10      	pop	{r4, pc}
 800446e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004472:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004476:	e7f7      	b.n	8004468 <memmove+0x22>

08004478 <_realloc_r>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	4607      	mov	r7, r0
 800447c:	4614      	mov	r4, r2
 800447e:	460e      	mov	r6, r1
 8004480:	b921      	cbnz	r1, 800448c <_realloc_r+0x14>
 8004482:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004486:	4611      	mov	r1, r2
 8004488:	f7ff bc1a 	b.w	8003cc0 <_malloc_r>
 800448c:	b922      	cbnz	r2, 8004498 <_realloc_r+0x20>
 800448e:	f7ff fbcb 	bl	8003c28 <_free_r>
 8004492:	4625      	mov	r5, r4
 8004494:	4628      	mov	r0, r5
 8004496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004498:	f000 f814 	bl	80044c4 <_malloc_usable_size_r>
 800449c:	42a0      	cmp	r0, r4
 800449e:	d20f      	bcs.n	80044c0 <_realloc_r+0x48>
 80044a0:	4621      	mov	r1, r4
 80044a2:	4638      	mov	r0, r7
 80044a4:	f7ff fc0c 	bl	8003cc0 <_malloc_r>
 80044a8:	4605      	mov	r5, r0
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d0f2      	beq.n	8004494 <_realloc_r+0x1c>
 80044ae:	4631      	mov	r1, r6
 80044b0:	4622      	mov	r2, r4
 80044b2:	f7ff ffbd 	bl	8004430 <memcpy>
 80044b6:	4631      	mov	r1, r6
 80044b8:	4638      	mov	r0, r7
 80044ba:	f7ff fbb5 	bl	8003c28 <_free_r>
 80044be:	e7e9      	b.n	8004494 <_realloc_r+0x1c>
 80044c0:	4635      	mov	r5, r6
 80044c2:	e7e7      	b.n	8004494 <_realloc_r+0x1c>

080044c4 <_malloc_usable_size_r>:
 80044c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c8:	1f18      	subs	r0, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	bfbc      	itt	lt
 80044ce:	580b      	ldrlt	r3, [r1, r0]
 80044d0:	18c0      	addlt	r0, r0, r3
 80044d2:	4770      	bx	lr

080044d4 <_init>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr

080044e0 <_fini>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr
