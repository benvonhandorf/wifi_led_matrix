
GraphicsDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003940  08003940  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003940  08003940  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003940  08003940  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003940  08003940  00013940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800394c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  20000070  080039bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  080039bc  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010251  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000256d  00000000  00000000  000302ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  00032858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b0c2  00000000  00000000  00034560  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c35c  00000000  00000000  0004f622  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e071  00000000  00000000  0005b97e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e99ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c4  00000000  00000000  000e9a6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003890 	.word	0x08003890

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003890 	.word	0x08003890

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <cpp_main>:

MatrixDriver matrix(64, 32, MatrixDriver::ScanType::SCAN_16, &htim3);

char buffer[1024];

extern "C" int cpp_main(void) {
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b087      	sub	sp, #28
 8000160:	af02      	add	r7, sp, #8

	uint32_t start = HAL_GetTick();
 8000162:	f000 ff41 	bl	8000fe8 <HAL_GetTick>
 8000166:	6078      	str	r0, [r7, #4]

	//Setup some default colors for the matrix
	for (int row = 0; row < 32; row++) {
 8000168:	2300      	movs	r3, #0
 800016a:	60fb      	str	r3, [r7, #12]
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	2b1f      	cmp	r3, #31
 8000170:	dc4a      	bgt.n	8000208 <cpp_main+0xac>
		GPIOB->ODR = (uint32_t) (0x1 << row);
 8000172:	2201      	movs	r2, #1
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	409a      	lsls	r2, r3
 8000178:	4b33      	ldr	r3, [pc, #204]	; (8000248 <cpp_main+0xec>)
 800017a:	60da      	str	r2, [r3, #12]
		for (int col = 0; col < 64; col++) {
 800017c:	2300      	movs	r3, #0
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	2b3f      	cmp	r3, #63	; 0x3f
 8000184:	dc3c      	bgt.n	8000200 <cpp_main+0xa4>
			matrix.SetPixel(col, row, (row + col) % 2 ? 255 : 0,
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	b2dc      	uxtb	r4, r3
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	b2dd      	uxtb	r5, r3
 800018e:	68fa      	ldr	r2, [r7, #12]
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	4413      	add	r3, r2
 8000194:	f003 0301 	and.w	r3, r3, #1
 8000198:	2b00      	cmp	r3, #0
 800019a:	d001      	beq.n	80001a0 <cpp_main+0x44>
 800019c:	26ff      	movs	r6, #255	; 0xff
 800019e:	e000      	b.n	80001a2 <cpp_main+0x46>
 80001a0:	2600      	movs	r6, #0
					(row + col) % 3 ? 255 : 0, (row + col) % 5 ? 255 : 0);
 80001a2:	68fa      	ldr	r2, [r7, #12]
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	18d1      	adds	r1, r2, r3
 80001a8:	4b28      	ldr	r3, [pc, #160]	; (800024c <cpp_main+0xf0>)
 80001aa:	fb83 3201 	smull	r3, r2, r3, r1
 80001ae:	17cb      	asrs	r3, r1, #31
 80001b0:	1ad2      	subs	r2, r2, r3
 80001b2:	4613      	mov	r3, r2
 80001b4:	005b      	lsls	r3, r3, #1
 80001b6:	4413      	add	r3, r2
 80001b8:	1aca      	subs	r2, r1, r3
			matrix.SetPixel(col, row, (row + col) % 2 ? 255 : 0,
 80001ba:	2a00      	cmp	r2, #0
 80001bc:	d001      	beq.n	80001c2 <cpp_main+0x66>
 80001be:	20ff      	movs	r0, #255	; 0xff
 80001c0:	e000      	b.n	80001c4 <cpp_main+0x68>
 80001c2:	2000      	movs	r0, #0
					(row + col) % 3 ? 255 : 0, (row + col) % 5 ? 255 : 0);
 80001c4:	68fa      	ldr	r2, [r7, #12]
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	18d1      	adds	r1, r2, r3
 80001ca:	4b21      	ldr	r3, [pc, #132]	; (8000250 <cpp_main+0xf4>)
 80001cc:	fb83 2301 	smull	r2, r3, r3, r1
 80001d0:	105a      	asrs	r2, r3, #1
 80001d2:	17cb      	asrs	r3, r1, #31
 80001d4:	1ad2      	subs	r2, r2, r3
 80001d6:	4613      	mov	r3, r2
 80001d8:	009b      	lsls	r3, r3, #2
 80001da:	4413      	add	r3, r2
 80001dc:	1aca      	subs	r2, r1, r3
			matrix.SetPixel(col, row, (row + col) % 2 ? 255 : 0,
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d001      	beq.n	80001e6 <cpp_main+0x8a>
 80001e2:	23ff      	movs	r3, #255	; 0xff
 80001e4:	e000      	b.n	80001e8 <cpp_main+0x8c>
 80001e6:	2300      	movs	r3, #0
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	9000      	str	r0, [sp, #0]
 80001ec:	4633      	mov	r3, r6
 80001ee:	462a      	mov	r2, r5
 80001f0:	4621      	mov	r1, r4
 80001f2:	4818      	ldr	r0, [pc, #96]	; (8000254 <cpp_main+0xf8>)
 80001f4:	f000 fb5b 	bl	80008ae <_ZN12MatrixDriver8SetPixelEhhhhh>
		for (int col = 0; col < 64; col++) {
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60bb      	str	r3, [r7, #8]
 80001fe:	e7bf      	b.n	8000180 <cpp_main+0x24>
	for (int row = 0; row < 32; row++) {
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	3301      	adds	r3, #1
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	e7b1      	b.n	800016c <cpp_main+0x10>
		}
	}

	uint32_t duration = HAL_GetTick() - start;
 8000208:	f000 feee 	bl	8000fe8 <HAL_GetTick>
 800020c:	4602      	mov	r2, r0
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	1ad3      	subs	r3, r2, r3
 8000212:	603b      	str	r3, [r7, #0]

	sprintf(buffer, "Setup Duration: %lu\n", duration);
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	4910      	ldr	r1, [pc, #64]	; (8000258 <cpp_main+0xfc>)
 8000218:	4810      	ldr	r0, [pc, #64]	; (800025c <cpp_main+0x100>)
 800021a:	f002 ffdd 	bl	80031d8 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 500);
 800021e:	480f      	ldr	r0, [pc, #60]	; (800025c <cpp_main+0x100>)
 8000220:	f7ff ff94 	bl	800014c <strlen>
 8000224:	4603      	mov	r3, r0
 8000226:	b29a      	uxth	r2, r3
 8000228:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800022c:	490b      	ldr	r1, [pc, #44]	; (800025c <cpp_main+0x100>)
 800022e:	480c      	ldr	r0, [pc, #48]	; (8000260 <cpp_main+0x104>)
 8000230:	f002 fd0f 	bl	8002c52 <HAL_UART_Transmit>

	matrix.SwapBuffer();
 8000234:	4807      	ldr	r0, [pc, #28]	; (8000254 <cpp_main+0xf8>)
 8000236:	f000 fc10 	bl	8000a5a <_ZN12MatrixDriver10SwapBufferEv>

	HAL_IWDG_Init(&hiwdg);
 800023a:	480a      	ldr	r0, [pc, #40]	; (8000264 <cpp_main+0x108>)
 800023c:	f001 f9b8 	bl	80015b0 <HAL_IWDG_Init>

	matrix.open();
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <cpp_main+0xf8>)
 8000242:	f000 fb05 	bl	8000850 <_ZN12MatrixDriver4openEv>

	while (1) {
 8000246:	e7fe      	b.n	8000246 <cpp_main+0xea>
 8000248:	40010c00 	.word	0x40010c00
 800024c:	55555556 	.word	0x55555556
 8000250:	66666667 	.word	0x66666667
 8000254:	2000008c 	.word	0x2000008c
 8000258:	080038a8 	.word	0x080038a8
 800025c:	200000a4 	.word	0x200000a4
 8000260:	20000558 	.word	0x20000558
 8000264:	20000504 	.word	0x20000504

08000268 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af02      	add	r7, sp, #8
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d10c      	bne.n	8000292 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800027e:	4293      	cmp	r3, r2
 8000280:	d107      	bne.n	8000292 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MatrixDriver matrix(64, 32, MatrixDriver::ScanType::SCAN_16, &htim3);
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2300      	movs	r3, #0
 8000288:	2220      	movs	r2, #32
 800028a:	2140      	movs	r1, #64	; 0x40
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800028e:	f000 fa13 	bl	80006b8 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000510 	.word	0x20000510
 80002a0:	2000008c 	.word	0x2000008c

080002a4 <_GLOBAL__sub_I_matrix>:
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002ac:	2001      	movs	r0, #1
 80002ae:	f7ff ffdb 	bl	8000268 <_Z41__static_initialization_and_destruction_0ii>
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b8:	f000 fe3e 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002bc:	f000 f80f 	bl	80002de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c0:	f000 f974 	bl	80005ac <MX_GPIO_Init>
  MX_DMA_Init();
 80002c4:	f000 f936 	bl	8000534 <MX_DMA_Init>
  MX_SPI1_Init();
 80002c8:	f000 f860 	bl	800038c <MX_SPI1_Init>
  MX_TIM3_Init();
 80002cc:	f000 f894 	bl	80003f8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80002d0:	f000 f906 	bl	80004e0 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80002d4:	f000 f840 	bl	8000358 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 80002d8:	f7ff ff40 	bl	800015c <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <main+0x28>

080002de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b090      	sub	sp, #64	; 0x40
 80002e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	2228      	movs	r2, #40	; 0x28
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 fe71 	bl	8002fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000300:	230a      	movs	r3, #10
 8000302:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000308:	2310      	movs	r3, #16
 800030a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800030c:	2301      	movs	r3, #1
 800030e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000310:	2300      	movs	r3, #0
 8000312:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	f107 0318 	add.w	r3, r7, #24
 8000318:	4618      	mov	r0, r3
 800031a:	f001 f991 	bl	8001640 <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000324:	f000 f982 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800032c:	2300      	movs	r3, #0
 800032e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f001 fbfd 	bl	8001b40 <HAL_RCC_ClockConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800034c:	f000 f96e 	bl	800062c <Error_Handler>
  }
}
 8000350:	bf00      	nop
 8000352:	3740      	adds	r7, #64	; 0x40
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_IWDG_Init+0x2c>)
 800035e:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <MX_IWDG_Init+0x30>)
 8000360:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_IWDG_Init+0x2c>)
 8000364:	2203      	movs	r2, #3
 8000366:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_IWDG_Init+0x2c>)
 800036a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800036e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_IWDG_Init+0x2c>)
 8000372:	f001 f91d 	bl	80015b0 <HAL_IWDG_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800037c:	f000 f956 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000504 	.word	0x20000504
 8000388:	40003000 	.word	0x40003000

0800038c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000390:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <MX_SPI1_Init+0x64>)
 8000392:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <MX_SPI1_Init+0x68>)
 8000394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000396:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <MX_SPI1_Init+0x64>)
 8000398:	2200      	movs	r2, #0
 800039a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800039c:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <MX_SPI1_Init+0x64>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <MX_SPI1_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_SPI1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_SPI1_Init+0x64>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_SPI1_Init+0x64>)
 80003b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_SPI1_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_SPI1_Init+0x64>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_SPI1_Init+0x64>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_SPI1_Init+0x64>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_SPI1_Init+0x64>)
 80003d6:	220a      	movs	r2, #10
 80003d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_SPI1_Init+0x64>)
 80003dc:	f001 fd4c 	bl	8001e78 <HAL_SPI_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80003e6:	f000 f921 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000598 	.word	0x20000598
 80003f4:	40013000 	.word	0x40013000

080003f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08e      	sub	sp, #56	; 0x38
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040c:	f107 0320 	add.w	r3, r7, #32
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
 8000424:	615a      	str	r2, [r3, #20]
 8000426:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000428:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <MX_TIM3_Init+0xe0>)
 800042a:	4a2c      	ldr	r2, [pc, #176]	; (80004dc <MX_TIM3_Init+0xe4>)
 800042c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800042e:	4b2a      	ldr	r3, [pc, #168]	; (80004d8 <MX_TIM3_Init+0xe0>)
 8000430:	2200      	movs	r2, #0
 8000432:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000434:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <MX_TIM3_Init+0xe0>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <MX_TIM3_Init+0xe0>)
 800043c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000440:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000442:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <MX_TIM3_Init+0xe0>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000448:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <MX_TIM3_Init+0xe0>)
 800044a:	2200      	movs	r2, #0
 800044c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800044e:	4822      	ldr	r0, [pc, #136]	; (80004d8 <MX_TIM3_Init+0xe0>)
 8000450:	f001 fd96 	bl	8001f80 <HAL_TIM_Base_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800045a:	f000 f8e7 	bl	800062c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800045e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000468:	4619      	mov	r1, r3
 800046a:	481b      	ldr	r0, [pc, #108]	; (80004d8 <MX_TIM3_Init+0xe0>)
 800046c:	f001 ffe2 	bl	8002434 <HAL_TIM_ConfigClockSource>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000476:	f000 f8d9 	bl	800062c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800047a:	4817      	ldr	r0, [pc, #92]	; (80004d8 <MX_TIM3_Init+0xe0>)
 800047c:	f001 fe22 	bl	80020c4 <HAL_TIM_OC_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000486:	f000 f8d1 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048a:	2300      	movs	r3, #0
 800048c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048e:	2300      	movs	r3, #0
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000492:	f107 0320 	add.w	r3, r7, #32
 8000496:	4619      	mov	r1, r3
 8000498:	480f      	ldr	r0, [pc, #60]	; (80004d8 <MX_TIM3_Init+0xe0>)
 800049a:	f002 fb1d 	bl	8002ad8 <HAL_TIMEx_MasterConfigSynchronization>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80004a4:	f000 f8c2 	bl	800062c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80004a8:	2310      	movs	r3, #16
 80004aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 256;
 80004ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	220c      	movs	r2, #12
 80004be:	4619      	mov	r1, r3
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_TIM3_Init+0xe0>)
 80004c2:	f001 ff5f 	bl	8002384 <HAL_TIM_OC_ConfigChannel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80004cc:	f000 f8ae 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	3738      	adds	r7, #56	; 0x38
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000510 	.word	0x20000510
 80004dc:	40000400 	.word	0x40000400

080004e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_USART1_UART_Init+0x4c>)
 80004e6:	4a12      	ldr	r2, [pc, #72]	; (8000530 <MX_USART1_UART_Init+0x50>)
 80004e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <MX_USART1_UART_Init+0x4c>)
 80004ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_USART1_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_USART1_UART_Init+0x4c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_USART1_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_USART1_UART_Init+0x4c>)
 8000506:	220c      	movs	r2, #12
 8000508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_USART1_UART_Init+0x4c>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_USART1_UART_Init+0x4c>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_USART1_UART_Init+0x4c>)
 8000518:	f002 fb4e 	bl	8002bb8 <HAL_UART_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000522:	f000 f883 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000558 	.word	0x20000558
 8000530:	40013800 	.word	0x40013800

08000534 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel3
  */
static void MX_DMA_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <MX_DMA_Init+0x6c>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a18      	ldr	r2, [pc, #96]	; (80005a0 <MX_DMA_Init+0x6c>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <MX_DMA_Init+0x6c>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel3 on DMA1_Channel3 */
  hdma_memtomem_dma1_channel3.Instance = DMA1_Channel3;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_DMA_Init+0x70>)
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <MX_DMA_Init+0x74>)
 8000556:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_DMA_Init+0x70>)
 800055a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800055e:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel3.Init.PeriphInc = DMA_PINC_ENABLE;
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_DMA_Init+0x70>)
 8000562:	2240      	movs	r2, #64	; 0x40
 8000564:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel3.Init.MemInc = DMA_MINC_DISABLE;
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_DMA_Init+0x70>)
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <MX_DMA_Init+0x70>)
 800056e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000572:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_DMA_Init+0x70>)
 8000576:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800057a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel3.Init.Mode = DMA_NORMAL;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_DMA_Init+0x70>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel3.Init.Priority = DMA_PRIORITY_LOW;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_DMA_Init+0x70>)
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel3) != HAL_OK)
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <MX_DMA_Init+0x70>)
 800058a:	f000 fe45 	bl	8001218 <HAL_DMA_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_DMA_Init+0x64>
  {
    Error_Handler( );
 8000594:	f000 f84a 	bl	800062c <Error_Handler>
  }

}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	200004c0 	.word	0x200004c0
 80005a8:	40020030 	.word	0x40020030

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_GPIO_Init+0x78>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a17      	ldr	r2, [pc, #92]	; (8000624 <MX_GPIO_Init+0x78>)
 80005c6:	f043 0304 	orr.w	r3, r3, #4
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_GPIO_Init+0x78>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0304 	and.w	r3, r3, #4
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_GPIO_Init+0x78>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a11      	ldr	r2, [pc, #68]	; (8000624 <MX_GPIO_Init+0x78>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_GPIO_Init+0x78>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0308 	and.w	r3, r3, #8
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_B1_Pin
 80005f0:	2200      	movs	r2, #0
 80005f2:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <MX_GPIO_Init+0x7c>)
 80005f8:	f000 ffc2 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B0_Pin Matrix_B1_Pin
                           Matrix_CLK_Pin Matrix_LAT_Pin Matrix_OE_Pin Matrix_A_Pin
                           Matrix_B_Pin Matrix_C_Pin Matrix_D_Pin Matrix_E_Pin
                           Matrix_R1_Pin Matrix_G1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_B1_Pin
 80005fc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000600:	60bb      	str	r3, [r7, #8]
                          |Matrix_CLK_Pin|Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_A_Pin
                          |Matrix_B_Pin|Matrix_C_Pin|Matrix_D_Pin|Matrix_E_Pin
                          |Matrix_R1_Pin|Matrix_G1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2302      	movs	r3, #2
 800060c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_GPIO_Init+0x7c>)
 8000616:	f000 fe59 	bl	80012cc <HAL_GPIO_Init>

}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	40010c00 	.word	0x40010c00

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <HAL_TIM_OC_DelayElapsedCallback>:

extern UART_HandleTypeDef huart1;

extern IWDG_HandleTypeDef hiwdg;

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	//This will trigger DMA eventually
	instance->SendPlanePixel();
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <HAL_TIM_OC_DelayElapsedCallback+0x1c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fa1b 	bl	8000a80 <_ZN12MatrixDriver14SendPlanePixelEv>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200004a4 	.word	0x200004a4

08000658 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	//This will trigger clock pulse
	instance->Clock();
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fa53 	bl	8000b10 <_ZN12MatrixDriver5ClockEv>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200004a4 	.word	0x200004a4

08000678 <_Z12BufferOffsethhhhh>:

uint16_t BufferOffset(uint8_t x, uint8_t y, uint8_t plane, uint8_t width, uint8_t planes) {
 8000678:	b490      	push	{r4, r7}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4604      	mov	r4, r0
 8000680:	4608      	mov	r0, r1
 8000682:	4611      	mov	r1, r2
 8000684:	461a      	mov	r2, r3
 8000686:	4623      	mov	r3, r4
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	4603      	mov	r3, r0
 800068c:	71bb      	strb	r3, [r7, #6]
 800068e:	460b      	mov	r3, r1
 8000690:	717b      	strb	r3, [r7, #5]
 8000692:	4613      	mov	r3, r2
 8000694:	713b      	strb	r3, [r7, #4]
	//TODO: Take plane into account for offset
	return (y * width) + x;
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	b29b      	uxth	r3, r3
 800069a:	793a      	ldrb	r2, [r7, #4]
 800069c:	b292      	uxth	r2, r2
 800069e:	fb02 f303 	mul.w	r3, r2, r3
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	4413      	add	r3, r2
 80006aa:	b29b      	uxth	r3, r3
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc90      	pop	{r4, r7}
 80006b4:	4770      	bx	lr
	...

080006b8 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef>:

MatrixDriver::MatrixDriver(uint8_t width, uint8_t height, ScanType scanType,
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af02      	add	r7, sp, #8
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	4608      	mov	r0, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	461a      	mov	r2, r3
 80006c6:	4603      	mov	r3, r0
 80006c8:	70fb      	strb	r3, [r7, #3]
 80006ca:	460b      	mov	r3, r1
 80006cc:	70bb      	strb	r3, [r7, #2]
 80006ce:	4613      	mov	r3, r2
 80006d0:	707b      	strb	r3, [r7, #1]
		TIM_HandleTypeDef *htim) {
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	829a      	strh	r2, [r3, #20]
	this->htim = htim;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6a3a      	ldr	r2, [r7, #32]
 80006dc:	601a      	str	r2, [r3, #0]

	this->width = width;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	78fa      	ldrb	r2, [r7, #3]
 80006e2:	711a      	strb	r2, [r3, #4]
	this->height = height;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	78ba      	ldrb	r2, [r7, #2]
 80006e8:	715a      	strb	r2, [r3, #5]
	this->scanType = scanType;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	787a      	ldrb	r2, [r7, #1]
 80006ee:	721a      	strb	r2, [r3, #8]
	this->elementPerPlanePixel = 1;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2201      	movs	r2, #1
 80006f4:	719a      	strb	r2, [r3, #6]
	this->planes = 1;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	71da      	strb	r2, [r3, #7]

	this->bufferSize = (width * (height / 2) * elementPerPlanePixel * planes);
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	78ba      	ldrb	r2, [r7, #2]
 8000702:	0852      	lsrs	r2, r2, #1
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	b292      	uxth	r2, r2
 8000708:	fb02 f303 	mul.w	r3, r2, r3
 800070c:	b29b      	uxth	r3, r3
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	7992      	ldrb	r2, [r2, #6]
 8000712:	b292      	uxth	r2, r2
 8000714:	fb02 f303 	mul.w	r3, r2, r3
 8000718:	b29b      	uxth	r3, r3
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	79d2      	ldrb	r2, [r2, #7]
 800071e:	b292      	uxth	r2, r2
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	b29a      	uxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	815a      	strh	r2, [r3, #10]

	this->sendBufferA = true;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2201      	movs	r2, #1
 800072e:	725a      	strb	r2, [r3, #9]
	this->bufferA = new uint16_t[bufferSize];
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	895b      	ldrh	r3, [r3, #10]
 8000734:	4a44      	ldr	r2, [pc, #272]	; (8000848 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x190>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d801      	bhi.n	800073e <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x86>
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	e001      	b.n	8000742 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x8a>
 800073e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fbf0 	bl	8002f28 <_Znaj>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	60da      	str	r2, [r3, #12]
	this->bufferB = new uint16_t[bufferSize];
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	895b      	ldrh	r3, [r3, #10]
 8000754:	4a3c      	ldr	r2, [pc, #240]	; (8000848 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x190>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d801      	bhi.n	800075e <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xa6>
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	e001      	b.n	8000762 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xaa>
 800075e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fbe0 	bl	8002f28 <_Znaj>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	611a      	str	r2, [r3, #16]

	for (uint8_t x = 0; x < width; x++) {
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	7bfa      	ldrb	r2, [r7, #15]
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	429a      	cmp	r2, r3
 800077a:	d25d      	bcs.n	8000838 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x180>
		for (uint8_t y = 0; y < height / 2; y++) {
 800077c:	2300      	movs	r3, #0
 800077e:	73bb      	strb	r3, [r7, #14]
 8000780:	78bb      	ldrb	r3, [r7, #2]
 8000782:	085b      	lsrs	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7bba      	ldrb	r2, [r7, #14]
 8000788:	429a      	cmp	r2, r3
 800078a:	d251      	bcs.n	8000830 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x178>
			uint8_t previousRow = y == 0 ? (height / 2) - 1 : y;
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d105      	bne.n	800079e <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xe6>
 8000792:	78bb      	ldrb	r3, [r7, #2]
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	3b01      	subs	r3, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	e000      	b.n	80007a0 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xe8>
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	733b      	strb	r3, [r7, #12]

			uint16_t rowLines =
					previousRow % 2 ? 0x0001 << A_SHIFT :
 80007a2:	7b3b      	ldrb	r3, [r7, #12]
 80007a4:	f003 0301 	and.w	r3, r3, #1
			uint16_t rowLines =
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d116      	bne.n	80007da <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x122>
					0 | previousRow % 4 ? 0x0001 << B_SHIFT :
 80007ac:	7b3b      	ldrb	r3, [r7, #12]
 80007ae:	f003 0303 	and.w	r3, r3, #3
			uint16_t rowLines =
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10f      	bne.n	80007d6 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x11e>
					0 | previousRow % 8 ? 0x0001 << C_SHIFT :
 80007b6:	7b3b      	ldrb	r3, [r7, #12]
 80007b8:	f003 0307 	and.w	r3, r3, #7
			uint16_t rowLines =
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d108      	bne.n	80007d2 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x11a>
					0 | previousRow % 16 ? 0x0001 << D_SHIFT : 0;
 80007c0:	7b3b      	ldrb	r3, [r7, #12]
 80007c2:	f003 030f 	and.w	r3, r3, #15
			uint16_t rowLines =
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x116>
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	e006      	b.n	80007dc <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x124>
 80007ce:	2300      	movs	r3, #0
 80007d0:	e004      	b.n	80007dc <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x124>
 80007d2:	2320      	movs	r3, #32
 80007d4:	e002      	b.n	80007dc <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x124>
 80007d6:	2310      	movs	r3, #16
 80007d8:	e000      	b.n	80007dc <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x124>
 80007da:	2308      	movs	r3, #8
 80007dc:	817b      	strh	r3, [r7, #10]

			for (uint8_t plane = 0; plane < planes; plane++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	737b      	strb	r3, [r7, #13]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	79db      	ldrb	r3, [r3, #7]
 80007e6:	7b7a      	ldrb	r2, [r7, #13]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d21d      	bcs.n	8000828 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x170>
				uint16_t offset = BufferOffset(x, y, plane, width, planes);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	79db      	ldrb	r3, [r3, #7]
 80007f0:	78fc      	ldrb	r4, [r7, #3]
 80007f2:	7b7a      	ldrb	r2, [r7, #13]
 80007f4:	7bb9      	ldrb	r1, [r7, #14]
 80007f6:	7bf8      	ldrb	r0, [r7, #15]
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	4623      	mov	r3, r4
 80007fc:	f7ff ff3c 	bl	8000678 <_Z12BufferOffsethhhhh>
 8000800:	4603      	mov	r3, r0
 8000802:	813b      	strh	r3, [r7, #8]

				bufferA[offset] = rowLines;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68da      	ldr	r2, [r3, #12]
 8000808:	893b      	ldrh	r3, [r7, #8]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	897a      	ldrh	r2, [r7, #10]
 8000810:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = rowLines;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	691a      	ldr	r2, [r3, #16]
 8000816:	893b      	ldrh	r3, [r7, #8]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	897a      	ldrh	r2, [r7, #10]
 800081e:	801a      	strh	r2, [r3, #0]
			for (uint8_t plane = 0; plane < planes; plane++) {
 8000820:	7b7b      	ldrb	r3, [r7, #13]
 8000822:	3301      	adds	r3, #1
 8000824:	737b      	strb	r3, [r7, #13]
 8000826:	e7dc      	b.n	80007e2 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x12a>
		for (uint8_t y = 0; y < height / 2; y++) {
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	3301      	adds	r3, #1
 800082c:	73bb      	strb	r3, [r7, #14]
 800082e:	e7a7      	b.n	8000780 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xc8>
	for (uint8_t x = 0; x < width; x++) {
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	3301      	adds	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	e79d      	b.n	8000774 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xbc>
			}
		}
	}

	instance = this;
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x194>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
}
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bd90      	pop	{r4, r7, pc}
 8000848:	3ffffffc 	.word	0x3ffffffc
 800084c:	200004a4 	.word	0x200004a4

08000850 <_ZN12MatrixDriver4openEv>:

void MatrixDriver::open() {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f042 0210 	orr.w	r2, r2, #16
 800086a:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(htim);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fbd5 	bl	8002020 <HAL_TIM_Base_Start_IT>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_ZN12MatrixDriver9PlaneBitsEh>:

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	460b      	mov	r3, r1
 8000888:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0x00;
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]
//	if (value > 31) {
//		result |= 0x02;
//		value -= 31;
//	}

	if (value > 1) {
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d906      	bls.n	80008a2 <_ZN12MatrixDriver9PlaneBitsEh+0x24>
		result |= 0x01;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
		value -= 1;
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	3b01      	subs	r3, #1
 80008a0:	70fb      	strb	r3, [r7, #3]
	}

	return result;
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <_ZN12MatrixDriver8SetPixelEhhhhh>:

void MatrixDriver::SetPixel(uint8_t x, uint8_t y, uint8_t r, uint8_t g,
		uint8_t b) {
 80008ae:	b590      	push	{r4, r7, lr}
 80008b0:	b08d      	sub	sp, #52	; 0x34
 80008b2:	af02      	add	r7, sp, #8
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	4608      	mov	r0, r1
 80008b8:	4611      	mov	r1, r2
 80008ba:	461a      	mov	r2, r3
 80008bc:	4603      	mov	r3, r0
 80008be:	70fb      	strb	r3, [r7, #3]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70bb      	strb	r3, [r7, #2]
 80008c4:	4613      	mov	r3, r2
 80008c6:	707b      	strb	r3, [r7, #1]
	uint8_t rShift, gShift, bShift;

	//Set data into the buffer we aren't sending at the moment
	uint16_t *buffer = sendBufferA ? bufferB : bufferA;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7a5b      	ldrb	r3, [r3, #9]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <_ZN12MatrixDriver8SetPixelEhhhhh+0x28>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	e001      	b.n	80008da <_ZN12MatrixDriver8SetPixelEhhhhh+0x2c>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	61bb      	str	r3, [r7, #24]

	if (y < this->height / 2) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	78ba      	ldrb	r2, [r7, #2]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d209      	bcs.n	80008fe <_ZN12MatrixDriver8SetPixelEhhhhh+0x50>
		rShift = R0_SHIFT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		gShift = G0_SHIFT;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bShift = B0_SHIFT;
 80008f6:	2302      	movs	r3, #2
 80008f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80008fc:	e008      	b.n	8000910 <_ZN12MatrixDriver8SetPixelEhhhhh+0x62>
	} else {
		rShift = R1_SHIFT;
 80008fe:	2308      	movs	r3, #8
 8000900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		gShift = G1_SHIFT;
 8000904:	2309      	movs	r3, #9
 8000906:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bShift = B1_SHIFT;
 800090a:	230a      	movs	r3, #10
 800090c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	uint16_t pixelMask = (0x01 << rShift) | (0x01 << gShift) | (0x01 << bShift);
 8000910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000914:	2201      	movs	r2, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	b21a      	sxth	r2, r3
 800091c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000920:	2101      	movs	r1, #1
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	b21b      	sxth	r3, r3
 8000928:	4313      	orrs	r3, r2
 800092a:	b21a      	sxth	r2, r3
 800092c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000930:	2101      	movs	r1, #1
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	b21b      	sxth	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b21b      	sxth	r3, r3
 800093c:	82fb      	strh	r3, [r7, #22]
	uint8_t rPlanes = PlaneBits(r);
 800093e:	787b      	ldrb	r3, [r7, #1]
 8000940:	4619      	mov	r1, r3
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff9b 	bl	800087e <_ZN12MatrixDriver9PlaneBitsEh>
 8000948:	4603      	mov	r3, r0
 800094a:	757b      	strb	r3, [r7, #21]
	uint8_t gPlanes = PlaneBits(g);
 800094c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000950:	4619      	mov	r1, r3
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ff93 	bl	800087e <_ZN12MatrixDriver9PlaneBitsEh>
 8000958:	4603      	mov	r3, r0
 800095a:	753b      	strb	r3, [r7, #20]
	uint8_t bPlanes = PlaneBits(b);
 800095c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000960:	4619      	mov	r1, r3
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ff8b 	bl	800087e <_ZN12MatrixDriver9PlaneBitsEh>
 8000968:	4603      	mov	r3, r0
 800096a:	74fb      	strb	r3, [r7, #19]

	for (int plane = 0; plane < planes; plane++) {
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	79db      	ldrb	r3, [r3, #7]
 8000974:	461a      	mov	r2, r3
 8000976:	6a3b      	ldr	r3, [r7, #32]
 8000978:	4293      	cmp	r3, r2
 800097a:	da6a      	bge.n	8000a52 <_ZN12MatrixDriver8SetPixelEhhhhh+0x1a4>
		uint16_t planePixelBits = (
				(rPlanes & 0x01 << plane) ? 0x01 << rShift : 0)
 800097c:	7d7a      	ldrb	r2, [r7, #21]
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	fa42 f303 	asr.w	r3, r2, r3
 8000984:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & 0x01 << plane) ? 0x01 << gShift : 0)
 8000988:	2b00      	cmp	r3, #0
 800098a:	d006      	beq.n	800099a <_ZN12MatrixDriver8SetPixelEhhhhh+0xec>
				(rPlanes & 0x01 << plane) ? 0x01 << rShift : 0)
 800098c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000990:	2201      	movs	r2, #1
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
				| ((gPlanes & 0x01 << plane) ? 0x01 << gShift : 0)
 8000996:	b21a      	sxth	r2, r3
 8000998:	e000      	b.n	800099c <_ZN12MatrixDriver8SetPixelEhhhhh+0xee>
 800099a:	2200      	movs	r2, #0
 800099c:	7d39      	ldrb	r1, [r7, #20]
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	fa41 f303 	asr.w	r3, r1, r3
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <_ZN12MatrixDriver8SetPixelEhhhhh+0x10c>
 80009ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009b0:	2101      	movs	r1, #1
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	e000      	b.n	80009bc <_ZN12MatrixDriver8SetPixelEhhhhh+0x10e>
 80009ba:	2300      	movs	r3, #0
 80009bc:	4313      	orrs	r3, r2
 80009be:	b21a      	sxth	r2, r3
				| ((bPlanes & 0x01 << plane) ? 0x01 << bShift : 0);
 80009c0:	7cf9      	ldrb	r1, [r7, #19]
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	fa41 f303 	asr.w	r3, r1, r3
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d006      	beq.n	80009de <_ZN12MatrixDriver8SetPixelEhhhhh+0x130>
 80009d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009d4:	2101      	movs	r1, #1
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	b21b      	sxth	r3, r3
 80009dc:	e000      	b.n	80009e0 <_ZN12MatrixDriver8SetPixelEhhhhh+0x132>
 80009de:	2300      	movs	r3, #0
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = (
 80009e4:	823b      	strh	r3, [r7, #16]

		uint16_t offset = BufferOffset(x, y, plane, width, planes);
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	791c      	ldrb	r4, [r3, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	79db      	ldrb	r3, [r3, #7]
 80009f2:	78b9      	ldrb	r1, [r7, #2]
 80009f4:	78f8      	ldrb	r0, [r7, #3]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	4623      	mov	r3, r4
 80009fa:	f7ff fe3d 	bl	8000678 <_Z12BufferOffsethhhhh>
 80009fe:	4603      	mov	r3, r0
 8000a00:	81fb      	strh	r3, [r7, #14]

		for (int element = 0; element < elementPerPlanePixel; element++) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	799b      	ldrb	r3, [r3, #6]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	da1b      	bge.n	8000a4a <_ZN12MatrixDriver8SetPixelEhhhhh+0x19c>
			buffer[offset + element] = (buffer[offset] & ~pixelMask)
 8000a12:	89fb      	ldrh	r3, [r7, #14]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4413      	add	r3, r2
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	b21a      	sxth	r2, r3
 8000a1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	4013      	ands	r3, r2
 8000a28:	b21a      	sxth	r2, r3
					| planePixelBits;
 8000a2a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b219      	sxth	r1, r3
			buffer[offset + element] = (buffer[offset] & ~pixelMask)
 8000a32:	89fa      	ldrh	r2, [r7, #14]
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	4413      	add	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	4413      	add	r3, r2
					| planePixelBits;
 8000a3e:	b28a      	uxth	r2, r1
			buffer[offset + element] = (buffer[offset] & ~pixelMask)
 8000a40:	801a      	strh	r2, [r3, #0]
		for (int element = 0; element < elementPerPlanePixel; element++) {
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3301      	adds	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
 8000a48:	e7dd      	b.n	8000a06 <_ZN12MatrixDriver8SetPixelEhhhhh+0x158>
	for (int plane = 0; plane < planes; plane++) {
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	e78e      	b.n	8000970 <_ZN12MatrixDriver8SetPixelEhhhhh+0xc2>
		}
	}
}
 8000a52:	bf00      	nop
 8000a54:	372c      	adds	r7, #44	; 0x2c
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd90      	pop	{r4, r7, pc}

08000a5a <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
	sendBufferA = !sendBufferA;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7a5b      	ldrb	r3, [r3, #9]
 8000a66:	f083 0301 	eor.w	r3, r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	725a      	strb	r2, [r3, #9]

	nextOffset = 0;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	829a      	strh	r2, [r3, #20]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <_ZN12MatrixDriver14SendPlanePixelEv>:

uint32_t cycles = 0;
extern char buffer[1024];
uint32_t latchTicks = 0;

void MatrixDriver::SendPlanePixel() {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)"B\n", 2, 10);
 8000a88:	230a      	movs	r3, #10
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	491d      	ldr	r1, [pc, #116]	; (8000b04 <_ZN12MatrixDriver14SendPlanePixelEv+0x84>)
 8000a8e:	481e      	ldr	r0, [pc, #120]	; (8000b08 <_ZN12MatrixDriver14SendPlanePixelEv+0x88>)
 8000a90:	f002 f8df 	bl	8002c52 <HAL_UART_Transmit>

	uint16_t *buffer = sendBufferA ? bufferA : bufferB;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7a5b      	ldrb	r3, [r3, #9]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <_ZN12MatrixDriver14SendPlanePixelEv+0x22>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	e001      	b.n	8000aa6 <_ZN12MatrixDriver14SendPlanePixelEv+0x26>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	691b      	ldr	r3, [r3, #16]
 8000aa6:	60fb      	str	r3, [r7, #12]

	if((nextOffset % (width * planes)) == 0) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	8a9b      	ldrh	r3, [r3, #20]
 8000aac:	461a      	mov	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	791b      	ldrb	r3, [r3, #4]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	79db      	ldrb	r3, [r3, #7]
 8000ab8:	fb03 f301 	mul.w	r3, r3, r1
 8000abc:	fb92 f1f3 	sdiv	r1, r2, r3
 8000ac0:	fb03 f301 	mul.w	r3, r3, r1
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d102      	bne.n	8000ad0 <_ZN12MatrixDriver14SendPlanePixelEv+0x50>
		//Latch the previous row
		Latch();
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f84c 	bl	8000b68 <_ZN12MatrixDriver5LatchEv>
	}

	GPIOB->ODR = (uint32_t) buffer[nextOffset++];
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	8a9b      	ldrh	r3, [r3, #20]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	b291      	uxth	r1, r2
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	8291      	strh	r1, [r2, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	881a      	ldrh	r2, [r3, #0]
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <_ZN12MatrixDriver14SendPlanePixelEv+0x8c>)
 8000ae6:	60da      	str	r2, [r3, #12]

	if(nextOffset >= bufferSize) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	8a9a      	ldrh	r2, [r3, #20]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	895b      	ldrh	r3, [r3, #10]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d302      	bcc.n	8000afa <_ZN12MatrixDriver14SendPlanePixelEv+0x7a>
		nextOffset = 0;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	829a      	strh	r2, [r3, #20]
	}
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	080038c0 	.word	0x080038c0
 8000b08:	20000558 	.word	0x20000558
 8000b0c:	40010c00 	.word	0x40010c00

08000b10 <_ZN12MatrixDriver5ClockEv>:

void MatrixDriver::Clock() {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	cycles++;
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <_ZN12MatrixDriver5ClockEv+0x44>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <_ZN12MatrixDriver5ClockEv+0x44>)
 8000b20:	6013      	str	r3, [r2, #0]

	sprintf(buffer, "A: %lu\n", cycles);
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <_ZN12MatrixDriver5ClockEv+0x44>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	490b      	ldr	r1, [pc, #44]	; (8000b58 <_ZN12MatrixDriver5ClockEv+0x48>)
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <_ZN12MatrixDriver5ClockEv+0x4c>)
 8000b2c:	f002 fb54 	bl	80031d8 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 10);
 8000b30:	480a      	ldr	r0, [pc, #40]	; (8000b5c <_ZN12MatrixDriver5ClockEv+0x4c>)
 8000b32:	f7ff fb0b 	bl	800014c <strlen>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	230a      	movs	r3, #10
 8000b3c:	4907      	ldr	r1, [pc, #28]	; (8000b5c <_ZN12MatrixDriver5ClockEv+0x4c>)
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <_ZN12MatrixDriver5ClockEv+0x50>)
 8000b40:	f002 f887 	bl	8002c52 <HAL_UART_Transmit>

	GPIOB->BSRR = (0x0001 << CLK_SHIFT);
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <_ZN12MatrixDriver5ClockEv+0x54>)
 8000b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b4a:	611a      	str	r2, [r3, #16]
	//Clock will be cleared on next output
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200004a8 	.word	0x200004a8
 8000b58:	080038c4 	.word	0x080038c4
 8000b5c:	200000a4 	.word	0x200000a4
 8000b60:	20000558 	.word	0x20000558
 8000b64:	40010c00 	.word	0x40010c00

08000b68 <_ZN12MatrixDriver5LatchEv>:

void MatrixDriver::Latch() {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 8000b70:	f000 fa3a 	bl	8000fe8 <HAL_GetTick>
 8000b74:	60f8      	str	r0, [r7, #12]

	uint32_t duration = now - latchTicks;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <_ZN12MatrixDriver5LatchEv+0x6c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	60bb      	str	r3, [r7, #8]
	latchTicks = now;
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_ZN12MatrixDriver5LatchEv+0x6c>)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6013      	str	r3, [r2, #0]

	sprintf(buffer, "LAT Duration: %lu\n", duration);
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	4913      	ldr	r1, [pc, #76]	; (8000bd8 <_ZN12MatrixDriver5LatchEv+0x70>)
 8000b8a:	4814      	ldr	r0, [pc, #80]	; (8000bdc <_ZN12MatrixDriver5LatchEv+0x74>)
 8000b8c:	f002 fb24 	bl	80031d8 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 10);
 8000b90:	4812      	ldr	r0, [pc, #72]	; (8000bdc <_ZN12MatrixDriver5LatchEv+0x74>)
 8000b92:	f7ff fadb 	bl	800014c <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	230a      	movs	r3, #10
 8000b9c:	490f      	ldr	r1, [pc, #60]	; (8000bdc <_ZN12MatrixDriver5LatchEv+0x74>)
 8000b9e:	4810      	ldr	r0, [pc, #64]	; (8000be0 <_ZN12MatrixDriver5LatchEv+0x78>)
 8000ba0:	f002 f857 	bl	8002c52 <HAL_UART_Transmit>

	HAL_IWDG_Refresh(&hiwdg);
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <_ZN12MatrixDriver5LatchEv+0x7c>)
 8000ba6:	f000 fd3c 	bl	8001622 <HAL_IWDG_Refresh>

	//Disable output
	GPIOB->BSRR = (0x0001 << OE_SHIFT);
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <_ZN12MatrixDriver5LatchEv+0x80>)
 8000bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb0:	611a      	str	r2, [r3, #16]
	//Latch output
	GPIOB->BSRR = (0x0001 << LAT_SHIFT);
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <_ZN12MatrixDriver5LatchEv+0x80>)
 8000bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb8:	611a      	str	r2, [r3, #16]
	//Reset Latch
	GPIOB->BSRR = (0x0001 << (LAT_SHIFT + 16));
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <_ZN12MatrixDriver5LatchEv+0x80>)
 8000bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc0:	611a      	str	r2, [r3, #16]
	//Reset ~OE
	GPIOB->BSRR = (0x0001 << (OE_SHIFT + 16));
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <_ZN12MatrixDriver5LatchEv+0x80>)
 8000bc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bc8:	611a      	str	r2, [r3, #16]
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200004ac 	.word	0x200004ac
 8000bd8:	080038cc 	.word	0x080038cc
 8000bdc:	200000a4 	.word	0x200000a4
 8000be0:	20000558 	.word	0x20000558
 8000be4:	20000504 	.word	0x20000504
 8000be8:	40010c00 	.word	0x40010c00

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_MspInit+0x60>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_MspInit+0x60>)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000

08000c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d12f      	bne.n	8000cd0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ca0:	23a0      	movs	r3, #160	; 0xa0
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000cb4:	f000 fb0a 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb8:	2340      	movs	r3, #64	; 0x40
 8000cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000ccc:	f000 fafe 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40013000 	.word	0x40013000
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <HAL_TIM_Base_MspInit+0x44>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d113      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	201d      	movs	r0, #29
 8000d14:	f000 fa49 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d18:	201d      	movs	r0, #29
 8000d1a:	f000 fa62 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40000400 	.word	0x40000400
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <HAL_UART_MspInit+0x8c>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d131      	bne.n	8000db4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	4619      	mov	r1, r3
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <HAL_UART_MspInit+0x94>)
 8000d96:	f000 fa99 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_UART_MspInit+0x94>)
 8000db0:	f000 fa8c 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40013800 	.word	0x40013800
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010800 	.word	0x40010800

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <HardFault_Handler+0x4>

08000dda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <MemManage_Handler+0x4>

08000de0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <BusFault_Handler+0x4>

08000de6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <UsageFault_Handler+0x4>

08000dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f8d6 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM3_IRQHandler+0x10>)
 8000e22:	f001 f9a7 	bl	8002174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000510 	.word	0x20000510

08000e30 <_getpid>:
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	2301      	movs	r3, #1
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <_kill>:
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
 8000e48:	f002 f892 	bl	8002f70 <__errno>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	2316      	movs	r3, #22
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_exit>:
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffe7 	bl	8000e3e <_kill>
 8000e70:	e7fe      	b.n	8000e70 <_exit+0x12>
	...

08000e74 <_sbrk>:
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <_sbrk+0x5c>)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <_sbrk+0x60>)
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <_sbrk+0x22>
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <_sbrk+0x64>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <_sbrk+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d207      	bcs.n	8000eb4 <_sbrk+0x40>
 8000ea4:	f002 f864 	bl	8002f70 <__errno>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	230c      	movs	r3, #12
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb2:	e009      	b.n	8000ec8 <_sbrk+0x54>
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <_sbrk+0x64>)
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20005000 	.word	0x20005000
 8000ed4:	00000400 	.word	0x00000400
 8000ed8:	200004b0 	.word	0x200004b0
 8000edc:	200005f8 	.word	0x200005f8

08000ee0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <Reset_Handler>:
 8000eec:	2100      	movs	r1, #0
 8000eee:	e003      	b.n	8000ef8 <LoopCopyDataInit>

08000ef0 <CopyDataInit>:
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <LoopFillZerobss+0x14>)
 8000ef2:	585b      	ldr	r3, [r3, r1]
 8000ef4:	5043      	str	r3, [r0, r1]
 8000ef6:	3104      	adds	r1, #4

08000ef8 <LoopCopyDataInit>:
 8000ef8:	480a      	ldr	r0, [pc, #40]	; (8000f24 <LoopFillZerobss+0x18>)
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <LoopFillZerobss+0x1c>)
 8000efc:	1842      	adds	r2, r0, r1
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3f6      	bcc.n	8000ef0 <CopyDataInit>
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <LoopFillZerobss+0x20>)
 8000f04:	e002      	b.n	8000f0c <LoopFillZerobss>

08000f06 <FillZerobss>:
 8000f06:	2300      	movs	r3, #0
 8000f08:	f842 3b04 	str.w	r3, [r2], #4

08000f0c <LoopFillZerobss>:
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <LoopFillZerobss+0x24>)
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3f9      	bcc.n	8000f06 <FillZerobss>
 8000f12:	f7ff ffe5 	bl	8000ee0 <SystemInit>
 8000f16:	f002 f831 	bl	8002f7c <__libc_init_array>
 8000f1a:	f7ff f9cb 	bl	80002b4 <main>
 8000f1e:	4770      	bx	lr
 8000f20:	0800394c 	.word	0x0800394c
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000070 	.word	0x20000070
 8000f2c:	20000070 	.word	0x20000070
 8000f30:	200005f8 	.word	0x200005f8

08000f34 <ADC1_2_IRQHandler>:
 8000f34:	e7fe      	b.n	8000f34 <ADC1_2_IRQHandler>
	...

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_Init+0x28>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_Init+0x28>)
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f923 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f808 	bl	8000f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f54:	f7ff fe4a 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40022000 	.word	0x40022000

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x54>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x58>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f93b 	bl	80011fe <HAL_SYSTICK_Config>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00e      	b.n	8000fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d80a      	bhi.n	8000fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	f000 f903 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <HAL_InitTick+0x5c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a03      	ldr	r2, [pc, #12]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200005f0 	.word	0x200005f0

08000fe8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <HAL_GetTick+0x10>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	200005f0 	.word	0x200005f0

08000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <__NVIC_GetPriorityGrouping+0x18>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	f003 0307 	and.w	r3, r3, #7
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db0b      	blt.n	800108a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 021f 	and.w	r2, r3, #31
 8001078:	4906      	ldr	r1, [pc, #24]	; (8001094 <__NVIC_EnableIRQ+0x34>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	2001      	movs	r0, #1
 8001082:	fa00 f202 	lsl.w	r2, r0, r2
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	; (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	; 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001174:	f7ff ff90 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff2d 	bl	8000ffc <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff42 	bl	8001044 <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff90 	bl	80010ec <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5f 	bl	8001098 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff35 	bl	8001060 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e043      	b.n	80012b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <HAL_DMA_Init+0xa8>)
 8001236:	4413      	add	r3, r2
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <HAL_DMA_Init+0xac>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	009a      	lsls	r2, r3, #2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <HAL_DMA_Init+0xb0>)
 800124a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2202      	movs	r2, #2
 8001250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001262:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001266:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	bffdfff8 	.word	0xbffdfff8
 80012c4:	cccccccd 	.word	0xcccccccd
 80012c8:	40020000 	.word	0x40020000

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b08b      	sub	sp, #44	; 0x2c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	e127      	b.n	8001530 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e0:	2201      	movs	r2, #1
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f040 8116 	bne.w	800152a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b12      	cmp	r3, #18
 8001304:	d034      	beq.n	8001370 <HAL_GPIO_Init+0xa4>
 8001306:	2b12      	cmp	r3, #18
 8001308:	d80d      	bhi.n	8001326 <HAL_GPIO_Init+0x5a>
 800130a:	2b02      	cmp	r3, #2
 800130c:	d02b      	beq.n	8001366 <HAL_GPIO_Init+0x9a>
 800130e:	2b02      	cmp	r3, #2
 8001310:	d804      	bhi.n	800131c <HAL_GPIO_Init+0x50>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d031      	beq.n	800137a <HAL_GPIO_Init+0xae>
 8001316:	2b01      	cmp	r3, #1
 8001318:	d01c      	beq.n	8001354 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800131a:	e048      	b.n	80013ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800131c:	2b03      	cmp	r3, #3
 800131e:	d043      	beq.n	80013a8 <HAL_GPIO_Init+0xdc>
 8001320:	2b11      	cmp	r3, #17
 8001322:	d01b      	beq.n	800135c <HAL_GPIO_Init+0x90>
          break;
 8001324:	e043      	b.n	80013ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001326:	4a89      	ldr	r2, [pc, #548]	; (800154c <HAL_GPIO_Init+0x280>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d026      	beq.n	800137a <HAL_GPIO_Init+0xae>
 800132c:	4a87      	ldr	r2, [pc, #540]	; (800154c <HAL_GPIO_Init+0x280>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d806      	bhi.n	8001340 <HAL_GPIO_Init+0x74>
 8001332:	4a87      	ldr	r2, [pc, #540]	; (8001550 <HAL_GPIO_Init+0x284>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d020      	beq.n	800137a <HAL_GPIO_Init+0xae>
 8001338:	4a86      	ldr	r2, [pc, #536]	; (8001554 <HAL_GPIO_Init+0x288>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d01d      	beq.n	800137a <HAL_GPIO_Init+0xae>
          break;
 800133e:	e036      	b.n	80013ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001340:	4a85      	ldr	r2, [pc, #532]	; (8001558 <HAL_GPIO_Init+0x28c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d019      	beq.n	800137a <HAL_GPIO_Init+0xae>
 8001346:	4a85      	ldr	r2, [pc, #532]	; (800155c <HAL_GPIO_Init+0x290>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d016      	beq.n	800137a <HAL_GPIO_Init+0xae>
 800134c:	4a84      	ldr	r2, [pc, #528]	; (8001560 <HAL_GPIO_Init+0x294>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0xae>
          break;
 8001352:	e02c      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	623b      	str	r3, [r7, #32]
          break;
 800135a:	e028      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	3304      	adds	r3, #4
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e023      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	3308      	adds	r3, #8
 800136c:	623b      	str	r3, [r7, #32]
          break;
 800136e:	e01e      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	330c      	adds	r3, #12
 8001376:	623b      	str	r3, [r7, #32]
          break;
 8001378:	e019      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001382:	2304      	movs	r3, #4
 8001384:	623b      	str	r3, [r7, #32]
          break;
 8001386:	e012      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d105      	bne.n	800139c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001390:	2308      	movs	r3, #8
 8001392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	611a      	str	r2, [r3, #16]
          break;
 800139a:	e008      	b.n	80013ae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800139c:	2308      	movs	r3, #8
 800139e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	615a      	str	r2, [r3, #20]
          break;
 80013a6:	e002      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2bff      	cmp	r3, #255	; 0xff
 80013b2:	d801      	bhi.n	80013b8 <HAL_GPIO_Init+0xec>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	e001      	b.n	80013bc <HAL_GPIO_Init+0xf0>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3304      	adds	r3, #4
 80013bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2bff      	cmp	r3, #255	; 0xff
 80013c2:	d802      	bhi.n	80013ca <HAL_GPIO_Init+0xfe>
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x104>
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	3b08      	subs	r3, #8
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	210f      	movs	r1, #15
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	401a      	ands	r2, r3
 80013e2:	6a39      	ldr	r1, [r7, #32]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	431a      	orrs	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 8096 	beq.w	800152a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013fe:	4b59      	ldr	r3, [pc, #356]	; (8001564 <HAL_GPIO_Init+0x298>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	4a58      	ldr	r2, [pc, #352]	; (8001564 <HAL_GPIO_Init+0x298>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6193      	str	r3, [r2, #24]
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_GPIO_Init+0x298>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001416:	4a54      	ldr	r2, [pc, #336]	; (8001568 <HAL_GPIO_Init+0x29c>)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	220f      	movs	r2, #15
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	4013      	ands	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4b      	ldr	r2, [pc, #300]	; (800156c <HAL_GPIO_Init+0x2a0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x19e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4a      	ldr	r2, [pc, #296]	; (8001570 <HAL_GPIO_Init+0x2a4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x19a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a49      	ldr	r2, [pc, #292]	; (8001574 <HAL_GPIO_Init+0x2a8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x196>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a48      	ldr	r2, [pc, #288]	; (8001578 <HAL_GPIO_Init+0x2ac>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x192>
 800145a:	2303      	movs	r3, #3
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x1a0>
 800145e:	2304      	movs	r3, #4
 8001460:	e004      	b.n	800146c <HAL_GPIO_Init+0x1a0>
 8001462:	2302      	movs	r3, #2
 8001464:	e002      	b.n	800146c <HAL_GPIO_Init+0x1a0>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x1a0>
 800146a:	2300      	movs	r3, #0
 800146c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146e:	f002 0203 	and.w	r2, r2, #3
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	4093      	lsls	r3, r2
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800147c:	493a      	ldr	r1, [pc, #232]	; (8001568 <HAL_GPIO_Init+0x29c>)
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_GPIO_Init+0x2b0>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4938      	ldr	r1, [pc, #224]	; (800157c <HAL_GPIO_Init+0x2b0>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
 80014a2:	e006      	b.n	80014b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	4933      	ldr	r1, [pc, #204]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	492e      	ldr	r1, [pc, #184]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
 80014ca:	e006      	b.n	80014da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4929      	ldr	r1, [pc, #164]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	4924      	ldr	r1, [pc, #144]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	608b      	str	r3, [r1, #8]
 80014f2:	e006      	b.n	8001502 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	491f      	ldr	r1, [pc, #124]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014fe:	4013      	ands	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_GPIO_Init+0x2b0>)
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	491a      	ldr	r1, [pc, #104]	; (800157c <HAL_GPIO_Init+0x2b0>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	60cb      	str	r3, [r1, #12]
 800151a:	e006      	b.n	800152a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_GPIO_Init+0x2b0>)
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	43db      	mvns	r3, r3
 8001524:	4915      	ldr	r1, [pc, #84]	; (800157c <HAL_GPIO_Init+0x2b0>)
 8001526:	4013      	ands	r3, r2
 8001528:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	3301      	adds	r3, #1
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	fa22 f303 	lsr.w	r3, r2, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	f47f aed0 	bne.w	80012e0 <HAL_GPIO_Init+0x14>
  }
}
 8001540:	bf00      	nop
 8001542:	372c      	adds	r7, #44	; 0x2c
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	10210000 	.word	0x10210000
 8001550:	10110000 	.word	0x10110000
 8001554:	10120000 	.word	0x10120000
 8001558:	10310000 	.word	0x10310000
 800155c:	10320000 	.word	0x10320000
 8001560:	10220000 	.word	0x10220000
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	40010800 	.word	0x40010800
 8001570:	40010c00 	.word	0x40010c00
 8001574:	40011000 	.word	0x40011000
 8001578:	40011400 	.word	0x40011400
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e02b      	b.n	800161a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80015ca:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f245 5255 	movw	r2, #21845	; 0x5555
 80015d4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6852      	ldr	r2, [r2, #4]
 80015de:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6892      	ldr	r2, [r2, #8]
 80015e8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80015ea:	f7ff fcfd 	bl	8000fe8 <HAL_GetTick>
 80015ee:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80015f0:	e008      	b.n	8001604 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80015f2:	f7ff fcf9 	bl	8000fe8 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b26      	cmp	r3, #38	; 0x26
 80015fe:	d901      	bls.n	8001604 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e00a      	b.n	800161a <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f1      	bne.n	80015f2 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001616:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001632:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e26c      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8087 	beq.w	800176e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001660:	4b92      	ldr	r3, [pc, #584]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b04      	cmp	r3, #4
 800166a:	d00c      	beq.n	8001686 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800166c:	4b8f      	ldr	r3, [pc, #572]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d112      	bne.n	800169e <HAL_RCC_OscConfig+0x5e>
 8001678:	4b8c      	ldr	r3, [pc, #560]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001684:	d10b      	bne.n	800169e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001686:	4b89      	ldr	r3, [pc, #548]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d06c      	beq.n	800176c <HAL_RCC_OscConfig+0x12c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d168      	bne.n	800176c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e246      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x76>
 80016a8:	4b80      	ldr	r3, [pc, #512]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a7f      	ldr	r2, [pc, #508]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e02e      	b.n	8001714 <HAL_RCC_OscConfig+0xd4>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x98>
 80016be:	4b7b      	ldr	r3, [pc, #492]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7a      	ldr	r2, [pc, #488]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b78      	ldr	r3, [pc, #480]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a77      	ldr	r2, [pc, #476]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e01d      	b.n	8001714 <HAL_RCC_OscConfig+0xd4>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0xbc>
 80016e2:	4b72      	ldr	r3, [pc, #456]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a71      	ldr	r2, [pc, #452]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0xd4>
 80016fc:	4b6b      	ldr	r3, [pc, #428]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6a      	ldr	r2, [pc, #424]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a67      	ldr	r2, [pc, #412]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 800170e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001712:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fc64 	bl	8000fe8 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff fc60 	bl	8000fe8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1fa      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b5d      	ldr	r3, [pc, #372]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0xe4>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fc50 	bl	8000fe8 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fc4c 	bl	8000fe8 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e1e6      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x10c>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d063      	beq.n	8001842 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800177a:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001786:	4b49      	ldr	r3, [pc, #292]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d11c      	bne.n	80017cc <HAL_RCC_OscConfig+0x18c>
 8001792:	4b46      	ldr	r3, [pc, #280]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d116      	bne.n	80017cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179e:	4b43      	ldr	r3, [pc, #268]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <HAL_RCC_OscConfig+0x176>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d001      	beq.n	80017b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e1ba      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4939      	ldr	r1, [pc, #228]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	e03a      	b.n	8001842 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fc05 	bl	8000fe8 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff fc01 	bl	8000fe8 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e19b      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f4:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4927      	ldr	r1, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]
 8001814:	e015      	b.n	8001842 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fbe4 	bl	8000fe8 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001824:	f7ff fbe0 	bl	8000fe8 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e17a      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d03a      	beq.n	80018c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d019      	beq.n	800188a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_RCC_OscConfig+0x274>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185c:	f7ff fbc4 	bl	8000fe8 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001864:	f7ff fbc0 	bl	8000fe8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e15a      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f000 fada 	bl	8001e3c <RCC_Delay>
 8001888:	e01c      	b.n	80018c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_RCC_OscConfig+0x274>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001890:	f7ff fbaa 	bl	8000fe8 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001896:	e00f      	b.n	80018b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff fba6 	bl	8000fe8 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d908      	bls.n	80018b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e140      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	42420000 	.word	0x42420000
 80018b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	4b9e      	ldr	r3, [pc, #632]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e9      	bne.n	8001898 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80a6 	beq.w	8001a1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d6:	4b97      	ldr	r3, [pc, #604]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10d      	bne.n	80018fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	4b94      	ldr	r3, [pc, #592]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4a93      	ldr	r2, [pc, #588]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ec:	61d3      	str	r3, [r2, #28]
 80018ee:	4b91      	ldr	r3, [pc, #580]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fa:	2301      	movs	r3, #1
 80018fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fe:	4b8e      	ldr	r3, [pc, #568]	; (8001b38 <HAL_RCC_OscConfig+0x4f8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	2b00      	cmp	r3, #0
 8001908:	d118      	bne.n	800193c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190a:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <HAL_RCC_OscConfig+0x4f8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a8a      	ldr	r2, [pc, #552]	; (8001b38 <HAL_RCC_OscConfig+0x4f8>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001916:	f7ff fb67 	bl	8000fe8 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191e:	f7ff fb63 	bl	8000fe8 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b64      	cmp	r3, #100	; 0x64
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e0fd      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001930:	4b81      	ldr	r3, [pc, #516]	; (8001b38 <HAL_RCC_OscConfig+0x4f8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x312>
 8001944:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4a7a      	ldr	r2, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6213      	str	r3, [r2, #32]
 8001950:	e02d      	b.n	80019ae <HAL_RCC_OscConfig+0x36e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x334>
 800195a:	4b76      	ldr	r3, [pc, #472]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a75      	ldr	r2, [pc, #468]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	6213      	str	r3, [r2, #32]
 8001966:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a72      	ldr	r2, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	f023 0304 	bic.w	r3, r3, #4
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	e01c      	b.n	80019ae <HAL_RCC_OscConfig+0x36e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b05      	cmp	r3, #5
 800197a:	d10c      	bne.n	8001996 <HAL_RCC_OscConfig+0x356>
 800197c:	4b6d      	ldr	r3, [pc, #436]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4a6c      	ldr	r2, [pc, #432]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6213      	str	r3, [r2, #32]
 8001988:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a69      	ldr	r2, [pc, #420]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e00b      	b.n	80019ae <HAL_RCC_OscConfig+0x36e>
 8001996:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	4a66      	ldr	r2, [pc, #408]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6213      	str	r3, [r2, #32]
 80019a2:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4a63      	ldr	r2, [pc, #396]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d015      	beq.n	80019e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b6:	f7ff fb17 	bl	8000fe8 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff fb13 	bl	8000fe8 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0ab      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	4b57      	ldr	r3, [pc, #348]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ee      	beq.n	80019be <HAL_RCC_OscConfig+0x37e>
 80019e0:	e014      	b.n	8001a0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fb01 	bl	8000fe8 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff fafd 	bl	8000fe8 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e095      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a00:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ee      	bne.n	80019ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d105      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a12:	4b48      	ldr	r3, [pc, #288]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a47      	ldr	r2, [pc, #284]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8081 	beq.w	8001b2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a28:	4b42      	ldr	r3, [pc, #264]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d061      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d146      	bne.n	8001aca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3c:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <HAL_RCC_OscConfig+0x4fc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff fad1 	bl	8000fe8 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff facd 	bl	8000fe8 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e067      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a70:	d108      	bne.n	8001a84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	492d      	ldr	r1, [pc, #180]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a19      	ldr	r1, [r3, #32]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	430b      	orrs	r3, r1
 8001a96:	4927      	ldr	r1, [pc, #156]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x4fc>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff faa1 	bl	8000fe8 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff fa9d 	bl	8000fe8 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e037      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46a>
 8001ac8:	e02f      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_RCC_OscConfig+0x4fc>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fa8a 	bl	8000fe8 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff fa86 	bl	8000fe8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e020      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x498>
 8001af6:	e018      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e013      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	42420060 	.word	0x42420060

08001b40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0d0      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d910      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 0207 	bic.w	r2, r3, #7
 8001b6a:	4965      	ldr	r1, [pc, #404]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0b8      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b9c:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ba6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb4:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4a52      	ldr	r2, [pc, #328]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	494d      	ldr	r1, [pc, #308]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d040      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d115      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e07f      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e073      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06b      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1e:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f023 0203 	bic.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4936      	ldr	r1, [pc, #216]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c30:	f7ff f9da 	bl	8000fe8 <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7ff f9d6 	bl	8000fe8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e053      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 020c 	and.w	r2, r3, #12
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d1eb      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d210      	bcs.n	8001c90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 0207 	bic.w	r2, r3, #7
 8001c76:	4922      	ldr	r1, [pc, #136]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e032      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4916      	ldr	r1, [pc, #88]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	490e      	ldr	r1, [pc, #56]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cce:	f000 f821 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001cd2:	4601      	mov	r1, r0
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce0:	5cd3      	ldrb	r3, [r2, r3]
 8001ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x1d0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f938 	bl	8000f64 <HAL_InitTick>

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40021000 	.word	0x40021000
 8001d08:	080038f4 	.word	0x080038f4
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000004 	.word	0x20000004

08001d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	b490      	push	{r4, r7}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d1c:	1d3c      	adds	r4, r7, #4
 8001d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d3e:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d002      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x40>
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d003      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0x46>
 8001d52:	e02d      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d56:	623b      	str	r3, [r7, #32]
      break;
 8001d58:	e02d      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	0c9b      	lsrs	r3, r3, #18
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d66:	4413      	add	r3, r2
 8001d68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	0c5b      	lsrs	r3, r3, #17
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d86:	4413      	add	r3, r2
 8001d88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d92:	fb02 f203 	mul.w	r2, r2, r3
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	e004      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	623b      	str	r3, [r7, #32]
      break;
 8001dae:	e002      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001db2:	623b      	str	r3, [r7, #32]
      break;
 8001db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db6:	6a3b      	ldr	r3, [r7, #32]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc90      	pop	{r4, r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	080038e0 	.word	0x080038e0
 8001dc8:	080038f0 	.word	0x080038f0
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	007a1200 	.word	0x007a1200
 8001dd4:	003d0900 	.word	0x003d0900

08001dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ddc:	4b02      	ldr	r3, [pc, #8]	; (8001de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	20000000 	.word	0x20000000

08001dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df0:	f7ff fff2 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001df4:	4601      	mov	r1, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e02:	5cd3      	ldrb	r3, [r2, r3]
 8001e04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08003904 	.word	0x08003904

08001e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4601      	mov	r1, r0
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	0adb      	lsrs	r3, r3, #11
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4a03      	ldr	r2, [pc, #12]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	08003904 	.word	0x08003904

08001e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <RCC_Delay+0x34>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <RCC_Delay+0x38>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	0a5b      	lsrs	r3, r3, #9
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e58:	bf00      	nop
  }
  while (Delay --);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	60fa      	str	r2, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f9      	bne.n	8001e58 <RCC_Delay+0x1c>
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000000 	.word	0x20000000
 8001e74:	10624dd3 	.word	0x10624dd3

08001e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e076      	b.n	8001f78 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d108      	bne.n	8001ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e9a:	d009      	beq.n	8001eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
 8001ea2:	e005      	b.n	8001eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fec0 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	ea42 0103 	orr.w	r1, r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	0c1a      	lsrs	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f002 0204 	and.w	r2, r2, #4
 8001f56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e041      	b.n	8002016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fe9c 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 fb0a 	bl	80025d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d001      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e03a      	b.n	80020ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_TIM_Base_Start_IT+0x98>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00e      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x58>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002062:	d009      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x58>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_TIM_Base_Start_IT+0x9c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x58>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d111      	bne.n	800209c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b06      	cmp	r3, #6
 8002088:	d010      	beq.n	80020ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209a:	e007      	b.n	80020ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40012c00 	.word	0x40012c00
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40000800 	.word	0x40000800

080020c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e041      	b.n	800215a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f839 	bl	8002162 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3304      	adds	r3, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f000 fa68 	bl	80025d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d122      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b02      	cmp	r3, #2
 8002196:	d11b      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0202 	mvn.w	r2, #2
 80021a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f9f3 	bl	80025a2 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fa3a 	bl	8000638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f9f5 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0204 	mvn.w	r2, #4
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f9c9 	bl	80025a2 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fa10 	bl	8000638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f9cb 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b08      	cmp	r3, #8
 8002230:	d122      	bne.n	8002278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b08      	cmp	r3, #8
 800223e:	d11b      	bne.n	8002278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0208 	mvn.w	r2, #8
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2204      	movs	r2, #4
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f99f 	bl	80025a2 <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe f9e6 	bl	8000638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f9a1 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b10      	cmp	r3, #16
 8002284:	d122      	bne.n	80022cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b10      	cmp	r3, #16
 8002292:	d11b      	bne.n	80022cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0210 	mvn.w	r2, #16
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2208      	movs	r2, #8
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f975 	bl	80025a2 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe f9bc 	bl	8000638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f977 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d107      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0201 	mvn.w	r2, #1
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe f9b0 	bl	8000658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	2b80      	cmp	r3, #128	; 0x80
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b80      	cmp	r3, #128	; 0x80
 8002312:	d107      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fc41 	bl	8002ba6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f93b 	bl	80025c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b20      	cmp	r3, #32
 800235c:	d10e      	bne.n	800237c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b20      	cmp	r3, #32
 800236a:	d107      	bne.n	800237c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0220 	mvn.w	r2, #32
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fc0c 	bl	8002b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_TIM_OC_ConfigChannel+0x1a>
 800239a:	2302      	movs	r3, #2
 800239c:	e046      	b.n	800242c <HAL_TIM_OC_ConfigChannel+0xa8>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b0c      	cmp	r3, #12
 80023aa:	d839      	bhi.n	8002420 <HAL_TIM_OC_ConfigChannel+0x9c>
 80023ac:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <HAL_TIM_OC_ConfigChannel+0x30>)
 80023ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b2:	bf00      	nop
 80023b4:	080023e9 	.word	0x080023e9
 80023b8:	08002421 	.word	0x08002421
 80023bc:	08002421 	.word	0x08002421
 80023c0:	08002421 	.word	0x08002421
 80023c4:	080023f7 	.word	0x080023f7
 80023c8:	08002421 	.word	0x08002421
 80023cc:	08002421 	.word	0x08002421
 80023d0:	08002421 	.word	0x08002421
 80023d4:	08002405 	.word	0x08002405
 80023d8:	08002421 	.word	0x08002421
 80023dc:	08002421 	.word	0x08002421
 80023e0:	08002421 	.word	0x08002421
 80023e4:	08002413 	.word	0x08002413
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f954 	bl	800269c <TIM_OC1_SetConfig>
      break;
 80023f4:	e015      	b.n	8002422 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f9b3 	bl	8002768 <TIM_OC2_SetConfig>
      break;
 8002402:	e00e      	b.n	8002422 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fa16 	bl	800283c <TIM_OC3_SetConfig>
      break;
 8002410:	e007      	b.n	8002422 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fa79 	bl	8002910 <TIM_OC4_SetConfig>
      break;
 800241e:	e000      	b.n	8002422 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8002420:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_TIM_ConfigClockSource+0x18>
 8002448:	2302      	movs	r3, #2
 800244a:	e0a6      	b.n	800259a <HAL_TIM_ConfigClockSource+0x166>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800246a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002472:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b40      	cmp	r3, #64	; 0x40
 8002482:	d067      	beq.n	8002554 <HAL_TIM_ConfigClockSource+0x120>
 8002484:	2b40      	cmp	r3, #64	; 0x40
 8002486:	d80b      	bhi.n	80024a0 <HAL_TIM_ConfigClockSource+0x6c>
 8002488:	2b10      	cmp	r3, #16
 800248a:	d073      	beq.n	8002574 <HAL_TIM_ConfigClockSource+0x140>
 800248c:	2b10      	cmp	r3, #16
 800248e:	d802      	bhi.n	8002496 <HAL_TIM_ConfigClockSource+0x62>
 8002490:	2b00      	cmp	r3, #0
 8002492:	d06f      	beq.n	8002574 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002494:	e078      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002496:	2b20      	cmp	r3, #32
 8002498:	d06c      	beq.n	8002574 <HAL_TIM_ConfigClockSource+0x140>
 800249a:	2b30      	cmp	r3, #48	; 0x30
 800249c:	d06a      	beq.n	8002574 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800249e:	e073      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024a0:	2b70      	cmp	r3, #112	; 0x70
 80024a2:	d00d      	beq.n	80024c0 <HAL_TIM_ConfigClockSource+0x8c>
 80024a4:	2b70      	cmp	r3, #112	; 0x70
 80024a6:	d804      	bhi.n	80024b2 <HAL_TIM_ConfigClockSource+0x7e>
 80024a8:	2b50      	cmp	r3, #80	; 0x50
 80024aa:	d033      	beq.n	8002514 <HAL_TIM_ConfigClockSource+0xe0>
 80024ac:	2b60      	cmp	r3, #96	; 0x60
 80024ae:	d041      	beq.n	8002534 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80024b0:	e06a      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b6:	d066      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0x152>
 80024b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024bc:	d017      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80024be:	e063      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6899      	ldr	r1, [r3, #8]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f000 fae3 	bl	8002a9a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	609a      	str	r2, [r3, #8]
      break;
 80024ec:	e04c      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6899      	ldr	r1, [r3, #8]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f000 facc 	bl	8002a9a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002510:	609a      	str	r2, [r3, #8]
      break;
 8002512:	e039      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	461a      	mov	r2, r3
 8002522:	f000 fa43 	bl	80029ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2150      	movs	r1, #80	; 0x50
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fa9a 	bl	8002a66 <TIM_ITRx_SetConfig>
      break;
 8002532:	e029      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	461a      	mov	r2, r3
 8002542:	f000 fa61 	bl	8002a08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2160      	movs	r1, #96	; 0x60
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fa8a 	bl	8002a66 <TIM_ITRx_SetConfig>
      break;
 8002552:	e019      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	461a      	mov	r2, r3
 8002562:	f000 fa23 	bl	80029ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2140      	movs	r1, #64	; 0x40
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fa7a 	bl	8002a66 <TIM_ITRx_SetConfig>
      break;
 8002572:	e009      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	4610      	mov	r0, r2
 8002580:	f000 fa71 	bl	8002a66 <TIM_ITRx_SetConfig>
        break;
 8002584:	e000      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a29      	ldr	r2, [pc, #164]	; (8002690 <TIM_Base_SetConfig+0xb8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00b      	beq.n	8002608 <TIM_Base_SetConfig+0x30>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f6:	d007      	beq.n	8002608 <TIM_Base_SetConfig+0x30>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a26      	ldr	r2, [pc, #152]	; (8002694 <TIM_Base_SetConfig+0xbc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <TIM_Base_SetConfig+0x30>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a25      	ldr	r2, [pc, #148]	; (8002698 <TIM_Base_SetConfig+0xc0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d108      	bne.n	800261a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <TIM_Base_SetConfig+0xb8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00b      	beq.n	800263a <TIM_Base_SetConfig+0x62>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d007      	beq.n	800263a <TIM_Base_SetConfig+0x62>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a19      	ldr	r2, [pc, #100]	; (8002694 <TIM_Base_SetConfig+0xbc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d003      	beq.n	800263a <TIM_Base_SetConfig+0x62>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a18      	ldr	r2, [pc, #96]	; (8002698 <TIM_Base_SetConfig+0xc0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d108      	bne.n	800264c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a07      	ldr	r2, [pc, #28]	; (8002690 <TIM_Base_SetConfig+0xb8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d103      	bne.n	8002680 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	615a      	str	r2, [r3, #20]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	40012c00 	.word	0x40012c00
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800

0800269c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f023 0201 	bic.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f023 0302 	bic.w	r3, r3, #2
 80026e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <TIM_OC1_SetConfig+0xc8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10c      	bne.n	8002712 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0308 	bic.w	r3, r3, #8
 80026fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f023 0304 	bic.w	r3, r3, #4
 8002710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a13      	ldr	r2, [pc, #76]	; (8002764 <TIM_OC1_SetConfig+0xc8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d111      	bne.n	800273e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	621a      	str	r2, [r3, #32]
}
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40012c00 	.word	0x40012c00

08002768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f023 0210 	bic.w	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f023 0320 	bic.w	r3, r3, #32
 80027b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <TIM_OC2_SetConfig+0xd0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10d      	bne.n	80027e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a14      	ldr	r2, [pc, #80]	; (8002838 <TIM_OC2_SetConfig+0xd0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d113      	bne.n	8002814 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40012c00 	.word	0x40012c00

0800283c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0303 	bic.w	r3, r3, #3
 8002872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1d      	ldr	r2, [pc, #116]	; (800290c <TIM_OC3_SetConfig+0xd0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10d      	bne.n	80028b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <TIM_OC3_SetConfig+0xd0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d113      	bne.n	80028e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	621a      	str	r2, [r3, #32]
}
 8002900:	bf00      	nop
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40012c00 	.word	0x40012c00

08002910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800293e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800295a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	031b      	lsls	r3, r3, #12
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <TIM_OC4_SetConfig+0x98>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d109      	bne.n	8002984 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002976:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40012c00 	.word	0x40012c00

080029ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f023 0201 	bic.w	r2, r3, #1
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f023 030a 	bic.w	r3, r3, #10
 80029e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	621a      	str	r2, [r3, #32]
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f023 0210 	bic.w	r2, r3, #16
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	031b      	lsls	r3, r3, #12
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	621a      	str	r2, [r3, #32]
}
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f043 0307 	orr.w	r3, r3, #7
 8002a88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	609a      	str	r2, [r3, #8]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b087      	sub	sp, #28
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ab4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	021a      	lsls	r2, r3, #8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	609a      	str	r2, [r3, #8]
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e046      	b.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00e      	beq.n	8002b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d009      	beq.n	8002b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a10      	ldr	r2, [pc, #64]	; (8002b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d10c      	bne.n	8002b6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800

08002b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e03f      	b.n	8002c4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe f8a6 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2224      	movs	r2, #36	; 0x24
 8002be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f905 	bl	8002e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b08a      	sub	sp, #40	; 0x28
 8002c56:	af02      	add	r7, sp, #8
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d17c      	bne.n	8002d6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_UART_Transmit+0x2c>
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e075      	b.n	8002d6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_UART_Transmit+0x3e>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e06e      	b.n	8002d6e <HAL_UART_Transmit+0x11c>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2221      	movs	r2, #33	; 0x21
 8002ca2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ca6:	f7fe f99f 	bl	8000fe8 <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	88fa      	ldrh	r2, [r7, #6]
 8002cb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	88fa      	ldrh	r2, [r7, #6]
 8002cb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc0:	d108      	bne.n	8002cd4 <HAL_UART_Transmit+0x82>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	e003      	b.n	8002cdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002ce4:	e02a      	b.n	8002d3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2200      	movs	r2, #0
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f840 	bl	8002d76 <UART_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e036      	b.n	8002d6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10b      	bne.n	8002d1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	3302      	adds	r3, #2
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	e007      	b.n	8002d2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1cf      	bne.n	8002ce6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2140      	movs	r1, #64	; 0x40
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f810 	bl	8002d76 <UART_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e006      	b.n	8002d6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e000      	b.n	8002d6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	4613      	mov	r3, r2
 8002d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d86:	e02c      	b.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d8e:	d028      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d96:	f7fe f927 	bl	8000fe8 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d21d      	bcs.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002db4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e00f      	b.n	8002e02 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d0c3      	beq.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e46:	f023 030c 	bic.w	r3, r3, #12
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2c      	ldr	r2, [pc, #176]	; (8002f20 <UART_SetConfig+0x114>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d103      	bne.n	8002e7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e74:	f7fe ffce 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	e002      	b.n	8002e82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f7fe ffb6 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 8002e80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009a      	lsls	r2, r3, #2
 8002e8c:	441a      	add	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	4a22      	ldr	r2, [pc, #136]	; (8002f24 <UART_SetConfig+0x118>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	0119      	lsls	r1, r3, #4
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009a      	lsls	r2, r3, #2
 8002eac:	441a      	add	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <UART_SetConfig+0x118>)
 8002eba:	fba3 0302 	umull	r0, r3, r3, r2
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	2064      	movs	r0, #100	; 0x64
 8002ec2:	fb00 f303 	mul.w	r3, r0, r3
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	3332      	adds	r3, #50	; 0x32
 8002ecc:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <UART_SetConfig+0x118>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed8:	4419      	add	r1, r3
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009a      	lsls	r2, r3, #2
 8002ee4:	441a      	add	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <UART_SetConfig+0x118>)
 8002ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	2064      	movs	r0, #100	; 0x64
 8002efa:	fb00 f303 	mul.w	r3, r0, r3
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	3332      	adds	r3, #50	; 0x32
 8002f04:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <UART_SetConfig+0x118>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	f003 020f 	and.w	r2, r3, #15
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	440a      	add	r2, r1
 8002f16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40013800 	.word	0x40013800
 8002f24:	51eb851f 	.word	0x51eb851f

08002f28 <_Znaj>:
 8002f28:	f000 b800 	b.w	8002f2c <_Znwj>

08002f2c <_Znwj>:
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	bf14      	ite	ne
 8002f32:	4604      	movne	r4, r0
 8002f34:	2401      	moveq	r4, #1
 8002f36:	4620      	mov	r0, r4
 8002f38:	f000 f844 	bl	8002fc4 <malloc>
 8002f3c:	b930      	cbnz	r0, 8002f4c <_Znwj+0x20>
 8002f3e:	f000 f807 	bl	8002f50 <_ZSt15get_new_handlerv>
 8002f42:	b908      	cbnz	r0, 8002f48 <_Znwj+0x1c>
 8002f44:	f000 f80c 	bl	8002f60 <abort>
 8002f48:	4780      	blx	r0
 8002f4a:	e7f4      	b.n	8002f36 <_Znwj+0xa>
 8002f4c:	bd10      	pop	{r4, pc}
	...

08002f50 <_ZSt15get_new_handlerv>:
 8002f50:	4b02      	ldr	r3, [pc, #8]	; (8002f5c <_ZSt15get_new_handlerv+0xc>)
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	f3bf 8f5b 	dmb	ish
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	200004b4 	.word	0x200004b4

08002f60 <abort>:
 8002f60:	b508      	push	{r3, lr}
 8002f62:	2006      	movs	r0, #6
 8002f64:	f000 f91c 	bl	80031a0 <raise>
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f7fd ff78 	bl	8000e5e <_exit>
	...

08002f70 <__errno>:
 8002f70:	4b01      	ldr	r3, [pc, #4]	; (8002f78 <__errno+0x8>)
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	2000000c 	.word	0x2000000c

08002f7c <__libc_init_array>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	2500      	movs	r5, #0
 8002f80:	4e0c      	ldr	r6, [pc, #48]	; (8002fb4 <__libc_init_array+0x38>)
 8002f82:	4c0d      	ldr	r4, [pc, #52]	; (8002fb8 <__libc_init_array+0x3c>)
 8002f84:	1ba4      	subs	r4, r4, r6
 8002f86:	10a4      	asrs	r4, r4, #2
 8002f88:	42a5      	cmp	r5, r4
 8002f8a:	d109      	bne.n	8002fa0 <__libc_init_array+0x24>
 8002f8c:	f000 fc80 	bl	8003890 <_init>
 8002f90:	2500      	movs	r5, #0
 8002f92:	4e0a      	ldr	r6, [pc, #40]	; (8002fbc <__libc_init_array+0x40>)
 8002f94:	4c0a      	ldr	r4, [pc, #40]	; (8002fc0 <__libc_init_array+0x44>)
 8002f96:	1ba4      	subs	r4, r4, r6
 8002f98:	10a4      	asrs	r4, r4, #2
 8002f9a:	42a5      	cmp	r5, r4
 8002f9c:	d105      	bne.n	8002faa <__libc_init_array+0x2e>
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}
 8002fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fa4:	4798      	blx	r3
 8002fa6:	3501      	adds	r5, #1
 8002fa8:	e7ee      	b.n	8002f88 <__libc_init_array+0xc>
 8002faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fae:	4798      	blx	r3
 8002fb0:	3501      	adds	r5, #1
 8002fb2:	e7f2      	b.n	8002f9a <__libc_init_array+0x1e>
 8002fb4:	08003940 	.word	0x08003940
 8002fb8:	08003940 	.word	0x08003940
 8002fbc:	08003940 	.word	0x08003940
 8002fc0:	08003948 	.word	0x08003948

08002fc4 <malloc>:
 8002fc4:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <malloc+0xc>)
 8002fc6:	4601      	mov	r1, r0
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	f000 b857 	b.w	800307c <_malloc_r>
 8002fce:	bf00      	nop
 8002fd0:	2000000c 	.word	0x2000000c

08002fd4 <memset>:
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4402      	add	r2, r0
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d100      	bne.n	8002fde <memset+0xa>
 8002fdc:	4770      	bx	lr
 8002fde:	f803 1b01 	strb.w	r1, [r3], #1
 8002fe2:	e7f9      	b.n	8002fd8 <memset+0x4>

08002fe4 <_free_r>:
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	4605      	mov	r5, r0
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	d043      	beq.n	8003074 <_free_r+0x90>
 8002fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff0:	1f0c      	subs	r4, r1, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bfb8      	it	lt
 8002ff6:	18e4      	addlt	r4, r4, r3
 8002ff8:	f000 f90e 	bl	8003218 <__malloc_lock>
 8002ffc:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <_free_r+0x94>)
 8002ffe:	6813      	ldr	r3, [r2, #0]
 8003000:	4610      	mov	r0, r2
 8003002:	b933      	cbnz	r3, 8003012 <_free_r+0x2e>
 8003004:	6063      	str	r3, [r4, #4]
 8003006:	6014      	str	r4, [r2, #0]
 8003008:	4628      	mov	r0, r5
 800300a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800300e:	f000 b904 	b.w	800321a <__malloc_unlock>
 8003012:	42a3      	cmp	r3, r4
 8003014:	d90b      	bls.n	800302e <_free_r+0x4a>
 8003016:	6821      	ldr	r1, [r4, #0]
 8003018:	1862      	adds	r2, r4, r1
 800301a:	4293      	cmp	r3, r2
 800301c:	bf01      	itttt	eq
 800301e:	681a      	ldreq	r2, [r3, #0]
 8003020:	685b      	ldreq	r3, [r3, #4]
 8003022:	1852      	addeq	r2, r2, r1
 8003024:	6022      	streq	r2, [r4, #0]
 8003026:	6063      	str	r3, [r4, #4]
 8003028:	6004      	str	r4, [r0, #0]
 800302a:	e7ed      	b.n	8003008 <_free_r+0x24>
 800302c:	4613      	mov	r3, r2
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	b10a      	cbz	r2, 8003036 <_free_r+0x52>
 8003032:	42a2      	cmp	r2, r4
 8003034:	d9fa      	bls.n	800302c <_free_r+0x48>
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	1858      	adds	r0, r3, r1
 800303a:	42a0      	cmp	r0, r4
 800303c:	d10b      	bne.n	8003056 <_free_r+0x72>
 800303e:	6820      	ldr	r0, [r4, #0]
 8003040:	4401      	add	r1, r0
 8003042:	1858      	adds	r0, r3, r1
 8003044:	4282      	cmp	r2, r0
 8003046:	6019      	str	r1, [r3, #0]
 8003048:	d1de      	bne.n	8003008 <_free_r+0x24>
 800304a:	6810      	ldr	r0, [r2, #0]
 800304c:	6852      	ldr	r2, [r2, #4]
 800304e:	4401      	add	r1, r0
 8003050:	6019      	str	r1, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	e7d8      	b.n	8003008 <_free_r+0x24>
 8003056:	d902      	bls.n	800305e <_free_r+0x7a>
 8003058:	230c      	movs	r3, #12
 800305a:	602b      	str	r3, [r5, #0]
 800305c:	e7d4      	b.n	8003008 <_free_r+0x24>
 800305e:	6820      	ldr	r0, [r4, #0]
 8003060:	1821      	adds	r1, r4, r0
 8003062:	428a      	cmp	r2, r1
 8003064:	bf01      	itttt	eq
 8003066:	6811      	ldreq	r1, [r2, #0]
 8003068:	6852      	ldreq	r2, [r2, #4]
 800306a:	1809      	addeq	r1, r1, r0
 800306c:	6021      	streq	r1, [r4, #0]
 800306e:	6062      	str	r2, [r4, #4]
 8003070:	605c      	str	r4, [r3, #4]
 8003072:	e7c9      	b.n	8003008 <_free_r+0x24>
 8003074:	bd38      	pop	{r3, r4, r5, pc}
 8003076:	bf00      	nop
 8003078:	200004b8 	.word	0x200004b8

0800307c <_malloc_r>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	1ccd      	adds	r5, r1, #3
 8003080:	f025 0503 	bic.w	r5, r5, #3
 8003084:	3508      	adds	r5, #8
 8003086:	2d0c      	cmp	r5, #12
 8003088:	bf38      	it	cc
 800308a:	250c      	movcc	r5, #12
 800308c:	2d00      	cmp	r5, #0
 800308e:	4606      	mov	r6, r0
 8003090:	db01      	blt.n	8003096 <_malloc_r+0x1a>
 8003092:	42a9      	cmp	r1, r5
 8003094:	d903      	bls.n	800309e <_malloc_r+0x22>
 8003096:	230c      	movs	r3, #12
 8003098:	6033      	str	r3, [r6, #0]
 800309a:	2000      	movs	r0, #0
 800309c:	bd70      	pop	{r4, r5, r6, pc}
 800309e:	f000 f8bb 	bl	8003218 <__malloc_lock>
 80030a2:	4a21      	ldr	r2, [pc, #132]	; (8003128 <_malloc_r+0xac>)
 80030a4:	6814      	ldr	r4, [r2, #0]
 80030a6:	4621      	mov	r1, r4
 80030a8:	b991      	cbnz	r1, 80030d0 <_malloc_r+0x54>
 80030aa:	4c20      	ldr	r4, [pc, #128]	; (800312c <_malloc_r+0xb0>)
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	b91b      	cbnz	r3, 80030b8 <_malloc_r+0x3c>
 80030b0:	4630      	mov	r0, r6
 80030b2:	f000 f83d 	bl	8003130 <_sbrk_r>
 80030b6:	6020      	str	r0, [r4, #0]
 80030b8:	4629      	mov	r1, r5
 80030ba:	4630      	mov	r0, r6
 80030bc:	f000 f838 	bl	8003130 <_sbrk_r>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	d124      	bne.n	800310e <_malloc_r+0x92>
 80030c4:	230c      	movs	r3, #12
 80030c6:	4630      	mov	r0, r6
 80030c8:	6033      	str	r3, [r6, #0]
 80030ca:	f000 f8a6 	bl	800321a <__malloc_unlock>
 80030ce:	e7e4      	b.n	800309a <_malloc_r+0x1e>
 80030d0:	680b      	ldr	r3, [r1, #0]
 80030d2:	1b5b      	subs	r3, r3, r5
 80030d4:	d418      	bmi.n	8003108 <_malloc_r+0x8c>
 80030d6:	2b0b      	cmp	r3, #11
 80030d8:	d90f      	bls.n	80030fa <_malloc_r+0x7e>
 80030da:	600b      	str	r3, [r1, #0]
 80030dc:	18cc      	adds	r4, r1, r3
 80030de:	50cd      	str	r5, [r1, r3]
 80030e0:	4630      	mov	r0, r6
 80030e2:	f000 f89a 	bl	800321a <__malloc_unlock>
 80030e6:	f104 000b 	add.w	r0, r4, #11
 80030ea:	1d23      	adds	r3, r4, #4
 80030ec:	f020 0007 	bic.w	r0, r0, #7
 80030f0:	1ac3      	subs	r3, r0, r3
 80030f2:	d0d3      	beq.n	800309c <_malloc_r+0x20>
 80030f4:	425a      	negs	r2, r3
 80030f6:	50e2      	str	r2, [r4, r3]
 80030f8:	e7d0      	b.n	800309c <_malloc_r+0x20>
 80030fa:	684b      	ldr	r3, [r1, #4]
 80030fc:	428c      	cmp	r4, r1
 80030fe:	bf16      	itet	ne
 8003100:	6063      	strne	r3, [r4, #4]
 8003102:	6013      	streq	r3, [r2, #0]
 8003104:	460c      	movne	r4, r1
 8003106:	e7eb      	b.n	80030e0 <_malloc_r+0x64>
 8003108:	460c      	mov	r4, r1
 800310a:	6849      	ldr	r1, [r1, #4]
 800310c:	e7cc      	b.n	80030a8 <_malloc_r+0x2c>
 800310e:	1cc4      	adds	r4, r0, #3
 8003110:	f024 0403 	bic.w	r4, r4, #3
 8003114:	42a0      	cmp	r0, r4
 8003116:	d005      	beq.n	8003124 <_malloc_r+0xa8>
 8003118:	1a21      	subs	r1, r4, r0
 800311a:	4630      	mov	r0, r6
 800311c:	f000 f808 	bl	8003130 <_sbrk_r>
 8003120:	3001      	adds	r0, #1
 8003122:	d0cf      	beq.n	80030c4 <_malloc_r+0x48>
 8003124:	6025      	str	r5, [r4, #0]
 8003126:	e7db      	b.n	80030e0 <_malloc_r+0x64>
 8003128:	200004b8 	.word	0x200004b8
 800312c:	200004bc 	.word	0x200004bc

08003130 <_sbrk_r>:
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	2300      	movs	r3, #0
 8003134:	4c05      	ldr	r4, [pc, #20]	; (800314c <_sbrk_r+0x1c>)
 8003136:	4605      	mov	r5, r0
 8003138:	4608      	mov	r0, r1
 800313a:	6023      	str	r3, [r4, #0]
 800313c:	f7fd fe9a 	bl	8000e74 <_sbrk>
 8003140:	1c43      	adds	r3, r0, #1
 8003142:	d102      	bne.n	800314a <_sbrk_r+0x1a>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	b103      	cbz	r3, 800314a <_sbrk_r+0x1a>
 8003148:	602b      	str	r3, [r5, #0]
 800314a:	bd38      	pop	{r3, r4, r5, pc}
 800314c:	200005f4 	.word	0x200005f4

08003150 <_raise_r>:
 8003150:	291f      	cmp	r1, #31
 8003152:	b538      	push	{r3, r4, r5, lr}
 8003154:	4604      	mov	r4, r0
 8003156:	460d      	mov	r5, r1
 8003158:	d904      	bls.n	8003164 <_raise_r+0x14>
 800315a:	2316      	movs	r3, #22
 800315c:	6003      	str	r3, [r0, #0]
 800315e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003166:	b112      	cbz	r2, 800316e <_raise_r+0x1e>
 8003168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800316c:	b94b      	cbnz	r3, 8003182 <_raise_r+0x32>
 800316e:	4620      	mov	r0, r4
 8003170:	f000 f830 	bl	80031d4 <_getpid_r>
 8003174:	462a      	mov	r2, r5
 8003176:	4601      	mov	r1, r0
 8003178:	4620      	mov	r0, r4
 800317a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800317e:	f000 b817 	b.w	80031b0 <_kill_r>
 8003182:	2b01      	cmp	r3, #1
 8003184:	d00a      	beq.n	800319c <_raise_r+0x4c>
 8003186:	1c59      	adds	r1, r3, #1
 8003188:	d103      	bne.n	8003192 <_raise_r+0x42>
 800318a:	2316      	movs	r3, #22
 800318c:	6003      	str	r3, [r0, #0]
 800318e:	2001      	movs	r0, #1
 8003190:	e7e7      	b.n	8003162 <_raise_r+0x12>
 8003192:	2400      	movs	r4, #0
 8003194:	4628      	mov	r0, r5
 8003196:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800319a:	4798      	blx	r3
 800319c:	2000      	movs	r0, #0
 800319e:	e7e0      	b.n	8003162 <_raise_r+0x12>

080031a0 <raise>:
 80031a0:	4b02      	ldr	r3, [pc, #8]	; (80031ac <raise+0xc>)
 80031a2:	4601      	mov	r1, r0
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	f7ff bfd3 	b.w	8003150 <_raise_r>
 80031aa:	bf00      	nop
 80031ac:	2000000c 	.word	0x2000000c

080031b0 <_kill_r>:
 80031b0:	b538      	push	{r3, r4, r5, lr}
 80031b2:	2300      	movs	r3, #0
 80031b4:	4c06      	ldr	r4, [pc, #24]	; (80031d0 <_kill_r+0x20>)
 80031b6:	4605      	mov	r5, r0
 80031b8:	4608      	mov	r0, r1
 80031ba:	4611      	mov	r1, r2
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	f7fd fe3e 	bl	8000e3e <_kill>
 80031c2:	1c43      	adds	r3, r0, #1
 80031c4:	d102      	bne.n	80031cc <_kill_r+0x1c>
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	b103      	cbz	r3, 80031cc <_kill_r+0x1c>
 80031ca:	602b      	str	r3, [r5, #0]
 80031cc:	bd38      	pop	{r3, r4, r5, pc}
 80031ce:	bf00      	nop
 80031d0:	200005f4 	.word	0x200005f4

080031d4 <_getpid_r>:
 80031d4:	f7fd be2c 	b.w	8000e30 <_getpid>

080031d8 <siprintf>:
 80031d8:	b40e      	push	{r1, r2, r3}
 80031da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031de:	b500      	push	{lr}
 80031e0:	b09c      	sub	sp, #112	; 0x70
 80031e2:	ab1d      	add	r3, sp, #116	; 0x74
 80031e4:	9002      	str	r0, [sp, #8]
 80031e6:	9006      	str	r0, [sp, #24]
 80031e8:	9107      	str	r1, [sp, #28]
 80031ea:	9104      	str	r1, [sp, #16]
 80031ec:	4808      	ldr	r0, [pc, #32]	; (8003210 <siprintf+0x38>)
 80031ee:	4909      	ldr	r1, [pc, #36]	; (8003214 <siprintf+0x3c>)
 80031f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80031f4:	9105      	str	r1, [sp, #20]
 80031f6:	6800      	ldr	r0, [r0, #0]
 80031f8:	a902      	add	r1, sp, #8
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	f000 f868 	bl	80032d0 <_svfiprintf_r>
 8003200:	2200      	movs	r2, #0
 8003202:	9b02      	ldr	r3, [sp, #8]
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	b01c      	add	sp, #112	; 0x70
 8003208:	f85d eb04 	ldr.w	lr, [sp], #4
 800320c:	b003      	add	sp, #12
 800320e:	4770      	bx	lr
 8003210:	2000000c 	.word	0x2000000c
 8003214:	ffff0208 	.word	0xffff0208

08003218 <__malloc_lock>:
 8003218:	4770      	bx	lr

0800321a <__malloc_unlock>:
 800321a:	4770      	bx	lr

0800321c <__ssputs_r>:
 800321c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003220:	688e      	ldr	r6, [r1, #8]
 8003222:	4682      	mov	sl, r0
 8003224:	429e      	cmp	r6, r3
 8003226:	460c      	mov	r4, r1
 8003228:	4690      	mov	r8, r2
 800322a:	4699      	mov	r9, r3
 800322c:	d837      	bhi.n	800329e <__ssputs_r+0x82>
 800322e:	898a      	ldrh	r2, [r1, #12]
 8003230:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003234:	d031      	beq.n	800329a <__ssputs_r+0x7e>
 8003236:	2302      	movs	r3, #2
 8003238:	6825      	ldr	r5, [r4, #0]
 800323a:	6909      	ldr	r1, [r1, #16]
 800323c:	1a6f      	subs	r7, r5, r1
 800323e:	6965      	ldr	r5, [r4, #20]
 8003240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003244:	fb95 f5f3 	sdiv	r5, r5, r3
 8003248:	f109 0301 	add.w	r3, r9, #1
 800324c:	443b      	add	r3, r7
 800324e:	429d      	cmp	r5, r3
 8003250:	bf38      	it	cc
 8003252:	461d      	movcc	r5, r3
 8003254:	0553      	lsls	r3, r2, #21
 8003256:	d530      	bpl.n	80032ba <__ssputs_r+0x9e>
 8003258:	4629      	mov	r1, r5
 800325a:	f7ff ff0f 	bl	800307c <_malloc_r>
 800325e:	4606      	mov	r6, r0
 8003260:	b950      	cbnz	r0, 8003278 <__ssputs_r+0x5c>
 8003262:	230c      	movs	r3, #12
 8003264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003268:	f8ca 3000 	str.w	r3, [sl]
 800326c:	89a3      	ldrh	r3, [r4, #12]
 800326e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003272:	81a3      	strh	r3, [r4, #12]
 8003274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003278:	463a      	mov	r2, r7
 800327a:	6921      	ldr	r1, [r4, #16]
 800327c:	f000 fab6 	bl	80037ec <memcpy>
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328a:	81a3      	strh	r3, [r4, #12]
 800328c:	6126      	str	r6, [r4, #16]
 800328e:	443e      	add	r6, r7
 8003290:	6026      	str	r6, [r4, #0]
 8003292:	464e      	mov	r6, r9
 8003294:	6165      	str	r5, [r4, #20]
 8003296:	1bed      	subs	r5, r5, r7
 8003298:	60a5      	str	r5, [r4, #8]
 800329a:	454e      	cmp	r6, r9
 800329c:	d900      	bls.n	80032a0 <__ssputs_r+0x84>
 800329e:	464e      	mov	r6, r9
 80032a0:	4632      	mov	r2, r6
 80032a2:	4641      	mov	r1, r8
 80032a4:	6820      	ldr	r0, [r4, #0]
 80032a6:	f000 faac 	bl	8003802 <memmove>
 80032aa:	68a3      	ldr	r3, [r4, #8]
 80032ac:	2000      	movs	r0, #0
 80032ae:	1b9b      	subs	r3, r3, r6
 80032b0:	60a3      	str	r3, [r4, #8]
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	441e      	add	r6, r3
 80032b6:	6026      	str	r6, [r4, #0]
 80032b8:	e7dc      	b.n	8003274 <__ssputs_r+0x58>
 80032ba:	462a      	mov	r2, r5
 80032bc:	f000 faba 	bl	8003834 <_realloc_r>
 80032c0:	4606      	mov	r6, r0
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d1e2      	bne.n	800328c <__ssputs_r+0x70>
 80032c6:	6921      	ldr	r1, [r4, #16]
 80032c8:	4650      	mov	r0, sl
 80032ca:	f7ff fe8b 	bl	8002fe4 <_free_r>
 80032ce:	e7c8      	b.n	8003262 <__ssputs_r+0x46>

080032d0 <_svfiprintf_r>:
 80032d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d4:	461d      	mov	r5, r3
 80032d6:	898b      	ldrh	r3, [r1, #12]
 80032d8:	b09d      	sub	sp, #116	; 0x74
 80032da:	061f      	lsls	r7, r3, #24
 80032dc:	4680      	mov	r8, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	4616      	mov	r6, r2
 80032e2:	d50f      	bpl.n	8003304 <_svfiprintf_r+0x34>
 80032e4:	690b      	ldr	r3, [r1, #16]
 80032e6:	b96b      	cbnz	r3, 8003304 <_svfiprintf_r+0x34>
 80032e8:	2140      	movs	r1, #64	; 0x40
 80032ea:	f7ff fec7 	bl	800307c <_malloc_r>
 80032ee:	6020      	str	r0, [r4, #0]
 80032f0:	6120      	str	r0, [r4, #16]
 80032f2:	b928      	cbnz	r0, 8003300 <_svfiprintf_r+0x30>
 80032f4:	230c      	movs	r3, #12
 80032f6:	f8c8 3000 	str.w	r3, [r8]
 80032fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032fe:	e0c8      	b.n	8003492 <_svfiprintf_r+0x1c2>
 8003300:	2340      	movs	r3, #64	; 0x40
 8003302:	6163      	str	r3, [r4, #20]
 8003304:	2300      	movs	r3, #0
 8003306:	9309      	str	r3, [sp, #36]	; 0x24
 8003308:	2320      	movs	r3, #32
 800330a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800330e:	2330      	movs	r3, #48	; 0x30
 8003310:	f04f 0b01 	mov.w	fp, #1
 8003314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003318:	9503      	str	r5, [sp, #12]
 800331a:	4637      	mov	r7, r6
 800331c:	463d      	mov	r5, r7
 800331e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003322:	b10b      	cbz	r3, 8003328 <_svfiprintf_r+0x58>
 8003324:	2b25      	cmp	r3, #37	; 0x25
 8003326:	d13e      	bne.n	80033a6 <_svfiprintf_r+0xd6>
 8003328:	ebb7 0a06 	subs.w	sl, r7, r6
 800332c:	d00b      	beq.n	8003346 <_svfiprintf_r+0x76>
 800332e:	4653      	mov	r3, sl
 8003330:	4632      	mov	r2, r6
 8003332:	4621      	mov	r1, r4
 8003334:	4640      	mov	r0, r8
 8003336:	f7ff ff71 	bl	800321c <__ssputs_r>
 800333a:	3001      	adds	r0, #1
 800333c:	f000 80a4 	beq.w	8003488 <_svfiprintf_r+0x1b8>
 8003340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003342:	4453      	add	r3, sl
 8003344:	9309      	str	r3, [sp, #36]	; 0x24
 8003346:	783b      	ldrb	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 809d 	beq.w	8003488 <_svfiprintf_r+0x1b8>
 800334e:	2300      	movs	r3, #0
 8003350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003358:	9304      	str	r3, [sp, #16]
 800335a:	9307      	str	r3, [sp, #28]
 800335c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003360:	931a      	str	r3, [sp, #104]	; 0x68
 8003362:	462f      	mov	r7, r5
 8003364:	2205      	movs	r2, #5
 8003366:	f817 1b01 	ldrb.w	r1, [r7], #1
 800336a:	4850      	ldr	r0, [pc, #320]	; (80034ac <_svfiprintf_r+0x1dc>)
 800336c:	f000 fa30 	bl	80037d0 <memchr>
 8003370:	9b04      	ldr	r3, [sp, #16]
 8003372:	b9d0      	cbnz	r0, 80033aa <_svfiprintf_r+0xda>
 8003374:	06d9      	lsls	r1, r3, #27
 8003376:	bf44      	itt	mi
 8003378:	2220      	movmi	r2, #32
 800337a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800337e:	071a      	lsls	r2, r3, #28
 8003380:	bf44      	itt	mi
 8003382:	222b      	movmi	r2, #43	; 0x2b
 8003384:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003388:	782a      	ldrb	r2, [r5, #0]
 800338a:	2a2a      	cmp	r2, #42	; 0x2a
 800338c:	d015      	beq.n	80033ba <_svfiprintf_r+0xea>
 800338e:	462f      	mov	r7, r5
 8003390:	2000      	movs	r0, #0
 8003392:	250a      	movs	r5, #10
 8003394:	9a07      	ldr	r2, [sp, #28]
 8003396:	4639      	mov	r1, r7
 8003398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800339c:	3b30      	subs	r3, #48	; 0x30
 800339e:	2b09      	cmp	r3, #9
 80033a0:	d94d      	bls.n	800343e <_svfiprintf_r+0x16e>
 80033a2:	b1b8      	cbz	r0, 80033d4 <_svfiprintf_r+0x104>
 80033a4:	e00f      	b.n	80033c6 <_svfiprintf_r+0xf6>
 80033a6:	462f      	mov	r7, r5
 80033a8:	e7b8      	b.n	800331c <_svfiprintf_r+0x4c>
 80033aa:	4a40      	ldr	r2, [pc, #256]	; (80034ac <_svfiprintf_r+0x1dc>)
 80033ac:	463d      	mov	r5, r7
 80033ae:	1a80      	subs	r0, r0, r2
 80033b0:	fa0b f000 	lsl.w	r0, fp, r0
 80033b4:	4318      	orrs	r0, r3
 80033b6:	9004      	str	r0, [sp, #16]
 80033b8:	e7d3      	b.n	8003362 <_svfiprintf_r+0x92>
 80033ba:	9a03      	ldr	r2, [sp, #12]
 80033bc:	1d11      	adds	r1, r2, #4
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	9103      	str	r1, [sp, #12]
 80033c2:	2a00      	cmp	r2, #0
 80033c4:	db01      	blt.n	80033ca <_svfiprintf_r+0xfa>
 80033c6:	9207      	str	r2, [sp, #28]
 80033c8:	e004      	b.n	80033d4 <_svfiprintf_r+0x104>
 80033ca:	4252      	negs	r2, r2
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	9207      	str	r2, [sp, #28]
 80033d2:	9304      	str	r3, [sp, #16]
 80033d4:	783b      	ldrb	r3, [r7, #0]
 80033d6:	2b2e      	cmp	r3, #46	; 0x2e
 80033d8:	d10c      	bne.n	80033f4 <_svfiprintf_r+0x124>
 80033da:	787b      	ldrb	r3, [r7, #1]
 80033dc:	2b2a      	cmp	r3, #42	; 0x2a
 80033de:	d133      	bne.n	8003448 <_svfiprintf_r+0x178>
 80033e0:	9b03      	ldr	r3, [sp, #12]
 80033e2:	3702      	adds	r7, #2
 80033e4:	1d1a      	adds	r2, r3, #4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	9203      	str	r2, [sp, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bfb8      	it	lt
 80033ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80033f2:	9305      	str	r3, [sp, #20]
 80033f4:	4d2e      	ldr	r5, [pc, #184]	; (80034b0 <_svfiprintf_r+0x1e0>)
 80033f6:	2203      	movs	r2, #3
 80033f8:	7839      	ldrb	r1, [r7, #0]
 80033fa:	4628      	mov	r0, r5
 80033fc:	f000 f9e8 	bl	80037d0 <memchr>
 8003400:	b138      	cbz	r0, 8003412 <_svfiprintf_r+0x142>
 8003402:	2340      	movs	r3, #64	; 0x40
 8003404:	1b40      	subs	r0, r0, r5
 8003406:	fa03 f000 	lsl.w	r0, r3, r0
 800340a:	9b04      	ldr	r3, [sp, #16]
 800340c:	3701      	adds	r7, #1
 800340e:	4303      	orrs	r3, r0
 8003410:	9304      	str	r3, [sp, #16]
 8003412:	7839      	ldrb	r1, [r7, #0]
 8003414:	2206      	movs	r2, #6
 8003416:	4827      	ldr	r0, [pc, #156]	; (80034b4 <_svfiprintf_r+0x1e4>)
 8003418:	1c7e      	adds	r6, r7, #1
 800341a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800341e:	f000 f9d7 	bl	80037d0 <memchr>
 8003422:	2800      	cmp	r0, #0
 8003424:	d038      	beq.n	8003498 <_svfiprintf_r+0x1c8>
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <_svfiprintf_r+0x1e8>)
 8003428:	bb13      	cbnz	r3, 8003470 <_svfiprintf_r+0x1a0>
 800342a:	9b03      	ldr	r3, [sp, #12]
 800342c:	3307      	adds	r3, #7
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	3308      	adds	r3, #8
 8003434:	9303      	str	r3, [sp, #12]
 8003436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003438:	444b      	add	r3, r9
 800343a:	9309      	str	r3, [sp, #36]	; 0x24
 800343c:	e76d      	b.n	800331a <_svfiprintf_r+0x4a>
 800343e:	fb05 3202 	mla	r2, r5, r2, r3
 8003442:	2001      	movs	r0, #1
 8003444:	460f      	mov	r7, r1
 8003446:	e7a6      	b.n	8003396 <_svfiprintf_r+0xc6>
 8003448:	2300      	movs	r3, #0
 800344a:	250a      	movs	r5, #10
 800344c:	4619      	mov	r1, r3
 800344e:	3701      	adds	r7, #1
 8003450:	9305      	str	r3, [sp, #20]
 8003452:	4638      	mov	r0, r7
 8003454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003458:	3a30      	subs	r2, #48	; 0x30
 800345a:	2a09      	cmp	r2, #9
 800345c:	d903      	bls.n	8003466 <_svfiprintf_r+0x196>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0c8      	beq.n	80033f4 <_svfiprintf_r+0x124>
 8003462:	9105      	str	r1, [sp, #20]
 8003464:	e7c6      	b.n	80033f4 <_svfiprintf_r+0x124>
 8003466:	fb05 2101 	mla	r1, r5, r1, r2
 800346a:	2301      	movs	r3, #1
 800346c:	4607      	mov	r7, r0
 800346e:	e7f0      	b.n	8003452 <_svfiprintf_r+0x182>
 8003470:	ab03      	add	r3, sp, #12
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	4622      	mov	r2, r4
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <_svfiprintf_r+0x1ec>)
 8003478:	a904      	add	r1, sp, #16
 800347a:	4640      	mov	r0, r8
 800347c:	f3af 8000 	nop.w
 8003480:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003484:	4681      	mov	r9, r0
 8003486:	d1d6      	bne.n	8003436 <_svfiprintf_r+0x166>
 8003488:	89a3      	ldrh	r3, [r4, #12]
 800348a:	065b      	lsls	r3, r3, #25
 800348c:	f53f af35 	bmi.w	80032fa <_svfiprintf_r+0x2a>
 8003490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003492:	b01d      	add	sp, #116	; 0x74
 8003494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003498:	ab03      	add	r3, sp, #12
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	4622      	mov	r2, r4
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <_svfiprintf_r+0x1ec>)
 80034a0:	a904      	add	r1, sp, #16
 80034a2:	4640      	mov	r0, r8
 80034a4:	f000 f882 	bl	80035ac <_printf_i>
 80034a8:	e7ea      	b.n	8003480 <_svfiprintf_r+0x1b0>
 80034aa:	bf00      	nop
 80034ac:	0800390c 	.word	0x0800390c
 80034b0:	08003912 	.word	0x08003912
 80034b4:	08003916 	.word	0x08003916
 80034b8:	00000000 	.word	0x00000000
 80034bc:	0800321d 	.word	0x0800321d

080034c0 <_printf_common>:
 80034c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034c4:	4691      	mov	r9, r2
 80034c6:	461f      	mov	r7, r3
 80034c8:	688a      	ldr	r2, [r1, #8]
 80034ca:	690b      	ldr	r3, [r1, #16]
 80034cc:	4606      	mov	r6, r0
 80034ce:	4293      	cmp	r3, r2
 80034d0:	bfb8      	it	lt
 80034d2:	4613      	movlt	r3, r2
 80034d4:	f8c9 3000 	str.w	r3, [r9]
 80034d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034dc:	460c      	mov	r4, r1
 80034de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034e2:	b112      	cbz	r2, 80034ea <_printf_common+0x2a>
 80034e4:	3301      	adds	r3, #1
 80034e6:	f8c9 3000 	str.w	r3, [r9]
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	0699      	lsls	r1, r3, #26
 80034ee:	bf42      	ittt	mi
 80034f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034f4:	3302      	addmi	r3, #2
 80034f6:	f8c9 3000 	strmi.w	r3, [r9]
 80034fa:	6825      	ldr	r5, [r4, #0]
 80034fc:	f015 0506 	ands.w	r5, r5, #6
 8003500:	d107      	bne.n	8003512 <_printf_common+0x52>
 8003502:	f104 0a19 	add.w	sl, r4, #25
 8003506:	68e3      	ldr	r3, [r4, #12]
 8003508:	f8d9 2000 	ldr.w	r2, [r9]
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	42ab      	cmp	r3, r5
 8003510:	dc29      	bgt.n	8003566 <_printf_common+0xa6>
 8003512:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003516:	6822      	ldr	r2, [r4, #0]
 8003518:	3300      	adds	r3, #0
 800351a:	bf18      	it	ne
 800351c:	2301      	movne	r3, #1
 800351e:	0692      	lsls	r2, r2, #26
 8003520:	d42e      	bmi.n	8003580 <_printf_common+0xc0>
 8003522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003526:	4639      	mov	r1, r7
 8003528:	4630      	mov	r0, r6
 800352a:	47c0      	blx	r8
 800352c:	3001      	adds	r0, #1
 800352e:	d021      	beq.n	8003574 <_printf_common+0xb4>
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	68e5      	ldr	r5, [r4, #12]
 8003534:	f003 0306 	and.w	r3, r3, #6
 8003538:	2b04      	cmp	r3, #4
 800353a:	bf18      	it	ne
 800353c:	2500      	movne	r5, #0
 800353e:	f8d9 2000 	ldr.w	r2, [r9]
 8003542:	f04f 0900 	mov.w	r9, #0
 8003546:	bf08      	it	eq
 8003548:	1aad      	subeq	r5, r5, r2
 800354a:	68a3      	ldr	r3, [r4, #8]
 800354c:	6922      	ldr	r2, [r4, #16]
 800354e:	bf08      	it	eq
 8003550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003554:	4293      	cmp	r3, r2
 8003556:	bfc4      	itt	gt
 8003558:	1a9b      	subgt	r3, r3, r2
 800355a:	18ed      	addgt	r5, r5, r3
 800355c:	341a      	adds	r4, #26
 800355e:	454d      	cmp	r5, r9
 8003560:	d11a      	bne.n	8003598 <_printf_common+0xd8>
 8003562:	2000      	movs	r0, #0
 8003564:	e008      	b.n	8003578 <_printf_common+0xb8>
 8003566:	2301      	movs	r3, #1
 8003568:	4652      	mov	r2, sl
 800356a:	4639      	mov	r1, r7
 800356c:	4630      	mov	r0, r6
 800356e:	47c0      	blx	r8
 8003570:	3001      	adds	r0, #1
 8003572:	d103      	bne.n	800357c <_printf_common+0xbc>
 8003574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800357c:	3501      	adds	r5, #1
 800357e:	e7c2      	b.n	8003506 <_printf_common+0x46>
 8003580:	2030      	movs	r0, #48	; 0x30
 8003582:	18e1      	adds	r1, r4, r3
 8003584:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800358e:	4422      	add	r2, r4
 8003590:	3302      	adds	r3, #2
 8003592:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003596:	e7c4      	b.n	8003522 <_printf_common+0x62>
 8003598:	2301      	movs	r3, #1
 800359a:	4622      	mov	r2, r4
 800359c:	4639      	mov	r1, r7
 800359e:	4630      	mov	r0, r6
 80035a0:	47c0      	blx	r8
 80035a2:	3001      	adds	r0, #1
 80035a4:	d0e6      	beq.n	8003574 <_printf_common+0xb4>
 80035a6:	f109 0901 	add.w	r9, r9, #1
 80035aa:	e7d8      	b.n	800355e <_printf_common+0x9e>

080035ac <_printf_i>:
 80035ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80035b4:	460c      	mov	r4, r1
 80035b6:	7e09      	ldrb	r1, [r1, #24]
 80035b8:	b085      	sub	sp, #20
 80035ba:	296e      	cmp	r1, #110	; 0x6e
 80035bc:	4617      	mov	r7, r2
 80035be:	4606      	mov	r6, r0
 80035c0:	4698      	mov	r8, r3
 80035c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035c4:	f000 80b3 	beq.w	800372e <_printf_i+0x182>
 80035c8:	d822      	bhi.n	8003610 <_printf_i+0x64>
 80035ca:	2963      	cmp	r1, #99	; 0x63
 80035cc:	d036      	beq.n	800363c <_printf_i+0x90>
 80035ce:	d80a      	bhi.n	80035e6 <_printf_i+0x3a>
 80035d0:	2900      	cmp	r1, #0
 80035d2:	f000 80b9 	beq.w	8003748 <_printf_i+0x19c>
 80035d6:	2958      	cmp	r1, #88	; 0x58
 80035d8:	f000 8083 	beq.w	80036e2 <_printf_i+0x136>
 80035dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80035e4:	e032      	b.n	800364c <_printf_i+0xa0>
 80035e6:	2964      	cmp	r1, #100	; 0x64
 80035e8:	d001      	beq.n	80035ee <_printf_i+0x42>
 80035ea:	2969      	cmp	r1, #105	; 0x69
 80035ec:	d1f6      	bne.n	80035dc <_printf_i+0x30>
 80035ee:	6820      	ldr	r0, [r4, #0]
 80035f0:	6813      	ldr	r3, [r2, #0]
 80035f2:	0605      	lsls	r5, r0, #24
 80035f4:	f103 0104 	add.w	r1, r3, #4
 80035f8:	d52a      	bpl.n	8003650 <_printf_i+0xa4>
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6011      	str	r1, [r2, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da03      	bge.n	800360a <_printf_i+0x5e>
 8003602:	222d      	movs	r2, #45	; 0x2d
 8003604:	425b      	negs	r3, r3
 8003606:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800360a:	486f      	ldr	r0, [pc, #444]	; (80037c8 <_printf_i+0x21c>)
 800360c:	220a      	movs	r2, #10
 800360e:	e039      	b.n	8003684 <_printf_i+0xd8>
 8003610:	2973      	cmp	r1, #115	; 0x73
 8003612:	f000 809d 	beq.w	8003750 <_printf_i+0x1a4>
 8003616:	d808      	bhi.n	800362a <_printf_i+0x7e>
 8003618:	296f      	cmp	r1, #111	; 0x6f
 800361a:	d020      	beq.n	800365e <_printf_i+0xb2>
 800361c:	2970      	cmp	r1, #112	; 0x70
 800361e:	d1dd      	bne.n	80035dc <_printf_i+0x30>
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	f043 0320 	orr.w	r3, r3, #32
 8003626:	6023      	str	r3, [r4, #0]
 8003628:	e003      	b.n	8003632 <_printf_i+0x86>
 800362a:	2975      	cmp	r1, #117	; 0x75
 800362c:	d017      	beq.n	800365e <_printf_i+0xb2>
 800362e:	2978      	cmp	r1, #120	; 0x78
 8003630:	d1d4      	bne.n	80035dc <_printf_i+0x30>
 8003632:	2378      	movs	r3, #120	; 0x78
 8003634:	4865      	ldr	r0, [pc, #404]	; (80037cc <_printf_i+0x220>)
 8003636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800363a:	e055      	b.n	80036e8 <_printf_i+0x13c>
 800363c:	6813      	ldr	r3, [r2, #0]
 800363e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003642:	1d19      	adds	r1, r3, #4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6011      	str	r1, [r2, #0]
 8003648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800364c:	2301      	movs	r3, #1
 800364e:	e08c      	b.n	800376a <_printf_i+0x1be>
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003656:	6011      	str	r1, [r2, #0]
 8003658:	bf18      	it	ne
 800365a:	b21b      	sxthne	r3, r3
 800365c:	e7cf      	b.n	80035fe <_printf_i+0x52>
 800365e:	6813      	ldr	r3, [r2, #0]
 8003660:	6825      	ldr	r5, [r4, #0]
 8003662:	1d18      	adds	r0, r3, #4
 8003664:	6010      	str	r0, [r2, #0]
 8003666:	0628      	lsls	r0, r5, #24
 8003668:	d501      	bpl.n	800366e <_printf_i+0xc2>
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	e002      	b.n	8003674 <_printf_i+0xc8>
 800366e:	0668      	lsls	r0, r5, #25
 8003670:	d5fb      	bpl.n	800366a <_printf_i+0xbe>
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	296f      	cmp	r1, #111	; 0x6f
 8003676:	bf14      	ite	ne
 8003678:	220a      	movne	r2, #10
 800367a:	2208      	moveq	r2, #8
 800367c:	4852      	ldr	r0, [pc, #328]	; (80037c8 <_printf_i+0x21c>)
 800367e:	2100      	movs	r1, #0
 8003680:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003684:	6865      	ldr	r5, [r4, #4]
 8003686:	2d00      	cmp	r5, #0
 8003688:	60a5      	str	r5, [r4, #8]
 800368a:	f2c0 8095 	blt.w	80037b8 <_printf_i+0x20c>
 800368e:	6821      	ldr	r1, [r4, #0]
 8003690:	f021 0104 	bic.w	r1, r1, #4
 8003694:	6021      	str	r1, [r4, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d13d      	bne.n	8003716 <_printf_i+0x16a>
 800369a:	2d00      	cmp	r5, #0
 800369c:	f040 808e 	bne.w	80037bc <_printf_i+0x210>
 80036a0:	4665      	mov	r5, ip
 80036a2:	2a08      	cmp	r2, #8
 80036a4:	d10b      	bne.n	80036be <_printf_i+0x112>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	07db      	lsls	r3, r3, #31
 80036aa:	d508      	bpl.n	80036be <_printf_i+0x112>
 80036ac:	6923      	ldr	r3, [r4, #16]
 80036ae:	6862      	ldr	r2, [r4, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	bfde      	ittt	le
 80036b4:	2330      	movle	r3, #48	; 0x30
 80036b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036ba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80036be:	ebac 0305 	sub.w	r3, ip, r5
 80036c2:	6123      	str	r3, [r4, #16]
 80036c4:	f8cd 8000 	str.w	r8, [sp]
 80036c8:	463b      	mov	r3, r7
 80036ca:	aa03      	add	r2, sp, #12
 80036cc:	4621      	mov	r1, r4
 80036ce:	4630      	mov	r0, r6
 80036d0:	f7ff fef6 	bl	80034c0 <_printf_common>
 80036d4:	3001      	adds	r0, #1
 80036d6:	d14d      	bne.n	8003774 <_printf_i+0x1c8>
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036dc:	b005      	add	sp, #20
 80036de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036e2:	4839      	ldr	r0, [pc, #228]	; (80037c8 <_printf_i+0x21c>)
 80036e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80036e8:	6813      	ldr	r3, [r2, #0]
 80036ea:	6821      	ldr	r1, [r4, #0]
 80036ec:	1d1d      	adds	r5, r3, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6015      	str	r5, [r2, #0]
 80036f2:	060a      	lsls	r2, r1, #24
 80036f4:	d50b      	bpl.n	800370e <_printf_i+0x162>
 80036f6:	07ca      	lsls	r2, r1, #31
 80036f8:	bf44      	itt	mi
 80036fa:	f041 0120 	orrmi.w	r1, r1, #32
 80036fe:	6021      	strmi	r1, [r4, #0]
 8003700:	b91b      	cbnz	r3, 800370a <_printf_i+0x15e>
 8003702:	6822      	ldr	r2, [r4, #0]
 8003704:	f022 0220 	bic.w	r2, r2, #32
 8003708:	6022      	str	r2, [r4, #0]
 800370a:	2210      	movs	r2, #16
 800370c:	e7b7      	b.n	800367e <_printf_i+0xd2>
 800370e:	064d      	lsls	r5, r1, #25
 8003710:	bf48      	it	mi
 8003712:	b29b      	uxthmi	r3, r3
 8003714:	e7ef      	b.n	80036f6 <_printf_i+0x14a>
 8003716:	4665      	mov	r5, ip
 8003718:	fbb3 f1f2 	udiv	r1, r3, r2
 800371c:	fb02 3311 	mls	r3, r2, r1, r3
 8003720:	5cc3      	ldrb	r3, [r0, r3]
 8003722:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003726:	460b      	mov	r3, r1
 8003728:	2900      	cmp	r1, #0
 800372a:	d1f5      	bne.n	8003718 <_printf_i+0x16c>
 800372c:	e7b9      	b.n	80036a2 <_printf_i+0xf6>
 800372e:	6813      	ldr	r3, [r2, #0]
 8003730:	6825      	ldr	r5, [r4, #0]
 8003732:	1d18      	adds	r0, r3, #4
 8003734:	6961      	ldr	r1, [r4, #20]
 8003736:	6010      	str	r0, [r2, #0]
 8003738:	0628      	lsls	r0, r5, #24
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	d501      	bpl.n	8003742 <_printf_i+0x196>
 800373e:	6019      	str	r1, [r3, #0]
 8003740:	e002      	b.n	8003748 <_printf_i+0x19c>
 8003742:	066a      	lsls	r2, r5, #25
 8003744:	d5fb      	bpl.n	800373e <_printf_i+0x192>
 8003746:	8019      	strh	r1, [r3, #0]
 8003748:	2300      	movs	r3, #0
 800374a:	4665      	mov	r5, ip
 800374c:	6123      	str	r3, [r4, #16]
 800374e:	e7b9      	b.n	80036c4 <_printf_i+0x118>
 8003750:	6813      	ldr	r3, [r2, #0]
 8003752:	1d19      	adds	r1, r3, #4
 8003754:	6011      	str	r1, [r2, #0]
 8003756:	681d      	ldr	r5, [r3, #0]
 8003758:	6862      	ldr	r2, [r4, #4]
 800375a:	2100      	movs	r1, #0
 800375c:	4628      	mov	r0, r5
 800375e:	f000 f837 	bl	80037d0 <memchr>
 8003762:	b108      	cbz	r0, 8003768 <_printf_i+0x1bc>
 8003764:	1b40      	subs	r0, r0, r5
 8003766:	6060      	str	r0, [r4, #4]
 8003768:	6863      	ldr	r3, [r4, #4]
 800376a:	6123      	str	r3, [r4, #16]
 800376c:	2300      	movs	r3, #0
 800376e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003772:	e7a7      	b.n	80036c4 <_printf_i+0x118>
 8003774:	6923      	ldr	r3, [r4, #16]
 8003776:	462a      	mov	r2, r5
 8003778:	4639      	mov	r1, r7
 800377a:	4630      	mov	r0, r6
 800377c:	47c0      	blx	r8
 800377e:	3001      	adds	r0, #1
 8003780:	d0aa      	beq.n	80036d8 <_printf_i+0x12c>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	079b      	lsls	r3, r3, #30
 8003786:	d413      	bmi.n	80037b0 <_printf_i+0x204>
 8003788:	68e0      	ldr	r0, [r4, #12]
 800378a:	9b03      	ldr	r3, [sp, #12]
 800378c:	4298      	cmp	r0, r3
 800378e:	bfb8      	it	lt
 8003790:	4618      	movlt	r0, r3
 8003792:	e7a3      	b.n	80036dc <_printf_i+0x130>
 8003794:	2301      	movs	r3, #1
 8003796:	464a      	mov	r2, r9
 8003798:	4639      	mov	r1, r7
 800379a:	4630      	mov	r0, r6
 800379c:	47c0      	blx	r8
 800379e:	3001      	adds	r0, #1
 80037a0:	d09a      	beq.n	80036d8 <_printf_i+0x12c>
 80037a2:	3501      	adds	r5, #1
 80037a4:	68e3      	ldr	r3, [r4, #12]
 80037a6:	9a03      	ldr	r2, [sp, #12]
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	42ab      	cmp	r3, r5
 80037ac:	dcf2      	bgt.n	8003794 <_printf_i+0x1e8>
 80037ae:	e7eb      	b.n	8003788 <_printf_i+0x1dc>
 80037b0:	2500      	movs	r5, #0
 80037b2:	f104 0919 	add.w	r9, r4, #25
 80037b6:	e7f5      	b.n	80037a4 <_printf_i+0x1f8>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ac      	bne.n	8003716 <_printf_i+0x16a>
 80037bc:	7803      	ldrb	r3, [r0, #0]
 80037be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037c6:	e76c      	b.n	80036a2 <_printf_i+0xf6>
 80037c8:	0800391d 	.word	0x0800391d
 80037cc:	0800392e 	.word	0x0800392e

080037d0 <memchr>:
 80037d0:	b510      	push	{r4, lr}
 80037d2:	b2c9      	uxtb	r1, r1
 80037d4:	4402      	add	r2, r0
 80037d6:	4290      	cmp	r0, r2
 80037d8:	4603      	mov	r3, r0
 80037da:	d101      	bne.n	80037e0 <memchr+0x10>
 80037dc:	2300      	movs	r3, #0
 80037de:	e003      	b.n	80037e8 <memchr+0x18>
 80037e0:	781c      	ldrb	r4, [r3, #0]
 80037e2:	3001      	adds	r0, #1
 80037e4:	428c      	cmp	r4, r1
 80037e6:	d1f6      	bne.n	80037d6 <memchr+0x6>
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd10      	pop	{r4, pc}

080037ec <memcpy>:
 80037ec:	b510      	push	{r4, lr}
 80037ee:	1e43      	subs	r3, r0, #1
 80037f0:	440a      	add	r2, r1
 80037f2:	4291      	cmp	r1, r2
 80037f4:	d100      	bne.n	80037f8 <memcpy+0xc>
 80037f6:	bd10      	pop	{r4, pc}
 80037f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003800:	e7f7      	b.n	80037f2 <memcpy+0x6>

08003802 <memmove>:
 8003802:	4288      	cmp	r0, r1
 8003804:	b510      	push	{r4, lr}
 8003806:	eb01 0302 	add.w	r3, r1, r2
 800380a:	d807      	bhi.n	800381c <memmove+0x1a>
 800380c:	1e42      	subs	r2, r0, #1
 800380e:	4299      	cmp	r1, r3
 8003810:	d00a      	beq.n	8003828 <memmove+0x26>
 8003812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003816:	f802 4f01 	strb.w	r4, [r2, #1]!
 800381a:	e7f8      	b.n	800380e <memmove+0xc>
 800381c:	4283      	cmp	r3, r0
 800381e:	d9f5      	bls.n	800380c <memmove+0xa>
 8003820:	1881      	adds	r1, r0, r2
 8003822:	1ad2      	subs	r2, r2, r3
 8003824:	42d3      	cmn	r3, r2
 8003826:	d100      	bne.n	800382a <memmove+0x28>
 8003828:	bd10      	pop	{r4, pc}
 800382a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800382e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003832:	e7f7      	b.n	8003824 <memmove+0x22>

08003834 <_realloc_r>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	4607      	mov	r7, r0
 8003838:	4614      	mov	r4, r2
 800383a:	460e      	mov	r6, r1
 800383c:	b921      	cbnz	r1, 8003848 <_realloc_r+0x14>
 800383e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003842:	4611      	mov	r1, r2
 8003844:	f7ff bc1a 	b.w	800307c <_malloc_r>
 8003848:	b922      	cbnz	r2, 8003854 <_realloc_r+0x20>
 800384a:	f7ff fbcb 	bl	8002fe4 <_free_r>
 800384e:	4625      	mov	r5, r4
 8003850:	4628      	mov	r0, r5
 8003852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003854:	f000 f814 	bl	8003880 <_malloc_usable_size_r>
 8003858:	42a0      	cmp	r0, r4
 800385a:	d20f      	bcs.n	800387c <_realloc_r+0x48>
 800385c:	4621      	mov	r1, r4
 800385e:	4638      	mov	r0, r7
 8003860:	f7ff fc0c 	bl	800307c <_malloc_r>
 8003864:	4605      	mov	r5, r0
 8003866:	2800      	cmp	r0, #0
 8003868:	d0f2      	beq.n	8003850 <_realloc_r+0x1c>
 800386a:	4631      	mov	r1, r6
 800386c:	4622      	mov	r2, r4
 800386e:	f7ff ffbd 	bl	80037ec <memcpy>
 8003872:	4631      	mov	r1, r6
 8003874:	4638      	mov	r0, r7
 8003876:	f7ff fbb5 	bl	8002fe4 <_free_r>
 800387a:	e7e9      	b.n	8003850 <_realloc_r+0x1c>
 800387c:	4635      	mov	r5, r6
 800387e:	e7e7      	b.n	8003850 <_realloc_r+0x1c>

08003880 <_malloc_usable_size_r>:
 8003880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003884:	1f18      	subs	r0, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfbc      	itt	lt
 800388a:	580b      	ldrlt	r3, [r1, r0]
 800388c:	18c0      	addlt	r0, r0, r3
 800388e:	4770      	bx	lr

08003890 <_init>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr

0800389c <_fini>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	bf00      	nop
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr
