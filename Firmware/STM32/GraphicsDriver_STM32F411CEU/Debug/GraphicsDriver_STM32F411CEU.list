
GraphicsDriver_STM32F411CEU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005404  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e158  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080236fc  080236fc  00040174  2**0
                  CONTENTS
  4 .ARM          00000008  080236fc  080236fc  000336fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023704  08023704  00040174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08023704  08023704  00033704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802370c  0802370c  0003370c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08023710  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  20000174  08023884  00040174  2**2
                  ALLOC
 10 ._user_heap_stack 00008404  200006fc  08023884  000406fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a5c  00000000  00000000  000401a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a2b  00000000  00000000  00051c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc0  00000000  00000000  00054630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e98  00000000  00000000  000555f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019eba  00000000  00000000  00056488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd89  00000000  00000000  00070342  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091478  00000000  00000000  0007c0cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004818  00000000  00000000  0010d5c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800558c 	.word	0x0800558c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	0800558c 	.word	0x0800558c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint32_t reset_reason = RCC->CSR;
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <main+0x30>)
 8000598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800059a:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fbe6 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f810 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f98e 	bl	80008c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a8:	f000 f96c 	bl	8000884 <MX_DMA_Init>
  MX_TIM1_Init();
 80005ac:	f000 f8a4 	bl	80006f8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 f93e 	bl	8000830 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005b4:	f000 f86e 	bl	8000694 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 80005b8:	f004 f9b2 	bl	8004920 <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0x2c>
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fb88 	bl	8004ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a26      	ldr	r2, [pc, #152]	; (800068c <SystemClock_Config+0xc8>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <SystemClock_Config+0xc8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <SystemClock_Config+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <SystemClock_Config+0xcc>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <SystemClock_Config+0xcc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000634:	230c      	movs	r3, #12
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000638:	2360      	movs	r3, #96	; 0x60
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800063c:	2304      	movs	r3, #4
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fa61 	bl	8001b10 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f9a6 	bl	80009a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2101      	movs	r1, #1
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fcbb 	bl	8001ff0 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000680:	f000 f990 	bl	80009a4 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_SPI1_Init+0x5c>)
 800069a:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <MX_SPI1_Init+0x60>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_SPI1_Init+0x5c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_SPI1_Init+0x5c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_SPI1_Init+0x5c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_SPI1_Init+0x5c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_SPI1_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SPI1_Init+0x5c>)
 80006be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_SPI1_Init+0x5c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SPI1_Init+0x5c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_SPI1_Init+0x5c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI1_Init+0x5c>)
 80006d8:	220a      	movs	r2, #10
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_SPI1_Init+0x5c>)
 80006de:	f001 fe53 	bl	8002388 <HAL_SPI_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80006e8:	f000 f95c 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000069c 	.word	0x2000069c
 80006f4:	40013000 	.word	0x40013000

080006f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b096      	sub	sp, #88	; 0x58
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
 8000726:	615a      	str	r2, [r3, #20]
 8000728:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2220      	movs	r2, #32
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f004 fad9 	bl	8004ce8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000736:	4b3c      	ldr	r3, [pc, #240]	; (8000828 <MX_TIM1_Init+0x130>)
 8000738:	4a3c      	ldr	r2, [pc, #240]	; (800082c <MX_TIM1_Init+0x134>)
 800073a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800073c:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <MX_TIM1_Init+0x130>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b39      	ldr	r3, [pc, #228]	; (8000828 <MX_TIM1_Init+0x130>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8000748:	4b37      	ldr	r3, [pc, #220]	; (8000828 <MX_TIM1_Init+0x130>)
 800074a:	2201      	movs	r2, #1
 800074c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b36      	ldr	r3, [pc, #216]	; (8000828 <MX_TIM1_Init+0x130>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <MX_TIM1_Init+0x130>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <MX_TIM1_Init+0x130>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000760:	4831      	ldr	r0, [pc, #196]	; (8000828 <MX_TIM1_Init+0x130>)
 8000762:	f001 fe75 	bl	8002450 <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800076c:	f000 f91a 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800077a:	4619      	mov	r1, r3
 800077c:	482a      	ldr	r0, [pc, #168]	; (8000828 <MX_TIM1_Init+0x130>)
 800077e:	f001 ffdd 	bl	800273c <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000788:	f000 f90c 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800078c:	4826      	ldr	r0, [pc, #152]	; (8000828 <MX_TIM1_Init+0x130>)
 800078e:	f001 fed9 	bl	8002544 <HAL_TIM_PWM_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000798:	f000 f904 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a8:	4619      	mov	r1, r3
 80007aa:	481f      	ldr	r0, [pc, #124]	; (8000828 <MX_TIM1_Init+0x130>)
 80007ac:	f002 fb4a 	bl	8002e44 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80007b6:	f000 f8f5 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ba:	2360      	movs	r3, #96	; 0x60
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	2200      	movs	r2, #0
 80007dc:	4619      	mov	r1, r3
 80007de:	4812      	ldr	r0, [pc, #72]	; (8000828 <MX_TIM1_Init+0x130>)
 80007e0:	f001 fee6 	bl	80025b0 <HAL_TIM_PWM_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80007ea:	f000 f8db 	bl	80009a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_TIM1_Init+0x130>)
 8000812:	f002 fb85 	bl	8002f20 <HAL_TIMEx_ConfigBreakDeadTime>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800081c:	f000 f8c2 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3758      	adds	r7, #88	; 0x58
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000065c 	.word	0x2000065c
 800082c:	40010000 	.word	0x40010000

08000830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART1_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000868:	f002 fbac 	bl	8002fc4 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f897 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000061c 	.word	0x2000061c
 8000880:	40011000 	.word	0x40011000

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_DMA_Init+0x3c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <MX_DMA_Init+0x3c>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_DMA_Init+0x3c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2039      	movs	r0, #57	; 0x39
 80008ac:	f000 fbcd 	bl	800104a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008b0:	2039      	movs	r0, #57	; 0x39
 80008b2:	f000 fbe6 	bl	8001082 <HAL_NVIC_EnableIRQ>

}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <MX_GPIO_Init+0xd4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <MX_GPIO_Init+0xd4>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_GPIO_Init+0xd4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_GPIO_Init+0xd4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a26      	ldr	r2, [pc, #152]	; (8000998 <MX_GPIO_Init+0xd4>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_GPIO_Init+0xd4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <MX_GPIO_Init+0xd4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a1f      	ldr	r2, [pc, #124]	; (8000998 <MX_GPIO_Init+0xd4>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_GPIO_Init+0xd4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CLK_Pin|LED_0_Pin|LED_1_Pin|DebugPin_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f640 0107 	movw	r1, #2055	; 0x807
 8000934:	4819      	ldr	r0, [pc, #100]	; (800099c <MX_GPIO_Init+0xd8>)
 8000936:	f001 f8d1 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 800093a:	2200      	movs	r2, #0
 800093c:	f245 71ff 	movw	r1, #22527	; 0x57ff
 8000940:	4817      	ldr	r0, [pc, #92]	; (80009a0 <MX_GPIO_Init+0xdc>)
 8000942:	f001 f8cb 	bl	8001adc <HAL_GPIO_WritePin>
                          |Matrix_CLK_Pin|Matrix_OE_Pin|Matrix_C_Pin|Matrix_B_Pin
                          |Matrix_A_Pin|Matrix_E_Pin|Matrix_B1_Pin|Matrix_G1_Pin
                          |Matrix_R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Matrix_LAT_GPIO_Port, Matrix_LAT_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094c:	4814      	ldr	r0, [pc, #80]	; (80009a0 <MX_GPIO_Init+0xdc>)
 800094e:	f001 f8c5 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CLK_Pin LED_0_Pin LED_1_Pin DebugPin_Pin */
  GPIO_InitStruct.Pin = LED_CLK_Pin|LED_0_Pin|LED_1_Pin|DebugPin_Pin;
 8000952:	f640 0307 	movw	r3, #2055	; 0x807
 8000956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_GPIO_Init+0xd8>)
 800096c:	f000 ff34 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B0_Pin Matrix_D_Pin
                           Matrix_CLK_Pin Matrix_LAT_Pin Matrix_OE_Pin Matrix_C_Pin
                           Matrix_B_Pin Matrix_A_Pin Matrix_E_Pin Matrix_B1_Pin
                           Matrix_G1_Pin Matrix_R1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 8000970:	f247 73ff 	movw	r3, #30719	; 0x77ff
 8000974:	60fb      	str	r3, [r7, #12]
                          |Matrix_CLK_Pin|Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_C_Pin
                          |Matrix_B_Pin|Matrix_A_Pin|Matrix_E_Pin|Matrix_B1_Pin
                          |Matrix_G1_Pin|Matrix_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_GPIO_Init+0xdc>)
 800098a:	f000 ff25 	bl	80017d8 <HAL_GPIO_Init>

}
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020400 	.word	0x40020400

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <HAL_SPI_MspInit+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12b      	bne.n	8000a7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a5e:	23e0      	movs	r3, #224	; 0xe0
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_SPI_MspInit+0x8c>)
 8000a7a:	f000 fead 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40013000 	.word	0x40013000
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <HAL_TIM_Base_MspInit+0x98>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d13d      	bne.n	8000b22 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <HAL_TIM_Base_MspInit+0x9c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <HAL_TIM_Base_MspInit+0x9c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <HAL_TIM_Base_MspInit+0x9c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000ac4:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <HAL_TIM_Base_MspInit+0xa4>)
 8000ac6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000aca:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000ace:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000ad2:	2240      	movs	r2, #64	; 0x40
 8000ad4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aea:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000b08:	f000 fad6 	bl	80010b8 <HAL_DMA_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000b12:	f7ff ff47 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
 8000b1c:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40010000 	.word	0x40010000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	200005bc 	.word	0x200005bc
 8000b38:	40026428 	.word	0x40026428

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12c      	bne.n	8000bb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000bb4:	f000 fe10 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f8f6 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <DMA2_Stream1_IRQHandler+0x10>)
 8000c2e:	f000 fb6b 	bl	8001308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200005bc 	.word	0x200005bc

08000c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	return 1;
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_kill>:

int _kill(int pid, int sig)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c56:	f004 f80d 	bl	8004c74 <__errno>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	2316      	movs	r3, #22
 8000c5e:	6013      	str	r3, [r2, #0]
	return -1;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_exit>:

void _exit (int status)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ffe7 	bl	8000c4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c7e:	e7fe      	b.n	8000c7e <_exit+0x12>

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f003 ffe0 	bl	8004c74 <__errno>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20020000 	.word	0x20020000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	20000190 	.word	0x20000190
 8000ce8:	20000700 	.word	0x20000700

08000cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <SystemInit+0x28>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <SystemInit+0x28>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SystemInit+0x28>)
 8000d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d06:	609a      	str	r2, [r3, #8]
#endif
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d1e:	e003      	b.n	8000d28 <LoopCopyDataInit>

08000d20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d26:	3104      	adds	r1, #4

08000d28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d28:	480b      	ldr	r0, [pc, #44]	; (8000d58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d30:	d3f6      	bcc.n	8000d20 <CopyDataInit>
  ldr  r2, =_sbss
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d34:	e002      	b.n	8000d3c <LoopFillZerobss>

08000d36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d38:	f842 3b04 	str.w	r3, [r2], #4

08000d3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d40:	d3f9      	bcc.n	8000d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d42:	f7ff ffd3 	bl	8000cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f003 ff9b 	bl	8004c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fc21 	bl	8000590 <main>
  bx  lr    
 8000d4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d54:	08023710 	.word	0x08023710
  ldr  r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d5c:	20000174 	.word	0x20000174
  ldr  r2, =_sbss
 8000d60:	20000174 	.word	0x20000174
  ldr  r3, = _ebss
 8000d64:	200006fc 	.word	0x200006fc

08000d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_Init+0x40>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_Init+0x40>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x40>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f94d 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fe08 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f965 	bl	800109e <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dec:	f000 f92d 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008
 8000e34:	200006f4 	.word	0x200006f4

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	200006f4 	.word	0x200006f4

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff ffee 	bl	8000e38 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_Delay+0x40>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffde 	bl	8000e38 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000008 	.word	0x20000008

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff29 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff3e 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff8e 	bl	8000f88 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff31 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffa2 	bl	8000ff0 <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff feb8 	bl	8000e38 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e099      	b.n	8001208 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2202      	movs	r2, #2
 80010e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0201 	bic.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010f4:	e00f      	b.n	8001116 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010f6:	f7ff fe9f 	bl	8000e38 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b05      	cmp	r3, #5
 8001102:	d908      	bls.n	8001116 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2220      	movs	r2, #32
 8001108:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2203      	movs	r2, #3
 800110e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e078      	b.n	8001208 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e8      	bne.n	80010f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	4b38      	ldr	r3, [pc, #224]	; (8001210 <HAL_DMA_Init+0x158>)
 8001130:	4013      	ands	r3, r2
 8001132:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001142:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800114e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4313      	orrs	r3, r2
 8001166:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	2b04      	cmp	r3, #4
 800116e:	d107      	bne.n	8001180 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	4313      	orrs	r3, r2
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4313      	orrs	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f023 0307 	bic.w	r3, r3, #7
 8001196:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	4313      	orrs	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d117      	bne.n	80011da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00e      	beq.n	80011da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 fa91 	bl	80016e4 <DMA_CheckFifoParam>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d008      	beq.n	80011da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2240      	movs	r2, #64	; 0x40
 80011cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011d6:	2301      	movs	r3, #1
 80011d8:	e016      	b.n	8001208 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fa48 	bl	8001678 <DMA_CalcBaseAndBitshift>
 80011e8:	4603      	mov	r3, r0
 80011ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f0:	223f      	movs	r2, #63	; 0x3f
 80011f2:	409a      	lsls	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	f010803f 	.word	0xf010803f

08001214 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001232:	2b01      	cmp	r3, #1
 8001234:	d101      	bne.n	800123a <HAL_DMA_Start_IT+0x26>
 8001236:	2302      	movs	r3, #2
 8001238:	e040      	b.n	80012bc <HAL_DMA_Start_IT+0xa8>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d12f      	bne.n	80012ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2202      	movs	r2, #2
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 f9da 	bl	800161c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126c:	223f      	movs	r2, #63	; 0x3f
 800126e:	409a      	lsls	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0216 	orr.w	r2, r2, #22
 8001282:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0208 	orr.w	r2, r2, #8
 800129a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e005      	b.n	80012ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012b6:	2302      	movs	r3, #2
 80012b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d004      	beq.n	80012e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00c      	b.n	80012fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0201 	bic.w	r2, r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001314:	4b92      	ldr	r3, [pc, #584]	; (8001560 <HAL_DMA_IRQHandler+0x258>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a92      	ldr	r2, [pc, #584]	; (8001564 <HAL_DMA_IRQHandler+0x25c>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	0a9b      	lsrs	r3, r3, #10
 8001320:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	2208      	movs	r2, #8
 8001334:	409a      	lsls	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d01a      	beq.n	8001374 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	d013      	beq.n	8001374 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0204 	bic.w	r2, r2, #4
 800135a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001360:	2208      	movs	r2, #8
 8001362:	409a      	lsls	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136c:	f043 0201 	orr.w	r2, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001378:	2201      	movs	r2, #1
 800137a:	409a      	lsls	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4013      	ands	r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d012      	beq.n	80013aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001396:	2201      	movs	r2, #1
 8001398:	409a      	lsls	r2, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	f043 0202 	orr.w	r2, r3, #2
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ae:	2204      	movs	r2, #4
 80013b0:	409a      	lsls	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d012      	beq.n	80013e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00b      	beq.n	80013e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	2204      	movs	r2, #4
 80013ce:	409a      	lsls	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d8:	f043 0204 	orr.w	r2, r3, #4
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e4:	2210      	movs	r2, #16
 80013e6:	409a      	lsls	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d043      	beq.n	8001478 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d03c      	beq.n	8001478 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001402:	2210      	movs	r2, #16
 8001404:	409a      	lsls	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d018      	beq.n	800144a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d108      	bne.n	8001438 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	2b00      	cmp	r3, #0
 800142c:	d024      	beq.n	8001478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	4798      	blx	r3
 8001436:	e01f      	b.n	8001478 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143c:	2b00      	cmp	r3, #0
 800143e:	d01b      	beq.n	8001478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
 8001448:	e016      	b.n	8001478 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d107      	bne.n	8001468 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0208 	bic.w	r2, r2, #8
 8001466:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147c:	2220      	movs	r2, #32
 800147e:	409a      	lsls	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 808e 	beq.w	80015a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8086 	beq.w	80015a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149e:	2220      	movs	r2, #32
 80014a0:	409a      	lsls	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b05      	cmp	r3, #5
 80014b0:	d136      	bne.n	8001520 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0216 	bic.w	r2, r2, #22
 80014c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <HAL_DMA_IRQHandler+0x1da>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0208 	bic.w	r2, r2, #8
 80014f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f6:	223f      	movs	r2, #63	; 0x3f
 80014f8:	409a      	lsls	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001512:	2b00      	cmp	r3, #0
 8001514:	d07d      	beq.n	8001612 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	4798      	blx	r3
        }
        return;
 800151e:	e078      	b.n	8001612 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d01c      	beq.n	8001568 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d108      	bne.n	800154e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	2b00      	cmp	r3, #0
 8001542:	d030      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	4798      	blx	r3
 800154c:	e02b      	b.n	80015a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001552:	2b00      	cmp	r3, #0
 8001554:	d027      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	4798      	blx	r3
 800155e:	e022      	b.n	80015a6 <HAL_DMA_IRQHandler+0x29e>
 8001560:	20000000 	.word	0x20000000
 8001564:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10f      	bne.n	8001596 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0210 	bic.w	r2, r2, #16
 8001584:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d032      	beq.n	8001614 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d022      	beq.n	8001600 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3301      	adds	r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d307      	bcc.n	80015ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f2      	bne.n	80015d2 <HAL_DMA_IRQHandler+0x2ca>
 80015ec:	e000      	b.n	80015f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	4798      	blx	r3
 8001610:	e000      	b.n	8001614 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001612:	bf00      	nop
    }
  }
}
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop

0800161c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001638:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b40      	cmp	r3, #64	; 0x40
 8001648:	d108      	bne.n	800165c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800165a:	e007      	b.n	800166c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	60da      	str	r2, [r3, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	3b10      	subs	r3, #16
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <DMA_CalcBaseAndBitshift+0x64>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <DMA_CalcBaseAndBitshift+0x68>)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d909      	bls.n	80016ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016ae:	f023 0303 	bic.w	r3, r3, #3
 80016b2:	1d1a      	adds	r2, r3, #4
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	659a      	str	r2, [r3, #88]	; 0x58
 80016b8:	e007      	b.n	80016ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016c2:	f023 0303 	bic.w	r3, r3, #3
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	aaaaaaab 	.word	0xaaaaaaab
 80016e0:	08005644 	.word	0x08005644

080016e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d11f      	bne.n	800173e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d855      	bhi.n	80017b0 <DMA_CheckFifoParam+0xcc>
 8001704:	a201      	add	r2, pc, #4	; (adr r2, 800170c <DMA_CheckFifoParam+0x28>)
 8001706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170a:	bf00      	nop
 800170c:	0800171d 	.word	0x0800171d
 8001710:	0800172f 	.word	0x0800172f
 8001714:	0800171d 	.word	0x0800171d
 8001718:	080017b1 	.word	0x080017b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d045      	beq.n	80017b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800172c:	e042      	b.n	80017b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001736:	d13f      	bne.n	80017b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800173c:	e03c      	b.n	80017b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001746:	d121      	bne.n	800178c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d836      	bhi.n	80017bc <DMA_CheckFifoParam+0xd8>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <DMA_CheckFifoParam+0x70>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	08001765 	.word	0x08001765
 8001758:	0800176b 	.word	0x0800176b
 800175c:	08001765 	.word	0x08001765
 8001760:	0800177d 	.word	0x0800177d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
      break;
 8001768:	e02f      	b.n	80017ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d024      	beq.n	80017c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800177a:	e021      	b.n	80017c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001784:	d11e      	bne.n	80017c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800178a:	e01b      	b.n	80017c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d902      	bls.n	8001798 <DMA_CheckFifoParam+0xb4>
 8001792:	2b03      	cmp	r3, #3
 8001794:	d003      	beq.n	800179e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001796:	e018      	b.n	80017ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
      break;
 800179c:	e015      	b.n	80017ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00e      	beq.n	80017c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
      break;
 80017ae:	e00b      	b.n	80017c8 <DMA_CheckFifoParam+0xe4>
      break;
 80017b0:	bf00      	nop
 80017b2:	e00a      	b.n	80017ca <DMA_CheckFifoParam+0xe6>
      break;
 80017b4:	bf00      	nop
 80017b6:	e008      	b.n	80017ca <DMA_CheckFifoParam+0xe6>
      break;
 80017b8:	bf00      	nop
 80017ba:	e006      	b.n	80017ca <DMA_CheckFifoParam+0xe6>
      break;
 80017bc:	bf00      	nop
 80017be:	e004      	b.n	80017ca <DMA_CheckFifoParam+0xe6>
      break;
 80017c0:	bf00      	nop
 80017c2:	e002      	b.n	80017ca <DMA_CheckFifoParam+0xe6>
      break;   
 80017c4:	bf00      	nop
 80017c6:	e000      	b.n	80017ca <DMA_CheckFifoParam+0xe6>
      break;
 80017c8:	bf00      	nop
    }
  } 
  
  return status; 
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e159      	b.n	8001aa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8148 	bne.w	8001aa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d00b      	beq.n	8001832 <HAL_GPIO_Init+0x5a>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d007      	beq.n	8001832 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001826:	2b11      	cmp	r3, #17
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b12      	cmp	r3, #18
 8001830:	d130      	bne.n	8001894 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0xfc>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b12      	cmp	r3, #18
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a2 	beq.w	8001aa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a55      	ldr	r2, [pc, #340]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a51      	ldr	r2, [pc, #324]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a48      	ldr	r2, [pc, #288]	; (8001ac4 <HAL_GPIO_Init+0x2ec>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x202>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a47      	ldr	r2, [pc, #284]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x1fe>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a46      	ldr	r2, [pc, #280]	; (8001acc <HAL_GPIO_Init+0x2f4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a45      	ldr	r2, [pc, #276]	; (8001ad0 <HAL_GPIO_Init+0x2f8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x1f6>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a44      	ldr	r2, [pc, #272]	; (8001ad4 <HAL_GPIO_Init+0x2fc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x1f2>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019ca:	2307      	movs	r3, #7
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4934      	ldr	r1, [pc, #208]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019fa:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1e:	4a2e      	ldr	r2, [pc, #184]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a48:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a72:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f aea2 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3724      	adds	r7, #36	; 0x24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	619a      	str	r2, [r3, #24]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e25b      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d075      	beq.n	8001c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b2e:	4ba3      	ldr	r3, [pc, #652]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d00c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3a:	4ba0      	ldr	r3, [pc, #640]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d112      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b46:	4b9d      	ldr	r3, [pc, #628]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b52:	d10b      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	4b99      	ldr	r3, [pc, #612]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d05b      	beq.n	8001c18 <HAL_RCC_OscConfig+0x108>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d157      	bne.n	8001c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e236      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x74>
 8001b76:	4b91      	ldr	r3, [pc, #580]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a90      	ldr	r2, [pc, #576]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e01d      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x98>
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a8a      	ldr	r2, [pc, #552]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a87      	ldr	r2, [pc, #540]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001ba8:	4b84      	ldr	r3, [pc, #528]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a83      	ldr	r2, [pc, #524]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a80      	ldr	r2, [pc, #512]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f936 	bl	8000e38 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff f932 	bl	8000e38 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1fb      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xc0>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f922 	bl	8000e38 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff f91e 	bl	8000e38 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1e7      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	4b6c      	ldr	r3, [pc, #432]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xe8>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d063      	beq.n	8001cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c26:	4b65      	ldr	r3, [pc, #404]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c32:	4b62      	ldr	r3, [pc, #392]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d11c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d116      	bne.n	8001c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	4b5c      	ldr	r3, [pc, #368]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x152>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e1bb      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	4b56      	ldr	r3, [pc, #344]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4952      	ldr	r1, [pc, #328]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	e03a      	b.n	8001cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <HAL_RCC_OscConfig+0x2b0>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff f8d7 	bl	8000e38 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7ff f8d3 	bl	8000e38 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e19c      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4940      	ldr	r1, [pc, #256]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e015      	b.n	8001cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_RCC_OscConfig+0x2b0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f8b6 	bl	8000e38 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff f8b2 	bl	8000e38 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e17b      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d030      	beq.n	8001d5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d016      	beq.n	8001d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_RCC_OscConfig+0x2b4>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff f896 	bl	8000e38 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff f892 	bl	8000e38 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e15b      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x200>
 8001d2e:	e015      	b.n	8001d5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_OscConfig+0x2b4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7ff f87f 	bl	8000e38 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3e:	f7ff f87b 	bl	8000e38 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e144      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a0 	beq.w	8001eaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10f      	bne.n	8001d9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x2b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d121      	bne.n	8001dea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_RCC_OscConfig+0x2b8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_RCC_OscConfig+0x2b8>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db2:	f7ff f841 	bl	8000e38 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	e011      	b.n	8001dde <HAL_RCC_OscConfig+0x2ce>
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	42470000 	.word	0x42470000
 8001dc4:	42470e80 	.word	0x42470e80
 8001dc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dcc:	f7ff f834 	bl	8000e38 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0fd      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <HAL_RCC_OscConfig+0x4d4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
 8001df2:	4b7d      	ldr	r3, [pc, #500]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a7c      	ldr	r2, [pc, #496]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	e01c      	b.n	8001e3a <HAL_RCC_OscConfig+0x32a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b05      	cmp	r3, #5
 8001e06:	d10c      	bne.n	8001e22 <HAL_RCC_OscConfig+0x312>
 8001e08:	4b77      	ldr	r3, [pc, #476]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	4a76      	ldr	r2, [pc, #472]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
 8001e14:	4b74      	ldr	r3, [pc, #464]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	4a73      	ldr	r2, [pc, #460]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e20:	e00b      	b.n	8001e3a <HAL_RCC_OscConfig+0x32a>
 8001e22:	4b71      	ldr	r3, [pc, #452]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	4a70      	ldr	r2, [pc, #448]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2e:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	4a6d      	ldr	r2, [pc, #436]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d015      	beq.n	8001e6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7fe fff9 	bl	8000e38 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7fe fff5 	bl	8000e38 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e0bc      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	4b61      	ldr	r3, [pc, #388]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ee      	beq.n	8001e4a <HAL_RCC_OscConfig+0x33a>
 8001e6c:	e014      	b.n	8001e98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7fe ffe3 	bl	8000e38 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7fe ffdf 	bl	8000e38 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0a6      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8c:	4b56      	ldr	r3, [pc, #344]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ee      	bne.n	8001e76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d105      	bne.n	8001eaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9e:	4b52      	ldr	r3, [pc, #328]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a51      	ldr	r2, [pc, #324]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8092 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eb4:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d05c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d141      	bne.n	8001f4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec8:	4b48      	ldr	r3, [pc, #288]	; (8001fec <HAL_RCC_OscConfig+0x4dc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe ffb3 	bl	8000e38 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7fe ffaf 	bl	8000e38 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e078      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee8:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69da      	ldr	r2, [r3, #28]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	019b      	lsls	r3, r3, #6
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	041b      	lsls	r3, r3, #16
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	061b      	lsls	r3, r3, #24
 8001f18:	4933      	ldr	r1, [pc, #204]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <HAL_RCC_OscConfig+0x4dc>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7fe ff88 	bl	8000e38 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe ff84 	bl	8000e38 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e04d      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x41c>
 8001f4a:	e045      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_OscConfig+0x4dc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe ff71 	bl	8000e38 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7fe ff6d 	bl	8000e38 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e036      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x44a>
 8001f78:	e02e      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e029      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d11c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d115      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fae:	4013      	ands	r3, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	42470060 	.word	0x42470060

08001ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0cc      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d90c      	bls.n	800202c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800204e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d044      	beq.n	8002110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d119      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e067      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4934      	ldr	r1, [pc, #208]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7fe feaa 	bl	8000e38 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7fe fea6 	bl	8000e38 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e04f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d20c      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4601      	mov	r1, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	5cd3      	ldrb	r3, [r2, r3]
 800218a:	fa21 f303 	lsr.w	r3, r1, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fe0a 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00
 80021ac:	40023800 	.word	0x40023800
 80021b0:	0800562c 	.word	0x0800562c
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	2300      	movs	r3, #0
 80021cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d2:	4b50      	ldr	r3, [pc, #320]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d007      	beq.n	80021ee <HAL_RCC_GetSysClockFreq+0x32>
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d008      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x38>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 808d 	bne.w	8002302 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_RCC_GetSysClockFreq+0x15c>)
 80021ea:	60bb      	str	r3, [r7, #8]
       break;
 80021ec:	e08c      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ee:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCC_GetSysClockFreq+0x160>)
 80021f0:	60bb      	str	r3, [r7, #8]
      break;
 80021f2:	e089      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f4:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021fe:	4b45      	ldr	r3, [pc, #276]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d023      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220a:	4b42      	ldr	r3, [pc, #264]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	f04f 0400 	mov.w	r4, #0
 8002214:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	ea03 0501 	and.w	r5, r3, r1
 8002220:	ea04 0602 	and.w	r6, r4, r2
 8002224:	4a3d      	ldr	r2, [pc, #244]	; (800231c <HAL_RCC_GetSysClockFreq+0x160>)
 8002226:	fb02 f106 	mul.w	r1, r2, r6
 800222a:	2200      	movs	r2, #0
 800222c:	fb02 f205 	mul.w	r2, r2, r5
 8002230:	440a      	add	r2, r1
 8002232:	493a      	ldr	r1, [pc, #232]	; (800231c <HAL_RCC_GetSysClockFreq+0x160>)
 8002234:	fba5 0101 	umull	r0, r1, r5, r1
 8002238:	1853      	adds	r3, r2, r1
 800223a:	4619      	mov	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f04f 0400 	mov.w	r4, #0
 8002242:	461a      	mov	r2, r3
 8002244:	4623      	mov	r3, r4
 8002246:	f7fe f823 	bl	8000290 <__aeabi_uldivmod>
 800224a:	4603      	mov	r3, r0
 800224c:	460c      	mov	r4, r1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e049      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	099b      	lsrs	r3, r3, #6
 8002258:	f04f 0400 	mov.w	r4, #0
 800225c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	ea03 0501 	and.w	r5, r3, r1
 8002268:	ea04 0602 	and.w	r6, r4, r2
 800226c:	4629      	mov	r1, r5
 800226e:	4632      	mov	r2, r6
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	f04f 0400 	mov.w	r4, #0
 8002278:	0154      	lsls	r4, r2, #5
 800227a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800227e:	014b      	lsls	r3, r1, #5
 8002280:	4619      	mov	r1, r3
 8002282:	4622      	mov	r2, r4
 8002284:	1b49      	subs	r1, r1, r5
 8002286:	eb62 0206 	sbc.w	r2, r2, r6
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	f04f 0400 	mov.w	r4, #0
 8002292:	0194      	lsls	r4, r2, #6
 8002294:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002298:	018b      	lsls	r3, r1, #6
 800229a:	1a5b      	subs	r3, r3, r1
 800229c:	eb64 0402 	sbc.w	r4, r4, r2
 80022a0:	f04f 0100 	mov.w	r1, #0
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	00e2      	lsls	r2, r4, #3
 80022aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022ae:	00d9      	lsls	r1, r3, #3
 80022b0:	460b      	mov	r3, r1
 80022b2:	4614      	mov	r4, r2
 80022b4:	195b      	adds	r3, r3, r5
 80022b6:	eb44 0406 	adc.w	r4, r4, r6
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	02a2      	lsls	r2, r4, #10
 80022c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022c8:	0299      	lsls	r1, r3, #10
 80022ca:	460b      	mov	r3, r1
 80022cc:	4614      	mov	r4, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	4621      	mov	r1, r4
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f04f 0400 	mov.w	r4, #0
 80022d8:	461a      	mov	r2, r3
 80022da:	4623      	mov	r3, r4
 80022dc:	f7fd ffd8 	bl	8000290 <__aeabi_uldivmod>
 80022e0:	4603      	mov	r3, r0
 80022e2:	460c      	mov	r4, r1
 80022e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	3301      	adds	r3, #1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	60bb      	str	r3, [r7, #8]
      break;
 8002300:	e002      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002304:	60bb      	str	r3, [r7, #8]
      break;
 8002306:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002308:	68bb      	ldr	r3, [r7, #8]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	00f42400 	.word	0x00f42400
 800231c:	017d7840 	.word	0x017d7840

08002320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_RCC_GetHCLKFreq+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800233c:	f7ff fff0 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002340:	4601      	mov	r1, r0
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	0a9b      	lsrs	r3, r3, #10
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4a03      	ldr	r2, [pc, #12]	; (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	0800563c 	.word	0x0800563c

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002364:	f7ff ffdc 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002368:	4601      	mov	r1, r0
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0b5b      	lsrs	r3, r3, #13
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4a03      	ldr	r2, [pc, #12]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	0800563c 	.word	0x0800563c

08002388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e056      	b.n	8002448 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7fe fb25 	bl	8000a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	ea42 0103 	orr.w	r1, r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	0c1b      	lsrs	r3, r3, #16
 8002418:	f003 0104 	and.w	r1, r3, #4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002436:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e01d      	b.n	800249e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fb0c 	bl	8000a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f000 fa0c 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d007      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a1a      	ldr	r2, [r3, #32]
 800250c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_TIM_Base_Stop_IT+0x48>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a1a      	ldr	r2, [r3, #32]
 800251c:	f240 4344 	movw	r3, #1092	; 0x444
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <HAL_TIM_Base_Stop_IT+0x48>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0201 	bic.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e01d      	b.n	8002592 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f815 	bl	800259a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f000 f992 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0b4      	b.n	8002734 <HAL_TIM_PWM_ConfigChannel+0x184>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b0c      	cmp	r3, #12
 80025de:	f200 809f 	bhi.w	8002720 <HAL_TIM_PWM_ConfigChannel+0x170>
 80025e2:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	0800261d 	.word	0x0800261d
 80025ec:	08002721 	.word	0x08002721
 80025f0:	08002721 	.word	0x08002721
 80025f4:	08002721 	.word	0x08002721
 80025f8:	0800265d 	.word	0x0800265d
 80025fc:	08002721 	.word	0x08002721
 8002600:	08002721 	.word	0x08002721
 8002604:	08002721 	.word	0x08002721
 8002608:	0800269f 	.word	0x0800269f
 800260c:	08002721 	.word	0x08002721
 8002610:	08002721 	.word	0x08002721
 8002614:	08002721 	.word	0x08002721
 8002618:	080026df 	.word	0x080026df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f9c2 	bl	80029ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0208 	orr.w	r2, r2, #8
 8002636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6999      	ldr	r1, [r3, #24]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	619a      	str	r2, [r3, #24]
      break;
 800265a:	e062      	b.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fa08 	bl	8002a78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6999      	ldr	r1, [r3, #24]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	021a      	lsls	r2, r3, #8
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	619a      	str	r2, [r3, #24]
      break;
 800269c:	e041      	b.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fa53 	bl	8002b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0208 	orr.w	r2, r2, #8
 80026b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0204 	bic.w	r2, r2, #4
 80026c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69d9      	ldr	r1, [r3, #28]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	61da      	str	r2, [r3, #28]
      break;
 80026dc:	e021      	b.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fa9d 	bl	8002c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69d9      	ldr	r1, [r3, #28]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	021a      	lsls	r2, r3, #8
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	61da      	str	r2, [r3, #28]
      break;
 800271e:	e000      	b.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002720:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_TIM_ConfigClockSource+0x18>
 8002750:	2302      	movs	r3, #2
 8002752:	e0a6      	b.n	80028a2 <HAL_TIM_ConfigClockSource+0x166>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800277a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d067      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x120>
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d80b      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x6c>
 8002790:	2b10      	cmp	r3, #16
 8002792:	d073      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x140>
 8002794:	2b10      	cmp	r3, #16
 8002796:	d802      	bhi.n	800279e <HAL_TIM_ConfigClockSource+0x62>
 8002798:	2b00      	cmp	r3, #0
 800279a:	d06f      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800279c:	e078      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d06c      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x140>
 80027a2:	2b30      	cmp	r3, #48	; 0x30
 80027a4:	d06a      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80027a6:	e073      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027a8:	2b70      	cmp	r3, #112	; 0x70
 80027aa:	d00d      	beq.n	80027c8 <HAL_TIM_ConfigClockSource+0x8c>
 80027ac:	2b70      	cmp	r3, #112	; 0x70
 80027ae:	d804      	bhi.n	80027ba <HAL_TIM_ConfigClockSource+0x7e>
 80027b0:	2b50      	cmp	r3, #80	; 0x50
 80027b2:	d033      	beq.n	800281c <HAL_TIM_ConfigClockSource+0xe0>
 80027b4:	2b60      	cmp	r3, #96	; 0x60
 80027b6:	d041      	beq.n	800283c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80027b8:	e06a      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	d066      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x152>
 80027c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c4:	d017      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80027c6:	e063      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f000 faee 	bl	8002db8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]
      break;
 80027f4:	e04c      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f000 fad7 	bl	8002db8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002818:	609a      	str	r2, [r3, #8]
      break;
 800281a:	e039      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	461a      	mov	r2, r3
 800282a:	f000 fa4b 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2150      	movs	r1, #80	; 0x50
 8002834:	4618      	mov	r0, r3
 8002836:	f000 faa4 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 800283a:	e029      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	461a      	mov	r2, r3
 800284a:	f000 fa6a 	bl	8002d22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2160      	movs	r1, #96	; 0x60
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fa94 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 800285a:	e019      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	461a      	mov	r2, r3
 800286a:	f000 fa2b 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fa84 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 800287a:	e009      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f000 fa7b 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 800288c:	e000      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800288e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a34      	ldr	r2, [pc, #208]	; (8002990 <TIM_Base_SetConfig+0xe4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00f      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d00b      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a31      	ldr	r2, [pc, #196]	; (8002994 <TIM_Base_SetConfig+0xe8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d007      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a30      	ldr	r2, [pc, #192]	; (8002998 <TIM_Base_SetConfig+0xec>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d003      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a2f      	ldr	r2, [pc, #188]	; (800299c <TIM_Base_SetConfig+0xf0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d108      	bne.n	80028f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a25      	ldr	r2, [pc, #148]	; (8002990 <TIM_Base_SetConfig+0xe4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01b      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d017      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <TIM_Base_SetConfig+0xe8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a21      	ldr	r2, [pc, #132]	; (8002998 <TIM_Base_SetConfig+0xec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00f      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a20      	ldr	r2, [pc, #128]	; (800299c <TIM_Base_SetConfig+0xf0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00b      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <TIM_Base_SetConfig+0xf4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a1e      	ldr	r2, [pc, #120]	; (80029a4 <TIM_Base_SetConfig+0xf8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d003      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <TIM_Base_SetConfig+0xfc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d108      	bne.n	8002948 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a08      	ldr	r2, [pc, #32]	; (8002990 <TIM_Base_SetConfig+0xe4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d103      	bne.n	800297c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	615a      	str	r2, [r3, #20]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40010000 	.word	0x40010000
 8002994:	40000400 	.word	0x40000400
 8002998:	40000800 	.word	0x40000800
 800299c:	40000c00 	.word	0x40000c00
 80029a0:	40014000 	.word	0x40014000
 80029a4:	40014400 	.word	0x40014400
 80029a8:	40014800 	.word	0x40014800

080029ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f023 0201 	bic.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f023 0302 	bic.w	r3, r3, #2
 80029f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <TIM_OC1_SetConfig+0xc8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10c      	bne.n	8002a22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f023 0308 	bic.w	r3, r3, #8
 8002a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f023 0304 	bic.w	r3, r3, #4
 8002a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <TIM_OC1_SetConfig+0xc8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d111      	bne.n	8002a4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	621a      	str	r2, [r3, #32]
}
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40010000 	.word	0x40010000

08002a78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f023 0210 	bic.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0320 	bic.w	r3, r3, #32
 8002ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <TIM_OC2_SetConfig+0xd4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d10d      	bne.n	8002af4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <TIM_OC2_SetConfig+0xd4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d113      	bne.n	8002b24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	621a      	str	r2, [r3, #32]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40010000 	.word	0x40010000

08002b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0303 	bic.w	r3, r3, #3
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <TIM_OC3_SetConfig+0xd0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d10d      	bne.n	8002bca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <TIM_OC3_SetConfig+0xd0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d113      	bne.n	8002bfa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	621a      	str	r2, [r3, #32]
}
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40010000 	.word	0x40010000

08002c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	031b      	lsls	r3, r3, #12
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <TIM_OC4_SetConfig+0x9c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d109      	bne.n	8002c98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	019b      	lsls	r3, r3, #6
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40010000 	.word	0x40010000

08002cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0201 	bic.w	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 030a 	bic.w	r3, r3, #10
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f023 0210 	bic.w	r2, r3, #16
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	031b      	lsls	r3, r3, #12
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f043 0307 	orr.w	r3, r3, #7
 8002da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	021a      	lsls	r2, r3, #8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a1a      	ldr	r2, [r3, #32]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e050      	b.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1c      	ldr	r2, [pc, #112]	; (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d018      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d013      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a16      	ldr	r2, [pc, #88]	; (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a15      	ldr	r2, [pc, #84]	; (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10c      	bne.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40000800 	.word	0x40000800
 8002f18:	40000c00 	.word	0x40000c00
 8002f1c:	40014000 	.word	0x40014000

08002f20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e03d      	b.n	8002fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e03f      	b.n	8003056 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd fda6 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	; 0x24
 8002ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f90b 	bl	8003224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800301c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800302c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800303c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b088      	sub	sp, #32
 8003062:	af02      	add	r7, sp, #8
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b20      	cmp	r3, #32
 800307c:	f040 8083 	bne.w	8003186 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_UART_Transmit+0x2e>
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e07b      	b.n	8003188 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_UART_Transmit+0x40>
 800309a:	2302      	movs	r3, #2
 800309c:	e074      	b.n	8003188 <HAL_UART_Transmit+0x12a>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2221      	movs	r2, #33	; 0x21
 80030b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80030b4:	f7fd fec0 	bl	8000e38 <HAL_GetTick>
 80030b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80030ce:	e042      	b.n	8003156 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e6:	d122      	bne.n	800312e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2200      	movs	r2, #0
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f84c 	bl	8003190 <UART_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e042      	b.n	8003188 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003114:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3302      	adds	r3, #2
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	e017      	b.n	8003156 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3301      	adds	r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	e013      	b.n	8003156 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f829 	bl	8003190 <UART_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e01f      	b.n	8003188 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	60ba      	str	r2, [r7, #8]
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1b7      	bne.n	80030d0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2200      	movs	r2, #0
 8003168:	2140      	movs	r1, #64	; 0x40
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f810 	bl	8003190 <UART_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e006      	b.n	8003188 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a0:	e02c      	b.n	80031fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a8:	d028      	beq.n	80031fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80031b0:	f7fd fe42 	bl	8000e38 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d21d      	bcs.n	80031fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e00f      	b.n	800321c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4013      	ands	r3, r2
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	429a      	cmp	r2, r3
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	429a      	cmp	r2, r3
 8003218:	d0c3      	beq.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003266:	f023 030c 	bic.w	r3, r3, #12
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	68f9      	ldr	r1, [r7, #12]
 8003270:	430b      	orrs	r3, r1
 8003272:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003292:	f040 818b 	bne.w	80035ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4ac1      	ldr	r2, [pc, #772]	; (80035a0 <UART_SetConfig+0x37c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d005      	beq.n	80032ac <UART_SetConfig+0x88>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4abf      	ldr	r2, [pc, #764]	; (80035a4 <UART_SetConfig+0x380>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	f040 80bd 	bne.w	8003426 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032ac:	f7ff f858 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 80032b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	461d      	mov	r5, r3
 80032b6:	f04f 0600 	mov.w	r6, #0
 80032ba:	46a8      	mov	r8, r5
 80032bc:	46b1      	mov	r9, r6
 80032be:	eb18 0308 	adds.w	r3, r8, r8
 80032c2:	eb49 0409 	adc.w	r4, r9, r9
 80032c6:	4698      	mov	r8, r3
 80032c8:	46a1      	mov	r9, r4
 80032ca:	eb18 0805 	adds.w	r8, r8, r5
 80032ce:	eb49 0906 	adc.w	r9, r9, r6
 80032d2:	f04f 0100 	mov.w	r1, #0
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032e6:	4688      	mov	r8, r1
 80032e8:	4691      	mov	r9, r2
 80032ea:	eb18 0005 	adds.w	r0, r8, r5
 80032ee:	eb49 0106 	adc.w	r1, r9, r6
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	461d      	mov	r5, r3
 80032f8:	f04f 0600 	mov.w	r6, #0
 80032fc:	196b      	adds	r3, r5, r5
 80032fe:	eb46 0406 	adc.w	r4, r6, r6
 8003302:	461a      	mov	r2, r3
 8003304:	4623      	mov	r3, r4
 8003306:	f7fc ffc3 	bl	8000290 <__aeabi_uldivmod>
 800330a:	4603      	mov	r3, r0
 800330c:	460c      	mov	r4, r1
 800330e:	461a      	mov	r2, r3
 8003310:	4ba5      	ldr	r3, [pc, #660]	; (80035a8 <UART_SetConfig+0x384>)
 8003312:	fba3 2302 	umull	r2, r3, r3, r2
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	461d      	mov	r5, r3
 8003320:	f04f 0600 	mov.w	r6, #0
 8003324:	46a9      	mov	r9, r5
 8003326:	46b2      	mov	sl, r6
 8003328:	eb19 0309 	adds.w	r3, r9, r9
 800332c:	eb4a 040a 	adc.w	r4, sl, sl
 8003330:	4699      	mov	r9, r3
 8003332:	46a2      	mov	sl, r4
 8003334:	eb19 0905 	adds.w	r9, r9, r5
 8003338:	eb4a 0a06 	adc.w	sl, sl, r6
 800333c:	f04f 0100 	mov.w	r1, #0
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003348:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800334c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003350:	4689      	mov	r9, r1
 8003352:	4692      	mov	sl, r2
 8003354:	eb19 0005 	adds.w	r0, r9, r5
 8003358:	eb4a 0106 	adc.w	r1, sl, r6
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	461d      	mov	r5, r3
 8003362:	f04f 0600 	mov.w	r6, #0
 8003366:	196b      	adds	r3, r5, r5
 8003368:	eb46 0406 	adc.w	r4, r6, r6
 800336c:	461a      	mov	r2, r3
 800336e:	4623      	mov	r3, r4
 8003370:	f7fc ff8e 	bl	8000290 <__aeabi_uldivmod>
 8003374:	4603      	mov	r3, r0
 8003376:	460c      	mov	r4, r1
 8003378:	461a      	mov	r2, r3
 800337a:	4b8b      	ldr	r3, [pc, #556]	; (80035a8 <UART_SetConfig+0x384>)
 800337c:	fba3 1302 	umull	r1, r3, r3, r2
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	2164      	movs	r1, #100	; 0x64
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	3332      	adds	r3, #50	; 0x32
 800338e:	4a86      	ldr	r2, [pc, #536]	; (80035a8 <UART_SetConfig+0x384>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800339c:	4498      	add	r8, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	461d      	mov	r5, r3
 80033a2:	f04f 0600 	mov.w	r6, #0
 80033a6:	46a9      	mov	r9, r5
 80033a8:	46b2      	mov	sl, r6
 80033aa:	eb19 0309 	adds.w	r3, r9, r9
 80033ae:	eb4a 040a 	adc.w	r4, sl, sl
 80033b2:	4699      	mov	r9, r3
 80033b4:	46a2      	mov	sl, r4
 80033b6:	eb19 0905 	adds.w	r9, r9, r5
 80033ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033d2:	4689      	mov	r9, r1
 80033d4:	4692      	mov	sl, r2
 80033d6:	eb19 0005 	adds.w	r0, r9, r5
 80033da:	eb4a 0106 	adc.w	r1, sl, r6
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	461d      	mov	r5, r3
 80033e4:	f04f 0600 	mov.w	r6, #0
 80033e8:	196b      	adds	r3, r5, r5
 80033ea:	eb46 0406 	adc.w	r4, r6, r6
 80033ee:	461a      	mov	r2, r3
 80033f0:	4623      	mov	r3, r4
 80033f2:	f7fc ff4d 	bl	8000290 <__aeabi_uldivmod>
 80033f6:	4603      	mov	r3, r0
 80033f8:	460c      	mov	r4, r1
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <UART_SetConfig+0x384>)
 80033fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2164      	movs	r1, #100	; 0x64
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	3332      	adds	r3, #50	; 0x32
 8003410:	4a65      	ldr	r2, [pc, #404]	; (80035a8 <UART_SetConfig+0x384>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	f003 0207 	and.w	r2, r3, #7
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4442      	add	r2, r8
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	e26f      	b.n	8003906 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003426:	f7fe ff87 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 800342a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	461d      	mov	r5, r3
 8003430:	f04f 0600 	mov.w	r6, #0
 8003434:	46a8      	mov	r8, r5
 8003436:	46b1      	mov	r9, r6
 8003438:	eb18 0308 	adds.w	r3, r8, r8
 800343c:	eb49 0409 	adc.w	r4, r9, r9
 8003440:	4698      	mov	r8, r3
 8003442:	46a1      	mov	r9, r4
 8003444:	eb18 0805 	adds.w	r8, r8, r5
 8003448:	eb49 0906 	adc.w	r9, r9, r6
 800344c:	f04f 0100 	mov.w	r1, #0
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003458:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800345c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003460:	4688      	mov	r8, r1
 8003462:	4691      	mov	r9, r2
 8003464:	eb18 0005 	adds.w	r0, r8, r5
 8003468:	eb49 0106 	adc.w	r1, r9, r6
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	461d      	mov	r5, r3
 8003472:	f04f 0600 	mov.w	r6, #0
 8003476:	196b      	adds	r3, r5, r5
 8003478:	eb46 0406 	adc.w	r4, r6, r6
 800347c:	461a      	mov	r2, r3
 800347e:	4623      	mov	r3, r4
 8003480:	f7fc ff06 	bl	8000290 <__aeabi_uldivmod>
 8003484:	4603      	mov	r3, r0
 8003486:	460c      	mov	r4, r1
 8003488:	461a      	mov	r2, r3
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <UART_SetConfig+0x384>)
 800348c:	fba3 2302 	umull	r2, r3, r3, r2
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	461d      	mov	r5, r3
 800349a:	f04f 0600 	mov.w	r6, #0
 800349e:	46a9      	mov	r9, r5
 80034a0:	46b2      	mov	sl, r6
 80034a2:	eb19 0309 	adds.w	r3, r9, r9
 80034a6:	eb4a 040a 	adc.w	r4, sl, sl
 80034aa:	4699      	mov	r9, r3
 80034ac:	46a2      	mov	sl, r4
 80034ae:	eb19 0905 	adds.w	r9, r9, r5
 80034b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034ca:	4689      	mov	r9, r1
 80034cc:	4692      	mov	sl, r2
 80034ce:	eb19 0005 	adds.w	r0, r9, r5
 80034d2:	eb4a 0106 	adc.w	r1, sl, r6
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	461d      	mov	r5, r3
 80034dc:	f04f 0600 	mov.w	r6, #0
 80034e0:	196b      	adds	r3, r5, r5
 80034e2:	eb46 0406 	adc.w	r4, r6, r6
 80034e6:	461a      	mov	r2, r3
 80034e8:	4623      	mov	r3, r4
 80034ea:	f7fc fed1 	bl	8000290 <__aeabi_uldivmod>
 80034ee:	4603      	mov	r3, r0
 80034f0:	460c      	mov	r4, r1
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b2c      	ldr	r3, [pc, #176]	; (80035a8 <UART_SetConfig+0x384>)
 80034f6:	fba3 1302 	umull	r1, r3, r3, r2
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2164      	movs	r1, #100	; 0x64
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	3332      	adds	r3, #50	; 0x32
 8003508:	4a27      	ldr	r2, [pc, #156]	; (80035a8 <UART_SetConfig+0x384>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003516:	4498      	add	r8, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	461d      	mov	r5, r3
 800351c:	f04f 0600 	mov.w	r6, #0
 8003520:	46a9      	mov	r9, r5
 8003522:	46b2      	mov	sl, r6
 8003524:	eb19 0309 	adds.w	r3, r9, r9
 8003528:	eb4a 040a 	adc.w	r4, sl, sl
 800352c:	4699      	mov	r9, r3
 800352e:	46a2      	mov	sl, r4
 8003530:	eb19 0905 	adds.w	r9, r9, r5
 8003534:	eb4a 0a06 	adc.w	sl, sl, r6
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003544:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003548:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800354c:	4689      	mov	r9, r1
 800354e:	4692      	mov	sl, r2
 8003550:	eb19 0005 	adds.w	r0, r9, r5
 8003554:	eb4a 0106 	adc.w	r1, sl, r6
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	461d      	mov	r5, r3
 800355e:	f04f 0600 	mov.w	r6, #0
 8003562:	196b      	adds	r3, r5, r5
 8003564:	eb46 0406 	adc.w	r4, r6, r6
 8003568:	461a      	mov	r2, r3
 800356a:	4623      	mov	r3, r4
 800356c:	f7fc fe90 	bl	8000290 <__aeabi_uldivmod>
 8003570:	4603      	mov	r3, r0
 8003572:	460c      	mov	r4, r1
 8003574:	461a      	mov	r2, r3
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <UART_SetConfig+0x384>)
 8003578:	fba3 1302 	umull	r1, r3, r3, r2
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	2164      	movs	r1, #100	; 0x64
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	3332      	adds	r3, #50	; 0x32
 800358a:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <UART_SetConfig+0x384>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	f003 0207 	and.w	r2, r3, #7
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4442      	add	r2, r8
 800359c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800359e:	e1b2      	b.n	8003906 <UART_SetConfig+0x6e2>
 80035a0:	40011000 	.word	0x40011000
 80035a4:	40011400 	.word	0x40011400
 80035a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4ad7      	ldr	r2, [pc, #860]	; (8003910 <UART_SetConfig+0x6ec>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d005      	beq.n	80035c2 <UART_SetConfig+0x39e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4ad6      	ldr	r2, [pc, #856]	; (8003914 <UART_SetConfig+0x6f0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	f040 80d1 	bne.w	8003764 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80035c2:	f7fe fecd 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 80035c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	469a      	mov	sl, r3
 80035cc:	f04f 0b00 	mov.w	fp, #0
 80035d0:	46d0      	mov	r8, sl
 80035d2:	46d9      	mov	r9, fp
 80035d4:	eb18 0308 	adds.w	r3, r8, r8
 80035d8:	eb49 0409 	adc.w	r4, r9, r9
 80035dc:	4698      	mov	r8, r3
 80035de:	46a1      	mov	r9, r4
 80035e0:	eb18 080a 	adds.w	r8, r8, sl
 80035e4:	eb49 090b 	adc.w	r9, r9, fp
 80035e8:	f04f 0100 	mov.w	r1, #0
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035fc:	4688      	mov	r8, r1
 80035fe:	4691      	mov	r9, r2
 8003600:	eb1a 0508 	adds.w	r5, sl, r8
 8003604:	eb4b 0609 	adc.w	r6, fp, r9
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4619      	mov	r1, r3
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	f04f 0400 	mov.w	r4, #0
 800361a:	0094      	lsls	r4, r2, #2
 800361c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003620:	008b      	lsls	r3, r1, #2
 8003622:	461a      	mov	r2, r3
 8003624:	4623      	mov	r3, r4
 8003626:	4628      	mov	r0, r5
 8003628:	4631      	mov	r1, r6
 800362a:	f7fc fe31 	bl	8000290 <__aeabi_uldivmod>
 800362e:	4603      	mov	r3, r0
 8003630:	460c      	mov	r4, r1
 8003632:	461a      	mov	r2, r3
 8003634:	4bb8      	ldr	r3, [pc, #736]	; (8003918 <UART_SetConfig+0x6f4>)
 8003636:	fba3 2302 	umull	r2, r3, r3, r2
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	469b      	mov	fp, r3
 8003644:	f04f 0c00 	mov.w	ip, #0
 8003648:	46d9      	mov	r9, fp
 800364a:	46e2      	mov	sl, ip
 800364c:	eb19 0309 	adds.w	r3, r9, r9
 8003650:	eb4a 040a 	adc.w	r4, sl, sl
 8003654:	4699      	mov	r9, r3
 8003656:	46a2      	mov	sl, r4
 8003658:	eb19 090b 	adds.w	r9, r9, fp
 800365c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003660:	f04f 0100 	mov.w	r1, #0
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800366c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003670:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003674:	4689      	mov	r9, r1
 8003676:	4692      	mov	sl, r2
 8003678:	eb1b 0509 	adds.w	r5, fp, r9
 800367c:	eb4c 060a 	adc.w	r6, ip, sl
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4619      	mov	r1, r3
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	f04f 0400 	mov.w	r4, #0
 8003692:	0094      	lsls	r4, r2, #2
 8003694:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003698:	008b      	lsls	r3, r1, #2
 800369a:	461a      	mov	r2, r3
 800369c:	4623      	mov	r3, r4
 800369e:	4628      	mov	r0, r5
 80036a0:	4631      	mov	r1, r6
 80036a2:	f7fc fdf5 	bl	8000290 <__aeabi_uldivmod>
 80036a6:	4603      	mov	r3, r0
 80036a8:	460c      	mov	r4, r1
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b9a      	ldr	r3, [pc, #616]	; (8003918 <UART_SetConfig+0x6f4>)
 80036ae:	fba3 1302 	umull	r1, r3, r3, r2
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2164      	movs	r1, #100	; 0x64
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	3332      	adds	r3, #50	; 0x32
 80036c0:	4a95      	ldr	r2, [pc, #596]	; (8003918 <UART_SetConfig+0x6f4>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036cc:	4498      	add	r8, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	469b      	mov	fp, r3
 80036d2:	f04f 0c00 	mov.w	ip, #0
 80036d6:	46d9      	mov	r9, fp
 80036d8:	46e2      	mov	sl, ip
 80036da:	eb19 0309 	adds.w	r3, r9, r9
 80036de:	eb4a 040a 	adc.w	r4, sl, sl
 80036e2:	4699      	mov	r9, r3
 80036e4:	46a2      	mov	sl, r4
 80036e6:	eb19 090b 	adds.w	r9, r9, fp
 80036ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003702:	4689      	mov	r9, r1
 8003704:	4692      	mov	sl, r2
 8003706:	eb1b 0509 	adds.w	r5, fp, r9
 800370a:	eb4c 060a 	adc.w	r6, ip, sl
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4619      	mov	r1, r3
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	f04f 0400 	mov.w	r4, #0
 8003720:	0094      	lsls	r4, r2, #2
 8003722:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003726:	008b      	lsls	r3, r1, #2
 8003728:	461a      	mov	r2, r3
 800372a:	4623      	mov	r3, r4
 800372c:	4628      	mov	r0, r5
 800372e:	4631      	mov	r1, r6
 8003730:	f7fc fdae 	bl	8000290 <__aeabi_uldivmod>
 8003734:	4603      	mov	r3, r0
 8003736:	460c      	mov	r4, r1
 8003738:	461a      	mov	r2, r3
 800373a:	4b77      	ldr	r3, [pc, #476]	; (8003918 <UART_SetConfig+0x6f4>)
 800373c:	fba3 1302 	umull	r1, r3, r3, r2
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	2164      	movs	r1, #100	; 0x64
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	3332      	adds	r3, #50	; 0x32
 800374e:	4a72      	ldr	r2, [pc, #456]	; (8003918 <UART_SetConfig+0x6f4>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	f003 020f 	and.w	r2, r3, #15
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4442      	add	r2, r8
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	e0d0      	b.n	8003906 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003764:	f7fe fde8 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8003768:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	469a      	mov	sl, r3
 800376e:	f04f 0b00 	mov.w	fp, #0
 8003772:	46d0      	mov	r8, sl
 8003774:	46d9      	mov	r9, fp
 8003776:	eb18 0308 	adds.w	r3, r8, r8
 800377a:	eb49 0409 	adc.w	r4, r9, r9
 800377e:	4698      	mov	r8, r3
 8003780:	46a1      	mov	r9, r4
 8003782:	eb18 080a 	adds.w	r8, r8, sl
 8003786:	eb49 090b 	adc.w	r9, r9, fp
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003796:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800379a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800379e:	4688      	mov	r8, r1
 80037a0:	4691      	mov	r9, r2
 80037a2:	eb1a 0508 	adds.w	r5, sl, r8
 80037a6:	eb4b 0609 	adc.w	r6, fp, r9
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4619      	mov	r1, r3
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	f04f 0400 	mov.w	r4, #0
 80037bc:	0094      	lsls	r4, r2, #2
 80037be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037c2:	008b      	lsls	r3, r1, #2
 80037c4:	461a      	mov	r2, r3
 80037c6:	4623      	mov	r3, r4
 80037c8:	4628      	mov	r0, r5
 80037ca:	4631      	mov	r1, r6
 80037cc:	f7fc fd60 	bl	8000290 <__aeabi_uldivmod>
 80037d0:	4603      	mov	r3, r0
 80037d2:	460c      	mov	r4, r1
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b50      	ldr	r3, [pc, #320]	; (8003918 <UART_SetConfig+0x6f4>)
 80037d8:	fba3 2302 	umull	r2, r3, r3, r2
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	469b      	mov	fp, r3
 80037e6:	f04f 0c00 	mov.w	ip, #0
 80037ea:	46d9      	mov	r9, fp
 80037ec:	46e2      	mov	sl, ip
 80037ee:	eb19 0309 	adds.w	r3, r9, r9
 80037f2:	eb4a 040a 	adc.w	r4, sl, sl
 80037f6:	4699      	mov	r9, r3
 80037f8:	46a2      	mov	sl, r4
 80037fa:	eb19 090b 	adds.w	r9, r9, fp
 80037fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800380e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003812:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003816:	4689      	mov	r9, r1
 8003818:	4692      	mov	sl, r2
 800381a:	eb1b 0509 	adds.w	r5, fp, r9
 800381e:	eb4c 060a 	adc.w	r6, ip, sl
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4619      	mov	r1, r3
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	f04f 0400 	mov.w	r4, #0
 8003834:	0094      	lsls	r4, r2, #2
 8003836:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800383a:	008b      	lsls	r3, r1, #2
 800383c:	461a      	mov	r2, r3
 800383e:	4623      	mov	r3, r4
 8003840:	4628      	mov	r0, r5
 8003842:	4631      	mov	r1, r6
 8003844:	f7fc fd24 	bl	8000290 <__aeabi_uldivmod>
 8003848:	4603      	mov	r3, r0
 800384a:	460c      	mov	r4, r1
 800384c:	461a      	mov	r2, r3
 800384e:	4b32      	ldr	r3, [pc, #200]	; (8003918 <UART_SetConfig+0x6f4>)
 8003850:	fba3 1302 	umull	r1, r3, r3, r2
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	2164      	movs	r1, #100	; 0x64
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	3332      	adds	r3, #50	; 0x32
 8003862:	4a2d      	ldr	r2, [pc, #180]	; (8003918 <UART_SetConfig+0x6f4>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386e:	4498      	add	r8, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	469b      	mov	fp, r3
 8003874:	f04f 0c00 	mov.w	ip, #0
 8003878:	46d9      	mov	r9, fp
 800387a:	46e2      	mov	sl, ip
 800387c:	eb19 0309 	adds.w	r3, r9, r9
 8003880:	eb4a 040a 	adc.w	r4, sl, sl
 8003884:	4699      	mov	r9, r3
 8003886:	46a2      	mov	sl, r4
 8003888:	eb19 090b 	adds.w	r9, r9, fp
 800388c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003890:	f04f 0100 	mov.w	r1, #0
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800389c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038a4:	4689      	mov	r9, r1
 80038a6:	4692      	mov	sl, r2
 80038a8:	eb1b 0509 	adds.w	r5, fp, r9
 80038ac:	eb4c 060a 	adc.w	r6, ip, sl
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4619      	mov	r1, r3
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	f04f 0400 	mov.w	r4, #0
 80038c2:	0094      	lsls	r4, r2, #2
 80038c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038c8:	008b      	lsls	r3, r1, #2
 80038ca:	461a      	mov	r2, r3
 80038cc:	4623      	mov	r3, r4
 80038ce:	4628      	mov	r0, r5
 80038d0:	4631      	mov	r1, r6
 80038d2:	f7fc fcdd 	bl	8000290 <__aeabi_uldivmod>
 80038d6:	4603      	mov	r3, r0
 80038d8:	460c      	mov	r4, r1
 80038da:	461a      	mov	r2, r3
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <UART_SetConfig+0x6f4>)
 80038de:	fba3 1302 	umull	r1, r3, r3, r2
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	2164      	movs	r1, #100	; 0x64
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	3332      	adds	r3, #50	; 0x32
 80038f0:	4a09      	ldr	r2, [pc, #36]	; (8003918 <UART_SetConfig+0x6f4>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	f003 020f 	and.w	r2, r3, #15
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4442      	add	r2, r8
 8003902:	609a      	str	r2, [r3, #8]
}
 8003904:	e7ff      	b.n	8003906 <UART_SetConfig+0x6e2>
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003910:	40011000 	.word	0x40011000
 8003914:	40011400 	.word	0x40011400
 8003918:	51eb851f 	.word	0x51eb851f

0800391c <_ZN13DisplayDriverC1Ev>:
 */

#ifndef INC_DISPLAYDRIVER_H_
#define INC_DISPLAYDRIVER_H_

class DisplayDriver {
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <_ZN13DisplayDriverC1Ev+0x1c>)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	0800566c 	.word	0x0800566c

0800393c <_ZN13LedSingleWireC1ENS_6FormatEht>:

#define LEAD_IN 4
#define LEAD_OUT 4


LedSingleWire::LedSingleWire(Format format, uint8_t strandCount,
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
 8003948:	461a      	mov	r2, r3
 800394a:	4603      	mov	r3, r0
 800394c:	70fb      	strb	r3, [r7, #3]
 800394e:	460b      	mov	r3, r1
 8003950:	70bb      	strb	r3, [r7, #2]
 8003952:	4613      	mov	r3, r2
 8003954:	803b      	strh	r3, [r7, #0]
		uint16_t pixelCount) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ffdf 	bl	800391c <_ZN13DisplayDriverC1Ev>
 800395e:	4a13      	ldr	r2, [pc, #76]	; (80039ac <_ZN13LedSingleWireC1ENS_6FormatEht+0x70>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	601a      	str	r2, [r3, #0]
	this->format = format;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	711a      	strb	r2, [r3, #4]
	this->strandCount = strandCount;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	78ba      	ldrb	r2, [r7, #2]
 800396e:	719a      	strb	r2, [r3, #6]

	switch (this->format) {
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	791b      	ldrb	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <_ZN13LedSingleWireC1ENS_6FormatEht+0x44>
	case RGBW:
		this->bytesPerPixel = 4;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2204      	movs	r2, #4
 800397c:	715a      	strb	r2, [r3, #5]
		break;
 800397e:	bf00      	nop
	}

	//Each time division will be ~ 0.3uS.  0 looks like 0.3us/0.9us.  1 looks like 0.6us/0.6us so
	//each bit requires 4 time divisions
	this->pixelCount = pixelCount;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	883a      	ldrh	r2, [r7, #0]
 8003984:	811a      	strh	r2, [r3, #8]
	this->bufferLength = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixelCount) + LEAD_IN + LEAD_OUT;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	795b      	ldrb	r3, [r3, #5]
 800398a:	b29b      	uxth	r3, r3
 800398c:	883a      	ldrh	r2, [r7, #0]
 800398e:	fb12 f303 	smulbb	r3, r2, r3
 8003992:	b29b      	uxth	r3, r3
 8003994:	015b      	lsls	r3, r3, #5
 8003996:	b29b      	uxth	r3, r3
 8003998:	3308      	adds	r3, #8
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	815a      	strh	r2, [r3, #10]
}
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	08005654 	.word	0x08005654

080039b0 <_ZN13LedSingleWire4OpenEv>:

void LedSingleWire::Open() {
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af04      	add	r7, sp, #16
 80039b6:	6078      	str	r0, [r7, #4]
	buffer = new uint16_t[this->bufferLength];
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	895b      	ldrh	r3, [r3, #10]
 80039bc:	4a36      	ldr	r2, [pc, #216]	; (8003a98 <_ZN13LedSingleWire4OpenEv+0xe8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d801      	bhi.n	80039c6 <_ZN13LedSingleWire4OpenEv+0x16>
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	e001      	b.n	80039ca <_ZN13LedSingleWire4OpenEv+0x1a>
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 f91b 	bl	8004c06 <_Znaj>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]

	//Blanks the string

	for (uint16_t offset = 0; offset < bufferLength; offset++) {
 80039d8:	2300      	movs	r3, #0
 80039da:	81fb      	strh	r3, [r7, #14]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	895b      	ldrh	r3, [r3, #10]
 80039e0:	89fa      	ldrh	r2, [r7, #14]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d219      	bcs.n	8003a1a <_ZN13LedSingleWire4OpenEv+0x6a>
		if(offset < LEAD_IN || offset > LEAD_OUT) {
 80039e6:	89fb      	ldrh	r3, [r7, #14]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d902      	bls.n	80039f2 <_ZN13LedSingleWire4OpenEv+0x42>
 80039ec:	89fb      	ldrh	r3, [r7, #14]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d907      	bls.n	8003a02 <_ZN13LedSingleWire4OpenEv+0x52>
			buffer[offset] = 0x0000;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	89fb      	ldrh	r3, [r7, #14]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	4413      	add	r3, r2
 80039fc:	2200      	movs	r2, #0
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	e007      	b.n	8003a12 <_ZN13LedSingleWire4OpenEv+0x62>
		} else {
			buffer[offset] = 0xFFFF;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	89fb      	ldrh	r3, [r7, #14]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a10:	801a      	strh	r2, [r3, #0]
	for (uint16_t offset = 0; offset < bufferLength; offset++) {
 8003a12:	89fb      	ldrh	r3, [r7, #14]
 8003a14:	3301      	adds	r3, #1
 8003a16:	81fb      	strh	r3, [r7, #14]
 8003a18:	e7e0      	b.n	80039dc <_ZN13LedSingleWire4OpenEv+0x2c>
		}
	}

	for (uint8_t strand = 0; strand < strandCount; strand++) {
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	737b      	strb	r3, [r7, #13]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	799b      	ldrb	r3, [r3, #6]
 8003a22:	7b7a      	ldrb	r2, [r7, #13]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d21e      	bcs.n	8003a66 <_ZN13LedSingleWire4OpenEv+0xb6>
		for (uint16_t pixel = 0; pixel < pixelCount; pixel++) {
 8003a28:	2300      	movs	r3, #0
 8003a2a:	817b      	strh	r3, [r7, #10]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	891b      	ldrh	r3, [r3, #8]
 8003a30:	897a      	ldrh	r2, [r7, #10]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d213      	bcs.n	8003a5e <_ZN13LedSingleWire4OpenEv+0xae>
			SetPixel(strand, pixel, 0, 0, 0, 0);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	681c      	ldr	r4, [r3, #0]
 8003a3e:	7b7b      	ldrb	r3, [r7, #13]
 8003a40:	b299      	uxth	r1, r3
 8003a42:	897a      	ldrh	r2, [r7, #10]
 8003a44:	2300      	movs	r3, #0
 8003a46:	9302      	str	r3, [sp, #8]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	47a0      	blx	r4
		for (uint16_t pixel = 0; pixel < pixelCount; pixel++) {
 8003a56:	897b      	ldrh	r3, [r7, #10]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	817b      	strh	r3, [r7, #10]
 8003a5c:	e7e6      	b.n	8003a2c <_ZN13LedSingleWire4OpenEv+0x7c>
	for (uint8_t strand = 0; strand < strandCount; strand++) {
 8003a5e:	7b7b      	ldrb	r3, [r7, #13]
 8003a60:	3301      	adds	r3, #1
 8003a62:	737b      	strb	r3, [r7, #13]
 8003a64:	e7db      	b.n	8003a1e <_ZN13LedSingleWire4OpenEv+0x6e>
		}
	}

	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <_ZN13LedSingleWire4OpenEv+0xec>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <_ZN13LedSingleWire4OpenEv+0xec>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a74:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <_ZN13LedSingleWire4OpenEv+0xec>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff f9ba 	bl	8002df8 <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start_IT(&htim1);
 8003a84:	4805      	ldr	r0, [pc, #20]	; (8003a9c <_ZN13LedSingleWire4OpenEv+0xec>)
 8003a86:	f7fe fd0e 	bl	80024a6 <HAL_TIM_Base_Start_IT>

	StartNextDma();
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8d6 	bl	8003c3c <_ZN13LedSingleWire12StartNextDmaEv>
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd90      	pop	{r4, r7, pc}
 8003a98:	3ffffffc 	.word	0x3ffffffc
 8003a9c:	2000065c 	.word	0x2000065c

08003aa0 <_ZN13LedSingleWire5CloseEv>:

void LedSingleWire::Close() {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	delete buffer;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 f8ab 	bl	8004c0a <_ZdlPvj>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_ZN13LedSingleWire8SetPixelEtthhhh>:

void LedSingleWire::SetPixel(uint16_t pixel, uint16_t strand, uint8_t r,
		uint8_t g, uint8_t b, uint8_t w) {
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	; 0x24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	817b      	strh	r3, [r7, #10]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	813b      	strh	r3, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	71fb      	strb	r3, [r7, #7]
	uint16_t strandMask = 0x00;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	837b      	strh	r3, [r7, #26]

	uint16_t offset = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixel) + LEAD_IN;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	795b      	ldrb	r3, [r3, #5]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	897a      	ldrh	r2, [r7, #10]
 8003ae2:	fb12 f303 	smulbb	r3, r2, r3
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	015b      	lsls	r3, r3, #5
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3304      	adds	r3, #4
 8003aee:	83fb      	strh	r3, [r7, #30]

	switch (strand) {
 8003af0:	893b      	ldrh	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d000      	beq.n	8003af8 <_ZN13LedSingleWire8SetPixelEtthhhh+0x3c>
	case 0:
		strandMask = LED_0_Pin;
		break;
	default:
		//Strand is not configured
		return;
 8003af6:	e091      	b.n	8003c1c <_ZN13LedSingleWire8SetPixelEtthhhh+0x160>
		strandMask = LED_0_Pin;
 8003af8:	2302      	movs	r3, #2
 8003afa:	837b      	strh	r3, [r7, #26]
		break;
 8003afc:	bf00      	nop
	}

	uint32_t data = r << 24
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	061a      	lsls	r2, r3, #24
			| g << 16
 8003b02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	431a      	orrs	r2, r3
			| b << 8
 8003b0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	431a      	orrs	r2, r3
			| w ; //w
 8003b12:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b16:	4313      	orrs	r3, r2
	uint32_t data = r << 24
 8003b18:	617b      	str	r3, [r7, #20]

	for (int8_t bit = 31; bit >= 0; bit--) {
 8003b1a:	231f      	movs	r3, #31
 8003b1c:	777b      	strb	r3, [r7, #29]
 8003b1e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	db7a      	blt.n	8003c1c <_ZN13LedSingleWire8SetPixelEtthhhh+0x160>
		buffer[offset] = buffer[offset] | strandMask;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	8bfb      	ldrh	r3, [r7, #30]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4413      	add	r3, r2
 8003b30:	8819      	ldrh	r1, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	8bfb      	ldrh	r3, [r7, #30]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	8b7a      	ldrh	r2, [r7, #26]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	b292      	uxth	r2, r2
 8003b42:	801a      	strh	r2, [r3, #0]
		offset++;
 8003b44:	8bfb      	ldrh	r3, [r7, #30]
 8003b46:	3301      	adds	r3, #1
 8003b48:	83fb      	strh	r3, [r7, #30]
		if (data & (0x01 << bit)) {
 8003b4a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d012      	beq.n	8003b84 <_ZN13LedSingleWire8SetPixelEtthhhh+0xc8>
			buffer[offset] = buffer[offset] | strandMask;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	8bfb      	ldrh	r3, [r7, #30]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	4413      	add	r3, r2
 8003b68:	8819      	ldrh	r1, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	8bfb      	ldrh	r3, [r7, #30]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	4413      	add	r3, r2
 8003b74:	8b7a      	ldrh	r2, [r7, #26]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	801a      	strh	r2, [r3, #0]
			offset++;
 8003b7c:	8bfb      	ldrh	r3, [r7, #30]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	83fb      	strh	r3, [r7, #30]
 8003b82:	e016      	b.n	8003bb2 <_ZN13LedSingleWire8SetPixelEtthhhh+0xf6>
		} else {
			buffer[offset] = buffer[offset] & ~strandMask;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	8bfb      	ldrh	r3, [r7, #30]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	b21a      	sxth	r2, r3
 8003b92:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	b21b      	sxth	r3, r3
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	b219      	sxth	r1, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	8bfb      	ldrh	r3, [r7, #30]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	b28a      	uxth	r2, r1
 8003baa:	801a      	strh	r2, [r3, #0]
			offset++;
 8003bac:	8bfb      	ldrh	r3, [r7, #30]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	83fb      	strh	r3, [r7, #30]
		}
		buffer[offset] = buffer[offset] & ~strandMask;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	8bfb      	ldrh	r3, [r7, #30]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b21a      	sxth	r2, r3
 8003bc0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	b21b      	sxth	r3, r3
 8003bc8:	4013      	ands	r3, r2
 8003bca:	b219      	sxth	r1, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	8bfb      	ldrh	r3, [r7, #30]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	b28a      	uxth	r2, r1
 8003bd8:	801a      	strh	r2, [r3, #0]
		offset++;
 8003bda:	8bfb      	ldrh	r3, [r7, #30]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	83fb      	strh	r3, [r7, #30]
		buffer[offset] = buffer[offset] & ~strandMask;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	8bfb      	ldrh	r3, [r7, #30]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	b21a      	sxth	r2, r3
 8003bee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	b21b      	sxth	r3, r3
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	b219      	sxth	r1, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	8bfb      	ldrh	r3, [r7, #30]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	b28a      	uxth	r2, r1
 8003c06:	801a      	strh	r2, [r3, #0]
		offset++;
 8003c08:	8bfb      	ldrh	r3, [r7, #30]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	83fb      	strh	r3, [r7, #30]
	for (int8_t bit = 31; bit >= 0; bit--) {
 8003c0e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	777b      	strb	r3, [r7, #29]
 8003c1a:	e780      	b.n	8003b1e <_ZN13LedSingleWire8SetPixelEtthhhh+0x62>
	}
}
 8003c1c:	3724      	adds	r7, #36	; 0x24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <_ZN13LedSingleWire10SwapBufferEv>:

void LedSingleWire::SwapBuffer() {
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
	StartNextDma();
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f804 	bl	8003c3c <_ZN13LedSingleWire12StartNextDmaEv>
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <_ZN13LedSingleWire12StartNextDmaEv>:

void LedSingleWire::StartNextDma() {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	//Reset signal
	LED_CLK_GPIO_Port->ODR = 0x00;
 8003c44:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <_ZN13LedSingleWire12StartNextDmaEv+0x40>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	615a      	str	r2, [r3, #20]
	HAL_Delay(80);
 8003c4a:	2050      	movs	r0, #80	; 0x50
 8003c4c:	f7fd f900 	bl	8000e50 <HAL_Delay>

	//14 is 300nS
	htim1.Instance->ARR = 18;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <_ZN13LedSingleWire12StartNextDmaEv+0x44>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2212      	movs	r2, #18
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->EGR = TIM_EGR_UG;
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <_ZN13LedSingleWire12StartNextDmaEv+0x44>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	615a      	str	r2, [r3, #20]

	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) buffer,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4619      	mov	r1, r3
			(uint32_t) &(LED_CLK_GPIO_Port->ODR), bufferLength);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	895b      	ldrh	r3, [r3, #10]
	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) buffer,
 8003c6a:	4a06      	ldr	r2, [pc, #24]	; (8003c84 <_ZN13LedSingleWire12StartNextDmaEv+0x48>)
 8003c6c:	4806      	ldr	r0, [pc, #24]	; (8003c88 <_ZN13LedSingleWire12StartNextDmaEv+0x4c>)
 8003c6e:	f7fd fad1 	bl	8001214 <HAL_DMA_Start_IT>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40020000 	.word	0x40020000
 8003c80:	2000065c 	.word	0x2000065c
 8003c84:	40020014 	.word	0x40020014
 8003c88:	200005bc 	.word	0x200005bc

08003c8c <_Z12DMA_CompleteP19__DMA_HandleTypeDef>:
//		instance->handleNeeded = true;
//		instance->Handle();
//	}
//}

void DMA_Complete(DMA_HandleTypeDef *hdma) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	instance->Handle();
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x1c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fb5b 	bl	8004354 <_ZN12MatrixDriver6HandleEv>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000194 	.word	0x20000194

08003cac <_Z9DMA_AbortP19__DMA_HandleTypeDef>:

void DMA_Abort(DMA_HandleTypeDef *hdma) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	instance->Handle();
 8003cb4:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <_Z9DMA_AbortP19__DMA_HandleTypeDef+0x1c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fb4b 	bl	8004354 <_ZN12MatrixDriver6HandleEv>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000194 	.word	0x20000194

08003ccc <_Z9DMA_ErrorP19__DMA_HandleTypeDef>:

void DMA_Error(DMA_HandleTypeDef *hdma) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_LOGGING
	sprintf(buffer, "DE - %d %d\n", hdma_tim1_ch1.State,
			hdma_tim1_ch1.ErrorCode);
#endif

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
 8003cd4:	4806      	ldr	r0, [pc, #24]	; (8003cf0 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x24>)
 8003cd6:	f7fc fa83 	bl	80001e0 <strlen>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	230a      	movs	r3, #10
 8003ce0:	4903      	ldr	r1, [pc, #12]	; (8003cf0 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x24>)
 8003ce2:	4804      	ldr	r0, [pc, #16]	; (8003cf4 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x28>)
 8003ce4:	f7ff f9bb 	bl	800305e <HAL_UART_Transmit>
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000198 	.word	0x20000198
 8003cf4:	2000061c 	.word	0x2000061c

08003cf8 <_ZN12MatrixDriver12BufferOffsetEtth>:
// -- Row - y % (height / 2) - Top and bottom half of the panel are in the same output cycle
// ---- Pixel - 0 and 1 data lines, select lines for previously sent row (to keep it displaying while new data is clocked in to the shift registers)
// ------ Offset - Set data
// ------ Offset + 1 - Clock data
// ---- OE & Latch
uint16_t MatrixDriver::BufferOffset(uint16_t x, uint16_t y, uint8_t plane) {
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	4608      	mov	r0, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	461a      	mov	r2, r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	817b      	strh	r3, [r7, #10]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	813b      	strh	r3, [r7, #8]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	71fb      	strb	r3, [r7, #7]
	uint16_t rowEntry = y % (height / 2);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	88db      	ldrh	r3, [r3, #6]
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	893b      	ldrh	r3, [r7, #8]
 8003d1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d20:	fb02 f201 	mul.w	r2, r2, r1
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	82fb      	strh	r3, [r7, #22]
	uint16_t rowOffset = rowEntry
			* ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	889b      	ldrh	r3, [r3, #4]
	uint16_t rowOffset = rowEntry
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	8afa      	ldrh	r2, [r7, #22]
 8003d32:	fb12 f303 	smulbb	r3, r2, r3
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	82bb      	strh	r3, [r7, #20]
	uint16_t offsetInRow = ((width - 1) - x) * CYCLES_PER_PIXEL;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	889b      	ldrh	r3, [r3, #4]
 8003d40:	1e5a      	subs	r2, r3, #1
 8003d42:	897b      	ldrh	r3, [r7, #10]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	827b      	strh	r3, [r7, #18]

	return (plane * planeSize) + rowOffset + offsetInRow;
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	899b      	ldrh	r3, [r3, #12]
 8003d54:	fb12 f303 	smulbb	r3, r2, r3
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	8abb      	ldrh	r3, [r7, #20]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	8a7b      	ldrh	r3, [r7, #18]
 8003d62:	4413      	add	r3, r2
 8003d64:	b29b      	uxth	r3, r3
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <_ZN12MatrixDriverC1EttNS_8ScanTypeE>:

#define MIN(a,b) (((a)<(b))?(a):(b))

MatrixDriver::MatrixDriver(uint16_t width, uint16_t height, ScanType scanType) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	817b      	strh	r3, [r7, #10]
 8003d86:	460b      	mov	r3, r1
 8003d88:	813b      	strh	r3, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	71fb      	strb	r3, [r7, #7]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fdc3 	bl	800391c <_ZN13DisplayDriverC1Ev>
 8003d96:	4a1a      	ldr	r2, [pc, #104]	; (8003e00 <_ZN12MatrixDriverC1EttNS_8ScanTypeE+0x8c>)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	72da      	strb	r2, [r3, #11]
	this->width = width;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	897a      	ldrh	r2, [r7, #10]
 8003da6:	809a      	strh	r2, [r3, #4]
	this->height = height;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	893a      	ldrh	r2, [r7, #8]
 8003dac:	80da      	strh	r2, [r3, #6]
	this->scanType = scanType;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	79fa      	ldrb	r2, [r7, #7]
 8003db2:	725a      	strb	r2, [r3, #9]
	this->planes = PLANES;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2204      	movs	r2, #4
 8003db8:	721a      	strb	r2, [r3, #8]

	this->planeSize = ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES)
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	b29a      	uxth	r2, r3
			* (height / 2);
 8003dc0:	893b      	ldrh	r3, [r7, #8]
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	b29b      	uxth	r3, r3
	this->planeSize = ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES)
 8003dc6:	fb12 f303 	smulbb	r3, r2, r3
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	819a      	strh	r2, [r3, #12]
	this->bufferSize = planeSize * planes;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	899a      	ldrh	r2, [r3, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	7a1b      	ldrb	r3, [r3, #8]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	fb12 f303 	smulbb	r3, r2, r3
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	81da      	strh	r2, [r3, #14]

	this->sendBufferA = true;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	729a      	strb	r2, [r3, #10]

	instance = this;
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <_ZN12MatrixDriverC1EttNS_8ScanTypeE+0x90>)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6013      	str	r3, [r2, #0]
}
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	08005688 	.word	0x08005688
 8003e04:	20000194 	.word	0x20000194

08003e08 <_ZN12MatrixDriver4OpenEv>:

void MatrixDriver::Open() {
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b08b      	sub	sp, #44	; 0x2c
 8003e0c:	af04      	add	r7, sp, #16
 8003e0e:	6078      	str	r0, [r7, #4]
	this->bufferA = new uint16_t[bufferSize];
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	89db      	ldrh	r3, [r3, #14]
 8003e14:	4a8f      	ldr	r2, [pc, #572]	; (8004054 <_ZN12MatrixDriver4OpenEv+0x24c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d801      	bhi.n	8003e1e <_ZN12MatrixDriver4OpenEv+0x16>
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	e001      	b.n	8003e22 <_ZN12MatrixDriver4OpenEv+0x1a>
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 feef 	bl	8004c06 <_Znaj>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	611a      	str	r2, [r3, #16]
	this->bufferB = new uint16_t[bufferSize];
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	89db      	ldrh	r3, [r3, #14]
 8003e34:	4a87      	ldr	r2, [pc, #540]	; (8004054 <_ZN12MatrixDriver4OpenEv+0x24c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d801      	bhi.n	8003e3e <_ZN12MatrixDriver4OpenEv+0x36>
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	e001      	b.n	8003e42 <_ZN12MatrixDriver4OpenEv+0x3a>
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fedf 	bl	8004c06 <_Znaj>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	615a      	str	r2, [r3, #20]

	for (uint8_t y = 0; y < height / 2; y++) {
 8003e50:	2300      	movs	r3, #0
 8003e52:	75fb      	strb	r3, [r7, #23]
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	88d2      	ldrh	r2, [r2, #6]
 8003e5a:	0852      	lsrs	r2, r2, #1
 8003e5c:	b292      	uxth	r2, r2
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	f280 80fa 	bge.w	8004058 <_ZN12MatrixDriver4OpenEv+0x250>

		uint8_t previousRow = y == 0 ? (height / 2) - 1 : y - 1;
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d107      	bne.n	8003e7a <_ZN12MatrixDriver4OpenEv+0x72>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	88db      	ldrh	r3, [r3, #6]
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	e002      	b.n	8003e80 <_ZN12MatrixDriver4OpenEv+0x78>
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	753b      	strb	r3, [r7, #20]

		uint16_t rowSelects =
		SET_IF(previousRow & 0x01,
 8003e82:	7d3b      	ldrb	r3, [r7, #20]
 8003e84:	015b      	lsls	r3, r3, #5
 8003e86:	b21b      	sxth	r3, r3
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	b21a      	sxth	r2, r3
				Matrix_A_Pin) |SET_IF(previousRow & 0x02, Matrix_B_Pin)
 8003e8e:	7d3b      	ldrb	r3, [r7, #20]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	b21b      	sxth	r3, r3
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	b21b      	sxth	r3, r3
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x04, Matrix_C_Pin)
 8003e9e:	7d3b      	ldrb	r3, [r7, #20]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	b21b      	sxth	r3, r3
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	b21b      	sxth	r3, r3
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x08, Matrix_D_Pin)
 8003eae:	7d3b      	ldrb	r3, [r7, #20]
 8003eb0:	01db      	lsls	r3, r3, #7
 8003eb2:	b21b      	sxth	r3, r3
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb8:	b21b      	sxth	r3, r3
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x10, Matrix_E_Pin);
 8003ebe:	7d3b      	ldrb	r3, [r7, #20]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	b21b      	sxth	r3, r3
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	b21b      	sxth	r3, r3
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	b21b      	sxth	r3, r3
		uint16_t rowSelects =
 8003ece:	827b      	strh	r3, [r7, #18]

		for (uint8_t plane = 0; plane < planes; plane++) {
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	75bb      	strb	r3, [r7, #22]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7a1b      	ldrb	r3, [r3, #8]
 8003ed8:	7dba      	ldrb	r2, [r7, #22]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	f080 80b5 	bcs.w	800404a <_ZN12MatrixDriver4OpenEv+0x242>
			for (uint8_t x = 0; x < width; x++) {
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	757b      	strb	r3, [r7, #21]
 8003ee4:	7d7b      	ldrb	r3, [r7, #21]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	8892      	ldrh	r2, [r2, #4]
 8003eea:	4293      	cmp	r3, r2
 8003eec:	da31      	bge.n	8003f52 <_ZN12MatrixDriver4OpenEv+0x14a>

				uint16_t offset = BufferOffset(x, y, plane);
 8003eee:	7d7b      	ldrb	r3, [r7, #21]
 8003ef0:	b299      	uxth	r1, r3
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	7dbb      	ldrb	r3, [r7, #22]
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fefd 	bl	8003cf8 <_ZN12MatrixDriver12BufferOffsetEtth>
 8003efe:	4603      	mov	r3, r0
 8003f00:	823b      	strh	r3, [r7, #16]

				bufferA[offset] = rowSelects;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	8a3b      	ldrh	r3, [r7, #16]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	8a7a      	ldrh	r2, [r7, #18]
 8003f0e:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = rowSelects;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	8a3b      	ldrh	r3, [r7, #16]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	8a7a      	ldrh	r2, [r7, #18]
 8003f1c:	801a      	strh	r2, [r3, #0]
				bufferA[offset + 1] = rowSelects | Matrix_CLK_Pin;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	8a3b      	ldrh	r3, [r7, #16]
 8003f24:	3301      	adds	r3, #1
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	8a7a      	ldrh	r2, [r7, #18]
 8003f2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f30:	b292      	uxth	r2, r2
 8003f32:	801a      	strh	r2, [r3, #0]
				bufferB[offset + 1] = rowSelects | Matrix_CLK_Pin;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	8a3b      	ldrh	r3, [r7, #16]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	8a7a      	ldrh	r2, [r7, #18]
 8003f42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f46:	b292      	uxth	r2, r2
 8003f48:	801a      	strh	r2, [r3, #0]
			for (uint8_t x = 0; x < width; x++) {
 8003f4a:	7d7b      	ldrb	r3, [r7, #21]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	757b      	strb	r3, [r7, #21]
 8003f50:	e7c8      	b.n	8003ee4 <_ZN12MatrixDriver4OpenEv+0xdc>
			}

			//Setup the final bytes for the row, staring with the output after the last pixel on the current row & plane
			//Disable outputs
			uint16_t offset = BufferOffset(0, y,
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	7dbb      	ldrb	r3, [r7, #22]
 8003f58:	2100      	movs	r1, #0
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fecc 	bl	8003cf8 <_ZN12MatrixDriver12BufferOffsetEtth>
 8003f60:	4603      	mov	r3, r0
					plane) + CYCLES_PER_PIXEL;
 8003f62:	3302      	adds	r3, #2
 8003f64:	81fb      	strh	r3, [r7, #14]

			bufferA[offset] = bufferB[offset] = Matrix_OE_Pin | rowSelects;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	89fb      	ldrh	r3, [r7, #14]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	8a7a      	ldrh	r2, [r7, #18]
 8003f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f76:	b292      	uxth	r2, r2
 8003f78:	801a      	strh	r2, [r3, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6911      	ldr	r1, [r2, #16]
 8003f7e:	89fa      	ldrh	r2, [r7, #14]
 8003f80:	0052      	lsls	r2, r2, #1
 8003f82:	440a      	add	r2, r1
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	8013      	strh	r3, [r2, #0]
			offset++;
 8003f88:	89fb      	ldrh	r3, [r7, #14]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	81fb      	strh	r3, [r7, #14]

			uint16_t currentRowSelects =
			SET_IF(y & 0x01, Matrix_A_Pin) |SET_IF(y & 0x02, Matrix_B_Pin)
 8003f8e:	7dfb      	ldrb	r3, [r7, #23]
 8003f90:	015b      	lsls	r3, r3, #5
 8003f92:	b21b      	sxth	r3, r3
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	b21a      	sxth	r2, r3
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	b21b      	sxth	r3, r3
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	b21b      	sxth	r3, r3
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x04, Matrix_C_Pin)
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	b21b      	sxth	r3, r3
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	b21b      	sxth	r3, r3
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x08, Matrix_D_Pin)
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
 8003fbc:	01db      	lsls	r3, r3, #7
 8003fbe:	b21b      	sxth	r3, r3
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc4:	b21b      	sxth	r3, r3
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x10, Matrix_E_Pin);
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	b21b      	sxth	r3, r3
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	b21b      	sxth	r3, r3
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	b21b      	sxth	r3, r3
			uint16_t currentRowSelects =
 8003fda:	81bb      	strh	r3, [r7, #12]

			//Latch data, select next row, outputs still off
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin | Matrix_OE_Pin
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	89fb      	ldrh	r3, [r7, #14]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	4413      	add	r3, r2
					| currentRowSelects;
 8003fe6:	89ba      	ldrh	r2, [r7, #12]
 8003fe8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003fec:	b292      	uxth	r2, r2
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin | Matrix_OE_Pin
 8003fee:	801a      	strh	r2, [r3, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6911      	ldr	r1, [r2, #16]
 8003ff4:	89fa      	ldrh	r2, [r7, #14]
 8003ff6:	0052      	lsls	r2, r2, #1
 8003ff8:	440a      	add	r2, r1
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	8013      	strh	r3, [r2, #0]

			offset++;
 8003ffe:	89fb      	ldrh	r3, [r7, #14]
 8004000:	3301      	adds	r3, #1
 8004002:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	89ba      	ldrh	r2, [r7, #12]
 8004010:	801a      	strh	r2, [r3, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6911      	ldr	r1, [r2, #16]
 8004016:	89fa      	ldrh	r2, [r7, #14]
 8004018:	0052      	lsls	r2, r2, #1
 800401a:	440a      	add	r2, r1
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	8013      	strh	r3, [r2, #0]

			//Bonus cycle to settle.  Probably not necessary but 3 trailing cycles feels odd
			offset++;
 8004020:	89fb      	ldrh	r3, [r7, #14]
 8004022:	3301      	adds	r3, #1
 8004024:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	89fb      	ldrh	r3, [r7, #14]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	4413      	add	r3, r2
 8004030:	89ba      	ldrh	r2, [r7, #12]
 8004032:	801a      	strh	r2, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6911      	ldr	r1, [r2, #16]
 8004038:	89fa      	ldrh	r2, [r7, #14]
 800403a:	0052      	lsls	r2, r2, #1
 800403c:	440a      	add	r2, r1
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	8013      	strh	r3, [r2, #0]
		for (uint8_t plane = 0; plane < planes; plane++) {
 8004042:	7dbb      	ldrb	r3, [r7, #22]
 8004044:	3301      	adds	r3, #1
 8004046:	75bb      	strb	r3, [r7, #22]
 8004048:	e744      	b.n	8003ed4 <_ZN12MatrixDriver4OpenEv+0xcc>
	for (uint8_t y = 0; y < height / 2; y++) {
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	3301      	adds	r3, #1
 800404e:	75fb      	strb	r3, [r7, #23]
 8004050:	e700      	b.n	8003e54 <_ZN12MatrixDriver4OpenEv+0x4c>
 8004052:	bf00      	nop
 8004054:	3ffffffc 	.word	0x3ffffffc
		}
	}

	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	889b      	ldrh	r3, [r3, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	88db      	ldrh	r3, [r3, #6]
 8004062:	461c      	mov	r4, r3
			bufferSize, planes, planeSize);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	89db      	ldrh	r3, [r3, #14]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8004068:	461a      	mov	r2, r3
			bufferSize, planes, planeSize);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 800406e:	4619      	mov	r1, r3
			bufferSize, planes, planeSize);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	899b      	ldrh	r3, [r3, #12]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8004074:	9302      	str	r3, [sp, #8]
 8004076:	9101      	str	r1, [sp, #4]
 8004078:	9200      	str	r2, [sp, #0]
 800407a:	4623      	mov	r3, r4
 800407c:	4602      	mov	r2, r0
 800407e:	4919      	ldr	r1, [pc, #100]	; (80040e4 <_ZN12MatrixDriver4OpenEv+0x2dc>)
 8004080:	4819      	ldr	r0, [pc, #100]	; (80040e8 <_ZN12MatrixDriver4OpenEv+0x2e0>)
 8004082:	f000 ff35 	bl	8004ef0 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
 8004086:	4818      	ldr	r0, [pc, #96]	; (80040e8 <_ZN12MatrixDriver4OpenEv+0x2e0>)
 8004088:	f7fc f8aa 	bl	80001e0 <strlen>
 800408c:	4603      	mov	r3, r0
 800408e:	b29a      	uxth	r2, r3
 8004090:	230a      	movs	r3, #10
 8004092:	4915      	ldr	r1, [pc, #84]	; (80040e8 <_ZN12MatrixDriver4OpenEv+0x2e0>)
 8004094:	4815      	ldr	r0, [pc, #84]	; (80040ec <_ZN12MatrixDriver4OpenEv+0x2e4>)
 8004096:	f7fe ffe2 	bl	800305e <HAL_UART_Transmit>

	hdma_tim1_ch1.XferAbortCallback = DMA_Abort;
 800409a:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <_ZN12MatrixDriver4OpenEv+0x2e8>)
 800409c:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <_ZN12MatrixDriver4OpenEv+0x2ec>)
 800409e:	651a      	str	r2, [r3, #80]	; 0x50
	hdma_tim1_ch1.XferCpltCallback = DMA_Complete;
 80040a0:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <_ZN12MatrixDriver4OpenEv+0x2e8>)
 80040a2:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <_ZN12MatrixDriver4OpenEv+0x2f0>)
 80040a4:	63da      	str	r2, [r3, #60]	; 0x3c
	hdma_tim1_ch1.XferErrorCallback = DMA_Error;
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <_ZN12MatrixDriver4OpenEv+0x2e8>)
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <_ZN12MatrixDriver4OpenEv+0x2f4>)
 80040aa:	64da      	str	r2, [r3, #76]	; 0x4c

	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 80040ac:	4b14      	ldr	r3, [pc, #80]	; (8004100 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ba:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe fe97 	bl	8002df8 <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start_IT(&htim1);
 80040ca:	480d      	ldr	r0, [pc, #52]	; (8004100 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 80040cc:	f7fe f9eb 	bl	80024a6 <HAL_TIM_Base_Start_IT>

	nextDmaOffset = 0;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	831a      	strh	r2, [r3, #24]

	StartNextDma();
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f95c 	bl	8004394 <_ZN12MatrixDriver12StartNextDmaEv>
}
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd90      	pop	{r4, r7, pc}
 80040e4:	080055a4 	.word	0x080055a4
 80040e8:	20000198 	.word	0x20000198
 80040ec:	2000061c 	.word	0x2000061c
 80040f0:	200005bc 	.word	0x200005bc
 80040f4:	08003cad 	.word	0x08003cad
 80040f8:	08003c8d 	.word	0x08003c8d
 80040fc:	08003ccd 	.word	0x08003ccd
 8004100:	2000065c 	.word	0x2000065c

08004104 <_ZN12MatrixDriver5CloseEv>:

void MatrixDriver::Close() {
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	HAL_DMA_Abort_IT(&hdma_tim1_ch1);
 800410c:	480c      	ldr	r0, [pc, #48]	; (8004140 <_ZN12MatrixDriver5CloseEv+0x3c>)
 800410e:	f7fd f8d9 	bl	80012c4 <HAL_DMA_Abort_IT>

	HAL_TIM_Base_Stop_IT(&htim1);
 8004112:	480c      	ldr	r0, [pc, #48]	; (8004144 <_ZN12MatrixDriver5CloseEv+0x40>)
 8004114:	f7fe f9eb 	bl	80024ee <HAL_TIM_Base_Stop_IT>

	nextDmaOffset = 0;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	831a      	strh	r2, [r3, #24]

	delete this->bufferA;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2102      	movs	r1, #2
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fd70 	bl	8004c0a <_ZdlPvj>
	delete this->bufferB;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2102      	movs	r1, #2
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fd6a 	bl	8004c0a <_ZdlPvj>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	200005bc 	.word	0x200005bc
 8004144:	2000065c 	.word	0x2000065c

08004148 <_ZN12MatrixDriver9PlaneBitsEh>:
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
	value = gamma8[value];
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <_ZN12MatrixDriver9PlaneBitsEh+0x70>)
 8004158:	5cd3      	ldrb	r3, [r2, r3]
 800415a:	70fb      	strb	r3, [r7, #3]

#if PLANES == 8
	return value;
#elif PLANES == 4
	uint8_t result = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	73fb      	strb	r3, [r7, #15]

	if(value > 128) {
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	2b80      	cmp	r3, #128	; 0x80
 8004164:	d906      	bls.n	8004174 <_ZN12MatrixDriver9PlaneBitsEh+0x2c>
		result |= 0x08;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	f043 0308 	orr.w	r3, r3, #8
 800416c:	73fb      	strb	r3, [r7, #15]
		value -=128;
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	3b80      	subs	r3, #128	; 0x80
 8004172:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 64) {
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	d906      	bls.n	8004188 <_ZN12MatrixDriver9PlaneBitsEh+0x40>
		result |= 0x03;
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	f043 0303 	orr.w	r3, r3, #3
 8004180:	73fb      	strb	r3, [r7, #15]
		value -=128;
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	3b80      	subs	r3, #128	; 0x80
 8004186:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 32) {
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	2b20      	cmp	r3, #32
 800418c:	d906      	bls.n	800419c <_ZN12MatrixDriver9PlaneBitsEh+0x54>
		result |= 0x02;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	f043 0302 	orr.w	r3, r3, #2
 8004194:	73fb      	strb	r3, [r7, #15]
		value -=128;
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	3b80      	subs	r3, #128	; 0x80
 800419a:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 8) {
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d903      	bls.n	80041aa <_ZN12MatrixDriver9PlaneBitsEh+0x62>
		result |= 0x01;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]

	return result;
#elif PLANES == 1
	return value > 0 ? 0x01 : 0x00;
#endif
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	2000000c 	.word	0x2000000c

080041bc <_ZN12MatrixDriver8SetPixelEtthhhh>:
//
//		}
//	}
}

void MatrixDriver::SetPixel(uint16_t x, uint16_t y, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08c      	sub	sp, #48	; 0x30
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	817b      	strh	r3, [r7, #10]
 80041ce:	460b      	mov	r3, r1
 80041d0:	813b      	strh	r3, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	71fb      	strb	r3, [r7, #7]
	uint16_t rBit, gBit, bBit;

//Set data into the buffer we aren't sending at the moment
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	7a9b      	ldrb	r3, [r3, #10]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <_ZN12MatrixDriver8SetPixelEtthhhh+0x28>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	e001      	b.n	80041e8 <_ZN12MatrixDriver8SetPixelEtthhhh+0x2c>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	623b      	str	r3, [r7, #32]

	if (y < (height / 2)) {
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	88db      	ldrh	r3, [r3, #6]
 80041ee:	085b      	lsrs	r3, r3, #1
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	893a      	ldrh	r2, [r7, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d206      	bcs.n	8004206 <_ZN12MatrixDriver8SetPixelEtthhhh+0x4a>
		rBit = Matrix_R0_Pin;
 80041f8:	2301      	movs	r3, #1
 80041fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gBit = Matrix_G0_Pin;
 80041fc:	2302      	movs	r3, #2
 80041fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
		bBit = Matrix_B0_Pin;
 8004200:	2304      	movs	r3, #4
 8004202:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004204:	e007      	b.n	8004216 <_ZN12MatrixDriver8SetPixelEtthhhh+0x5a>
	} else {
		rBit = Matrix_R1_Pin;
 8004206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800420a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gBit = Matrix_G1_Pin;
 800420c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004210:	85bb      	strh	r3, [r7, #44]	; 0x2c
		bBit = Matrix_B1_Pin;
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint16_t pixelMask = rBit | gBit | bBit;
 8004216:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004218:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800421a:	4313      	orrs	r3, r2
 800421c:	b29a      	uxth	r2, r3
 800421e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004220:	4313      	orrs	r3, r2
 8004222:	83fb      	strh	r3, [r7, #30]

	uint8_t rPlanes = PlaneBits(r);
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	4619      	mov	r1, r3
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff ff8d 	bl	8004148 <_ZN12MatrixDriver9PlaneBitsEh>
 800422e:	4603      	mov	r3, r0
 8004230:	777b      	strb	r3, [r7, #29]
	uint8_t gPlanes = PlaneBits(g);
 8004232:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004236:	4619      	mov	r1, r3
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff ff85 	bl	8004148 <_ZN12MatrixDriver9PlaneBitsEh>
 800423e:	4603      	mov	r3, r0
 8004240:	773b      	strb	r3, [r7, #28]
	uint8_t bPlanes = PlaneBits(b);
 8004242:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004246:	4619      	mov	r1, r3
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7ff ff7d 	bl	8004148 <_ZN12MatrixDriver9PlaneBitsEh>
 800424e:	4603      	mov	r3, r0
 8004250:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
			10);
#endif

	for (int plane = 0; plane < planes; plane++) {
 8004252:	2300      	movs	r3, #0
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	7a1b      	ldrb	r3, [r3, #8]
 800425a:	461a      	mov	r2, r3
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	4293      	cmp	r3, r2
 8004260:	da63      	bge.n	800432a <_ZN12MatrixDriver8SetPixelEtthhhh+0x16e>
		uint16_t planePixelBits = ((rPlanes & (0x01 << plane)) ? rBit : 0)
 8004262:	7f7a      	ldrb	r2, [r7, #29]
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	fa42 f303 	asr.w	r3, r2, r3
 800426a:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & (0x01 << plane)) ? gBit : 0)
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <_ZN12MatrixDriver8SetPixelEtthhhh+0xbc>
 8004272:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8004276:	e000      	b.n	800427a <_ZN12MatrixDriver8SetPixelEtthhhh+0xbe>
 8004278:	2200      	movs	r2, #0
 800427a:	7f39      	ldrb	r1, [r7, #28]
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	fa41 f303 	asr.w	r3, r1, r3
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <_ZN12MatrixDriver8SetPixelEtthhhh+0xd4>
 800428a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800428e:	e000      	b.n	8004292 <_ZN12MatrixDriver8SetPixelEtthhhh+0xd6>
 8004290:	2300      	movs	r3, #0
 8004292:	4313      	orrs	r3, r2
 8004294:	b21a      	sxth	r2, r3
				| ((bPlanes & (0x01 << plane)) ? bBit : 0);
 8004296:	7ef9      	ldrb	r1, [r7, #27]
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	fa41 f303 	asr.w	r3, r1, r3
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <_ZN12MatrixDriver8SetPixelEtthhhh+0xf0>
 80042a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80042aa:	e000      	b.n	80042ae <_ZN12MatrixDriver8SetPixelEtthhhh+0xf2>
 80042ac:	2300      	movs	r3, #0
 80042ae:	4313      	orrs	r3, r2
 80042b0:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = ((rPlanes & (0x01 << plane)) ? rBit : 0)
 80042b2:	833b      	strh	r3, [r7, #24]

		uint16_t offset = BufferOffset(x, y, plane);
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	893a      	ldrh	r2, [r7, #8]
 80042ba:	8979      	ldrh	r1, [r7, #10]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7ff fd1b 	bl	8003cf8 <_ZN12MatrixDriver12BufferOffsetEtth>
 80042c2:	4603      	mov	r3, r0
 80042c4:	82fb      	strh	r3, [r7, #22]

		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 80042c6:	8afb      	ldrh	r3, [r7, #22]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	6a3a      	ldr	r2, [r7, #32]
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b21a      	sxth	r2, r3
 80042d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80042d6:	43db      	mvns	r3, r3
 80042d8:	b21b      	sxth	r3, r3
 80042da:	4013      	ands	r3, r2
 80042dc:	b21a      	sxth	r2, r3
				| planePixelBits;
 80042de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	b219      	sxth	r1, r3
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 80042e6:	8afb      	ldrh	r3, [r7, #22]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	6a3a      	ldr	r2, [r7, #32]
 80042ec:	4413      	add	r3, r2
				| planePixelBits;
 80042ee:	b28a      	uxth	r2, r1
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 80042f0:	801a      	strh	r2, [r3, #0]
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 80042f2:	8afb      	ldrh	r3, [r7, #22]
 80042f4:	3301      	adds	r3, #1
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	6a3a      	ldr	r2, [r7, #32]
 80042fa:	4413      	add	r3, r2
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b21a      	sxth	r2, r3
 8004300:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004304:	43db      	mvns	r3, r3
 8004306:	b21b      	sxth	r3, r3
 8004308:	4013      	ands	r3, r2
 800430a:	b21a      	sxth	r2, r3
				| planePixelBits;
 800430c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004310:	4313      	orrs	r3, r2
 8004312:	b219      	sxth	r1, r3
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8004314:	8afb      	ldrh	r3, [r7, #22]
 8004316:	3301      	adds	r3, #1
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	6a3a      	ldr	r2, [r7, #32]
 800431c:	4413      	add	r3, r2
				| planePixelBits;
 800431e:	b28a      	uxth	r2, r1
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8004320:	801a      	strh	r2, [r3, #0]
	for (int plane = 0; plane < planes; plane++) {
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	3301      	adds	r3, #1
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
 8004328:	e795      	b.n	8004256 <_ZN12MatrixDriver8SetPixelEtthhhh+0x9a>
	}
}
 800432a:	bf00      	nop
 800432c:	3730      	adds	r7, #48	; 0x30
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	completeSwap = true;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	72da      	strb	r2, [r3, #11]

	HAL_DMA_Abort_IT(&hdma_tim1_ch1);
 8004342:	4803      	ldr	r0, [pc, #12]	; (8004350 <_ZN12MatrixDriver10SwapBufferEv+0x1c>)
 8004344:	f7fc ffbe 	bl	80012c4 <HAL_DMA_Abort_IT>
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	200005bc 	.word	0x200005bc

08004354 <_ZN12MatrixDriver6HandleEv>:

void MatrixDriver::Handle() {
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	bool cloneBuffer = completeSwap;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7adb      	ldrb	r3, [r3, #11]
 8004360:	73fb      	strb	r3, [r7, #15]

	if (completeSwap) {
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	7adb      	ldrb	r3, [r3, #11]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00c      	beq.n	8004384 <_ZN12MatrixDriver6HandleEv+0x30>
		completeSwap = false;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	72da      	strb	r2, [r3, #11]
		sendBufferA = !sendBufferA;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	7a9b      	ldrb	r3, [r3, #10]
 8004374:	f083 0301 	eor.w	r3, r3, #1
 8004378:	b2da      	uxtb	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	729a      	strb	r2, [r3, #10]
		nextDmaOffset = 0;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	831a      	strh	r2, [r3, #24]
	}

	StartNextDma();
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f805 	bl	8004394 <_ZN12MatrixDriver12StartNextDmaEv>
//		uint16_t *targetBuffer = (!sendBufferA ? bufferA : bufferB);
//
//		memcpy(targetBuffer, outputBuffer, bufferSize * 2);
//	}

}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <_ZN12MatrixDriver12StartNextDmaEv>:
uint8_t const AAR_BY_PLANE[] = { 1, 2, 4, 8, 16, 32, 64 };
#elif PLANES == 4
uint8_t const AAR_BY_PLANE[] = { 1, 8, 16, 28 };
#endif

void MatrixDriver::StartNextDma() {
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
	uint16_t plane = nextDmaOffset / planeSize;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8b1a      	ldrh	r2, [r3, #24]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	899b      	ldrh	r3, [r3, #12]
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	82fb      	strh	r3, [r7, #22]
	uint16_t *outputBuffer = (sendBufferA ? bufferA : bufferB);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7a9b      	ldrb	r3, [r3, #10]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <_ZN12MatrixDriver12StartNextDmaEv+0x24>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	e001      	b.n	80043bc <_ZN12MatrixDriver12StartNextDmaEv+0x28>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	613b      	str	r3, [r7, #16]
	uint16_t *ouputOffset = outputBuffer + (plane * planeSize);
 80043be:	8afb      	ldrh	r3, [r7, #22]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	8992      	ldrh	r2, [r2, #12]
 80043c4:	fb02 f303 	mul.w	r3, r2, r3
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4413      	add	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

	htim1.Instance->ARR = AAR_BY_PLANE[plane];
 80043d0:	8afb      	ldrh	r3, [r7, #22]
 80043d2:	4a19      	ldr	r2, [pc, #100]	; (8004438 <_ZN12MatrixDriver12StartNextDmaEv+0xa4>)
 80043d4:	5cd2      	ldrb	r2, [r2, r3]
 80043d6:	4b19      	ldr	r3, [pc, #100]	; (800443c <_ZN12MatrixDriver12StartNextDmaEv+0xa8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->EGR = TIM_EGR_UG;
 80043dc:	4b17      	ldr	r3, [pc, #92]	; (800443c <_ZN12MatrixDriver12StartNextDmaEv+0xa8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2201      	movs	r2, #1
 80043e2:	615a      	str	r2, [r3, #20]

		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
	}
#endif

	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) ouputOffset,
 80043e4:	68f9      	ldr	r1, [r7, #12]
			(uint32_t) &(GPIOB->ODR), planeSize);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	899b      	ldrh	r3, [r3, #12]
	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) ouputOffset,
 80043ea:	4a15      	ldr	r2, [pc, #84]	; (8004440 <_ZN12MatrixDriver12StartNextDmaEv+0xac>)
 80043ec:	4815      	ldr	r0, [pc, #84]	; (8004444 <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 80043ee:	f7fc ff11 	bl	8001214 <HAL_DMA_Start_IT>

	nextDmaOffset += planeSize;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8b1a      	ldrh	r2, [r3, #24]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	899b      	ldrh	r3, [r3, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	831a      	strh	r2, [r3, #24]

	if (nextDmaOffset >= bufferSize) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8b1a      	ldrh	r2, [r3, #24]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	89db      	ldrh	r3, [r3, #14]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <_ZN12MatrixDriver12StartNextDmaEv+0x80>
		nextDmaOffset = 0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	831a      	strh	r2, [r3, #24]
	}

#ifdef DebugPin_GPIO_Port
	HAL_GPIO_WritePin(DebugPin_GPIO_Port, DebugPin_Pin,
			plane & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004414:	8afb      	ldrh	r3, [r7, #22]
 8004416:	f003 0301 	and.w	r3, r3, #1
	HAL_GPIO_WritePin(DebugPin_GPIO_Port, DebugPin_Pin,
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <_ZN12MatrixDriver12StartNextDmaEv+0x8e>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <_ZN12MatrixDriver12StartNextDmaEv+0x90>
 8004422:	2300      	movs	r3, #0
 8004424:	461a      	mov	r2, r3
 8004426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800442a:	4807      	ldr	r0, [pc, #28]	; (8004448 <_ZN12MatrixDriver12StartNextDmaEv+0xb4>)
 800442c:	f7fd fb56 	bl	8001adc <HAL_GPIO_WritePin>
#endif
}
 8004430:	bf00      	nop
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	0800567c 	.word	0x0800567c
 800443c:	2000065c 	.word	0x2000065c
 8004440:	40020414 	.word	0x40020414
 8004444:	200005bc 	.word	0x200005bc
 8004448:	40020000 	.word	0x40020000

0800444c <_ZN13Configuration8getWidthEv>:
		Uninitialized = 0, Ready = 1
	};

	Status status = Uninitialized;

	uint16_t getWidth() {
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
		switch (pixelConfiguration) {
		Simple:
			return elementWidth * elementCount;
		default:
			return elementWidth;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	88db      	ldrh	r3, [r3, #6]
		}
	}
 8004458:	4618      	mov	r0, r3
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <_ZN13Configuration9getHeightEv>:

	uint16_t getHeight() {
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
		switch (pixelConfiguration) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	7a9b      	ldrb	r3, [r3, #10]
 8004470:	3b01      	subs	r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d807      	bhi.n	8004486 <_ZN13Configuration9getHeightEv+0x22>
		case LeftToRight:
		case SnakeStartBottomRight:
			return elementHeight * elementCount;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	891a      	ldrh	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	889b      	ldrh	r3, [r3, #4]
 800447e:	fb12 f303 	smulbb	r3, r2, r3
 8004482:	b29b      	uxth	r3, r3
 8004484:	e001      	b.n	800448a <_ZN13Configuration9getHeightEv+0x26>
		default:
			return elementHeight;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	891b      	ldrh	r3, [r3, #8]
		}
	}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <_ZN12PixelMapping5PixelC1Ett>:
#define INC_PIXELMAPPING_H_

class PixelMapping {
public:
	struct Pixel {
		Pixel(uint16_t x, uint16_t y) {
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	460b      	mov	r3, r1
 80044a0:	807b      	strh	r3, [r7, #2]
 80044a2:	4613      	mov	r3, r2
 80044a4:	803b      	strh	r3, [r7, #0]
			this->x = x;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	887a      	ldrh	r2, [r7, #2]
 80044aa:	801a      	strh	r2, [r3, #0]
			this->y = y;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	883a      	ldrh	r2, [r7, #0]
 80044b0:	805a      	strh	r2, [r3, #2]
		}
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <_ZN18SimplePixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:
	virtual Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) = 0;
};

class SimplePixelMapping : public PixelMapping {
public:
	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
		return input;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	2300      	movs	r3, #0
 80044d0:	89ba      	ldrh	r2, [r7, #12]
 80044d2:	f362 030f 	bfi	r3, r2, #0, #16
 80044d6:	89fa      	ldrh	r2, [r7, #14]
 80044d8:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <_ZN12PixelMappingC1Ev>:
class PixelMapping {
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	4a04      	ldr	r2, [pc, #16]	; (8004504 <_ZN12PixelMappingC1Ev+0x1c>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	080236c4 	.word	0x080236c4

08004508 <_ZN23LeftToRightPixelMappingC1Ehtt>:
};

class LeftToRightPixelMapping : public PixelMapping {
public:
	LeftToRightPixelMapping(uint8_t panelCount, uint16_t panelWidth, uint16_t panelHeight) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	4608      	mov	r0, r1
 8004512:	4611      	mov	r1, r2
 8004514:	461a      	mov	r2, r3
 8004516:	4603      	mov	r3, r0
 8004518:	72fb      	strb	r3, [r7, #11]
 800451a:	460b      	mov	r3, r1
 800451c:	813b      	strh	r3, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff ffdf 	bl	80044e8 <_ZN12PixelMappingC1Ev>
 800452a:	4a08      	ldr	r2, [pc, #32]	; (800454c <_ZN23LeftToRightPixelMappingC1Ehtt+0x44>)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	601a      	str	r2, [r3, #0]
		this->panelCount = panelCount;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	7afa      	ldrb	r2, [r7, #11]
 8004534:	711a      	strb	r2, [r3, #4]
		this->panelWidth = panelWidth;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	893a      	ldrh	r2, [r7, #8]
 800453a:	80da      	strh	r2, [r3, #6]
		this->panelHeight = panelHeight;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	811a      	strh	r2, [r3, #8]
	}
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	080236ac 	.word	0x080236ac

08004550 <_ZN23LeftToRightPixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:

	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
		//Panel counted from top-left
		uint16_t panel = input.y / panelHeight;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	891b      	ldrh	r3, [r3, #8]
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	82bb      	strh	r3, [r7, #20]
		uint16_t lineOnPanel = input.y % panelHeight;
 8004566:	887b      	ldrh	r3, [r7, #2]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	8912      	ldrh	r2, [r2, #8]
 800456c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004570:	fb02 f201 	mul.w	r2, r2, r1
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	82fb      	strh	r3, [r7, #22]

		if(panel % 2 == 1) {
 8004578:	8abb      	ldrh	r3, [r7, #20]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d004      	beq.n	800458c <_ZN23LeftToRightPixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x3c>
			//Odd panels are vertically reversed
			lineOnPanel = panelHeight - lineOnPanel;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	891a      	ldrh	r2, [r3, #8]
 8004586:	8afb      	ldrh	r3, [r7, #22]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	82fb      	strh	r3, [r7, #22]
		}

		uint16_t xOffset = (panelCount - 1) - panel * panelWidth;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	791b      	ldrb	r3, [r3, #4]
 8004590:	b29a      	uxth	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	88db      	ldrh	r3, [r3, #6]
 8004596:	8ab9      	ldrh	r1, [r7, #20]
 8004598:	fb11 f303 	smulbb	r3, r1, r3
 800459c:	b29b      	uxth	r3, r3
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	827b      	strh	r3, [r7, #18]

		PixelMapping::Pixel output {
			.x= xOffset + input.x,
 80045a6:	883a      	ldrh	r2, [r7, #0]
			.y = lineOnPanel
		};
 80045a8:	8a7b      	ldrh	r3, [r7, #18]
 80045aa:	4413      	add	r3, r2
 80045ac:	b299      	uxth	r1, r3
 80045ae:	8afa      	ldrh	r2, [r7, #22]
 80045b0:	f107 0308 	add.w	r3, r7, #8
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff ff6e 	bl	8004496 <_ZN12PixelMapping5PixelC1Ett>

		return output;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	2300      	movs	r3, #0
 80045c0:	89ba      	ldrh	r2, [r7, #12]
 80045c2:	f362 030f 	bfi	r3, r2, #0, #16
 80045c6:	89fa      	ldrh	r2, [r7, #14]
 80045c8:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_ZN31SnakePixelMappingFedBottomRightC1Ehtt>:
	uint16_t panelHeight;
};

class SnakePixelMappingFedBottomRight : public PixelMapping {
public:
	SnakePixelMappingFedBottomRight(uint8_t panelCount, uint16_t panelWidth, uint16_t panelHeight) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	4608      	mov	r0, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	461a      	mov	r2, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	72fb      	strb	r3, [r7, #11]
 80045e6:	460b      	mov	r3, r1
 80045e8:	813b      	strh	r3, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	80fb      	strh	r3, [r7, #6]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff79 	bl	80044e8 <_ZN12PixelMappingC1Ev>
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <_ZN31SnakePixelMappingFedBottomRightC1Ehtt+0x44>)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]
		this->panelCount = panelCount;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	7afa      	ldrb	r2, [r7, #11]
 8004600:	711a      	strb	r2, [r3, #4]
		this->panelWidth = panelWidth;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	893a      	ldrh	r2, [r7, #8]
 8004606:	80da      	strh	r2, [r3, #6]
		this->panelHeight = panelHeight;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	811a      	strh	r2, [r3, #8]
	}
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	080236a0 	.word	0x080236a0

0800461c <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:

	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
		//Panel counted from top-left
		uint16_t panel = input.y / panelHeight;
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	891b      	ldrh	r3, [r3, #8]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	827b      	strh	r3, [r7, #18]
		uint16_t lineOnPanel = input.y % panelHeight;
 8004632:	887b      	ldrh	r3, [r7, #2]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	8912      	ldrh	r2, [r2, #8]
 8004638:	fbb3 f1f2 	udiv	r1, r3, r2
 800463c:	fb02 f201 	mul.w	r2, r2, r1
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	82fb      	strh	r3, [r7, #22]

		uint16_t xOffset = ((panelCount - 1) - panel) * panelWidth;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	791b      	ldrb	r3, [r3, #4]
 8004648:	1e5a      	subs	r2, r3, #1
 800464a:	8a7b      	ldrh	r3, [r7, #18]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	b29a      	uxth	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	88db      	ldrh	r3, [r3, #6]
 8004654:	fb12 f303 	smulbb	r3, r2, r3
 8004658:	823b      	strh	r3, [r7, #16]
		uint16_t x;

		if(((panelCount - 1) - panel) % 2 == 1) {
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	791b      	ldrb	r3, [r3, #4]
 800465e:	1e5a      	subs	r2, r3, #1
 8004660:	8a7b      	ldrh	r3, [r7, #18]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	bfb8      	it	lt
 800466c:	425b      	neglt	r3, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d10b      	bne.n	800468a <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x6e>
			//Even panels (from feedpoint) are vertically reversed
			lineOnPanel = (panelHeight - 1) - lineOnPanel;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	891a      	ldrh	r2, [r3, #8]
 8004676:	8afb      	ldrh	r3, [r7, #22]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	82fb      	strh	r3, [r7, #22]
			x = xOffset + input.x;
 8004680:	883a      	ldrh	r2, [r7, #0]
 8004682:	8a3b      	ldrh	r3, [r7, #16]
 8004684:	4413      	add	r3, r2
 8004686:	82bb      	strh	r3, [r7, #20]
 8004688:	e009      	b.n	800469e <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x82>
		} else {
			x= xOffset + ((panelWidth -1) - input.x);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	88da      	ldrh	r2, [r3, #6]
 800468e:	883b      	ldrh	r3, [r7, #0]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	b29a      	uxth	r2, r3
 8004694:	8a3b      	ldrh	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	82bb      	strh	r3, [r7, #20]
		}

		Pixel output {
			.x= x,
			.y = lineOnPanel
		};
 800469e:	8afa      	ldrh	r2, [r7, #22]
 80046a0:	8ab9      	ldrh	r1, [r7, #20]
 80046a2:	f107 0308 	add.w	r3, r7, #8
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fef5 	bl	8004496 <_ZN12PixelMapping5PixelC1Ett>

		return output;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	2300      	movs	r3, #0
 80046b2:	89ba      	ldrh	r2, [r7, #12]
 80046b4:	f362 030f 	bfi	r3, r2, #0, #16
 80046b8:	89fa      	ldrh	r2, [r7, #14]
 80046ba:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <_ZN13ConfigurationC1Ev>:
struct Configuration {
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	729a      	strb	r2, [r3, #10]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	72da      	strb	r2, [r3, #11]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <_Z17readConfigurationv>:
DisplayDriver *display = NULL;

Configuration configuration;
PixelMapping *pixelMapping = NULL;

void readConfiguration() {
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
	configuration.useMatrix = true;
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <_Z17readConfigurationv+0x64>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
	configuration.useStrands = false;
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <_Z17readConfigurationv+0x64>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	709a      	strb	r2, [r3, #2]

	if (configuration.useMatrix) {
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <_Z17readConfigurationv+0x64>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00c      	beq.n	800471a <_Z17readConfigurationv+0x32>
		configuration.matrixFormat = MatrixDriver::SCAN_16;
 8004700:	4b12      	ldr	r3, [pc, #72]	; (800474c <_Z17readConfigurationv+0x64>)
 8004702:	2200      	movs	r2, #0
 8004704:	705a      	strb	r2, [r3, #1]
		configuration.elementWidth = PANEL_WIDTH;
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <_Z17readConfigurationv+0x64>)
 8004708:	2240      	movs	r2, #64	; 0x40
 800470a:	80da      	strh	r2, [r3, #6]
		configuration.elementHeight = PANEL_HEIGHT;
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <_Z17readConfigurationv+0x64>)
 800470e:	2220      	movs	r2, #32
 8004710:	811a      	strh	r2, [r3, #8]
		configuration.elementCount = 2;
 8004712:	4b0e      	ldr	r3, [pc, #56]	; (800474c <_Z17readConfigurationv+0x64>)
 8004714:	2202      	movs	r2, #2
 8004716:	809a      	strh	r2, [r3, #4]
 8004718:	e010      	b.n	800473c <_Z17readConfigurationv+0x54>
	} else if (configuration.useStrands) {
 800471a:	4b0c      	ldr	r3, [pc, #48]	; (800474c <_Z17readConfigurationv+0x64>)
 800471c:	789b      	ldrb	r3, [r3, #2]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <_Z17readConfigurationv+0x54>
		configuration.strandFormat = LedSingleWire::RGBW;
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <_Z17readConfigurationv+0x64>)
 8004724:	2200      	movs	r2, #0
 8004726:	70da      	strb	r2, [r3, #3]
		configuration.elementWidth = 300;
 8004728:	4b08      	ldr	r3, [pc, #32]	; (800474c <_Z17readConfigurationv+0x64>)
 800472a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800472e:	80da      	strh	r2, [r3, #6]
		configuration.elementHeight = 1;
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <_Z17readConfigurationv+0x64>)
 8004732:	2201      	movs	r2, #1
 8004734:	811a      	strh	r2, [r3, #8]
		configuration.elementCount = 1;
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <_Z17readConfigurationv+0x64>)
 8004738:	2201      	movs	r2, #1
 800473a:	809a      	strh	r2, [r3, #4]
	}

	configuration.pixelConfiguration =
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <_Z17readConfigurationv+0x64>)
 800473e:	2202      	movs	r2, #2
 8004740:	729a      	strb	r2, [r3, #10]
			Configuration::PixelConfiguration::SnakeStartBottomRight;
}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	200005a0 	.word	0x200005a0

08004750 <_ZN18SimplePixelMappingC1Ev>:
class SimplePixelMapping : public PixelMapping {
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fec4 	bl	80044e8 <_ZN12PixelMappingC1Ev>
 8004760:	4a03      	ldr	r2, [pc, #12]	; (8004770 <_ZN18SimplePixelMappingC1Ev+0x20>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	080236b8 	.word	0x080236b8

08004774 <_Z9configurev>:

void configure() {
 8004774:	b598      	push	{r3, r4, r7, lr}
 8004776:	af00      	add	r7, sp, #0
	if (configuration.useMatrix) {
 8004778:	4b34      	ldr	r3, [pc, #208]	; (800484c <_Z9configurev+0xd8>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d015      	beq.n	80047ac <_Z9configurev+0x38>
		display = new MatrixDriver(
				configuration.elementWidth * configuration.elementCount,
				configuration.elementHeight,
				(MatrixDriver::ScanType) configuration.matrixFormat);
 8004780:	201c      	movs	r0, #28
 8004782:	f000 fa44 	bl	8004c0e <_Znwj>
 8004786:	4603      	mov	r3, r0
 8004788:	461c      	mov	r4, r3
				configuration.elementWidth * configuration.elementCount,
 800478a:	4b30      	ldr	r3, [pc, #192]	; (800484c <_Z9configurev+0xd8>)
 800478c:	88da      	ldrh	r2, [r3, #6]
 800478e:	4b2f      	ldr	r3, [pc, #188]	; (800484c <_Z9configurev+0xd8>)
 8004790:	889b      	ldrh	r3, [r3, #4]
				(MatrixDriver::ScanType) configuration.matrixFormat);
 8004792:	fb12 f303 	smulbb	r3, r2, r3
 8004796:	b299      	uxth	r1, r3
 8004798:	4b2c      	ldr	r3, [pc, #176]	; (800484c <_Z9configurev+0xd8>)
 800479a:	891a      	ldrh	r2, [r3, #8]
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <_Z9configurev+0xd8>)
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7ff fae7 	bl	8003d74 <_ZN12MatrixDriverC1EttNS_8ScanTypeE>
		display = new MatrixDriver(
 80047a6:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <_Z9configurev+0xdc>)
 80047a8:	601c      	str	r4, [r3, #0]
 80047aa:	e014      	b.n	80047d6 <_Z9configurev+0x62>
	} else if (configuration.useStrands) {
 80047ac:	4b27      	ldr	r3, [pc, #156]	; (800484c <_Z9configurev+0xd8>)
 80047ae:	789b      	ldrb	r3, [r3, #2]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d010      	beq.n	80047d6 <_Z9configurev+0x62>

		display = new LedSingleWire(
				(LedSingleWire::Format) configuration.strandFormat,
				configuration.elementCount, configuration.elementWidth);
 80047b4:	2010      	movs	r0, #16
 80047b6:	f000 fa2a 	bl	8004c0e <_Znwj>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461c      	mov	r4, r3
				(LedSingleWire::Format) configuration.strandFormat,
 80047be:	4b23      	ldr	r3, [pc, #140]	; (800484c <_Z9configurev+0xd8>)
 80047c0:	78d9      	ldrb	r1, [r3, #3]
				configuration.elementCount, configuration.elementWidth);
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <_Z9configurev+0xd8>)
 80047c4:	889b      	ldrh	r3, [r3, #4]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <_Z9configurev+0xd8>)
 80047ca:	88db      	ldrh	r3, [r3, #6]
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7ff f8b5 	bl	800393c <_ZN13LedSingleWireC1ENS_6FormatEht>
		display = new LedSingleWire(
 80047d2:	4b1f      	ldr	r3, [pc, #124]	; (8004850 <_Z9configurev+0xdc>)
 80047d4:	601c      	str	r4, [r3, #0]
	}

	switch (configuration.pixelConfiguration) {
 80047d6:	4b1d      	ldr	r3, [pc, #116]	; (800484c <_Z9configurev+0xd8>)
 80047d8:	7a9b      	ldrb	r3, [r3, #10]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d002      	beq.n	80047e4 <_Z9configurev+0x70>
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d012      	beq.n	8004808 <_Z9configurev+0x94>
 80047e2:	e023      	b.n	800482c <_Z9configurev+0xb8>
	case Configuration::PixelConfiguration::LeftToRight:
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
				configuration.elementWidth, configuration.elementHeight);
 80047e4:	200c      	movs	r0, #12
 80047e6:	f000 fa12 	bl	8004c0e <_Znwj>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461c      	mov	r4, r3
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
 80047ee:	4b17      	ldr	r3, [pc, #92]	; (800484c <_Z9configurev+0xd8>)
 80047f0:	889b      	ldrh	r3, [r3, #4]
				configuration.elementWidth, configuration.elementHeight);
 80047f2:	b2d9      	uxtb	r1, r3
 80047f4:	4b15      	ldr	r3, [pc, #84]	; (800484c <_Z9configurev+0xd8>)
 80047f6:	88da      	ldrh	r2, [r3, #6]
 80047f8:	4b14      	ldr	r3, [pc, #80]	; (800484c <_Z9configurev+0xd8>)
 80047fa:	891b      	ldrh	r3, [r3, #8]
 80047fc:	4620      	mov	r0, r4
 80047fe:	f7ff fe83 	bl	8004508 <_ZN23LeftToRightPixelMappingC1Ehtt>
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <_Z9configurev+0xe0>)
 8004804:	601c      	str	r4, [r3, #0]
		break;
 8004806:	e01e      	b.n	8004846 <_Z9configurev+0xd2>
	case Configuration::PixelConfiguration::SnakeStartBottomRight:
		pixelMapping = new SnakePixelMappingFedBottomRight(
				configuration.elementCount, configuration.elementWidth,
				configuration.elementHeight);
 8004808:	200c      	movs	r0, #12
 800480a:	f000 fa00 	bl	8004c0e <_Znwj>
 800480e:	4603      	mov	r3, r0
 8004810:	461c      	mov	r4, r3
				configuration.elementCount, configuration.elementWidth,
 8004812:	4b0e      	ldr	r3, [pc, #56]	; (800484c <_Z9configurev+0xd8>)
 8004814:	889b      	ldrh	r3, [r3, #4]
				configuration.elementHeight);
 8004816:	b2d9      	uxtb	r1, r3
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <_Z9configurev+0xd8>)
 800481a:	88da      	ldrh	r2, [r3, #6]
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <_Z9configurev+0xd8>)
 800481e:	891b      	ldrh	r3, [r3, #8]
 8004820:	4620      	mov	r0, r4
 8004822:	f7ff fed7 	bl	80045d4 <_ZN31SnakePixelMappingFedBottomRightC1Ehtt>
		pixelMapping = new SnakePixelMappingFedBottomRight(
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <_Z9configurev+0xe0>)
 8004828:	601c      	str	r4, [r3, #0]
		break;
 800482a:	e00c      	b.n	8004846 <_Z9configurev+0xd2>
	default:
		pixelMapping = new SimplePixelMapping();
 800482c:	2004      	movs	r0, #4
 800482e:	f000 f9ee 	bl	8004c0e <_Znwj>
 8004832:	4603      	mov	r3, r0
 8004834:	461c      	mov	r4, r3
 8004836:	2300      	movs	r3, #0
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	4620      	mov	r0, r4
 800483c:	f7ff ff88 	bl	8004750 <_ZN18SimplePixelMappingC1Ev>
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <_Z9configurev+0xe0>)
 8004842:	601c      	str	r4, [r3, #0]
		break;
 8004844:	bf00      	nop
	}
}
 8004846:	bf00      	nop
 8004848:	bd98      	pop	{r3, r4, r7, pc}
 800484a:	bf00      	nop
 800484c:	200005a0 	.word	0x200005a0
 8004850:	2000059c 	.word	0x2000059c
 8004854:	200005ac 	.word	0x200005ac

08004858 <_Z4openv>:

void open() {
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
	if (display != NULL) {
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <_Z4openv+0x28>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <_Z4openv+0x1c>
		display->Open();
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <_Z4openv+0x28>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <_Z4openv+0x28>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4610      	mov	r0, r2
 8004872:	4798      	blx	r3
	}

	configuration.status = Configuration::Status::Ready;
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <_Z4openv+0x2c>)
 8004876:	2201      	movs	r2, #1
 8004878:	72da      	strb	r2, [r3, #11]
}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	2000059c 	.word	0x2000059c
 8004884:	200005a0 	.word	0x200005a0

08004888 <_Z4drawN12PixelMapping5PixelEhhhh>:

void draw(PixelMapping::Pixel pixel, uint8_t r, uint8_t g, uint8_t b,
		uint8_t w) {
 8004888:	b5b0      	push	{r4, r5, r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af04      	add	r7, sp, #16
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	4608      	mov	r0, r1
 8004892:	4611      	mov	r1, r2
 8004894:	461a      	mov	r2, r3
 8004896:	4603      	mov	r3, r0
 8004898:	70fb      	strb	r3, [r7, #3]
 800489a:	460b      	mov	r3, r1
 800489c:	70bb      	strb	r3, [r7, #2]
 800489e:	4613      	mov	r3, r2
 80048a0:	707b      	strb	r3, [r7, #1]
	if (display != NULL) {
 80048a2:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <_Z4drawN12PixelMapping5PixelEhhhh+0x68>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d01d      	beq.n	80048e6 <_Z4drawN12PixelMapping5PixelEhhhh+0x5e>
		PixelMapping::Pixel physicalPixel =
				pixelMapping->mapVirtualPixelToPhysicalPixel(pixel);
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <_Z4drawN12PixelMapping5PixelEhhhh+0x6c>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <_Z4drawN12PixelMapping5PixelEhhhh+0x6c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4610      	mov	r0, r2
 80048ba:	4798      	blx	r3
 80048bc:	4603      	mov	r3, r0
 80048be:	60fb      	str	r3, [r7, #12]

		display->SetPixel(physicalPixel.x, physicalPixel.y, r, g, b, w);
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <_Z4drawN12PixelMapping5PixelEhhhh+0x68>)
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <_Z4drawN12PixelMapping5PixelEhhhh+0x68>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3308      	adds	r3, #8
 80048cc:	681c      	ldr	r4, [r3, #0]
 80048ce:	89b9      	ldrh	r1, [r7, #12]
 80048d0:	89fa      	ldrh	r2, [r7, #14]
 80048d2:	78fd      	ldrb	r5, [r7, #3]
 80048d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048d8:	9302      	str	r3, [sp, #8]
 80048da:	787b      	ldrb	r3, [r7, #1]
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	78bb      	ldrb	r3, [r7, #2]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	462b      	mov	r3, r5
 80048e4:	47a0      	blx	r4
	}
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bdb0      	pop	{r4, r5, r7, pc}
 80048ee:	bf00      	nop
 80048f0:	2000059c 	.word	0x2000059c
 80048f4:	200005ac 	.word	0x200005ac

080048f8 <_Z6commitv>:

void commit() {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
	if (display != NULL) {
 80048fc:	4b07      	ldr	r3, [pc, #28]	; (800491c <_Z6commitv+0x24>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <_Z6commitv+0x1e>
		display->SwapBuffer();
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <_Z6commitv+0x24>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <_Z6commitv+0x24>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4610      	mov	r0, r2
 8004914:	4798      	blx	r3
	}
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	2000059c 	.word	0x2000059c

08004920 <cpp_main>:
//2 - advancing pixel
//3 - image
//4 - Debugging
#define DRAW 3

extern "C" int cpp_main(void) {
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b08d      	sub	sp, #52	; 0x34
 8004924:	af02      	add	r7, sp, #8
	__HAL_DBGMCU_FREEZE_IWDG();
 8004926:	4ba0      	ldr	r3, [pc, #640]	; (8004ba8 <cpp_main+0x288>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	4a9f      	ldr	r2, [pc, #636]	; (8004ba8 <cpp_main+0x288>)
 800492c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004930:	6093      	str	r3, [r2, #8]

	readConfiguration();
 8004932:	f7ff fed9 	bl	80046e8 <_Z17readConfigurationv>

	configure();
 8004936:	f7ff ff1d 	bl	8004774 <_Z9configurev>

	open();
 800493a:	f7ff ff8d 	bl	8004858 <_Z4openv>

	uint16_t color_shift = 1;
 800493e:	2301      	movs	r3, #1
 8004940:	83bb      	strh	r3, [r7, #28]

	uint32_t start = HAL_GetTick();
 8004942:	f7fc fa79 	bl	8000e38 <HAL_GetTick>
 8004946:	61b8      	str	r0, [r7, #24]

	uint16_t pos = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	84fb      	strh	r3, [r7, #38]	; 0x26

#if DRAW == 3
	for (uint16_t col = 0; col < configuration.getWidth(); col++) {
 800494c:	2300      	movs	r3, #0
 800494e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004950:	4896      	ldr	r0, [pc, #600]	; (8004bac <cpp_main+0x28c>)
 8004952:	f7ff fd7b 	bl	800444c <_ZN13Configuration8getWidthEv>
 8004956:	4603      	mov	r3, r0
 8004958:	461a      	mov	r2, r3
 800495a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800495c:	4293      	cmp	r3, r2
 800495e:	bf34      	ite	cc
 8004960:	2301      	movcc	r3, #1
 8004962:	2300      	movcs	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d06f      	beq.n	8004a4a <cpp_main+0x12a>

		for (uint16_t row = 0; row < configuration.getHeight(); row++) {
 800496a:	2300      	movs	r3, #0
 800496c:	847b      	strh	r3, [r7, #34]	; 0x22
 800496e:	488f      	ldr	r0, [pc, #572]	; (8004bac <cpp_main+0x28c>)
 8004970:	f7ff fd78 	bl	8004464 <_ZN13Configuration9getHeightEv>
 8004974:	4603      	mov	r3, r0
 8004976:	461a      	mov	r2, r3
 8004978:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800497a:	4293      	cmp	r3, r2
 800497c:	bf34      	ite	cc
 800497e:	2301      	movcc	r3, #1
 8004980:	2300      	movcs	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d05c      	beq.n	8004a42 <cpp_main+0x122>
			uint8_t r =
					IMAGE_DATA[pos][col % IMAGE_WIDTH][row % IMAGE_HEIGHT][0];
 8004988:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800498a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800498c:	f003 003f 	and.w	r0, r3, #63	; 0x3f
 8004990:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
			uint8_t r =
 8004996:	4c86      	ldr	r4, [pc, #536]	; (8004bb0 <cpp_main+0x290>)
 8004998:	461a      	mov	r2, r3
 800499a:	0052      	lsls	r2, r2, #1
 800499c:	441a      	add	r2, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4403      	add	r3, r0
 80049a4:	019b      	lsls	r3, r3, #6
 80049a6:	441a      	add	r2, r3
 80049a8:	460b      	mov	r3, r1
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	440b      	add	r3, r1
 80049ae:	031b      	lsls	r3, r3, #12
 80049b0:	4413      	add	r3, r2
 80049b2:	4423      	add	r3, r4
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	743b      	strb	r3, [r7, #16]
			uint8_t g =
					IMAGE_DATA[pos][col % IMAGE_WIDTH][row % IMAGE_HEIGHT][1];
 80049b8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80049ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049bc:	f003 013f 	and.w	r1, r3, #63	; 0x3f
 80049c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
			uint8_t g =
 80049c6:	4c7a      	ldr	r4, [pc, #488]	; (8004bb0 <cpp_main+0x290>)
 80049c8:	461a      	mov	r2, r3
 80049ca:	0052      	lsls	r2, r2, #1
 80049cc:	441a      	add	r2, r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	4403      	add	r3, r0
 80049d4:	031b      	lsls	r3, r3, #12
 80049d6:	441a      	add	r2, r3
 80049d8:	460b      	mov	r3, r1
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	440b      	add	r3, r1
 80049de:	019b      	lsls	r3, r3, #6
 80049e0:	4413      	add	r3, r2
 80049e2:	4423      	add	r3, r4
 80049e4:	3301      	adds	r3, #1
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	73fb      	strb	r3, [r7, #15]
			uint8_t b =
					IMAGE_DATA[pos][col % IMAGE_WIDTH][row % IMAGE_HEIGHT][2];
 80049ea:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80049ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049ee:	f003 013f 	and.w	r1, r3, #63	; 0x3f
 80049f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
			uint8_t b =
 80049f8:	4c6d      	ldr	r4, [pc, #436]	; (8004bb0 <cpp_main+0x290>)
 80049fa:	461a      	mov	r2, r3
 80049fc:	0052      	lsls	r2, r2, #1
 80049fe:	441a      	add	r2, r3
 8004a00:	4603      	mov	r3, r0
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4403      	add	r3, r0
 8004a06:	031b      	lsls	r3, r3, #12
 8004a08:	441a      	add	r2, r3
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	440b      	add	r3, r1
 8004a10:	019b      	lsls	r3, r3, #6
 8004a12:	4413      	add	r3, r2
 8004a14:	4423      	add	r3, r4
 8004a16:	3302      	adds	r3, #2
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	73bb      	strb	r3, [r7, #14]

			draw(PixelMapping::Pixel(col, row), r, g, b, 0);
 8004a1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004a1e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004a20:	1d3b      	adds	r3, r7, #4
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fd37 	bl	8004496 <_ZN12PixelMapping5PixelC1Ett>
 8004a28:	7bb8      	ldrb	r0, [r7, #14]
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	7c39      	ldrb	r1, [r7, #16]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4603      	mov	r3, r0
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff ff27 	bl	8004888 <_Z4drawN12PixelMapping5PixelEhhhh>
		for (uint16_t row = 0; row < configuration.getHeight(); row++) {
 8004a3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a40:	e795      	b.n	800496e <cpp_main+0x4e>
	for (uint16_t col = 0; col < configuration.getWidth(); col++) {
 8004a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a44:	3301      	adds	r3, #1
 8004a46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004a48:	e782      	b.n	8004950 <cpp_main+0x30>
//			draw(PixelMapping::Pixel(col, row), r, g, b, 0);
//		}
//	}
#endif

	lastUpdate = HAL_GetTick();
 8004a4a:	f7fc f9f5 	bl	8000e38 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	4b58      	ldr	r3, [pc, #352]	; (8004bb4 <cpp_main+0x294>)
 8004a52:	601a      	str	r2, [r3, #0]

	color_shift++;
 8004a54:	8bbb      	ldrh	r3, [r7, #28]
 8004a56:	3301      	adds	r3, #1
 8004a58:	83bb      	strh	r3, [r7, #28]

	uint32_t duration = HAL_GetTick() - start;
 8004a5a:	f7fc f9ed 	bl	8000e38 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]

	sprintf(buffer, "Setup Duration: %lu\n", duration);
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4953      	ldr	r1, [pc, #332]	; (8004bb8 <cpp_main+0x298>)
 8004a6a:	4854      	ldr	r0, [pc, #336]	; (8004bbc <cpp_main+0x29c>)
 8004a6c:	f000 fa40 	bl	8004ef0 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 500);
 8004a70:	4852      	ldr	r0, [pc, #328]	; (8004bbc <cpp_main+0x29c>)
 8004a72:	f7fb fbb5 	bl	80001e0 <strlen>
 8004a76:	4603      	mov	r3, r0
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004a7e:	494f      	ldr	r1, [pc, #316]	; (8004bbc <cpp_main+0x29c>)
 8004a80:	484f      	ldr	r0, [pc, #316]	; (8004bc0 <cpp_main+0x2a0>)
 8004a82:	f7fe faec 	bl	800305e <HAL_UART_Transmit>

	commit();
 8004a86:	f7ff ff37 	bl	80048f8 <_Z6commitv>
	}

	commit();
#elif DRAW == 3

		HAL_Delay(10);
 8004a8a:	200a      	movs	r0, #10
 8004a8c:	f7fc f9e0 	bl	8000e50 <HAL_Delay>

		for (uint16_t col = 0; col < configuration.getWidth(); col++) {
 8004a90:	2300      	movs	r3, #0
 8004a92:	843b      	strh	r3, [r7, #32]
 8004a94:	4845      	ldr	r0, [pc, #276]	; (8004bac <cpp_main+0x28c>)
 8004a96:	f7ff fcd9 	bl	800444c <_ZN13Configuration8getWidthEv>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	8c3b      	ldrh	r3, [r7, #32]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bf34      	ite	cc
 8004aa4:	2301      	movcc	r3, #1
 8004aa6:	2300      	movcs	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d070      	beq.n	8004b90 <cpp_main+0x270>

			for (uint16_t row = 0; row < configuration.getHeight(); row++) {
 8004aae:	2300      	movs	r3, #0
 8004ab0:	83fb      	strh	r3, [r7, #30]
 8004ab2:	483e      	ldr	r0, [pc, #248]	; (8004bac <cpp_main+0x28c>)
 8004ab4:	f7ff fcd6 	bl	8004464 <_ZN13Configuration9getHeightEv>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	8bfb      	ldrh	r3, [r7, #30]
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	bf34      	ite	cc
 8004ac2:	2301      	movcc	r3, #1
 8004ac4:	2300      	movcs	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d05d      	beq.n	8004b88 <cpp_main+0x268>
				uint8_t r = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
						% IMAGE_HEIGHT][0];
 8004acc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
				uint8_t r = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004ace:	8c3b      	ldrh	r3, [r7, #32]
 8004ad0:	f003 003f 	and.w	r0, r3, #63	; 0x3f
						% IMAGE_HEIGHT][0];
 8004ad4:	8bfb      	ldrh	r3, [r7, #30]
 8004ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				uint8_t r = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004ada:	4c35      	ldr	r4, [pc, #212]	; (8004bb0 <cpp_main+0x290>)
 8004adc:	461a      	mov	r2, r3
 8004ade:	0052      	lsls	r2, r2, #1
 8004ae0:	441a      	add	r2, r3
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4403      	add	r3, r0
 8004ae8:	019b      	lsls	r3, r3, #6
 8004aea:	441a      	add	r2, r3
 8004aec:	460b      	mov	r3, r1
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	440b      	add	r3, r1
 8004af2:	031b      	lsls	r3, r3, #12
 8004af4:	4413      	add	r3, r2
 8004af6:	4423      	add	r3, r4
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	74fb      	strb	r3, [r7, #19]
				uint8_t g = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
						% IMAGE_HEIGHT][1];
 8004afc:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
				uint8_t g = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004afe:	8c3b      	ldrh	r3, [r7, #32]
 8004b00:	f003 013f 	and.w	r1, r3, #63	; 0x3f
						% IMAGE_HEIGHT][1];
 8004b04:	8bfb      	ldrh	r3, [r7, #30]
 8004b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				uint8_t g = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004b0a:	4c29      	ldr	r4, [pc, #164]	; (8004bb0 <cpp_main+0x290>)
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	0052      	lsls	r2, r2, #1
 8004b10:	441a      	add	r2, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4403      	add	r3, r0
 8004b18:	031b      	lsls	r3, r3, #12
 8004b1a:	441a      	add	r2, r3
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	440b      	add	r3, r1
 8004b22:	019b      	lsls	r3, r3, #6
 8004b24:	4413      	add	r3, r2
 8004b26:	4423      	add	r3, r4
 8004b28:	3301      	adds	r3, #1
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	74bb      	strb	r3, [r7, #18]
				uint8_t b = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
						% IMAGE_HEIGHT][2];
 8004b2e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
				uint8_t b = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004b30:	8c3b      	ldrh	r3, [r7, #32]
 8004b32:	f003 013f 	and.w	r1, r3, #63	; 0x3f
						% IMAGE_HEIGHT][2];
 8004b36:	8bfb      	ldrh	r3, [r7, #30]
 8004b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				uint8_t b = IMAGE_DATA[pos][col % IMAGE_WIDTH][row
 8004b3c:	4c1c      	ldr	r4, [pc, #112]	; (8004bb0 <cpp_main+0x290>)
 8004b3e:	461a      	mov	r2, r3
 8004b40:	0052      	lsls	r2, r2, #1
 8004b42:	441a      	add	r2, r3
 8004b44:	4603      	mov	r3, r0
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4403      	add	r3, r0
 8004b4a:	031b      	lsls	r3, r3, #12
 8004b4c:	441a      	add	r2, r3
 8004b4e:	460b      	mov	r3, r1
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	440b      	add	r3, r1
 8004b54:	019b      	lsls	r3, r3, #6
 8004b56:	4413      	add	r3, r2
 8004b58:	4423      	add	r3, r4
 8004b5a:	3302      	adds	r3, #2
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	747b      	strb	r3, [r7, #17]

				draw(PixelMapping::Pixel(col, row), r, g, b, 0);
 8004b60:	8bfa      	ldrh	r2, [r7, #30]
 8004b62:	8c39      	ldrh	r1, [r7, #32]
 8004b64:	f107 0308 	add.w	r3, r7, #8
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fc94 	bl	8004496 <_ZN12PixelMapping5PixelC1Ett>
 8004b6e:	7c78      	ldrb	r0, [r7, #17]
 8004b70:	7cba      	ldrb	r2, [r7, #18]
 8004b72:	7cf9      	ldrb	r1, [r7, #19]
 8004b74:	2300      	movs	r3, #0
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	4603      	mov	r3, r0
 8004b7a:	68b8      	ldr	r0, [r7, #8]
 8004b7c:	f7ff fe84 	bl	8004888 <_Z4drawN12PixelMapping5PixelEhhhh>
			for (uint16_t row = 0; row < configuration.getHeight(); row++) {
 8004b80:	8bfb      	ldrh	r3, [r7, #30]
 8004b82:	3301      	adds	r3, #1
 8004b84:	83fb      	strh	r3, [r7, #30]
 8004b86:	e794      	b.n	8004ab2 <cpp_main+0x192>
		for (uint16_t col = 0; col < configuration.getWidth(); col++) {
 8004b88:	8c3b      	ldrh	r3, [r7, #32]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	843b      	strh	r3, [r7, #32]
 8004b8e:	e781      	b.n	8004a94 <cpp_main+0x174>
			}
		}

		commit();
 8004b90:	f7ff feb2 	bl	80048f8 <_Z6commitv>

		pos += 1;
 8004b94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b96:	3301      	adds	r3, #1
 8004b98:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (pos >= IMAGE_FRAMES) {
 8004b9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b9c:	2b09      	cmp	r3, #9
 8004b9e:	f67f af74 	bls.w	8004a8a <cpp_main+0x16a>
			pos = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	84fb      	strh	r3, [r7, #38]	; 0x26
//					b = ((row + col + color_shift) % 4) == 2 ? 255 : 0;
//
//					matrix.SetPixel(col, row, r, g, b);
//				}
//			}
	}
 8004ba6:	e770      	b.n	8004a8a <cpp_main+0x16a>
 8004ba8:	e0042000 	.word	0xe0042000
 8004bac:	200005a0 	.word	0x200005a0
 8004bb0:	08005698 	.word	0x08005698
 8004bb4:	20000598 	.word	0x20000598
 8004bb8:	08005614 	.word	0x08005614
 8004bbc:	20000198 	.word	0x20000198
 8004bc0:	2000061c 	.word	0x2000061c

08004bc4 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d107      	bne.n	8004be4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d102      	bne.n	8004be4 <_Z41__static_initialization_and_destruction_0ii+0x20>
Configuration configuration;
 8004bde:	4803      	ldr	r0, [pc, #12]	; (8004bec <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004be0:	f7ff fd71 	bl	80046c6 <_ZN13ConfigurationC1Ev>
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	200005a0 	.word	0x200005a0

08004bf0 <_GLOBAL__sub_I_buffer>:
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	f7ff ffe3 	bl	8004bc4 <_Z41__static_initialization_and_destruction_0ii>
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <__cxa_pure_virtual>:
 8004c00:	b508      	push	{r3, lr}
 8004c02:	f000 f82b 	bl	8004c5c <_ZSt9terminatev>

08004c06 <_Znaj>:
 8004c06:	f000 b802 	b.w	8004c0e <_Znwj>

08004c0a <_ZdlPvj>:
 8004c0a:	f000 b819 	b.w	8004c40 <_ZdlPv>

08004c0e <_Znwj>:
 8004c0e:	b510      	push	{r4, lr}
 8004c10:	2800      	cmp	r0, #0
 8004c12:	bf14      	ite	ne
 8004c14:	4604      	movne	r4, r0
 8004c16:	2401      	moveq	r4, #1
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f000 f855 	bl	8004cc8 <malloc>
 8004c1e:	b930      	cbnz	r0, 8004c2e <_Znwj+0x20>
 8004c20:	f000 f806 	bl	8004c30 <_ZSt15get_new_handlerv>
 8004c24:	b908      	cbnz	r0, 8004c2a <_Znwj+0x1c>
 8004c26:	f000 f81e 	bl	8004c66 <abort>
 8004c2a:	4780      	blx	r0
 8004c2c:	e7f4      	b.n	8004c18 <_Znwj+0xa>
 8004c2e:	bd10      	pop	{r4, pc}

08004c30 <_ZSt15get_new_handlerv>:
 8004c30:	4b02      	ldr	r3, [pc, #8]	; (8004c3c <_ZSt15get_new_handlerv+0xc>)
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	f3bf 8f5b 	dmb	ish
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	200005b0 	.word	0x200005b0

08004c40 <_ZdlPv>:
 8004c40:	f000 b84a 	b.w	8004cd8 <free>

08004c44 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004c44:	b508      	push	{r3, lr}
 8004c46:	4780      	blx	r0
 8004c48:	f000 f80d 	bl	8004c66 <abort>

08004c4c <_ZSt13get_terminatev>:
 8004c4c:	4b02      	ldr	r3, [pc, #8]	; (8004c58 <_ZSt13get_terminatev+0xc>)
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	f3bf 8f5b 	dmb	ish
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	2000010c 	.word	0x2000010c

08004c5c <_ZSt9terminatev>:
 8004c5c:	b508      	push	{r3, lr}
 8004c5e:	f7ff fff5 	bl	8004c4c <_ZSt13get_terminatev>
 8004c62:	f7ff ffef 	bl	8004c44 <_ZN10__cxxabiv111__terminateEPFvvE>

08004c66 <abort>:
 8004c66:	b508      	push	{r3, lr}
 8004c68:	2006      	movs	r0, #6
 8004c6a:	f000 f925 	bl	8004eb8 <raise>
 8004c6e:	2001      	movs	r0, #1
 8004c70:	f7fb fffc 	bl	8000c6c <_exit>

08004c74 <__errno>:
 8004c74:	4b01      	ldr	r3, [pc, #4]	; (8004c7c <__errno+0x8>)
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000110 	.word	0x20000110

08004c80 <__libc_init_array>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	4e0d      	ldr	r6, [pc, #52]	; (8004cb8 <__libc_init_array+0x38>)
 8004c84:	4c0d      	ldr	r4, [pc, #52]	; (8004cbc <__libc_init_array+0x3c>)
 8004c86:	1ba4      	subs	r4, r4, r6
 8004c88:	10a4      	asrs	r4, r4, #2
 8004c8a:	2500      	movs	r5, #0
 8004c8c:	42a5      	cmp	r5, r4
 8004c8e:	d109      	bne.n	8004ca4 <__libc_init_array+0x24>
 8004c90:	4e0b      	ldr	r6, [pc, #44]	; (8004cc0 <__libc_init_array+0x40>)
 8004c92:	4c0c      	ldr	r4, [pc, #48]	; (8004cc4 <__libc_init_array+0x44>)
 8004c94:	f000 fc7a 	bl	800558c <_init>
 8004c98:	1ba4      	subs	r4, r4, r6
 8004c9a:	10a4      	asrs	r4, r4, #2
 8004c9c:	2500      	movs	r5, #0
 8004c9e:	42a5      	cmp	r5, r4
 8004ca0:	d105      	bne.n	8004cae <__libc_init_array+0x2e>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ca8:	4798      	blx	r3
 8004caa:	3501      	adds	r5, #1
 8004cac:	e7ee      	b.n	8004c8c <__libc_init_array+0xc>
 8004cae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cb2:	4798      	blx	r3
 8004cb4:	3501      	adds	r5, #1
 8004cb6:	e7f2      	b.n	8004c9e <__libc_init_array+0x1e>
 8004cb8:	08023704 	.word	0x08023704
 8004cbc:	08023704 	.word	0x08023704
 8004cc0:	08023704 	.word	0x08023704
 8004cc4:	0802370c 	.word	0x0802370c

08004cc8 <malloc>:
 8004cc8:	4b02      	ldr	r3, [pc, #8]	; (8004cd4 <malloc+0xc>)
 8004cca:	4601      	mov	r1, r0
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	f000 b861 	b.w	8004d94 <_malloc_r>
 8004cd2:	bf00      	nop
 8004cd4:	20000110 	.word	0x20000110

08004cd8 <free>:
 8004cd8:	4b02      	ldr	r3, [pc, #8]	; (8004ce4 <free+0xc>)
 8004cda:	4601      	mov	r1, r0
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	f000 b80b 	b.w	8004cf8 <_free_r>
 8004ce2:	bf00      	nop
 8004ce4:	20000110 	.word	0x20000110

08004ce8 <memset>:
 8004ce8:	4402      	add	r2, r0
 8004cea:	4603      	mov	r3, r0
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d100      	bne.n	8004cf2 <memset+0xa>
 8004cf0:	4770      	bx	lr
 8004cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf6:	e7f9      	b.n	8004cec <memset+0x4>

08004cf8 <_free_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	2900      	cmp	r1, #0
 8004cfe:	d045      	beq.n	8004d8c <_free_r+0x94>
 8004d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d04:	1f0c      	subs	r4, r1, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bfb8      	it	lt
 8004d0a:	18e4      	addlt	r4, r4, r3
 8004d0c:	f000 f910 	bl	8004f30 <__malloc_lock>
 8004d10:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <_free_r+0x98>)
 8004d12:	6813      	ldr	r3, [r2, #0]
 8004d14:	4610      	mov	r0, r2
 8004d16:	b933      	cbnz	r3, 8004d26 <_free_r+0x2e>
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	6014      	str	r4, [r2, #0]
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d22:	f000 b906 	b.w	8004f32 <__malloc_unlock>
 8004d26:	42a3      	cmp	r3, r4
 8004d28:	d90c      	bls.n	8004d44 <_free_r+0x4c>
 8004d2a:	6821      	ldr	r1, [r4, #0]
 8004d2c:	1862      	adds	r2, r4, r1
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	bf04      	itt	eq
 8004d32:	681a      	ldreq	r2, [r3, #0]
 8004d34:	685b      	ldreq	r3, [r3, #4]
 8004d36:	6063      	str	r3, [r4, #4]
 8004d38:	bf04      	itt	eq
 8004d3a:	1852      	addeq	r2, r2, r1
 8004d3c:	6022      	streq	r2, [r4, #0]
 8004d3e:	6004      	str	r4, [r0, #0]
 8004d40:	e7ec      	b.n	8004d1c <_free_r+0x24>
 8004d42:	4613      	mov	r3, r2
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	b10a      	cbz	r2, 8004d4c <_free_r+0x54>
 8004d48:	42a2      	cmp	r2, r4
 8004d4a:	d9fa      	bls.n	8004d42 <_free_r+0x4a>
 8004d4c:	6819      	ldr	r1, [r3, #0]
 8004d4e:	1858      	adds	r0, r3, r1
 8004d50:	42a0      	cmp	r0, r4
 8004d52:	d10b      	bne.n	8004d6c <_free_r+0x74>
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	4401      	add	r1, r0
 8004d58:	1858      	adds	r0, r3, r1
 8004d5a:	4282      	cmp	r2, r0
 8004d5c:	6019      	str	r1, [r3, #0]
 8004d5e:	d1dd      	bne.n	8004d1c <_free_r+0x24>
 8004d60:	6810      	ldr	r0, [r2, #0]
 8004d62:	6852      	ldr	r2, [r2, #4]
 8004d64:	605a      	str	r2, [r3, #4]
 8004d66:	4401      	add	r1, r0
 8004d68:	6019      	str	r1, [r3, #0]
 8004d6a:	e7d7      	b.n	8004d1c <_free_r+0x24>
 8004d6c:	d902      	bls.n	8004d74 <_free_r+0x7c>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	602b      	str	r3, [r5, #0]
 8004d72:	e7d3      	b.n	8004d1c <_free_r+0x24>
 8004d74:	6820      	ldr	r0, [r4, #0]
 8004d76:	1821      	adds	r1, r4, r0
 8004d78:	428a      	cmp	r2, r1
 8004d7a:	bf04      	itt	eq
 8004d7c:	6811      	ldreq	r1, [r2, #0]
 8004d7e:	6852      	ldreq	r2, [r2, #4]
 8004d80:	6062      	str	r2, [r4, #4]
 8004d82:	bf04      	itt	eq
 8004d84:	1809      	addeq	r1, r1, r0
 8004d86:	6021      	streq	r1, [r4, #0]
 8004d88:	605c      	str	r4, [r3, #4]
 8004d8a:	e7c7      	b.n	8004d1c <_free_r+0x24>
 8004d8c:	bd38      	pop	{r3, r4, r5, pc}
 8004d8e:	bf00      	nop
 8004d90:	200005b4 	.word	0x200005b4

08004d94 <_malloc_r>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	1ccd      	adds	r5, r1, #3
 8004d98:	f025 0503 	bic.w	r5, r5, #3
 8004d9c:	3508      	adds	r5, #8
 8004d9e:	2d0c      	cmp	r5, #12
 8004da0:	bf38      	it	cc
 8004da2:	250c      	movcc	r5, #12
 8004da4:	2d00      	cmp	r5, #0
 8004da6:	4606      	mov	r6, r0
 8004da8:	db01      	blt.n	8004dae <_malloc_r+0x1a>
 8004daa:	42a9      	cmp	r1, r5
 8004dac:	d903      	bls.n	8004db6 <_malloc_r+0x22>
 8004dae:	230c      	movs	r3, #12
 8004db0:	6033      	str	r3, [r6, #0]
 8004db2:	2000      	movs	r0, #0
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	f000 f8bb 	bl	8004f30 <__malloc_lock>
 8004dba:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <_malloc_r+0xac>)
 8004dbc:	6814      	ldr	r4, [r2, #0]
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	b991      	cbnz	r1, 8004de8 <_malloc_r+0x54>
 8004dc2:	4c20      	ldr	r4, [pc, #128]	; (8004e44 <_malloc_r+0xb0>)
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	b91b      	cbnz	r3, 8004dd0 <_malloc_r+0x3c>
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f000 f83d 	bl	8004e48 <_sbrk_r>
 8004dce:	6020      	str	r0, [r4, #0]
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f000 f838 	bl	8004e48 <_sbrk_r>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d124      	bne.n	8004e26 <_malloc_r+0x92>
 8004ddc:	230c      	movs	r3, #12
 8004dde:	6033      	str	r3, [r6, #0]
 8004de0:	4630      	mov	r0, r6
 8004de2:	f000 f8a6 	bl	8004f32 <__malloc_unlock>
 8004de6:	e7e4      	b.n	8004db2 <_malloc_r+0x1e>
 8004de8:	680b      	ldr	r3, [r1, #0]
 8004dea:	1b5b      	subs	r3, r3, r5
 8004dec:	d418      	bmi.n	8004e20 <_malloc_r+0x8c>
 8004dee:	2b0b      	cmp	r3, #11
 8004df0:	d90f      	bls.n	8004e12 <_malloc_r+0x7e>
 8004df2:	600b      	str	r3, [r1, #0]
 8004df4:	50cd      	str	r5, [r1, r3]
 8004df6:	18cc      	adds	r4, r1, r3
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f000 f89a 	bl	8004f32 <__malloc_unlock>
 8004dfe:	f104 000b 	add.w	r0, r4, #11
 8004e02:	1d23      	adds	r3, r4, #4
 8004e04:	f020 0007 	bic.w	r0, r0, #7
 8004e08:	1ac3      	subs	r3, r0, r3
 8004e0a:	d0d3      	beq.n	8004db4 <_malloc_r+0x20>
 8004e0c:	425a      	negs	r2, r3
 8004e0e:	50e2      	str	r2, [r4, r3]
 8004e10:	e7d0      	b.n	8004db4 <_malloc_r+0x20>
 8004e12:	428c      	cmp	r4, r1
 8004e14:	684b      	ldr	r3, [r1, #4]
 8004e16:	bf16      	itet	ne
 8004e18:	6063      	strne	r3, [r4, #4]
 8004e1a:	6013      	streq	r3, [r2, #0]
 8004e1c:	460c      	movne	r4, r1
 8004e1e:	e7eb      	b.n	8004df8 <_malloc_r+0x64>
 8004e20:	460c      	mov	r4, r1
 8004e22:	6849      	ldr	r1, [r1, #4]
 8004e24:	e7cc      	b.n	8004dc0 <_malloc_r+0x2c>
 8004e26:	1cc4      	adds	r4, r0, #3
 8004e28:	f024 0403 	bic.w	r4, r4, #3
 8004e2c:	42a0      	cmp	r0, r4
 8004e2e:	d005      	beq.n	8004e3c <_malloc_r+0xa8>
 8004e30:	1a21      	subs	r1, r4, r0
 8004e32:	4630      	mov	r0, r6
 8004e34:	f000 f808 	bl	8004e48 <_sbrk_r>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d0cf      	beq.n	8004ddc <_malloc_r+0x48>
 8004e3c:	6025      	str	r5, [r4, #0]
 8004e3e:	e7db      	b.n	8004df8 <_malloc_r+0x64>
 8004e40:	200005b4 	.word	0x200005b4
 8004e44:	200005b8 	.word	0x200005b8

08004e48 <_sbrk_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4c06      	ldr	r4, [pc, #24]	; (8004e64 <_sbrk_r+0x1c>)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4605      	mov	r5, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	f7fb ff14 	bl	8000c80 <_sbrk>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_sbrk_r+0x1a>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_sbrk_r+0x1a>
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	200006f8 	.word	0x200006f8

08004e68 <_raise_r>:
 8004e68:	291f      	cmp	r1, #31
 8004e6a:	b538      	push	{r3, r4, r5, lr}
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	460d      	mov	r5, r1
 8004e70:	d904      	bls.n	8004e7c <_raise_r+0x14>
 8004e72:	2316      	movs	r3, #22
 8004e74:	6003      	str	r3, [r0, #0]
 8004e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004e7e:	b112      	cbz	r2, 8004e86 <_raise_r+0x1e>
 8004e80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e84:	b94b      	cbnz	r3, 8004e9a <_raise_r+0x32>
 8004e86:	4620      	mov	r0, r4
 8004e88:	f000 f830 	bl	8004eec <_getpid_r>
 8004e8c:	462a      	mov	r2, r5
 8004e8e:	4601      	mov	r1, r0
 8004e90:	4620      	mov	r0, r4
 8004e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e96:	f000 b817 	b.w	8004ec8 <_kill_r>
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d00a      	beq.n	8004eb4 <_raise_r+0x4c>
 8004e9e:	1c59      	adds	r1, r3, #1
 8004ea0:	d103      	bne.n	8004eaa <_raise_r+0x42>
 8004ea2:	2316      	movs	r3, #22
 8004ea4:	6003      	str	r3, [r0, #0]
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	e7e7      	b.n	8004e7a <_raise_r+0x12>
 8004eaa:	2400      	movs	r4, #0
 8004eac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	4798      	blx	r3
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	e7e0      	b.n	8004e7a <_raise_r+0x12>

08004eb8 <raise>:
 8004eb8:	4b02      	ldr	r3, [pc, #8]	; (8004ec4 <raise+0xc>)
 8004eba:	4601      	mov	r1, r0
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	f7ff bfd3 	b.w	8004e68 <_raise_r>
 8004ec2:	bf00      	nop
 8004ec4:	20000110 	.word	0x20000110

08004ec8 <_kill_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	4c07      	ldr	r4, [pc, #28]	; (8004ee8 <_kill_r+0x20>)
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4605      	mov	r5, r0
 8004ed0:	4608      	mov	r0, r1
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	f7fb feb9 	bl	8000c4c <_kill>
 8004eda:	1c43      	adds	r3, r0, #1
 8004edc:	d102      	bne.n	8004ee4 <_kill_r+0x1c>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	b103      	cbz	r3, 8004ee4 <_kill_r+0x1c>
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	bd38      	pop	{r3, r4, r5, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200006f8 	.word	0x200006f8

08004eec <_getpid_r>:
 8004eec:	f7fb bea6 	b.w	8000c3c <_getpid>

08004ef0 <siprintf>:
 8004ef0:	b40e      	push	{r1, r2, r3}
 8004ef2:	b500      	push	{lr}
 8004ef4:	b09c      	sub	sp, #112	; 0x70
 8004ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ef8:	9002      	str	r0, [sp, #8]
 8004efa:	9006      	str	r0, [sp, #24]
 8004efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f00:	4809      	ldr	r0, [pc, #36]	; (8004f28 <siprintf+0x38>)
 8004f02:	9107      	str	r1, [sp, #28]
 8004f04:	9104      	str	r1, [sp, #16]
 8004f06:	4909      	ldr	r1, [pc, #36]	; (8004f2c <siprintf+0x3c>)
 8004f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f0c:	9105      	str	r1, [sp, #20]
 8004f0e:	6800      	ldr	r0, [r0, #0]
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	a902      	add	r1, sp, #8
 8004f14:	f000 f868 	bl	8004fe8 <_svfiprintf_r>
 8004f18:	9b02      	ldr	r3, [sp, #8]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	b01c      	add	sp, #112	; 0x70
 8004f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f24:	b003      	add	sp, #12
 8004f26:	4770      	bx	lr
 8004f28:	20000110 	.word	0x20000110
 8004f2c:	ffff0208 	.word	0xffff0208

08004f30 <__malloc_lock>:
 8004f30:	4770      	bx	lr

08004f32 <__malloc_unlock>:
 8004f32:	4770      	bx	lr

08004f34 <__ssputs_r>:
 8004f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f38:	688e      	ldr	r6, [r1, #8]
 8004f3a:	429e      	cmp	r6, r3
 8004f3c:	4682      	mov	sl, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	4690      	mov	r8, r2
 8004f42:	4699      	mov	r9, r3
 8004f44:	d837      	bhi.n	8004fb6 <__ssputs_r+0x82>
 8004f46:	898a      	ldrh	r2, [r1, #12]
 8004f48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f4c:	d031      	beq.n	8004fb2 <__ssputs_r+0x7e>
 8004f4e:	6825      	ldr	r5, [r4, #0]
 8004f50:	6909      	ldr	r1, [r1, #16]
 8004f52:	1a6f      	subs	r7, r5, r1
 8004f54:	6965      	ldr	r5, [r4, #20]
 8004f56:	2302      	movs	r3, #2
 8004f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f5c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f60:	f109 0301 	add.w	r3, r9, #1
 8004f64:	443b      	add	r3, r7
 8004f66:	429d      	cmp	r5, r3
 8004f68:	bf38      	it	cc
 8004f6a:	461d      	movcc	r5, r3
 8004f6c:	0553      	lsls	r3, r2, #21
 8004f6e:	d530      	bpl.n	8004fd2 <__ssputs_r+0x9e>
 8004f70:	4629      	mov	r1, r5
 8004f72:	f7ff ff0f 	bl	8004d94 <_malloc_r>
 8004f76:	4606      	mov	r6, r0
 8004f78:	b950      	cbnz	r0, 8004f90 <__ssputs_r+0x5c>
 8004f7a:	230c      	movs	r3, #12
 8004f7c:	f8ca 3000 	str.w	r3, [sl]
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f86:	81a3      	strh	r3, [r4, #12]
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	463a      	mov	r2, r7
 8004f92:	6921      	ldr	r1, [r4, #16]
 8004f94:	f000 faa8 	bl	80054e8 <memcpy>
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa2:	81a3      	strh	r3, [r4, #12]
 8004fa4:	6126      	str	r6, [r4, #16]
 8004fa6:	6165      	str	r5, [r4, #20]
 8004fa8:	443e      	add	r6, r7
 8004faa:	1bed      	subs	r5, r5, r7
 8004fac:	6026      	str	r6, [r4, #0]
 8004fae:	60a5      	str	r5, [r4, #8]
 8004fb0:	464e      	mov	r6, r9
 8004fb2:	454e      	cmp	r6, r9
 8004fb4:	d900      	bls.n	8004fb8 <__ssputs_r+0x84>
 8004fb6:	464e      	mov	r6, r9
 8004fb8:	4632      	mov	r2, r6
 8004fba:	4641      	mov	r1, r8
 8004fbc:	6820      	ldr	r0, [r4, #0]
 8004fbe:	f000 fa9e 	bl	80054fe <memmove>
 8004fc2:	68a3      	ldr	r3, [r4, #8]
 8004fc4:	1b9b      	subs	r3, r3, r6
 8004fc6:	60a3      	str	r3, [r4, #8]
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	441e      	add	r6, r3
 8004fcc:	6026      	str	r6, [r4, #0]
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e7dc      	b.n	8004f8c <__ssputs_r+0x58>
 8004fd2:	462a      	mov	r2, r5
 8004fd4:	f000 faac 	bl	8005530 <_realloc_r>
 8004fd8:	4606      	mov	r6, r0
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d1e2      	bne.n	8004fa4 <__ssputs_r+0x70>
 8004fde:	6921      	ldr	r1, [r4, #16]
 8004fe0:	4650      	mov	r0, sl
 8004fe2:	f7ff fe89 	bl	8004cf8 <_free_r>
 8004fe6:	e7c8      	b.n	8004f7a <__ssputs_r+0x46>

08004fe8 <_svfiprintf_r>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	461d      	mov	r5, r3
 8004fee:	898b      	ldrh	r3, [r1, #12]
 8004ff0:	061f      	lsls	r7, r3, #24
 8004ff2:	b09d      	sub	sp, #116	; 0x74
 8004ff4:	4680      	mov	r8, r0
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	4616      	mov	r6, r2
 8004ffa:	d50f      	bpl.n	800501c <_svfiprintf_r+0x34>
 8004ffc:	690b      	ldr	r3, [r1, #16]
 8004ffe:	b96b      	cbnz	r3, 800501c <_svfiprintf_r+0x34>
 8005000:	2140      	movs	r1, #64	; 0x40
 8005002:	f7ff fec7 	bl	8004d94 <_malloc_r>
 8005006:	6020      	str	r0, [r4, #0]
 8005008:	6120      	str	r0, [r4, #16]
 800500a:	b928      	cbnz	r0, 8005018 <_svfiprintf_r+0x30>
 800500c:	230c      	movs	r3, #12
 800500e:	f8c8 3000 	str.w	r3, [r8]
 8005012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005016:	e0c8      	b.n	80051aa <_svfiprintf_r+0x1c2>
 8005018:	2340      	movs	r3, #64	; 0x40
 800501a:	6163      	str	r3, [r4, #20]
 800501c:	2300      	movs	r3, #0
 800501e:	9309      	str	r3, [sp, #36]	; 0x24
 8005020:	2320      	movs	r3, #32
 8005022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005026:	2330      	movs	r3, #48	; 0x30
 8005028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800502c:	9503      	str	r5, [sp, #12]
 800502e:	f04f 0b01 	mov.w	fp, #1
 8005032:	4637      	mov	r7, r6
 8005034:	463d      	mov	r5, r7
 8005036:	f815 3b01 	ldrb.w	r3, [r5], #1
 800503a:	b10b      	cbz	r3, 8005040 <_svfiprintf_r+0x58>
 800503c:	2b25      	cmp	r3, #37	; 0x25
 800503e:	d13e      	bne.n	80050be <_svfiprintf_r+0xd6>
 8005040:	ebb7 0a06 	subs.w	sl, r7, r6
 8005044:	d00b      	beq.n	800505e <_svfiprintf_r+0x76>
 8005046:	4653      	mov	r3, sl
 8005048:	4632      	mov	r2, r6
 800504a:	4621      	mov	r1, r4
 800504c:	4640      	mov	r0, r8
 800504e:	f7ff ff71 	bl	8004f34 <__ssputs_r>
 8005052:	3001      	adds	r0, #1
 8005054:	f000 80a4 	beq.w	80051a0 <_svfiprintf_r+0x1b8>
 8005058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800505a:	4453      	add	r3, sl
 800505c:	9309      	str	r3, [sp, #36]	; 0x24
 800505e:	783b      	ldrb	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 809d 	beq.w	80051a0 <_svfiprintf_r+0x1b8>
 8005066:	2300      	movs	r3, #0
 8005068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800506c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005070:	9304      	str	r3, [sp, #16]
 8005072:	9307      	str	r3, [sp, #28]
 8005074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005078:	931a      	str	r3, [sp, #104]	; 0x68
 800507a:	462f      	mov	r7, r5
 800507c:	2205      	movs	r2, #5
 800507e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005082:	4850      	ldr	r0, [pc, #320]	; (80051c4 <_svfiprintf_r+0x1dc>)
 8005084:	f7fb f8b4 	bl	80001f0 <memchr>
 8005088:	9b04      	ldr	r3, [sp, #16]
 800508a:	b9d0      	cbnz	r0, 80050c2 <_svfiprintf_r+0xda>
 800508c:	06d9      	lsls	r1, r3, #27
 800508e:	bf44      	itt	mi
 8005090:	2220      	movmi	r2, #32
 8005092:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005096:	071a      	lsls	r2, r3, #28
 8005098:	bf44      	itt	mi
 800509a:	222b      	movmi	r2, #43	; 0x2b
 800509c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050a0:	782a      	ldrb	r2, [r5, #0]
 80050a2:	2a2a      	cmp	r2, #42	; 0x2a
 80050a4:	d015      	beq.n	80050d2 <_svfiprintf_r+0xea>
 80050a6:	9a07      	ldr	r2, [sp, #28]
 80050a8:	462f      	mov	r7, r5
 80050aa:	2000      	movs	r0, #0
 80050ac:	250a      	movs	r5, #10
 80050ae:	4639      	mov	r1, r7
 80050b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050b4:	3b30      	subs	r3, #48	; 0x30
 80050b6:	2b09      	cmp	r3, #9
 80050b8:	d94d      	bls.n	8005156 <_svfiprintf_r+0x16e>
 80050ba:	b1b8      	cbz	r0, 80050ec <_svfiprintf_r+0x104>
 80050bc:	e00f      	b.n	80050de <_svfiprintf_r+0xf6>
 80050be:	462f      	mov	r7, r5
 80050c0:	e7b8      	b.n	8005034 <_svfiprintf_r+0x4c>
 80050c2:	4a40      	ldr	r2, [pc, #256]	; (80051c4 <_svfiprintf_r+0x1dc>)
 80050c4:	1a80      	subs	r0, r0, r2
 80050c6:	fa0b f000 	lsl.w	r0, fp, r0
 80050ca:	4318      	orrs	r0, r3
 80050cc:	9004      	str	r0, [sp, #16]
 80050ce:	463d      	mov	r5, r7
 80050d0:	e7d3      	b.n	800507a <_svfiprintf_r+0x92>
 80050d2:	9a03      	ldr	r2, [sp, #12]
 80050d4:	1d11      	adds	r1, r2, #4
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	9103      	str	r1, [sp, #12]
 80050da:	2a00      	cmp	r2, #0
 80050dc:	db01      	blt.n	80050e2 <_svfiprintf_r+0xfa>
 80050de:	9207      	str	r2, [sp, #28]
 80050e0:	e004      	b.n	80050ec <_svfiprintf_r+0x104>
 80050e2:	4252      	negs	r2, r2
 80050e4:	f043 0302 	orr.w	r3, r3, #2
 80050e8:	9207      	str	r2, [sp, #28]
 80050ea:	9304      	str	r3, [sp, #16]
 80050ec:	783b      	ldrb	r3, [r7, #0]
 80050ee:	2b2e      	cmp	r3, #46	; 0x2e
 80050f0:	d10c      	bne.n	800510c <_svfiprintf_r+0x124>
 80050f2:	787b      	ldrb	r3, [r7, #1]
 80050f4:	2b2a      	cmp	r3, #42	; 0x2a
 80050f6:	d133      	bne.n	8005160 <_svfiprintf_r+0x178>
 80050f8:	9b03      	ldr	r3, [sp, #12]
 80050fa:	1d1a      	adds	r2, r3, #4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	9203      	str	r2, [sp, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	bfb8      	it	lt
 8005104:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005108:	3702      	adds	r7, #2
 800510a:	9305      	str	r3, [sp, #20]
 800510c:	4d2e      	ldr	r5, [pc, #184]	; (80051c8 <_svfiprintf_r+0x1e0>)
 800510e:	7839      	ldrb	r1, [r7, #0]
 8005110:	2203      	movs	r2, #3
 8005112:	4628      	mov	r0, r5
 8005114:	f7fb f86c 	bl	80001f0 <memchr>
 8005118:	b138      	cbz	r0, 800512a <_svfiprintf_r+0x142>
 800511a:	2340      	movs	r3, #64	; 0x40
 800511c:	1b40      	subs	r0, r0, r5
 800511e:	fa03 f000 	lsl.w	r0, r3, r0
 8005122:	9b04      	ldr	r3, [sp, #16]
 8005124:	4303      	orrs	r3, r0
 8005126:	3701      	adds	r7, #1
 8005128:	9304      	str	r3, [sp, #16]
 800512a:	7839      	ldrb	r1, [r7, #0]
 800512c:	4827      	ldr	r0, [pc, #156]	; (80051cc <_svfiprintf_r+0x1e4>)
 800512e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005132:	2206      	movs	r2, #6
 8005134:	1c7e      	adds	r6, r7, #1
 8005136:	f7fb f85b 	bl	80001f0 <memchr>
 800513a:	2800      	cmp	r0, #0
 800513c:	d038      	beq.n	80051b0 <_svfiprintf_r+0x1c8>
 800513e:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <_svfiprintf_r+0x1e8>)
 8005140:	bb13      	cbnz	r3, 8005188 <_svfiprintf_r+0x1a0>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	3307      	adds	r3, #7
 8005146:	f023 0307 	bic.w	r3, r3, #7
 800514a:	3308      	adds	r3, #8
 800514c:	9303      	str	r3, [sp, #12]
 800514e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005150:	444b      	add	r3, r9
 8005152:	9309      	str	r3, [sp, #36]	; 0x24
 8005154:	e76d      	b.n	8005032 <_svfiprintf_r+0x4a>
 8005156:	fb05 3202 	mla	r2, r5, r2, r3
 800515a:	2001      	movs	r0, #1
 800515c:	460f      	mov	r7, r1
 800515e:	e7a6      	b.n	80050ae <_svfiprintf_r+0xc6>
 8005160:	2300      	movs	r3, #0
 8005162:	3701      	adds	r7, #1
 8005164:	9305      	str	r3, [sp, #20]
 8005166:	4619      	mov	r1, r3
 8005168:	250a      	movs	r5, #10
 800516a:	4638      	mov	r0, r7
 800516c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005170:	3a30      	subs	r2, #48	; 0x30
 8005172:	2a09      	cmp	r2, #9
 8005174:	d903      	bls.n	800517e <_svfiprintf_r+0x196>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0c8      	beq.n	800510c <_svfiprintf_r+0x124>
 800517a:	9105      	str	r1, [sp, #20]
 800517c:	e7c6      	b.n	800510c <_svfiprintf_r+0x124>
 800517e:	fb05 2101 	mla	r1, r5, r1, r2
 8005182:	2301      	movs	r3, #1
 8005184:	4607      	mov	r7, r0
 8005186:	e7f0      	b.n	800516a <_svfiprintf_r+0x182>
 8005188:	ab03      	add	r3, sp, #12
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4622      	mov	r2, r4
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <_svfiprintf_r+0x1ec>)
 8005190:	a904      	add	r1, sp, #16
 8005192:	4640      	mov	r0, r8
 8005194:	f3af 8000 	nop.w
 8005198:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800519c:	4681      	mov	r9, r0
 800519e:	d1d6      	bne.n	800514e <_svfiprintf_r+0x166>
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	065b      	lsls	r3, r3, #25
 80051a4:	f53f af35 	bmi.w	8005012 <_svfiprintf_r+0x2a>
 80051a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051aa:	b01d      	add	sp, #116	; 0x74
 80051ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b0:	ab03      	add	r3, sp, #12
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	4622      	mov	r2, r4
 80051b6:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <_svfiprintf_r+0x1ec>)
 80051b8:	a904      	add	r1, sp, #16
 80051ba:	4640      	mov	r0, r8
 80051bc:	f000 f882 	bl	80052c4 <_printf_i>
 80051c0:	e7ea      	b.n	8005198 <_svfiprintf_r+0x1b0>
 80051c2:	bf00      	nop
 80051c4:	080236c8 	.word	0x080236c8
 80051c8:	080236ce 	.word	0x080236ce
 80051cc:	080236d2 	.word	0x080236d2
 80051d0:	00000000 	.word	0x00000000
 80051d4:	08004f35 	.word	0x08004f35

080051d8 <_printf_common>:
 80051d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051dc:	4691      	mov	r9, r2
 80051de:	461f      	mov	r7, r3
 80051e0:	688a      	ldr	r2, [r1, #8]
 80051e2:	690b      	ldr	r3, [r1, #16]
 80051e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051e8:	4293      	cmp	r3, r2
 80051ea:	bfb8      	it	lt
 80051ec:	4613      	movlt	r3, r2
 80051ee:	f8c9 3000 	str.w	r3, [r9]
 80051f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051f6:	4606      	mov	r6, r0
 80051f8:	460c      	mov	r4, r1
 80051fa:	b112      	cbz	r2, 8005202 <_printf_common+0x2a>
 80051fc:	3301      	adds	r3, #1
 80051fe:	f8c9 3000 	str.w	r3, [r9]
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	0699      	lsls	r1, r3, #26
 8005206:	bf42      	ittt	mi
 8005208:	f8d9 3000 	ldrmi.w	r3, [r9]
 800520c:	3302      	addmi	r3, #2
 800520e:	f8c9 3000 	strmi.w	r3, [r9]
 8005212:	6825      	ldr	r5, [r4, #0]
 8005214:	f015 0506 	ands.w	r5, r5, #6
 8005218:	d107      	bne.n	800522a <_printf_common+0x52>
 800521a:	f104 0a19 	add.w	sl, r4, #25
 800521e:	68e3      	ldr	r3, [r4, #12]
 8005220:	f8d9 2000 	ldr.w	r2, [r9]
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	42ab      	cmp	r3, r5
 8005228:	dc28      	bgt.n	800527c <_printf_common+0xa4>
 800522a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800522e:	6822      	ldr	r2, [r4, #0]
 8005230:	3300      	adds	r3, #0
 8005232:	bf18      	it	ne
 8005234:	2301      	movne	r3, #1
 8005236:	0692      	lsls	r2, r2, #26
 8005238:	d42d      	bmi.n	8005296 <_printf_common+0xbe>
 800523a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800523e:	4639      	mov	r1, r7
 8005240:	4630      	mov	r0, r6
 8005242:	47c0      	blx	r8
 8005244:	3001      	adds	r0, #1
 8005246:	d020      	beq.n	800528a <_printf_common+0xb2>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	68e5      	ldr	r5, [r4, #12]
 800524c:	f8d9 2000 	ldr.w	r2, [r9]
 8005250:	f003 0306 	and.w	r3, r3, #6
 8005254:	2b04      	cmp	r3, #4
 8005256:	bf08      	it	eq
 8005258:	1aad      	subeq	r5, r5, r2
 800525a:	68a3      	ldr	r3, [r4, #8]
 800525c:	6922      	ldr	r2, [r4, #16]
 800525e:	bf0c      	ite	eq
 8005260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005264:	2500      	movne	r5, #0
 8005266:	4293      	cmp	r3, r2
 8005268:	bfc4      	itt	gt
 800526a:	1a9b      	subgt	r3, r3, r2
 800526c:	18ed      	addgt	r5, r5, r3
 800526e:	f04f 0900 	mov.w	r9, #0
 8005272:	341a      	adds	r4, #26
 8005274:	454d      	cmp	r5, r9
 8005276:	d11a      	bne.n	80052ae <_printf_common+0xd6>
 8005278:	2000      	movs	r0, #0
 800527a:	e008      	b.n	800528e <_printf_common+0xb6>
 800527c:	2301      	movs	r3, #1
 800527e:	4652      	mov	r2, sl
 8005280:	4639      	mov	r1, r7
 8005282:	4630      	mov	r0, r6
 8005284:	47c0      	blx	r8
 8005286:	3001      	adds	r0, #1
 8005288:	d103      	bne.n	8005292 <_printf_common+0xba>
 800528a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	3501      	adds	r5, #1
 8005294:	e7c3      	b.n	800521e <_printf_common+0x46>
 8005296:	18e1      	adds	r1, r4, r3
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	2030      	movs	r0, #48	; 0x30
 800529c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052a0:	4422      	add	r2, r4
 80052a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052aa:	3302      	adds	r3, #2
 80052ac:	e7c5      	b.n	800523a <_printf_common+0x62>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4622      	mov	r2, r4
 80052b2:	4639      	mov	r1, r7
 80052b4:	4630      	mov	r0, r6
 80052b6:	47c0      	blx	r8
 80052b8:	3001      	adds	r0, #1
 80052ba:	d0e6      	beq.n	800528a <_printf_common+0xb2>
 80052bc:	f109 0901 	add.w	r9, r9, #1
 80052c0:	e7d8      	b.n	8005274 <_printf_common+0x9c>
	...

080052c4 <_printf_i>:
 80052c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052cc:	460c      	mov	r4, r1
 80052ce:	7e09      	ldrb	r1, [r1, #24]
 80052d0:	b085      	sub	sp, #20
 80052d2:	296e      	cmp	r1, #110	; 0x6e
 80052d4:	4617      	mov	r7, r2
 80052d6:	4606      	mov	r6, r0
 80052d8:	4698      	mov	r8, r3
 80052da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052dc:	f000 80b3 	beq.w	8005446 <_printf_i+0x182>
 80052e0:	d822      	bhi.n	8005328 <_printf_i+0x64>
 80052e2:	2963      	cmp	r1, #99	; 0x63
 80052e4:	d036      	beq.n	8005354 <_printf_i+0x90>
 80052e6:	d80a      	bhi.n	80052fe <_printf_i+0x3a>
 80052e8:	2900      	cmp	r1, #0
 80052ea:	f000 80b9 	beq.w	8005460 <_printf_i+0x19c>
 80052ee:	2958      	cmp	r1, #88	; 0x58
 80052f0:	f000 8083 	beq.w	80053fa <_printf_i+0x136>
 80052f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80052fc:	e032      	b.n	8005364 <_printf_i+0xa0>
 80052fe:	2964      	cmp	r1, #100	; 0x64
 8005300:	d001      	beq.n	8005306 <_printf_i+0x42>
 8005302:	2969      	cmp	r1, #105	; 0x69
 8005304:	d1f6      	bne.n	80052f4 <_printf_i+0x30>
 8005306:	6820      	ldr	r0, [r4, #0]
 8005308:	6813      	ldr	r3, [r2, #0]
 800530a:	0605      	lsls	r5, r0, #24
 800530c:	f103 0104 	add.w	r1, r3, #4
 8005310:	d52a      	bpl.n	8005368 <_printf_i+0xa4>
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6011      	str	r1, [r2, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	da03      	bge.n	8005322 <_printf_i+0x5e>
 800531a:	222d      	movs	r2, #45	; 0x2d
 800531c:	425b      	negs	r3, r3
 800531e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005322:	486f      	ldr	r0, [pc, #444]	; (80054e0 <_printf_i+0x21c>)
 8005324:	220a      	movs	r2, #10
 8005326:	e039      	b.n	800539c <_printf_i+0xd8>
 8005328:	2973      	cmp	r1, #115	; 0x73
 800532a:	f000 809d 	beq.w	8005468 <_printf_i+0x1a4>
 800532e:	d808      	bhi.n	8005342 <_printf_i+0x7e>
 8005330:	296f      	cmp	r1, #111	; 0x6f
 8005332:	d020      	beq.n	8005376 <_printf_i+0xb2>
 8005334:	2970      	cmp	r1, #112	; 0x70
 8005336:	d1dd      	bne.n	80052f4 <_printf_i+0x30>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	f043 0320 	orr.w	r3, r3, #32
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	e003      	b.n	800534a <_printf_i+0x86>
 8005342:	2975      	cmp	r1, #117	; 0x75
 8005344:	d017      	beq.n	8005376 <_printf_i+0xb2>
 8005346:	2978      	cmp	r1, #120	; 0x78
 8005348:	d1d4      	bne.n	80052f4 <_printf_i+0x30>
 800534a:	2378      	movs	r3, #120	; 0x78
 800534c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005350:	4864      	ldr	r0, [pc, #400]	; (80054e4 <_printf_i+0x220>)
 8005352:	e055      	b.n	8005400 <_printf_i+0x13c>
 8005354:	6813      	ldr	r3, [r2, #0]
 8005356:	1d19      	adds	r1, r3, #4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6011      	str	r1, [r2, #0]
 800535c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005364:	2301      	movs	r3, #1
 8005366:	e08c      	b.n	8005482 <_printf_i+0x1be>
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6011      	str	r1, [r2, #0]
 800536c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005370:	bf18      	it	ne
 8005372:	b21b      	sxthne	r3, r3
 8005374:	e7cf      	b.n	8005316 <_printf_i+0x52>
 8005376:	6813      	ldr	r3, [r2, #0]
 8005378:	6825      	ldr	r5, [r4, #0]
 800537a:	1d18      	adds	r0, r3, #4
 800537c:	6010      	str	r0, [r2, #0]
 800537e:	0628      	lsls	r0, r5, #24
 8005380:	d501      	bpl.n	8005386 <_printf_i+0xc2>
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	e002      	b.n	800538c <_printf_i+0xc8>
 8005386:	0668      	lsls	r0, r5, #25
 8005388:	d5fb      	bpl.n	8005382 <_printf_i+0xbe>
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	4854      	ldr	r0, [pc, #336]	; (80054e0 <_printf_i+0x21c>)
 800538e:	296f      	cmp	r1, #111	; 0x6f
 8005390:	bf14      	ite	ne
 8005392:	220a      	movne	r2, #10
 8005394:	2208      	moveq	r2, #8
 8005396:	2100      	movs	r1, #0
 8005398:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800539c:	6865      	ldr	r5, [r4, #4]
 800539e:	60a5      	str	r5, [r4, #8]
 80053a0:	2d00      	cmp	r5, #0
 80053a2:	f2c0 8095 	blt.w	80054d0 <_printf_i+0x20c>
 80053a6:	6821      	ldr	r1, [r4, #0]
 80053a8:	f021 0104 	bic.w	r1, r1, #4
 80053ac:	6021      	str	r1, [r4, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d13d      	bne.n	800542e <_printf_i+0x16a>
 80053b2:	2d00      	cmp	r5, #0
 80053b4:	f040 808e 	bne.w	80054d4 <_printf_i+0x210>
 80053b8:	4665      	mov	r5, ip
 80053ba:	2a08      	cmp	r2, #8
 80053bc:	d10b      	bne.n	80053d6 <_printf_i+0x112>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	07db      	lsls	r3, r3, #31
 80053c2:	d508      	bpl.n	80053d6 <_printf_i+0x112>
 80053c4:	6923      	ldr	r3, [r4, #16]
 80053c6:	6862      	ldr	r2, [r4, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	bfde      	ittt	le
 80053cc:	2330      	movle	r3, #48	; 0x30
 80053ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053d2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80053d6:	ebac 0305 	sub.w	r3, ip, r5
 80053da:	6123      	str	r3, [r4, #16]
 80053dc:	f8cd 8000 	str.w	r8, [sp]
 80053e0:	463b      	mov	r3, r7
 80053e2:	aa03      	add	r2, sp, #12
 80053e4:	4621      	mov	r1, r4
 80053e6:	4630      	mov	r0, r6
 80053e8:	f7ff fef6 	bl	80051d8 <_printf_common>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d14d      	bne.n	800548c <_printf_i+0x1c8>
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053f4:	b005      	add	sp, #20
 80053f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053fa:	4839      	ldr	r0, [pc, #228]	; (80054e0 <_printf_i+0x21c>)
 80053fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005400:	6813      	ldr	r3, [r2, #0]
 8005402:	6821      	ldr	r1, [r4, #0]
 8005404:	1d1d      	adds	r5, r3, #4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6015      	str	r5, [r2, #0]
 800540a:	060a      	lsls	r2, r1, #24
 800540c:	d50b      	bpl.n	8005426 <_printf_i+0x162>
 800540e:	07ca      	lsls	r2, r1, #31
 8005410:	bf44      	itt	mi
 8005412:	f041 0120 	orrmi.w	r1, r1, #32
 8005416:	6021      	strmi	r1, [r4, #0]
 8005418:	b91b      	cbnz	r3, 8005422 <_printf_i+0x15e>
 800541a:	6822      	ldr	r2, [r4, #0]
 800541c:	f022 0220 	bic.w	r2, r2, #32
 8005420:	6022      	str	r2, [r4, #0]
 8005422:	2210      	movs	r2, #16
 8005424:	e7b7      	b.n	8005396 <_printf_i+0xd2>
 8005426:	064d      	lsls	r5, r1, #25
 8005428:	bf48      	it	mi
 800542a:	b29b      	uxthmi	r3, r3
 800542c:	e7ef      	b.n	800540e <_printf_i+0x14a>
 800542e:	4665      	mov	r5, ip
 8005430:	fbb3 f1f2 	udiv	r1, r3, r2
 8005434:	fb02 3311 	mls	r3, r2, r1, r3
 8005438:	5cc3      	ldrb	r3, [r0, r3]
 800543a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800543e:	460b      	mov	r3, r1
 8005440:	2900      	cmp	r1, #0
 8005442:	d1f5      	bne.n	8005430 <_printf_i+0x16c>
 8005444:	e7b9      	b.n	80053ba <_printf_i+0xf6>
 8005446:	6813      	ldr	r3, [r2, #0]
 8005448:	6825      	ldr	r5, [r4, #0]
 800544a:	6961      	ldr	r1, [r4, #20]
 800544c:	1d18      	adds	r0, r3, #4
 800544e:	6010      	str	r0, [r2, #0]
 8005450:	0628      	lsls	r0, r5, #24
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	d501      	bpl.n	800545a <_printf_i+0x196>
 8005456:	6019      	str	r1, [r3, #0]
 8005458:	e002      	b.n	8005460 <_printf_i+0x19c>
 800545a:	066a      	lsls	r2, r5, #25
 800545c:	d5fb      	bpl.n	8005456 <_printf_i+0x192>
 800545e:	8019      	strh	r1, [r3, #0]
 8005460:	2300      	movs	r3, #0
 8005462:	6123      	str	r3, [r4, #16]
 8005464:	4665      	mov	r5, ip
 8005466:	e7b9      	b.n	80053dc <_printf_i+0x118>
 8005468:	6813      	ldr	r3, [r2, #0]
 800546a:	1d19      	adds	r1, r3, #4
 800546c:	6011      	str	r1, [r2, #0]
 800546e:	681d      	ldr	r5, [r3, #0]
 8005470:	6862      	ldr	r2, [r4, #4]
 8005472:	2100      	movs	r1, #0
 8005474:	4628      	mov	r0, r5
 8005476:	f7fa febb 	bl	80001f0 <memchr>
 800547a:	b108      	cbz	r0, 8005480 <_printf_i+0x1bc>
 800547c:	1b40      	subs	r0, r0, r5
 800547e:	6060      	str	r0, [r4, #4]
 8005480:	6863      	ldr	r3, [r4, #4]
 8005482:	6123      	str	r3, [r4, #16]
 8005484:	2300      	movs	r3, #0
 8005486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800548a:	e7a7      	b.n	80053dc <_printf_i+0x118>
 800548c:	6923      	ldr	r3, [r4, #16]
 800548e:	462a      	mov	r2, r5
 8005490:	4639      	mov	r1, r7
 8005492:	4630      	mov	r0, r6
 8005494:	47c0      	blx	r8
 8005496:	3001      	adds	r0, #1
 8005498:	d0aa      	beq.n	80053f0 <_printf_i+0x12c>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	079b      	lsls	r3, r3, #30
 800549e:	d413      	bmi.n	80054c8 <_printf_i+0x204>
 80054a0:	68e0      	ldr	r0, [r4, #12]
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	4298      	cmp	r0, r3
 80054a6:	bfb8      	it	lt
 80054a8:	4618      	movlt	r0, r3
 80054aa:	e7a3      	b.n	80053f4 <_printf_i+0x130>
 80054ac:	2301      	movs	r3, #1
 80054ae:	464a      	mov	r2, r9
 80054b0:	4639      	mov	r1, r7
 80054b2:	4630      	mov	r0, r6
 80054b4:	47c0      	blx	r8
 80054b6:	3001      	adds	r0, #1
 80054b8:	d09a      	beq.n	80053f0 <_printf_i+0x12c>
 80054ba:	3501      	adds	r5, #1
 80054bc:	68e3      	ldr	r3, [r4, #12]
 80054be:	9a03      	ldr	r2, [sp, #12]
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	42ab      	cmp	r3, r5
 80054c4:	dcf2      	bgt.n	80054ac <_printf_i+0x1e8>
 80054c6:	e7eb      	b.n	80054a0 <_printf_i+0x1dc>
 80054c8:	2500      	movs	r5, #0
 80054ca:	f104 0919 	add.w	r9, r4, #25
 80054ce:	e7f5      	b.n	80054bc <_printf_i+0x1f8>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1ac      	bne.n	800542e <_printf_i+0x16a>
 80054d4:	7803      	ldrb	r3, [r0, #0]
 80054d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054de:	e76c      	b.n	80053ba <_printf_i+0xf6>
 80054e0:	080236d9 	.word	0x080236d9
 80054e4:	080236ea 	.word	0x080236ea

080054e8 <memcpy>:
 80054e8:	b510      	push	{r4, lr}
 80054ea:	1e43      	subs	r3, r0, #1
 80054ec:	440a      	add	r2, r1
 80054ee:	4291      	cmp	r1, r2
 80054f0:	d100      	bne.n	80054f4 <memcpy+0xc>
 80054f2:	bd10      	pop	{r4, pc}
 80054f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054fc:	e7f7      	b.n	80054ee <memcpy+0x6>

080054fe <memmove>:
 80054fe:	4288      	cmp	r0, r1
 8005500:	b510      	push	{r4, lr}
 8005502:	eb01 0302 	add.w	r3, r1, r2
 8005506:	d807      	bhi.n	8005518 <memmove+0x1a>
 8005508:	1e42      	subs	r2, r0, #1
 800550a:	4299      	cmp	r1, r3
 800550c:	d00a      	beq.n	8005524 <memmove+0x26>
 800550e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005512:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005516:	e7f8      	b.n	800550a <memmove+0xc>
 8005518:	4283      	cmp	r3, r0
 800551a:	d9f5      	bls.n	8005508 <memmove+0xa>
 800551c:	1881      	adds	r1, r0, r2
 800551e:	1ad2      	subs	r2, r2, r3
 8005520:	42d3      	cmn	r3, r2
 8005522:	d100      	bne.n	8005526 <memmove+0x28>
 8005524:	bd10      	pop	{r4, pc}
 8005526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800552a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800552e:	e7f7      	b.n	8005520 <memmove+0x22>

08005530 <_realloc_r>:
 8005530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005532:	4607      	mov	r7, r0
 8005534:	4614      	mov	r4, r2
 8005536:	460e      	mov	r6, r1
 8005538:	b921      	cbnz	r1, 8005544 <_realloc_r+0x14>
 800553a:	4611      	mov	r1, r2
 800553c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005540:	f7ff bc28 	b.w	8004d94 <_malloc_r>
 8005544:	b922      	cbnz	r2, 8005550 <_realloc_r+0x20>
 8005546:	f7ff fbd7 	bl	8004cf8 <_free_r>
 800554a:	4625      	mov	r5, r4
 800554c:	4628      	mov	r0, r5
 800554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005550:	f000 f814 	bl	800557c <_malloc_usable_size_r>
 8005554:	42a0      	cmp	r0, r4
 8005556:	d20f      	bcs.n	8005578 <_realloc_r+0x48>
 8005558:	4621      	mov	r1, r4
 800555a:	4638      	mov	r0, r7
 800555c:	f7ff fc1a 	bl	8004d94 <_malloc_r>
 8005560:	4605      	mov	r5, r0
 8005562:	2800      	cmp	r0, #0
 8005564:	d0f2      	beq.n	800554c <_realloc_r+0x1c>
 8005566:	4631      	mov	r1, r6
 8005568:	4622      	mov	r2, r4
 800556a:	f7ff ffbd 	bl	80054e8 <memcpy>
 800556e:	4631      	mov	r1, r6
 8005570:	4638      	mov	r0, r7
 8005572:	f7ff fbc1 	bl	8004cf8 <_free_r>
 8005576:	e7e9      	b.n	800554c <_realloc_r+0x1c>
 8005578:	4635      	mov	r5, r6
 800557a:	e7e7      	b.n	800554c <_realloc_r+0x1c>

0800557c <_malloc_usable_size_r>:
 800557c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005580:	1f18      	subs	r0, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	bfbc      	itt	lt
 8005586:	580b      	ldrlt	r3, [r1, r0]
 8005588:	18c0      	addlt	r0, r0, r3
 800558a:	4770      	bx	lr

0800558c <_init>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr

08005598 <_fini>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	bf00      	nop
 800559c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559e:	bc08      	pop	{r3}
 80055a0:	469e      	mov	lr, r3
 80055a2:	4770      	bx	lr
