
GraphicsDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c0  080046c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080046c0  080046c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046c0  080046c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000070  0800473c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  0800473c  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010642  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025d7  00000000  00000000  000306db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  00032cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  00033bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b177  00000000  00000000  00034a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5c0  00000000  00000000  0004fb77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e37e  00000000  00000000  0005c137  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea4b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000444c  00000000  00000000  000ea530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080045e8 	.word	0x080045e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080045e8 	.word	0x080045e8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <cpp_main>:
//2 - advancing pixel
//3 - image
//4 - Debugging
#define DRAW 2

extern "C" int cpp_main(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b08c      	sub	sp, #48	; 0x30
 8000160:	af02      	add	r7, sp, #8
	__HAL_DBGMCU_FREEZE_IWDG();
 8000162:	4b7e      	ldr	r3, [pc, #504]	; (800035c <cpp_main+0x200>)
 8000164:	685b      	ldr	r3, [r3, #4]
 8000166:	4a7d      	ldr	r2, [pc, #500]	; (800035c <cpp_main+0x200>)
 8000168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800016c:	6053      	str	r3, [r2, #4]

	uint32_t start = HAL_GetTick();
 800016e:	f001 f9d5 	bl	800151c <HAL_GetTick>
 8000172:	61b8      	str	r0, [r7, #24]

	uint16_t color_shift = 1;
 8000174:	2301      	movs	r3, #1
 8000176:	82fb      	strh	r3, [r7, #22]

	uint16_t pos = 0;
 8000178:	2300      	movs	r3, #0
 800017a:	82bb      	strh	r3, [r7, #20]

			matrix.SetPixel(row, col, r, g, b);
		}
	}
#elif DRAW == 2
	for (uint16_t row = 0; row < 32; row++) {
 800017c:	2300      	movs	r3, #0
 800017e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000180:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000182:	2b1f      	cmp	r3, #31
 8000184:	d84b      	bhi.n	800021e <cpp_main+0xc2>
		for (uint16_t col = 0; col < 64; col++) {
 8000186:	2300      	movs	r3, #0
 8000188:	84bb      	strh	r3, [r7, #36]	; 0x24
 800018a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800018c:	2b3f      	cmp	r3, #63	; 0x3f
 800018e:	d842      	bhi.n	8000216 <cpp_main+0xba>
			uint8_t r = ((row == (pos / 64)) && (col == pos % 64)) ? 255 : 0;
 8000190:	8abb      	ldrh	r3, [r7, #20]
 8000192:	099b      	lsrs	r3, r3, #6
 8000194:	b29b      	uxth	r3, r3
 8000196:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000198:	429a      	cmp	r2, r3
 800019a:	d107      	bne.n	80001ac <cpp_main+0x50>
 800019c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800019e:	8abb      	ldrh	r3, [r7, #20]
 80001a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80001a4:	429a      	cmp	r2, r3
 80001a6:	d101      	bne.n	80001ac <cpp_main+0x50>
 80001a8:	23ff      	movs	r3, #255	; 0xff
 80001aa:	e000      	b.n	80001ae <cpp_main+0x52>
 80001ac:	2300      	movs	r3, #0
 80001ae:	74fb      	strb	r3, [r7, #19]
			uint8_t g = ((row == (pos / 64) + 1) && (col == pos % 64)) ? 255 : 0;
 80001b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80001b2:	8abb      	ldrh	r3, [r7, #20]
 80001b4:	099b      	lsrs	r3, r3, #6
 80001b6:	b29b      	uxth	r3, r3
 80001b8:	3301      	adds	r3, #1
 80001ba:	429a      	cmp	r2, r3
 80001bc:	d107      	bne.n	80001ce <cpp_main+0x72>
 80001be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80001c0:	8abb      	ldrh	r3, [r7, #20]
 80001c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80001c6:	429a      	cmp	r2, r3
 80001c8:	d101      	bne.n	80001ce <cpp_main+0x72>
 80001ca:	23ff      	movs	r3, #255	; 0xff
 80001cc:	e000      	b.n	80001d0 <cpp_main+0x74>
 80001ce:	2300      	movs	r3, #0
 80001d0:	74bb      	strb	r3, [r7, #18]
			uint8_t b = ((row == (pos / 64) + 2) && (col == pos % 64)) ? 255 : 0;
 80001d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80001d4:	8abb      	ldrh	r3, [r7, #20]
 80001d6:	099b      	lsrs	r3, r3, #6
 80001d8:	b29b      	uxth	r3, r3
 80001da:	3302      	adds	r3, #2
 80001dc:	429a      	cmp	r2, r3
 80001de:	d107      	bne.n	80001f0 <cpp_main+0x94>
 80001e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80001e2:	8abb      	ldrh	r3, [r7, #20]
 80001e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d101      	bne.n	80001f0 <cpp_main+0x94>
 80001ec:	23ff      	movs	r3, #255	; 0xff
 80001ee:	e000      	b.n	80001f2 <cpp_main+0x96>
 80001f0:	2300      	movs	r3, #0
 80001f2:	747b      	strb	r3, [r7, #17]

			matrix.SetPixel(col, row, r, g, b);
 80001f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80001f6:	b2d9      	uxtb	r1, r3
 80001f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	7cf8      	ldrb	r0, [r7, #19]
 80001fe:	7c7b      	ldrb	r3, [r7, #17]
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	7cbb      	ldrb	r3, [r7, #18]
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	4603      	mov	r3, r0
 8000208:	4855      	ldr	r0, [pc, #340]	; (8000360 <cpp_main+0x204>)
 800020a:	f000 fd34 	bl	8000c76 <_ZN12MatrixDriver8SetPixelEhhhhh>
		for (uint16_t col = 0; col < 64; col++) {
 800020e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000210:	3301      	adds	r3, #1
 8000212:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000214:	e7b9      	b.n	800018a <cpp_main+0x2e>
	for (uint16_t row = 0; row < 32; row++) {
 8000216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000218:	3301      	adds	r3, #1
 800021a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800021c:	e7b0      	b.n	8000180 <cpp_main+0x24>
			matrix.SetPixel(col, row, r, g, b);
		}
	}
#endif

	lastUpdate = HAL_GetTick();
 800021e:	f001 f97d 	bl	800151c <HAL_GetTick>
 8000222:	4602      	mov	r2, r0
 8000224:	4b4f      	ldr	r3, [pc, #316]	; (8000364 <cpp_main+0x208>)
 8000226:	601a      	str	r2, [r3, #0]

	color_shift++;
 8000228:	8afb      	ldrh	r3, [r7, #22]
 800022a:	3301      	adds	r3, #1
 800022c:	82fb      	strh	r3, [r7, #22]

//	matrix.Dump();

	matrix.SwapBuffer();
 800022e:	484c      	ldr	r0, [pc, #304]	; (8000360 <cpp_main+0x204>)
 8000230:	f000 fdd8 	bl	8000de4 <_ZN12MatrixDriver10SwapBufferEv>

	uint32_t duration = HAL_GetTick() - start;
 8000234:	f001 f972 	bl	800151c <HAL_GetTick>
 8000238:	4602      	mov	r2, r0
 800023a:	69bb      	ldr	r3, [r7, #24]
 800023c:	1ad3      	subs	r3, r2, r3
 800023e:	60fb      	str	r3, [r7, #12]

	sprintf(buffer, "Setup Duration: %lu\n", duration);
 8000240:	68fa      	ldr	r2, [r7, #12]
 8000242:	4949      	ldr	r1, [pc, #292]	; (8000368 <cpp_main+0x20c>)
 8000244:	4849      	ldr	r0, [pc, #292]	; (800036c <cpp_main+0x210>)
 8000246:	f003 fe73 	bl	8003f30 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 500);
 800024a:	4848      	ldr	r0, [pc, #288]	; (800036c <cpp_main+0x210>)
 800024c:	f7ff ff7e 	bl	800014c <strlen>
 8000250:	4603      	mov	r3, r0
 8000252:	b29a      	uxth	r2, r3
 8000254:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000258:	4944      	ldr	r1, [pc, #272]	; (800036c <cpp_main+0x210>)
 800025a:	4845      	ldr	r0, [pc, #276]	; (8000370 <cpp_main+0x214>)
 800025c:	f003 fba6 	bl	80039ac <HAL_UART_Transmit>

	matrix.open();
 8000260:	483f      	ldr	r0, [pc, #252]	; (8000360 <cpp_main+0x204>)
 8000262:	f000 fc7d 	bl	8000b60 <_ZN12MatrixDriver4openEv>

	while (1) {

		uint32_t now = HAL_GetTick();
 8000266:	f001 f959 	bl	800151c <HAL_GetTick>
 800026a:	60b8      	str	r0, [r7, #8]

		if ((now - lastUpdate) > 10) {
 800026c:	4b3d      	ldr	r3, [pc, #244]	; (8000364 <cpp_main+0x208>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	68ba      	ldr	r2, [r7, #8]
 8000272:	1ad3      	subs	r3, r2, r3
 8000274:	2b0a      	cmp	r3, #10
 8000276:	d9f6      	bls.n	8000266 <cpp_main+0x10a>
			color_shift++;

			matrix.SwapBuffer();

#elif DRAW == 2
			pos = 33;
 8000278:	2321      	movs	r3, #33	; 0x21
 800027a:	82bb      	strh	r3, [r7, #20]

			for (uint16_t row = 0; row < 32; row++) {
 800027c:	2300      	movs	r3, #0
 800027e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000280:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000282:	2b1f      	cmp	r3, #31
 8000284:	d859      	bhi.n	800033a <cpp_main+0x1de>
				for (uint16_t col = 0; col < 64; col++) {
 8000286:	2300      	movs	r3, #0
 8000288:	843b      	strh	r3, [r7, #32]
 800028a:	8c3b      	ldrh	r3, [r7, #32]
 800028c:	2b3f      	cmp	r3, #63	; 0x3f
 800028e:	d850      	bhi.n	8000332 <cpp_main+0x1d6>

					uint8_t r = row == (pos / 64) && col == (pos % 64) ? 255 : 0;
 8000290:	8abb      	ldrh	r3, [r7, #20]
 8000292:	099b      	lsrs	r3, r3, #6
 8000294:	b29b      	uxth	r3, r3
 8000296:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000298:	429a      	cmp	r2, r3
 800029a:	d107      	bne.n	80002ac <cpp_main+0x150>
 800029c:	8c3a      	ldrh	r2, [r7, #32]
 800029e:	8abb      	ldrh	r3, [r7, #20]
 80002a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d101      	bne.n	80002ac <cpp_main+0x150>
 80002a8:	23ff      	movs	r3, #255	; 0xff
 80002aa:	e000      	b.n	80002ae <cpp_main+0x152>
 80002ac:	2300      	movs	r3, #0
 80002ae:	77fb      	strb	r3, [r7, #31]

					if(row == pos / 64) {
 80002b0:	8abb      	ldrh	r3, [r7, #20]
 80002b2:	099b      	lsrs	r3, r3, #6
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d107      	bne.n	80002cc <cpp_main+0x170>
						if(col == pos % 64) {
 80002bc:	8c3a      	ldrh	r2, [r7, #32]
 80002be:	8abb      	ldrh	r3, [r7, #20]
 80002c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d101      	bne.n	80002cc <cpp_main+0x170>
							r = 255;
 80002c8:	23ff      	movs	r3, #255	; 0xff
 80002ca:	77fb      	strb	r3, [r7, #31]
						}
					}

					uint8_t g = row == (pos / 64) + 1 && col == (pos % 64) ? 255 : 0;
 80002cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80002ce:	8abb      	ldrh	r3, [r7, #20]
 80002d0:	099b      	lsrs	r3, r3, #6
 80002d2:	b29b      	uxth	r3, r3
 80002d4:	3301      	adds	r3, #1
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d107      	bne.n	80002ea <cpp_main+0x18e>
 80002da:	8c3a      	ldrh	r2, [r7, #32]
 80002dc:	8abb      	ldrh	r3, [r7, #20]
 80002de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d101      	bne.n	80002ea <cpp_main+0x18e>
 80002e6:	23ff      	movs	r3, #255	; 0xff
 80002e8:	e000      	b.n	80002ec <cpp_main+0x190>
 80002ea:	2300      	movs	r3, #0
 80002ec:	71fb      	strb	r3, [r7, #7]
					uint8_t b = row == (pos / 64) + 2 && col == (pos % 64) ? 255 : 0;
 80002ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80002f0:	8abb      	ldrh	r3, [r7, #20]
 80002f2:	099b      	lsrs	r3, r3, #6
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	3302      	adds	r3, #2
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d107      	bne.n	800030c <cpp_main+0x1b0>
 80002fc:	8c3a      	ldrh	r2, [r7, #32]
 80002fe:	8abb      	ldrh	r3, [r7, #20]
 8000300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000304:	429a      	cmp	r2, r3
 8000306:	d101      	bne.n	800030c <cpp_main+0x1b0>
 8000308:	23ff      	movs	r3, #255	; 0xff
 800030a:	e000      	b.n	800030e <cpp_main+0x1b2>
 800030c:	2300      	movs	r3, #0
 800030e:	71bb      	strb	r3, [r7, #6]

					matrix.SetPixel(col, row, r, g, b);
 8000310:	8c3b      	ldrh	r3, [r7, #32]
 8000312:	b2d9      	uxtb	r1, r3
 8000314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000316:	b2da      	uxtb	r2, r3
 8000318:	7ff8      	ldrb	r0, [r7, #31]
 800031a:	79bb      	ldrb	r3, [r7, #6]
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	9300      	str	r3, [sp, #0]
 8000322:	4603      	mov	r3, r0
 8000324:	480e      	ldr	r0, [pc, #56]	; (8000360 <cpp_main+0x204>)
 8000326:	f000 fca6 	bl	8000c76 <_ZN12MatrixDriver8SetPixelEhhhhh>
				for (uint16_t col = 0; col < 64; col++) {
 800032a:	8c3b      	ldrh	r3, [r7, #32]
 800032c:	3301      	adds	r3, #1
 800032e:	843b      	strh	r3, [r7, #32]
 8000330:	e7ab      	b.n	800028a <cpp_main+0x12e>
			for (uint16_t row = 0; row < 32; row++) {
 8000332:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000334:	3301      	adds	r3, #1
 8000336:	847b      	strh	r3, [r7, #34]	; 0x22
 8000338:	e7a2      	b.n	8000280 <cpp_main+0x124>
				}
			}
			pos++;
 800033a:	8abb      	ldrh	r3, [r7, #20]
 800033c:	3301      	adds	r3, #1
 800033e:	82bb      	strh	r3, [r7, #20]

			if (pos > (32 * 64)) {
 8000340:	8abb      	ldrh	r3, [r7, #20]
 8000342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000346:	d901      	bls.n	800034c <cpp_main+0x1f0>
				pos = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	82bb      	strh	r3, [r7, #20]
			}

			matrix.SwapBuffer();
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <cpp_main+0x204>)
 800034e:	f000 fd49 	bl	8000de4 <_ZN12MatrixDriver10SwapBufferEv>
//
//					matrix.SetPixel(col, row, r, g, b);
//				}
//			}

			lastUpdate = now;
 8000352:	4a04      	ldr	r2, [pc, #16]	; (8000364 <cpp_main+0x208>)
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	6013      	str	r3, [r2, #0]
		}
	}
 8000358:	e785      	b.n	8000266 <cpp_main+0x10a>
 800035a:	bf00      	nop
 800035c:	e0042000 	.word	0xe0042000
 8000360:	2000008c 	.word	0x2000008c
 8000364:	200004a4 	.word	0x200004a4
 8000368:	08004600 	.word	0x08004600
 800036c:	200000a4 	.word	0x200000a4
 8000370:	20000554 	.word	0x20000554

08000374 <_Z41__static_initialization_and_destruction_0ii>:
}
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d10a      	bne.n	800039a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800038a:	4293      	cmp	r3, r2
 800038c:	d105      	bne.n	800039a <_Z41__static_initialization_and_destruction_0ii+0x26>
MatrixDriver matrix(64, 32, MatrixDriver::ScanType::SCAN_16);
 800038e:	2300      	movs	r3, #0
 8000390:	2220      	movs	r2, #32
 8000392:	2140      	movs	r1, #64	; 0x40
 8000394:	4803      	ldr	r0, [pc, #12]	; (80003a4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000396:	f000 fb41 	bl	8000a1c <_ZN12MatrixDriverC1EhhNS_8ScanTypeE>
}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	2000008c 	.word	0x2000008c

080003a8 <_GLOBAL__sub_I_matrix>:
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80003b0:	2001      	movs	r0, #1
 80003b2:	f7ff ffdf 	bl	8000374 <_Z41__static_initialization_and_destruction_0ii>
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f001 f856 	bl	800146c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f813 	bl	80003ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f000 fa70 	bl	80008a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c8:	f000 fa50 	bl	800086c <MX_DMA_Init>
  MX_SPI1_Init();
 80003cc:	f000 f86e 	bl	80004ac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80003d0:	f000 fa22 	bl	8000818 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80003d4:	f000 f850 	bl	8000478 <MX_IWDG_Init>
  MX_TIM2_Init();
 80003d8:	f000 f944 	bl	8000664 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003dc:	f000 f9c6 	bl	800076c <MX_TIM3_Init>
  MX_TIM1_Init();
 80003e0:	f000 f89a 	bl	8000518 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 80003e4:	f7ff feba 	bl	800015c <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <main+0x30>

080003ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	b090      	sub	sp, #64	; 0x40
 80003ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	2228      	movs	r2, #40	; 0x28
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f003 fc97 	bl	8003d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800040c:	2309      	movs	r3, #9
 800040e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000414:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041a:	2301      	movs	r3, #1
 800041c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800041e:	2301      	movs	r3, #1
 8000420:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000422:	2302      	movs	r3, #2
 8000424:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800042c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000430:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000432:	f107 0318 	add.w	r3, r7, #24
 8000436:	4618      	mov	r0, r3
 8000438:	f001 fd30 	bl	8001e9c <HAL_RCC_OscConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000442:	f000 fa9f 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	230f      	movs	r3, #15
 8000448:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	2302      	movs	r3, #2
 800044c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2102      	movs	r1, #2
 8000460:	4618      	mov	r0, r3
 8000462:	f001 ff9b 	bl	800239c <HAL_RCC_ClockConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800046c:	f000 fa8a 	bl	8000984 <Error_Handler>
  }
}
 8000470:	bf00      	nop
 8000472:	3740      	adds	r7, #64	; 0x40
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_IWDG_Init+0x2c>)
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <MX_IWDG_Init+0x30>)
 8000480:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_IWDG_Init+0x2c>)
 8000484:	2206      	movs	r2, #6
 8000486:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_IWDG_Init+0x2c>)
 800048a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800048e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <MX_IWDG_Init+0x2c>)
 8000492:	f001 fcbb 	bl	8001e0c <HAL_IWDG_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800049c:	f000 fa72 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000500 	.word	0x20000500
 80004a8:	40003000 	.word	0x40003000

080004ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <MX_SPI1_Init+0x64>)
 80004b2:	4a18      	ldr	r2, [pc, #96]	; (8000514 <MX_SPI1_Init+0x68>)
 80004b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80004b6:	4b16      	ldr	r3, [pc, #88]	; (8000510 <MX_SPI1_Init+0x64>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_SPI1_Init+0x64>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <MX_SPI1_Init+0x64>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_SPI1_Init+0x64>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <MX_SPI1_Init+0x64>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_SPI1_Init+0x64>)
 80004d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_SPI1_Init+0x64>)
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <MX_SPI1_Init+0x64>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_SPI1_Init+0x64>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <MX_SPI1_Init+0x64>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_SPI1_Init+0x64>)
 80004f6:	220a      	movs	r2, #10
 80004f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_SPI1_Init+0x64>)
 80004fc:	f002 f8ea 	bl	80026d4 <HAL_SPI_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8000506:	f000 fa3d 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200005dc 	.word	0x200005dc
 8000514:	40013000 	.word	0x40013000

08000518 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	; 0x58
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2220      	movs	r2, #32
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f003 fbeb 	bl	8003d2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000556:	4b41      	ldr	r3, [pc, #260]	; (800065c <MX_TIM1_Init+0x144>)
 8000558:	4a41      	ldr	r2, [pc, #260]	; (8000660 <MX_TIM1_Init+0x148>)
 800055a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800055c:	4b3f      	ldr	r3, [pc, #252]	; (800065c <MX_TIM1_Init+0x144>)
 800055e:	2200      	movs	r2, #0
 8000560:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000562:	4b3e      	ldr	r3, [pc, #248]	; (800065c <MX_TIM1_Init+0x144>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8000568:	4b3c      	ldr	r3, [pc, #240]	; (800065c <MX_TIM1_Init+0x144>)
 800056a:	2201      	movs	r2, #1
 800056c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056e:	4b3b      	ldr	r3, [pc, #236]	; (800065c <MX_TIM1_Init+0x144>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 7;
 8000574:	4b39      	ldr	r3, [pc, #228]	; (800065c <MX_TIM1_Init+0x144>)
 8000576:	2207      	movs	r2, #7
 8000578:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057a:	4b38      	ldr	r3, [pc, #224]	; (800065c <MX_TIM1_Init+0x144>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000580:	4836      	ldr	r0, [pc, #216]	; (800065c <MX_TIM1_Init+0x144>)
 8000582:	f002 f92b 	bl	80027dc <HAL_TIM_Base_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800058c:	f000 f9fa 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000596:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800059a:	4619      	mov	r1, r3
 800059c:	482f      	ldr	r0, [pc, #188]	; (800065c <MX_TIM1_Init+0x144>)
 800059e:	f002 fca7 	bl	8002ef0 <HAL_TIM_ConfigClockSource>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80005a8:	f000 f9ec 	bl	8000984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005ac:	482b      	ldr	r0, [pc, #172]	; (800065c <MX_TIM1_Init+0x144>)
 80005ae:	f002 fa27 	bl	8002a00 <HAL_TIM_PWM_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80005b8:	f000 f9e4 	bl	8000984 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80005bc:	2108      	movs	r1, #8
 80005be:	4827      	ldr	r0, [pc, #156]	; (800065c <MX_TIM1_Init+0x144>)
 80005c0:	f002 fa76 	bl	8002ab0 <HAL_TIM_OnePulse_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80005ca:	f000 f9db 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80005ce:	2340      	movs	r3, #64	; 0x40
 80005d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005da:	4619      	mov	r1, r3
 80005dc:	481f      	ldr	r0, [pc, #124]	; (800065c <MX_TIM1_Init+0x144>)
 80005de:	f003 f8d7 	bl	8003790 <HAL_TIMEx_MasterConfigSynchronization>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80005e8:	f000 f9cc 	bl	8000984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ec:	2360      	movs	r3, #96	; 0x60
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005f8:	2300      	movs	r3, #0
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <MX_TIM1_Init+0x144>)
 8000612:	f002 fbaf 	bl	8002d74 <HAL_TIM_PWM_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800061c:	f000 f9b2 	bl	8000984 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000638:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4619      	mov	r1, r3
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <MX_TIM1_Init+0x144>)
 8000644:	f003 f902 	bl	800384c <HAL_TIMEx_ConfigBreakDeadTime>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800064e:	f000 f999 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	3758      	adds	r7, #88	; 0x58
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000594 	.word	0x20000594
 8000660:	40012c00 	.word	0x40012c00

08000664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08e      	sub	sp, #56	; 0x38
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800066a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000696:	4b34      	ldr	r3, [pc, #208]	; (8000768 <MX_TIM2_Init+0x104>)
 8000698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800069e:	4b32      	ldr	r3, [pc, #200]	; (8000768 <MX_TIM2_Init+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <MX_TIM2_Init+0x104>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <MX_TIM2_Init+0x104>)
 80006ac:	2207      	movs	r2, #7
 80006ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <MX_TIM2_Init+0x104>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <MX_TIM2_Init+0x104>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006bc:	482a      	ldr	r0, [pc, #168]	; (8000768 <MX_TIM2_Init+0x104>)
 80006be:	f002 f88d 	bl	80027dc <HAL_TIM_Base_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006c8:	f000 f95c 	bl	8000984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006cc:	4826      	ldr	r0, [pc, #152]	; (8000768 <MX_TIM2_Init+0x104>)
 80006ce:	f002 f997 	bl	8002a00 <HAL_TIM_PWM_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80006d8:	f000 f954 	bl	8000984 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80006dc:	2307      	movs	r3, #7
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80006e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e8:	4619      	mov	r1, r3
 80006ea:	481f      	ldr	r0, [pc, #124]	; (8000768 <MX_TIM2_Init+0x104>)
 80006ec:	f002 fcb7 	bl	800305e <HAL_TIM_SlaveConfigSynchro>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006f6:	f000 f945 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4817      	ldr	r0, [pc, #92]	; (8000768 <MX_TIM2_Init+0x104>)
 800070a:	f003 f841 	bl	8003790 <HAL_TIMEx_MasterConfigSynchronization>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000714:	f000 f936 	bl	8000984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000718:	2360      	movs	r3, #96	; 0x60
 800071a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000720:	2302      	movs	r3, #2
 8000722:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_TIM2_Init+0x104>)
 8000730:	f002 fb20 	bl	8002d74 <HAL_TIM_PWM_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800073a:	f000 f923 	bl	8000984 <Error_Handler>
  }
  sConfigOC.Pulse = 7;
 800073e:	2307      	movs	r3, #7
 8000740:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	2204      	movs	r2, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4807      	ldr	r0, [pc, #28]	; (8000768 <MX_TIM2_Init+0x104>)
 800074a:	f002 fb13 	bl	8002d74 <HAL_TIM_PWM_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000754:	f000 f916 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <MX_TIM2_Init+0x104>)
 800075a:	f000 fd49 	bl	80011f0 <HAL_TIM_MspPostInit>

}
 800075e:	bf00      	nop
 8000760:	3738      	adds	r7, #56	; 0x38
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000634 	.word	0x20000634

0800076c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_TIM3_Init+0xa4>)
 800078a:	4a22      	ldr	r2, [pc, #136]	; (8000814 <MX_TIM3_Init+0xa8>)
 800078c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_TIM3_Init+0xa4>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_TIM3_Init+0xa4>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 700;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_TIM3_Init+0xa4>)
 800079c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80007a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_TIM3_Init+0xa4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_TIM3_Init+0xa4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007ae:	4818      	ldr	r0, [pc, #96]	; (8000810 <MX_TIM3_Init+0xa4>)
 80007b0:	f002 f814 	bl	80027dc <HAL_TIM_Base_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f8e3 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4619      	mov	r1, r3
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_TIM3_Init+0xa4>)
 80007cc:	f002 fb90 	bl	8002ef0 <HAL_TIM_ConfigClockSource>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f8d5 	bl	8000984 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80007da:	2108      	movs	r1, #8
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_TIM3_Init+0xa4>)
 80007de:	f002 f967 	bl	8002ab0 <HAL_TIM_OnePulse_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80007e8:	f000 f8cc 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80007ec:	2310      	movs	r3, #16
 80007ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_TIM3_Init+0xa4>)
 80007fa:	f002 ffc9 	bl	8003790 <HAL_TIMEx_MasterConfigSynchronization>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000804:	f000 f8be 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000050c 	.word	0x2000050c
 8000814:	40000400 	.word	0x40000400

08000818 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_USART1_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000850:	f003 f85f 	bl	8003912 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f000 f893 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000554 	.word	0x20000554
 8000868:	40013800 	.word	0x40013800

0800086c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_DMA_Init+0x38>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <MX_DMA_Init+0x38>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_DMA_Init+0x38>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	200f      	movs	r0, #15
 8000890:	f000 ff25 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000894:	200f      	movs	r0, #15
 8000896:	f000 ff3e 	bl	8001716 <HAL_NVIC_EnableIRQ>

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008bc:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a2d      	ldr	r2, [pc, #180]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0310 	and.w	r3, r3, #16
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a27      	ldr	r2, [pc, #156]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008da:	f043 0320 	orr.w	r3, r3, #32
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a21      	ldr	r2, [pc, #132]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_GPIO_Init+0xd0>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <MX_GPIO_Init+0xd0>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_GPIO_Init+0xd0>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Matrix_A_Pin|Matrix_B_Pin|Matrix_C_Pin|Matrix_D_Pin
 800091c:	2200      	movs	r2, #0
 800091e:	f649 111c 	movw	r1, #39196	; 0x991c
 8000922:	4816      	ldr	r0, [pc, #88]	; (800097c <MX_GPIO_Init+0xd4>)
 8000924:	f001 fa5a 	bl	8001ddc <HAL_GPIO_WritePin>
                          |Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix2_G1_Pin
 8000928:	2200      	movs	r2, #0
 800092a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800092e:	4814      	ldr	r0, [pc, #80]	; (8000980 <MX_GPIO_Init+0xd8>)
 8000930:	f001 fa54 	bl	8001ddc <HAL_GPIO_WritePin>
                          |LED_8B_Pin|Matrix_R1_Pin|Matrix_G1_Pin|Matrix_B1_Pin
                          |Matrix2_R0_Pin|Matrix2_G0_Pin|Matrix2_B0_Pin|Matrix2_R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Matrix_A_Pin Matrix_B_Pin Matrix_C_Pin Matrix_D_Pin
                           Matrix_LAT_Pin Matrix_OE_Pin Matrix_E_Pin */
  GPIO_InitStruct.Pin = Matrix_A_Pin|Matrix_B_Pin|Matrix_C_Pin|Matrix_D_Pin
 8000934:	f649 131c 	movw	r3, #39196	; 0x991c
 8000938:	613b      	str	r3, [r7, #16]
                          |Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4619      	mov	r1, r3
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <MX_GPIO_Init+0xd4>)
 800094e:	f001 f8eb 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B0_Pin Matrix2_G1_Pin
                           Matrix2_B1_Pin LED_7A_Pin LED_7B_Pin LED_8A_Pin
                           LED_8B_Pin Matrix_R1_Pin Matrix_G1_Pin Matrix_B1_Pin
                           Matrix2_R0_Pin Matrix2_G0_Pin Matrix2_B0_Pin Matrix2_R1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix2_G1_Pin
 8000952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000956:	613b      	str	r3, [r7, #16]
                          |Matrix2_B1_Pin|LED_7A_Pin|LED_7B_Pin|LED_8A_Pin
                          |LED_8B_Pin|Matrix_R1_Pin|Matrix_G1_Pin|Matrix_B1_Pin
                          |Matrix2_R0_Pin|Matrix2_G0_Pin|Matrix2_B0_Pin|Matrix2_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000960:	2301      	movs	r3, #1
 8000962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_GPIO_Init+0xd8>)
 800096c:	f001 f8dc 	bl	8001b28 <HAL_GPIO_Init>

}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000
 800097c:	40010800 	.word	0x40010800
 8000980:	40010c00 	.word	0x40010c00

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <_Z12DMA_CompleteP19__DMA_HandleTypeDef>:
//		instance->handleNeeded = true;
//		instance->Handle();
//	}
//}

void DMA_Complete(DMA_HandleTypeDef *hdma) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	instance->handleNeeded = true;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x24>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]

	instance->Handle();
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x24>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fa30 	bl	8000e0a <_ZN12MatrixDriver6HandleEv>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200004a8 	.word	0x200004a8

080009b8 <_ZN12MatrixDriver12BufferOffsetEhhh>:

uint16_t MatrixDriver::BufferOffset(uint8_t x, uint8_t y, uint8_t plane) {
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	4608      	mov	r0, r1
 80009c2:	4611      	mov	r1, r2
 80009c4:	461a      	mov	r2, r3
 80009c6:	4603      	mov	r3, r0
 80009c8:	70fb      	strb	r3, [r7, #3]
 80009ca:	460b      	mov	r3, r1
 80009cc:	70bb      	strb	r3, [r7, #2]
 80009ce:	4613      	mov	r3, r2
 80009d0:	707b      	strb	r3, [r7, #1]
	return (plane * planeSize) + ((y % (height / 2)) * width) + x;
 80009d2:	787b      	ldrb	r3, [r7, #1]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	88d2      	ldrh	r2, [r2, #6]
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	b299      	uxth	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	789b      	ldrb	r3, [r3, #2]
 80009e4:	085b      	lsrs	r3, r3, #1
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	78bb      	ldrb	r3, [r7, #2]
 80009ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80009ee:	fb02 f200 	mul.w	r2, r2, r0
 80009f2:	1a9b      	subs	r3, r3, r2
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	7852      	ldrb	r2, [r2, #1]
 80009fc:	b292      	uxth	r2, r2
 80009fe:	fb02 f303 	mul.w	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	440b      	add	r3, r1
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b29b      	uxth	r3, r3
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
	...

08000a1c <_ZN12MatrixDriverC1EhhNS_8ScanTypeE>:

#define MIN(a,b) (((a)<(b))?(a):(b))

MatrixDriver::MatrixDriver(uint8_t width, uint8_t height, ScanType scanType) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	4608      	mov	r0, r1
 8000a26:	4611      	mov	r1, r2
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	70fb      	strb	r3, [r7, #3]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	70bb      	strb	r3, [r7, #2]
 8000a32:	4613      	mov	r3, r2
 8000a34:	707b      	strb	r3, [r7, #1]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	82da      	strh	r2, [r3, #22]
	this->width = width;
 8000a42:	78fa      	ldrb	r2, [r7, #3]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	705a      	strb	r2, [r3, #1]
	this->height = height;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	78ba      	ldrb	r2, [r7, #2]
 8000a4c:	709a      	strb	r2, [r3, #2]
	this->scanType = scanType;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	787a      	ldrb	r2, [r7, #1]
 8000a52:	711a      	strb	r2, [r3, #4]
	this->planes = 4;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2204      	movs	r2, #4
 8000a58:	70da      	strb	r2, [r3, #3]

	this->planeSize = width * (height / 2);
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	78ba      	ldrb	r2, [r7, #2]
 8000a60:	0852      	lsrs	r2, r2, #1
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	b292      	uxth	r2, r2
 8000a66:	fb02 f303 	mul.w	r3, r2, r3
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	80da      	strh	r2, [r3, #6]
	this->bufferSize = planeSize * planes;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	88db      	ldrh	r3, [r3, #6]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	78d2      	ldrb	r2, [r2, #3]
 8000a78:	b292      	uxth	r2, r2
 8000a7a:	fb02 f303 	mul.w	r3, r2, r3
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	811a      	strh	r2, [r3, #8]

	this->sendBufferA = true;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	715a      	strb	r2, [r3, #5]
	this->bufferA = new uint16_t[bufferSize];
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	891b      	ldrh	r3, [r3, #8]
 8000a8e:	4a32      	ldr	r2, [pc, #200]	; (8000b58 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x13c>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d801      	bhi.n	8000a98 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x7c>
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	e001      	b.n	8000a9c <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x80>
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 f8ef 	bl	8003c80 <_Znaj>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60da      	str	r2, [r3, #12]
	this->bufferB = new uint16_t[bufferSize];
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	891b      	ldrh	r3, [r3, #8]
 8000aae:	4a2a      	ldr	r2, [pc, #168]	; (8000b58 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x13c>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d801      	bhi.n	8000ab8 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x9c>
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	e001      	b.n	8000abc <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xa0>
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 f8df 	bl	8003c80 <_Znaj>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	611a      	str	r2, [r3, #16]

	for (uint8_t y = 0; y < height / 2; y++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	73fb      	strb	r3, [r7, #15]
 8000ace:	78bb      	ldrb	r3, [r7, #2]
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	7bfa      	ldrb	r2, [r7, #15]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d22e      	bcs.n	8000b38 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x11c>

		for (uint8_t plane = 0; plane < planes; plane++) {
 8000ada:	2300      	movs	r3, #0
 8000adc:	73bb      	strb	r3, [r7, #14]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	78db      	ldrb	r3, [r3, #3]
 8000ae2:	7bba      	ldrb	r2, [r7, #14]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d223      	bcs.n	8000b30 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x114>
			for (uint8_t x = 0; x < width; x++) {
 8000ae8:	2300      	movs	r3, #0
 8000aea:	737b      	strb	r3, [r7, #13]
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	7b7a      	ldrb	r2, [r7, #13]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d219      	bcs.n	8000b28 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x10c>

				uint16_t offset = BufferOffset(x, y, plane);
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	7bfa      	ldrb	r2, [r7, #15]
 8000af8:	7b79      	ldrb	r1, [r7, #13]
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ff5c 	bl	80009b8 <_ZN12MatrixDriver12BufferOffsetEhhh>
 8000b00:	4603      	mov	r3, r0
 8000b02:	817b      	strh	r3, [r7, #10]

				bufferA[offset] = 0x00;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	897b      	ldrh	r3, [r7, #10]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	2200      	movs	r2, #0
 8000b10:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = 0x00;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	691a      	ldr	r2, [r3, #16]
 8000b16:	897b      	ldrh	r3, [r7, #10]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	801a      	strh	r2, [r3, #0]
			for (uint8_t x = 0; x < width; x++) {
 8000b20:	7b7b      	ldrb	r3, [r7, #13]
 8000b22:	3301      	adds	r3, #1
 8000b24:	737b      	strb	r3, [r7, #13]
 8000b26:	e7e1      	b.n	8000aec <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xd0>
		for (uint8_t plane = 0; plane < planes; plane++) {
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	73bb      	strb	r3, [r7, #14]
 8000b2e:	e7d6      	b.n	8000ade <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xc2>
	for (uint8_t y = 0; y < height / 2; y++) {
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	3301      	adds	r3, #1
 8000b34:	73fb      	strb	r3, [r7, #15]
 8000b36:	e7ca      	b.n	8000ace <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xb2>
	//DMA must complete at the end of a row to allow
	//an opportunity to latch the data but it cannot exceed
	//32 DMA operations due to the TIM1 RCR being limited to a uint8_t
	//and an effective 7 RCR / operation.
	//RCR = (OPS * 7) - 1
	maxDmaOperations = MIN(32, width);
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	2b20      	cmp	r3, #32
 8000b3c:	bf28      	it	cs
 8000b3e:	2320      	movcs	r3, #32
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	751a      	strb	r2, [r3, #20]

	instance = this;
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x140>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	3ffffffc 	.word	0x3ffffffc
 8000b5c:	200004a8 	.word	0x200004a8

08000b60 <_ZN12MatrixDriver4openEv>:

void MatrixDriver::open() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "OPEN\n", 5, 10);
 8000b68:	230a      	movs	r3, #10
 8000b6a:	2205      	movs	r2, #5
 8000b6c:	4920      	ldr	r1, [pc, #128]	; (8000bf0 <_ZN12MatrixDriver4openEv+0x90>)
 8000b6e:	4821      	ldr	r0, [pc, #132]	; (8000bf4 <_ZN12MatrixDriver4openEv+0x94>)
 8000b70:	f002 ff1c 	bl	80039ac <HAL_UART_Transmit>

	hdma_tim2_ch1.XferCpltCallback = DMA_Complete;
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <_ZN12MatrixDriver4openEv+0x98>)
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <_ZN12MatrixDriver4openEv+0x9c>)
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	201c      	movs	r0, #28
 8000b80:	f000 fdad 	bl	80016de <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b84:	201c      	movs	r0, #28
 8000b86:	f000 fdc6 	bl	8001716 <HAL_NVIC_EnableIRQ>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <_ZN12MatrixDriver4openEv+0xa0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <_ZN12MatrixDriver4openEv+0xa0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f042 0201 	orr.w	r2, r2, #1
 8000b98:	60da      	str	r2, [r3, #12]

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <_ZN12MatrixDriver4openEv+0xa4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <_ZN12MatrixDriver4openEv+0xa4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ba8:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <_ZN12MatrixDriver4openEv+0xa4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fdc8 	bl	8003748 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <_ZN12MatrixDriver4openEv+0xa4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 fdc1 	bl	8003748 <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start(&htim2);
 8000bc6:	480f      	ldr	r0, [pc, #60]	; (8000c04 <_ZN12MatrixDriver4openEv+0xa4>)
 8000bc8:	f001 fe58 	bl	800287c <HAL_TIM_Base_Start>

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <_ZN12MatrixDriver4openEv+0xa0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 fdb7 	bl	8003748 <TIM_CCxChannelCmd>

	nextDmaOffset = 0;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	82da      	strh	r2, [r3, #22]

	StartNextDma();
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 f933 	bl	8000e4c <_ZN12MatrixDriver12StartNextDmaEv>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	08004618 	.word	0x08004618
 8000bf4:	20000554 	.word	0x20000554
 8000bf8:	200004bc 	.word	0x200004bc
 8000bfc:	08000991 	.word	0x08000991
 8000c00:	20000594 	.word	0x20000594
 8000c04:	20000634 	.word	0x20000634

08000c08 <_ZN12MatrixDriver9PlaneBitsEh>:

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0x00;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]

	if (value > 127) {
 8000c18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	da06      	bge.n	8000c2e <_ZN12MatrixDriver9PlaneBitsEh+0x26>
		result |= 0x08;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	73fb      	strb	r3, [r7, #15]
		value -= 127;
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	3b7f      	subs	r3, #127	; 0x7f
 8000c2c:	70fb      	strb	r3, [r7, #3]
	}

	if (value > 32) {
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	2b20      	cmp	r3, #32
 8000c32:	d906      	bls.n	8000c42 <_ZN12MatrixDriver9PlaneBitsEh+0x3a>
		result |= 0x04;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	73fb      	strb	r3, [r7, #15]
		value -= 32;
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	3b20      	subs	r3, #32
 8000c40:	70fb      	strb	r3, [r7, #3]
	}

	if (value > 8) {
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	2b08      	cmp	r3, #8
 8000c46:	d906      	bls.n	8000c56 <_ZN12MatrixDriver9PlaneBitsEh+0x4e>
		result |= 0x02;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	73fb      	strb	r3, [r7, #15]
		value -= 8;
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	3b08      	subs	r3, #8
 8000c54:	70fb      	strb	r3, [r7, #3]
	}

	if (value > 1) {
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d906      	bls.n	8000c6a <_ZN12MatrixDriver9PlaneBitsEh+0x62>
		result |= 0x01;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
		value -= 1;
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	70fb      	strb	r3, [r7, #3]
	}

	return result;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <_ZN12MatrixDriver8SetPixelEhhhhh>:
		}
	}
}

void MatrixDriver::SetPixel(uint8_t x, uint8_t y, uint8_t r, uint8_t g,
		uint8_t b) {
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b088      	sub	sp, #32
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	4608      	mov	r0, r1
 8000c80:	4611      	mov	r1, r2
 8000c82:	461a      	mov	r2, r3
 8000c84:	4603      	mov	r3, r0
 8000c86:	70fb      	strb	r3, [r7, #3]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70bb      	strb	r3, [r7, #2]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	707b      	strb	r3, [r7, #1]
	uint8_t rShift, gShift, bShift;

	//Set data into the buffer we aren't sending at the moment
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	795b      	ldrb	r3, [r3, #5]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <_ZN12MatrixDriver8SetPixelEhhhhh+0x28>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	e001      	b.n	8000ca2 <_ZN12MatrixDriver8SetPixelEhhhhh+0x2c>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	617b      	str	r3, [r7, #20]

	if (y < (height / 2)) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	789b      	ldrb	r3, [r3, #2]
 8000ca8:	085b      	lsrs	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	78ba      	ldrb	r2, [r7, #2]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d206      	bcs.n	8000cc0 <_ZN12MatrixDriver8SetPixelEhhhhh+0x4a>
		rShift = R0_SHIFT;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	77fb      	strb	r3, [r7, #31]
		gShift = G0_SHIFT;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	77bb      	strb	r3, [r7, #30]
		bShift = B0_SHIFT;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	777b      	strb	r3, [r7, #29]
 8000cbe:	e005      	b.n	8000ccc <_ZN12MatrixDriver8SetPixelEhhhhh+0x56>
	} else {
		rShift = R1_SHIFT;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	77fb      	strb	r3, [r7, #31]
		gShift = G1_SHIFT;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	77bb      	strb	r3, [r7, #30]
		bShift = B1_SHIFT;
 8000cc8:	2305      	movs	r3, #5
 8000cca:	777b      	strb	r3, [r7, #29]
	}

	uint16_t pixelMask = (0x0001 << rShift) | (0x0001 << gShift)
 8000ccc:	7ffb      	ldrb	r3, [r7, #31]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	7fbb      	ldrb	r3, [r7, #30]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b21a      	sxth	r2, r3
			| (0x0001 << bShift);
 8000ce4:	7f7b      	ldrb	r3, [r7, #29]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b21b      	sxth	r3, r3
	uint16_t pixelMask = (0x0001 << rShift) | (0x0001 << gShift)
 8000cf2:	827b      	strh	r3, [r7, #18]

	uint8_t rPlanes = PlaneBits(r);
 8000cf4:	787b      	ldrb	r3, [r7, #1]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff85 	bl	8000c08 <_ZN12MatrixDriver9PlaneBitsEh>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	747b      	strb	r3, [r7, #17]
	uint8_t gPlanes = PlaneBits(g);
 8000d02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d06:	4619      	mov	r1, r3
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff7d 	bl	8000c08 <_ZN12MatrixDriver9PlaneBitsEh>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	743b      	strb	r3, [r7, #16]
	uint8_t bPlanes = PlaneBits(b);
 8000d12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d16:	4619      	mov	r1, r3
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff75 	bl	8000c08 <_ZN12MatrixDriver9PlaneBitsEh>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	73fb      	strb	r3, [r7, #15]

	for (int plane = 0; plane < planes; plane++) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	78db      	ldrb	r3, [r3, #3]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	da54      	bge.n	8000ddc <_ZN12MatrixDriver8SetPixelEhhhhh+0x166>
		uint16_t planePixelBits = (
				(rPlanes & (0x01 << plane)) ? 0x0001 << rShift : 0)
 8000d32:	7c7a      	ldrb	r2, [r7, #17]
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa42 f303 	asr.w	r3, r2, r3
 8000d3a:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & (0x01 << plane)) ? 0x0001 << gShift : 0)
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <_ZN12MatrixDriver8SetPixelEhhhhh+0xd8>
				(rPlanes & (0x01 << plane)) ? 0x0001 << rShift : 0)
 8000d42:	7ffb      	ldrb	r3, [r7, #31]
 8000d44:	2201      	movs	r2, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
				| ((gPlanes & (0x01 << plane)) ? 0x0001 << gShift : 0)
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	e000      	b.n	8000d50 <_ZN12MatrixDriver8SetPixelEhhhhh+0xda>
 8000d4e:	2200      	movs	r2, #0
 8000d50:	7c39      	ldrb	r1, [r7, #16]
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	fa41 f303 	asr.w	r3, r1, r3
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <_ZN12MatrixDriver8SetPixelEhhhhh+0xf6>
 8000d60:	7fbb      	ldrb	r3, [r7, #30]
 8000d62:	2101      	movs	r1, #1
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	e000      	b.n	8000d6e <_ZN12MatrixDriver8SetPixelEhhhhh+0xf8>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b21a      	sxth	r2, r3
				| ((bPlanes & (0x01 << plane)) ? 0x0001 << bShift : 0);
 8000d72:	7bf9      	ldrb	r1, [r7, #15]
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa41 f303 	asr.w	r3, r1, r3
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <_ZN12MatrixDriver8SetPixelEhhhhh+0x118>
 8000d82:	7f7b      	ldrb	r3, [r7, #29]
 8000d84:	2101      	movs	r1, #1
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	e000      	b.n	8000d90 <_ZN12MatrixDriver8SetPixelEhhhhh+0x11a>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = (
 8000d94:	81bb      	strh	r3, [r7, #12]
//				x, y, rPlanes, gPlanes, bPlanes, planePixelBits, pixelMask);

//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
//				10);

		uint16_t offset = BufferOffset(x, y, plane);
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	78ba      	ldrb	r2, [r7, #2]
 8000d9c:	78f9      	ldrb	r1, [r7, #3]
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff fe0a 	bl	80009b8 <_ZN12MatrixDriver12BufferOffsetEhhh>
 8000da4:	4603      	mov	r3, r0
 8000da6:	817b      	strh	r3, [r7, #10]

		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000da8:	897b      	ldrh	r3, [r7, #10]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	4413      	add	r3, r2
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	b21a      	sxth	r2, r3
				| planePixelBits;
 8000dc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b219      	sxth	r1, r3
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000dc8:	897b      	ldrh	r3, [r7, #10]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	4413      	add	r3, r2
				| planePixelBits;
 8000dd0:	b28a      	uxth	r2, r1
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000dd2:	801a      	strh	r2, [r3, #0]
	for (int plane = 0; plane < planes; plane++) {
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	e7a4      	b.n	8000d26 <_ZN12MatrixDriver8SetPixelEhhhhh+0xb0>
	}
}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	sendBufferA = !sendBufferA;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	f083 0301 	eor.w	r3, r3, #1
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	715a      	strb	r2, [r3, #5]

	nextDmaOffset = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	82da      	strh	r2, [r3, #22]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <_ZN12MatrixDriver6HandleEv>:

void MatrixDriver::Handle() {
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	if (handleNeeded) {
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d013      	beq.n	8000e42 <_ZN12MatrixDriver6HandleEv+0x38>
		if ((nextDmaOffset % width) == 0) {
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	8adb      	ldrh	r3, [r3, #22]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	7852      	ldrb	r2, [r2, #1]
 8000e22:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e26:	fb02 f201 	mul.w	r2, r2, r1
 8000e2a:	1a9b      	subs	r3, r3, r2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_ZN12MatrixDriver6HandleEv+0x2c>
			Latch();
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f873 	bl	8000f1c <_ZN12MatrixDriver5LatchEv>
		}

		StartNextDma();
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f808 	bl	8000e4c <_ZN12MatrixDriver12StartNextDmaEv>

		handleNeeded = false;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
	}
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <_ZN12MatrixDriver12StartNextDmaEv>:

void MatrixDriver::StartNextDma() {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	uint16_t *outputBuffer = sendBufferA ? bufferA : bufferB;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	795b      	ldrb	r3, [r3, #5]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <_ZN12MatrixDriver12StartNextDmaEv+0x16>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	e001      	b.n	8000e66 <_ZN12MatrixDriver12StartNextDmaEv+0x1a>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	617b      	str	r3, [r7, #20]
	outputBuffer += nextDmaOffset;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	8adb      	ldrh	r3, [r3, #22]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]

	uint32_t operations = MIN(maxDmaOperations, bufferSize - nextDmaOffset);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	891b      	ldrh	r3, [r3, #8]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	8adb      	ldrh	r3, [r3, #22]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	7d12      	ldrb	r2, [r2, #20]
 8000e84:	4293      	cmp	r3, r2
 8000e86:	bfa8      	it	ge
 8000e88:	4613      	movge	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]

	HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) outputBuffer,
 8000e8c:	6979      	ldr	r1, [r7, #20]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <_ZN12MatrixDriver12StartNextDmaEv+0xc0>)
 8000e92:	481f      	ldr	r0, [pc, #124]	; (8000f10 <_ZN12MatrixDriver12StartNextDmaEv+0xc4>)
 8000e94:	f000 fcb4 	bl	8001800 <HAL_DMA_Start_IT>
			(uint32_t) &(GPIOB->ODR), operations);

	//Number of TIM1 ticks to drive data_size elements.
	uint8_t rcr = (operations * 8) - 1;
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]

	uint8_t plane = nextDmaOffset / planeSize;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	8ada      	ldrh	r2, [r3, #22]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	88db      	ldrh	r3, [r3, #6]
 8000eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	73bb      	strb	r3, [r7, #14]

	htim1.Instance->ARR = 1 * (plane + 1);
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <_ZN12MatrixDriver12StartNextDmaEv+0xc8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->RCR = rcr;
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_ZN12MatrixDriver12StartNextDmaEv+0xc8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	7bfa      	ldrb	r2, [r7, #15]
 8000ec4:	631a      	str	r2, [r3, #48]	; 0x30
	htim1.Instance->EGR = TIM_EGR_UG; //Generate an update event to absorb RCR
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <_ZN12MatrixDriver12StartNextDmaEv+0xc8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	615a      	str	r2, [r3, #20]
	htim2.Instance->CNT = 0;
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <_ZN12MatrixDriver12StartNextDmaEv+0xcc>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim1);
 8000ed6:	480f      	ldr	r0, [pc, #60]	; (8000f14 <_ZN12MatrixDriver12StartNextDmaEv+0xc8>)
 8000ed8:	f001 fd1a 	bl	8002910 <HAL_TIM_Base_Stop>

	HAL_TIM_Base_Start_IT(&htim1);
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <_ZN12MatrixDriver12StartNextDmaEv+0xc8>)
 8000ede:	f001 fd3d 	bl	800295c <HAL_TIM_Base_Start_IT>

	nextDmaOffset += operations;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	8ada      	ldrh	r2, [r3, #22]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4413      	add	r3, r2
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	82da      	strh	r2, [r3, #22]

	if (nextDmaOffset >= bufferSize) {
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	8ada      	ldrh	r2, [r3, #22]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	891b      	ldrh	r3, [r3, #8]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d302      	bcc.n	8000f04 <_ZN12MatrixDriver12StartNextDmaEv+0xb8>
//
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
//
//		latchTicks = HAL_GetTick();

		nextDmaOffset = 0;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	82da      	strh	r2, [r3, #22]
	}
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40010c0c 	.word	0x40010c0c
 8000f10:	200004bc 	.word	0x200004bc
 8000f14:	20000594 	.word	0x20000594
 8000f18:	20000634 	.word	0x20000634

08000f1c <_ZN12MatrixDriver5LatchEv>:

void MatrixDriver::Latch() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 8000f24:	4836      	ldr	r0, [pc, #216]	; (8001000 <_ZN12MatrixDriver5LatchEv+0xe4>)
 8000f26:	f000 ffaa 	bl	8001e7e <HAL_IWDG_Refresh>

	uint16_t row = (nextDmaOffset % planeSize) / width;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	8adb      	ldrh	r3, [r3, #22]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	88d2      	ldrh	r2, [r2, #6]
 8000f32:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f36:	fb02 f201 	mul.w	r2, r2, r1
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	785b      	ldrb	r3, [r3, #1]
 8000f44:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f48:	81fb      	strh	r3, [r7, #14]

	uint8_t previousRow = row == 0 ? (height / 2) - 1 : row - 1;
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d106      	bne.n	8000f5e <_ZN12MatrixDriver5LatchEv+0x42>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	789b      	ldrb	r3, [r3, #2]
 8000f54:	085b      	lsrs	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	e003      	b.n	8000f66 <_ZN12MatrixDriver5LatchEv+0x4a>
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	3b01      	subs	r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	737b      	strb	r3, [r7, #13]

	//Set or reset each specific line for selection
	uint32_t bsrr =
			(previousRow & 0x01 ? 0x0001 << A_SHIFT : 0x0001 << (A_SHIFT + 16))
 8000f68:	7b7b      	ldrb	r3, [r7, #13]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <_ZN12MatrixDriver5LatchEv+0x5a>
 8000f72:	2204      	movs	r2, #4
 8000f74:	e001      	b.n	8000f7a <_ZN12MatrixDriver5LatchEv+0x5e>
 8000f76:	f44f 2280 	mov.w	r2, #262144	; 0x40000
					| (previousRow & 0x02 ?
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <_ZN12MatrixDriver5LatchEv+0x6c>
 8000f84:	2308      	movs	r3, #8
 8000f86:	e001      	b.n	8000f8c <_ZN12MatrixDriver5LatchEv+0x70>
 8000f88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f8c:	4313      	orrs	r3, r2
							0x0001 << B_SHIFT : 0x0001 << (B_SHIFT + 16))
					| (previousRow & 0x04 ?
 8000f8e:	7b7a      	ldrb	r2, [r7, #13]
 8000f90:	f002 0204 	and.w	r2, r2, #4
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	d001      	beq.n	8000f9c <_ZN12MatrixDriver5LatchEv+0x80>
 8000f98:	2210      	movs	r2, #16
 8000f9a:	e001      	b.n	8000fa0 <_ZN12MatrixDriver5LatchEv+0x84>
 8000f9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fa0:	4313      	orrs	r3, r2
							0x0001 << C_SHIFT : 0x0001 << (C_SHIFT + 16))
					| (previousRow & 0x08 ?
 8000fa2:	7b7a      	ldrb	r2, [r7, #13]
 8000fa4:	f002 0208 	and.w	r2, r2, #8
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d002      	beq.n	8000fb2 <_ZN12MatrixDriver5LatchEv+0x96>
 8000fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb0:	e001      	b.n	8000fb6 <_ZN12MatrixDriver5LatchEv+0x9a>
 8000fb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fb6:	4313      	orrs	r3, r2
							0x0001 << D_SHIFT : 0x0001 << (D_SHIFT + 16))
					| (previousRow & 0x10 ?
 8000fb8:	7b7a      	ldrb	r2, [r7, #13]
 8000fba:	f002 0210 	and.w	r2, r2, #16
 8000fbe:	2a00      	cmp	r2, #0
 8000fc0:	d002      	beq.n	8000fc8 <_ZN12MatrixDriver5LatchEv+0xac>
 8000fc2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fc6:	e001      	b.n	8000fcc <_ZN12MatrixDriver5LatchEv+0xb0>
 8000fc8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000fcc:	4313      	orrs	r3, r2
	uint32_t bsrr =
 8000fce:	60bb      	str	r3, [r7, #8]
							0x0001 << E_SHIFT : 0x0001 << (E_SHIFT + 16));

	//Disable output & latch
	GPIOA->BSRR = (0x0001 << OE_SHIFT);
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <_ZN12MatrixDriver5LatchEv+0xe8>)
 8000fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd6:	611a      	str	r2, [r3, #16]

	GPIOA->BSRR = (0x0001 << LAT_SHIFT);
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <_ZN12MatrixDriver5LatchEv+0xe8>)
 8000fda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fde:	611a      	str	r2, [r3, #16]

	GPIOA->BSRR = (0x0001 << (LAT_SHIFT + 16));
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_ZN12MatrixDriver5LatchEv+0xe8>)
 8000fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fe6:	611a      	str	r2, [r3, #16]
	//Configure row lines
	GPIOA->BSRR = bsrr;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <_ZN12MatrixDriver5LatchEv+0xe8>)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	6113      	str	r3, [r2, #16]

	//Enable output
	GPIOA->BSRR = (0x0001 << (OE_SHIFT + 16));
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <_ZN12MatrixDriver5LatchEv+0xe8>)
 8000ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ff4:	611a      	str	r2, [r3, #16]
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000500 	.word	0x20000500
 8001004:	40010800 	.word	0x40010800

08001008 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_MspInit+0x5c>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <HAL_MspInit+0x5c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_MspInit+0x5c>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_MspInit+0x5c>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <HAL_MspInit+0x5c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_MspInit+0x5c>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_MspInit+0x60>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_MspInit+0x60>)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000

0800106c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d12f      	bne.n	80010ec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_SPI_MspInit+0x8c>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <HAL_SPI_MspInit+0x8c>)
 8001092:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_SPI_MspInit+0x8c>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_SPI_MspInit+0x8c>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <HAL_SPI_MspInit+0x8c>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_SPI_MspInit+0x8c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010bc:	23a0      	movs	r3, #160	; 0xa0
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <HAL_SPI_MspInit+0x90>)
 80010d0:	f000 fd2a 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010d4:	2340      	movs	r3, #64	; 0x40
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_SPI_MspInit+0x90>)
 80010e8:	f000 fd1e 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40013000 	.word	0x40013000
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010800 	.word	0x40010800

08001100 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a33      	ldr	r2, [pc, #204]	; (80011dc <HAL_TIM_Base_MspInit+0xdc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10c      	bne.n	800112c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4a32      	ldr	r2, [pc, #200]	; (80011e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001118:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800111c:	6193      	str	r3, [r2, #24]
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800112a:	e052      	b.n	80011d2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001134:	d134      	bne.n	80011a0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <HAL_TIM_Base_MspInit+0xe0>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001150:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <HAL_TIM_Base_MspInit+0xe8>)
 8001152:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_ENABLE;
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <HAL_TIM_Base_MspInit+0xe4>)
 800115c:	2240      	movs	r2, #64	; 0x40
 800115e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001174:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_TIM_Base_MspInit+0xe4>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001184:	f000 fae2 	bl	800174c <HAL_DMA_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 800118e:	f7ff fbf9 	bl	8000984 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
 8001198:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <HAL_TIM_Base_MspInit+0xe4>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800119e:	e018      	b.n	80011d2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_TIM_Base_MspInit+0xec>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d113      	bne.n	80011d2 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_TIM_Base_MspInit+0xe0>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <HAL_TIM_Base_MspInit+0xe0>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_TIM_Base_MspInit+0xe0>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	201d      	movs	r0, #29
 80011c8:	f000 fa89 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011cc:	201d      	movs	r0, #29
 80011ce:	f000 faa2 	bl	8001716 <HAL_NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40012c00 	.word	0x40012c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	200004bc 	.word	0x200004bc
 80011e8:	40020058 	.word	0x40020058
 80011ec:	40000400 	.word	0x40000400

080011f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120e:	d117      	bne.n	8001240 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_TIM_MspPostInit+0x58>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <HAL_TIM_MspPostInit+0x58>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_TIM_MspPostInit+0x58>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001228:	2302      	movs	r3, #2
 800122a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2302      	movs	r3, #2
 8001232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <HAL_TIM_MspPostInit+0x5c>)
 800123c:	f000 fc74 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	40010800 	.word	0x40010800

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <HAL_UART_MspInit+0x8c>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d131      	bne.n	80012d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <HAL_UART_MspInit+0x90>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <HAL_UART_MspInit+0x90>)
 8001276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_UART_MspInit+0x90>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_UART_MspInit+0x90>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_UART_MspInit+0x90>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_UART_MspInit+0x90>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4619      	mov	r1, r3
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <HAL_UART_MspInit+0x94>)
 80012b6:	f000 fc37 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_UART_MspInit+0x94>)
 80012d0:	f000 fc2a 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010800 	.word	0x40010800

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <HardFault_Handler+0x4>

080012fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <MemManage_Handler+0x4>

08001300 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <BusFault_Handler+0x4>

08001306 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f8e0 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <DMA1_Channel5_IRQHandler+0x10>)
 8001342:	f000 fabd 	bl	80018c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200004bc 	.word	0x200004bc

08001350 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <TIM3_IRQHandler+0x10>)
 8001356:	f001 fc04 	bl	8002b62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000050c 	.word	0x2000050c

08001364 <_getpid>:
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
 8001368:	2301      	movs	r3, #1
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <_kill>:
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
 800137c:	f002 fca4 	bl	8003cc8 <__errno>
 8001380:	4602      	mov	r2, r0
 8001382:	2316      	movs	r3, #22
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_exit>:
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffe7 	bl	8001372 <_kill>
 80013a4:	e7fe      	b.n	80013a4 <_exit+0x12>
	...

080013a8 <_sbrk>:
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d207      	bcs.n	80013e8 <_sbrk+0x40>
 80013d8:	f002 fc76 	bl	8003cc8 <__errno>
 80013dc:	4602      	mov	r2, r0
 80013de:	230c      	movs	r3, #12
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e6:	e009      	b.n	80013fc <_sbrk+0x54>
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <_sbrk+0x64>)
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20005000 	.word	0x20005000
 8001408:	00000400 	.word	0x00000400
 800140c:	200004ac 	.word	0x200004ac
 8001410:	20000688 	.word	0x20000688

08001414 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <Reset_Handler>:
 8001420:	2100      	movs	r1, #0
 8001422:	e003      	b.n	800142c <LoopCopyDataInit>

08001424 <CopyDataInit>:
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <LoopFillZerobss+0x14>)
 8001426:	585b      	ldr	r3, [r3, r1]
 8001428:	5043      	str	r3, [r0, r1]
 800142a:	3104      	adds	r1, #4

0800142c <LoopCopyDataInit>:
 800142c:	480a      	ldr	r0, [pc, #40]	; (8001458 <LoopFillZerobss+0x18>)
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <LoopFillZerobss+0x1c>)
 8001430:	1842      	adds	r2, r0, r1
 8001432:	429a      	cmp	r2, r3
 8001434:	d3f6      	bcc.n	8001424 <CopyDataInit>
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <LoopFillZerobss+0x20>)
 8001438:	e002      	b.n	8001440 <LoopFillZerobss>

0800143a <FillZerobss>:
 800143a:	2300      	movs	r3, #0
 800143c:	f842 3b04 	str.w	r3, [r2], #4

08001440 <LoopFillZerobss>:
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <LoopFillZerobss+0x24>)
 8001442:	429a      	cmp	r2, r3
 8001444:	d3f9      	bcc.n	800143a <FillZerobss>
 8001446:	f7ff ffe5 	bl	8001414 <SystemInit>
 800144a:	f002 fc43 	bl	8003cd4 <__libc_init_array>
 800144e:	f7fe ffb3 	bl	80003b8 <main>
 8001452:	4770      	bx	lr
 8001454:	080046cc 	.word	0x080046cc
 8001458:	20000000 	.word	0x20000000
 800145c:	20000070 	.word	0x20000070
 8001460:	20000070 	.word	0x20000070
 8001464:	20000684 	.word	0x20000684

08001468 <ADC1_2_IRQHandler>:
 8001468:	e7fe      	b.n	8001468 <ADC1_2_IRQHandler>
	...

0800146c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_Init+0x28>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_Init+0x28>)
 8001476:	f043 0310 	orr.w	r3, r3, #16
 800147a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147c:	2003      	movs	r0, #3
 800147e:	f000 f923 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001482:	2000      	movs	r0, #0
 8001484:	f000 f808 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001488:	f7ff fdbe 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40022000 	.word	0x40022000

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x54>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x58>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f93b 	bl	8001732 <HAL_SYSTICK_Config>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00e      	b.n	80014e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d80a      	bhi.n	80014e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d4:	f000 f903 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_InitTick+0x5c>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_IncTick+0x1c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_IncTick+0x20>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_IncTick+0x20>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	20000008 	.word	0x20000008
 8001518:	2000067c 	.word	0x2000067c

0800151c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b02      	ldr	r3, [pc, #8]	; (800152c <HAL_GetTick+0x10>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	2000067c 	.word	0x2000067c

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4906      	ldr	r1, [pc, #24]	; (80015c8 <__NVIC_EnableIRQ+0x34>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a8:	f7ff ff90 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff2d 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff42 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff90 	bl	8001620 <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5f 	bl	80015cc <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff35 	bl	8001594 <__NVIC_EnableIRQ>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffa2 	bl	8001684 <SysTick_Config>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e043      	b.n	80017ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_DMA_Init+0xa8>)
 800176a:	4413      	add	r3, r2
 800176c:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <HAL_DMA_Init+0xac>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	009a      	lsls	r2, r3, #2
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a1f      	ldr	r2, [pc, #124]	; (80017fc <HAL_DMA_Init+0xb0>)
 800177e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2202      	movs	r2, #2
 8001784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001796:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800179a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	bffdfff8 	.word	0xbffdfff8
 80017f8:	cccccccd 	.word	0xcccccccd
 80017fc:	40020000 	.word	0x40020000

08001800 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <HAL_DMA_Start_IT+0x20>
 800181c:	2302      	movs	r3, #2
 800181e:	e04a      	b.n	80018b6 <HAL_DMA_Start_IT+0xb6>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800182e:	2b01      	cmp	r3, #1
 8001830:	d13a      	bne.n	80018a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2202      	movs	r2, #2
 8001836:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f938 	bl	8001acc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 020e 	orr.w	r2, r2, #14
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e00f      	b.n	8001896 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0204 	bic.w	r2, r2, #4
 8001884:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 020a 	orr.w	r2, r2, #10
 8001894:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e005      	b.n	80018b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018b0:	2302      	movs	r3, #2
 80018b2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	2204      	movs	r2, #4
 80018de:	409a      	lsls	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d04f      	beq.n	8001988 <HAL_DMA_IRQHandler+0xc8>
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d04a      	beq.n	8001988 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0320 	and.w	r3, r3, #32
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d107      	bne.n	8001910 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0204 	bic.w	r2, r2, #4
 800190e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a66      	ldr	r2, [pc, #408]	; (8001ab0 <HAL_DMA_IRQHandler+0x1f0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d029      	beq.n	800196e <HAL_DMA_IRQHandler+0xae>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a65      	ldr	r2, [pc, #404]	; (8001ab4 <HAL_DMA_IRQHandler+0x1f4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d022      	beq.n	800196a <HAL_DMA_IRQHandler+0xaa>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a63      	ldr	r2, [pc, #396]	; (8001ab8 <HAL_DMA_IRQHandler+0x1f8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01a      	beq.n	8001964 <HAL_DMA_IRQHandler+0xa4>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a62      	ldr	r2, [pc, #392]	; (8001abc <HAL_DMA_IRQHandler+0x1fc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d012      	beq.n	800195e <HAL_DMA_IRQHandler+0x9e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a60      	ldr	r2, [pc, #384]	; (8001ac0 <HAL_DMA_IRQHandler+0x200>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00a      	beq.n	8001958 <HAL_DMA_IRQHandler+0x98>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a5f      	ldr	r2, [pc, #380]	; (8001ac4 <HAL_DMA_IRQHandler+0x204>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d102      	bne.n	8001952 <HAL_DMA_IRQHandler+0x92>
 800194c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001950:	e00e      	b.n	8001970 <HAL_DMA_IRQHandler+0xb0>
 8001952:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001956:	e00b      	b.n	8001970 <HAL_DMA_IRQHandler+0xb0>
 8001958:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800195c:	e008      	b.n	8001970 <HAL_DMA_IRQHandler+0xb0>
 800195e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001962:	e005      	b.n	8001970 <HAL_DMA_IRQHandler+0xb0>
 8001964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001968:	e002      	b.n	8001970 <HAL_DMA_IRQHandler+0xb0>
 800196a:	2340      	movs	r3, #64	; 0x40
 800196c:	e000      	b.n	8001970 <HAL_DMA_IRQHandler+0xb0>
 800196e:	2304      	movs	r3, #4
 8001970:	4a55      	ldr	r2, [pc, #340]	; (8001ac8 <HAL_DMA_IRQHandler+0x208>)
 8001972:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8094 	beq.w	8001aa6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001986:	e08e      	b.n	8001aa6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	2202      	movs	r2, #2
 800198e:	409a      	lsls	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d056      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x186>
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d051      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10b      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 020a 	bic.w	r2, r2, #10
 80019be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a38      	ldr	r2, [pc, #224]	; (8001ab0 <HAL_DMA_IRQHandler+0x1f0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d029      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x166>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a37      	ldr	r2, [pc, #220]	; (8001ab4 <HAL_DMA_IRQHandler+0x1f4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d022      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x162>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a35      	ldr	r2, [pc, #212]	; (8001ab8 <HAL_DMA_IRQHandler+0x1f8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01a      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x15c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a34      	ldr	r2, [pc, #208]	; (8001abc <HAL_DMA_IRQHandler+0x1fc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d012      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x156>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a32      	ldr	r2, [pc, #200]	; (8001ac0 <HAL_DMA_IRQHandler+0x200>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00a      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x150>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a31      	ldr	r2, [pc, #196]	; (8001ac4 <HAL_DMA_IRQHandler+0x204>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d102      	bne.n	8001a0a <HAL_DMA_IRQHandler+0x14a>
 8001a04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a08:	e00e      	b.n	8001a28 <HAL_DMA_IRQHandler+0x168>
 8001a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0e:	e00b      	b.n	8001a28 <HAL_DMA_IRQHandler+0x168>
 8001a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a14:	e008      	b.n	8001a28 <HAL_DMA_IRQHandler+0x168>
 8001a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1a:	e005      	b.n	8001a28 <HAL_DMA_IRQHandler+0x168>
 8001a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a20:	e002      	b.n	8001a28 <HAL_DMA_IRQHandler+0x168>
 8001a22:	2320      	movs	r3, #32
 8001a24:	e000      	b.n	8001a28 <HAL_DMA_IRQHandler+0x168>
 8001a26:	2302      	movs	r3, #2
 8001a28:	4a27      	ldr	r2, [pc, #156]	; (8001ac8 <HAL_DMA_IRQHandler+0x208>)
 8001a2a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d034      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a44:	e02f      	b.n	8001aa6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d028      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x1e8>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d023      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 020e 	bic.w	r2, r2, #14
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d004      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
    }
  }
  return;
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
}
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40020008 	.word	0x40020008
 8001ab4:	4002001c 	.word	0x4002001c
 8001ab8:	40020030 	.word	0x40020030
 8001abc:	40020044 	.word	0x40020044
 8001ac0:	40020058 	.word	0x40020058
 8001ac4:	4002006c 	.word	0x4002006c
 8001ac8:	40020000 	.word	0x40020000

08001acc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b10      	cmp	r3, #16
 8001af8:	d108      	bne.n	8001b0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b0a:	e007      	b.n	8001b1c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	60da      	str	r2, [r3, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
	...

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b08b      	sub	sp, #44	; 0x2c
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3a:	e127      	b.n	8001d8c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	f040 8116 	bne.w	8001d86 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d034      	beq.n	8001bcc <HAL_GPIO_Init+0xa4>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d80d      	bhi.n	8001b82 <HAL_GPIO_Init+0x5a>
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d02b      	beq.n	8001bc2 <HAL_GPIO_Init+0x9a>
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d804      	bhi.n	8001b78 <HAL_GPIO_Init+0x50>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d031      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d01c      	beq.n	8001bb0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b76:	e048      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d043      	beq.n	8001c04 <HAL_GPIO_Init+0xdc>
 8001b7c:	2b11      	cmp	r3, #17
 8001b7e:	d01b      	beq.n	8001bb8 <HAL_GPIO_Init+0x90>
          break;
 8001b80:	e043      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b82:	4a89      	ldr	r2, [pc, #548]	; (8001da8 <HAL_GPIO_Init+0x280>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d026      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
 8001b88:	4a87      	ldr	r2, [pc, #540]	; (8001da8 <HAL_GPIO_Init+0x280>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d806      	bhi.n	8001b9c <HAL_GPIO_Init+0x74>
 8001b8e:	4a87      	ldr	r2, [pc, #540]	; (8001dac <HAL_GPIO_Init+0x284>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d020      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
 8001b94:	4a86      	ldr	r2, [pc, #536]	; (8001db0 <HAL_GPIO_Init+0x288>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01d      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
          break;
 8001b9a:	e036      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b9c:	4a85      	ldr	r2, [pc, #532]	; (8001db4 <HAL_GPIO_Init+0x28c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d019      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
 8001ba2:	4a85      	ldr	r2, [pc, #532]	; (8001db8 <HAL_GPIO_Init+0x290>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d016      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
 8001ba8:	4a84      	ldr	r2, [pc, #528]	; (8001dbc <HAL_GPIO_Init+0x294>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
          break;
 8001bae:	e02c      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	623b      	str	r3, [r7, #32]
          break;
 8001bb6:	e028      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	623b      	str	r3, [r7, #32]
          break;
 8001bc0:	e023      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	623b      	str	r3, [r7, #32]
          break;
 8001bca:	e01e      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	330c      	adds	r3, #12
 8001bd2:	623b      	str	r3, [r7, #32]
          break;
 8001bd4:	e019      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bde:	2304      	movs	r3, #4
 8001be0:	623b      	str	r3, [r7, #32]
          break;
 8001be2:	e012      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bec:	2308      	movs	r3, #8
 8001bee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	611a      	str	r2, [r3, #16]
          break;
 8001bf6:	e008      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	615a      	str	r2, [r3, #20]
          break;
 8001c02:	e002      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2bff      	cmp	r3, #255	; 0xff
 8001c0e:	d801      	bhi.n	8001c14 <HAL_GPIO_Init+0xec>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	e001      	b.n	8001c18 <HAL_GPIO_Init+0xf0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3304      	adds	r3, #4
 8001c18:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2bff      	cmp	r3, #255	; 0xff
 8001c1e:	d802      	bhi.n	8001c26 <HAL_GPIO_Init+0xfe>
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x104>
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	3b08      	subs	r3, #8
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	210f      	movs	r1, #15
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	6a39      	ldr	r1, [r7, #32]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	431a      	orrs	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8096 	beq.w	8001d86 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c5a:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_GPIO_Init+0x298>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_GPIO_Init+0x298>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6193      	str	r3, [r2, #24]
 8001c66:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <HAL_GPIO_Init+0x298>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c72:	4a54      	ldr	r2, [pc, #336]	; (8001dc4 <HAL_GPIO_Init+0x29c>)
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_GPIO_Init+0x2a0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_GPIO_Init+0x19e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4a      	ldr	r2, [pc, #296]	; (8001dcc <HAL_GPIO_Init+0x2a4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00d      	beq.n	8001cc2 <HAL_GPIO_Init+0x19a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a49      	ldr	r2, [pc, #292]	; (8001dd0 <HAL_GPIO_Init+0x2a8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d007      	beq.n	8001cbe <HAL_GPIO_Init+0x196>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <HAL_GPIO_Init+0x2ac>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_GPIO_Init+0x192>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x1a0>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x1a0>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x1a0>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x1a0>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cd8:	493a      	ldr	r1, [pc, #232]	; (8001dc4 <HAL_GPIO_Init+0x29c>)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf2:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4938      	ldr	r1, [pc, #224]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
 8001cfe:	e006      	b.n	8001d0e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	4933      	ldr	r1, [pc, #204]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	492e      	ldr	r1, [pc, #184]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
 8001d26:	e006      	b.n	8001d36 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	4929      	ldr	r1, [pc, #164]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d42:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	4924      	ldr	r1, [pc, #144]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
 8001d4e:	e006      	b.n	8001d5e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	491f      	ldr	r1, [pc, #124]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	491a      	ldr	r1, [pc, #104]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60cb      	str	r3, [r1, #12]
 8001d76:	e006      	b.n	8001d86 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	4915      	ldr	r1, [pc, #84]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	3301      	adds	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f47f aed0 	bne.w	8001b3c <HAL_GPIO_Init+0x14>
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	372c      	adds	r7, #44	; 0x2c
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	10210000 	.word	0x10210000
 8001dac:	10110000 	.word	0x10110000
 8001db0:	10120000 	.word	0x10120000
 8001db4:	10310000 	.word	0x10310000
 8001db8:	10320000 	.word	0x10320000
 8001dbc:	10220000 	.word	0x10220000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	40010c00 	.word	0x40010c00
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40011400 	.word	0x40011400
 8001dd8:	40010400 	.word	0x40010400

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	611a      	str	r2, [r3, #16]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e02b      	b.n	8001e76 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001e26:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f245 5255 	movw	r2, #21845	; 0x5555
 8001e30:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6852      	ldr	r2, [r2, #4]
 8001e3a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6892      	ldr	r2, [r2, #8]
 8001e44:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001e46:	f7ff fb69 	bl	800151c <HAL_GetTick>
 8001e4a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001e4c:	e008      	b.n	8001e60 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001e4e:	f7ff fb65 	bl	800151c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b26      	cmp	r3, #38	; 0x26
 8001e5a:	d901      	bls.n	8001e60 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e00a      	b.n	8001e76 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f1      	bne.n	8001e4e <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001e72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e26c      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8087 	beq.w	8001fca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ebc:	4b92      	ldr	r3, [pc, #584]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec8:	4b8f      	ldr	r3, [pc, #572]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d112      	bne.n	8001efa <HAL_RCC_OscConfig+0x5e>
 8001ed4:	4b8c      	ldr	r3, [pc, #560]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee0:	d10b      	bne.n	8001efa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee2:	4b89      	ldr	r3, [pc, #548]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d06c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x12c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d168      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e246      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x76>
 8001f04:	4b80      	ldr	r3, [pc, #512]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a7f      	ldr	r2, [pc, #508]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e02e      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b7b      	ldr	r3, [pc, #492]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a7a      	ldr	r2, [pc, #488]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b78      	ldr	r3, [pc, #480]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a77      	ldr	r2, [pc, #476]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e01d      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0xbc>
 8001f3e:	4b72      	ldr	r3, [pc, #456]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a71      	ldr	r2, [pc, #452]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b6f      	ldr	r3, [pc, #444]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6e      	ldr	r2, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f58:	4b6b      	ldr	r3, [pc, #428]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a6a      	ldr	r2, [pc, #424]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b68      	ldr	r3, [pc, #416]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a67      	ldr	r2, [pc, #412]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fad0 	bl	800151c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff facc 	bl	800151c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1fa      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0xe4>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fabc 	bl	800151c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff fab8 	bl	800151c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1e6      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x10c>
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d063      	beq.n	800209e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd6:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fe2:	4b49      	ldr	r3, [pc, #292]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x18c>
 8001fee:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	4b43      	ldr	r3, [pc, #268]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x176>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1ba      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4939      	ldr	r1, [pc, #228]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	e03a      	b.n	800209e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b36      	ldr	r3, [pc, #216]	; (800210c <HAL_RCC_OscConfig+0x270>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fa71 	bl	800151c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203e:	f7ff fa6d 	bl	800151c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e19b      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4927      	ldr	r1, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_RCC_OscConfig+0x270>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fa50 	bl	800151c <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7ff fa4c 	bl	800151c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e17a      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d03a      	beq.n	8002120 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d019      	beq.n	80020e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7ff fa30 	bl	800151c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff fa2c 	bl	800151c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e15a      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020de:	2001      	movs	r0, #1
 80020e0:	f000 fada 	bl	8002698 <RCC_Delay>
 80020e4:	e01c      	b.n	8002120 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ec:	f7ff fa16 	bl	800151c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f2:	e00f      	b.n	8002114 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f4:	f7ff fa12 	bl	800151c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d908      	bls.n	8002114 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e140      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	42420000 	.word	0x42420000
 8002110:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	4b9e      	ldr	r3, [pc, #632]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e9      	bne.n	80020f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80a6 	beq.w	800227a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002132:	4b97      	ldr	r3, [pc, #604]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10d      	bne.n	800215a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b94      	ldr	r3, [pc, #592]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a93      	ldr	r2, [pc, #588]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	61d3      	str	r3, [r2, #28]
 800214a:	4b91      	ldr	r3, [pc, #580]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002156:	2301      	movs	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b8e      	ldr	r3, [pc, #568]	; (8002394 <HAL_RCC_OscConfig+0x4f8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d118      	bne.n	8002198 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002166:	4b8b      	ldr	r3, [pc, #556]	; (8002394 <HAL_RCC_OscConfig+0x4f8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a8a      	ldr	r2, [pc, #552]	; (8002394 <HAL_RCC_OscConfig+0x4f8>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002172:	f7ff f9d3 	bl	800151c <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217a:	f7ff f9cf 	bl	800151c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b64      	cmp	r3, #100	; 0x64
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0fd      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	4b81      	ldr	r3, [pc, #516]	; (8002394 <HAL_RCC_OscConfig+0x4f8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x312>
 80021a0:	4b7b      	ldr	r3, [pc, #492]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a7a      	ldr	r2, [pc, #488]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e02d      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x334>
 80021b6:	4b76      	ldr	r3, [pc, #472]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a75      	ldr	r2, [pc, #468]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6213      	str	r3, [r2, #32]
 80021c2:	4b73      	ldr	r3, [pc, #460]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a72      	ldr	r2, [pc, #456]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6213      	str	r3, [r2, #32]
 80021ce:	e01c      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d10c      	bne.n	80021f2 <HAL_RCC_OscConfig+0x356>
 80021d8:	4b6d      	ldr	r3, [pc, #436]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a6c      	ldr	r2, [pc, #432]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a69      	ldr	r2, [pc, #420]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	e00b      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021f2:	4b67      	ldr	r3, [pc, #412]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4a66      	ldr	r2, [pc, #408]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6213      	str	r3, [r2, #32]
 80021fe:	4b64      	ldr	r3, [pc, #400]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a63      	ldr	r2, [pc, #396]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d015      	beq.n	800223e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7ff f983 	bl	800151c <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7ff f97f 	bl	800151c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0ab      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	4b57      	ldr	r3, [pc, #348]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ee      	beq.n	800221a <HAL_RCC_OscConfig+0x37e>
 800223c:	e014      	b.n	8002268 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7ff f96d 	bl	800151c <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7ff f969 	bl	800151c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e095      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ee      	bne.n	8002246 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d105      	bne.n	800227a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	4b48      	ldr	r3, [pc, #288]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4a47      	ldr	r2, [pc, #284]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002278:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8081 	beq.w	8002386 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002284:	4b42      	ldr	r3, [pc, #264]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d061      	beq.n	8002354 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d146      	bne.n	8002326 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002298:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <HAL_RCC_OscConfig+0x4fc>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff f93d 	bl	800151c <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7ff f939 	bl	800151c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e067      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d108      	bne.n	80022e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ce:	4b30      	ldr	r3, [pc, #192]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	492d      	ldr	r1, [pc, #180]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e0:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a19      	ldr	r1, [r3, #32]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	430b      	orrs	r3, r1
 80022f2:	4927      	ldr	r1, [pc, #156]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x4fc>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7ff f90d 	bl	800151c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7ff f909 	bl	800151c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e037      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x46a>
 8002324:	e02f      	b.n	8002386 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_RCC_OscConfig+0x4fc>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff f8f6 	bl	800151c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002334:	f7ff f8f2 	bl	800151c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e020      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x498>
 8002352:	e018      	b.n	8002386 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e013      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_OscConfig+0x4f4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	429a      	cmp	r2, r3
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	40007000 	.word	0x40007000
 8002398:	42420060 	.word	0x42420060

0800239c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0d0      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b0:	4b6a      	ldr	r3, [pc, #424]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d910      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b67      	ldr	r3, [pc, #412]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0207 	bic.w	r2, r3, #7
 80023c6:	4965      	ldr	r1, [pc, #404]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b63      	ldr	r3, [pc, #396]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0b8      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f8:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a58      	ldr	r2, [pc, #352]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002402:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002410:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a52      	ldr	r2, [pc, #328]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800241a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	494d      	ldr	r1, [pc, #308]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d040      	beq.n	80024bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b47      	ldr	r3, [pc, #284]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d115      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e07f      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b41      	ldr	r3, [pc, #260]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e073      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06b      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247a:	4b39      	ldr	r3, [pc, #228]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4936      	ldr	r1, [pc, #216]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800248c:	f7ff f846 	bl	800151c <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7ff f842 	bl	800151c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e053      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 020c 	and.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1eb      	bne.n	8002494 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d210      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 0207 	bic.w	r2, r3, #7
 80024d2:	4922      	ldr	r1, [pc, #136]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e032      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4916      	ldr	r1, [pc, #88]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	490e      	ldr	r1, [pc, #56]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800252a:	f000 f821 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 800252e:	4601      	mov	r1, r0
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	5cd3      	ldrb	r3, [r2, r3]
 800253e:	fa21 f303 	lsr.w	r3, r1, r3
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1cc>)
 8002544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1d0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe ffa4 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40022000 	.word	0x40022000
 8002560:	40021000 	.word	0x40021000
 8002564:	08004674 	.word	0x08004674
 8002568:	20000000 	.word	0x20000000
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002570:	b490      	push	{r4, r7}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002576:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002578:	1d3c      	adds	r4, r7, #4
 800257a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800257c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb8>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x40>
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x46>
 80025ae:	e02d      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b0:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025b2:	623b      	str	r3, [r7, #32]
      break;
 80025b4:	e02d      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	0c9b      	lsrs	r3, r3, #18
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025c2:	4413      	add	r3, r2
 80025c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	0c5b      	lsrs	r3, r3, #17
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025e2:	4413      	add	r3, r2
 80025e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	4a0f      	ldr	r2, [pc, #60]	; (800262c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025ee:	fb02 f203 	mul.w	r2, r2, r3
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
 80025fa:	e004      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4a0c      	ldr	r2, [pc, #48]	; (8002630 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	623b      	str	r3, [r7, #32]
      break;
 800260a:	e002      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <HAL_RCC_GetSysClockFreq+0xbc>)
 800260e:	623b      	str	r3, [r7, #32]
      break;
 8002610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002612:	6a3b      	ldr	r3, [r7, #32]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3728      	adds	r7, #40	; 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bc90      	pop	{r4, r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	08004660 	.word	0x08004660
 8002624:	08004670 	.word	0x08004670
 8002628:	40021000 	.word	0x40021000
 800262c:	007a1200 	.word	0x007a1200
 8002630:	003d0900 	.word	0x003d0900

08002634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002638:	4b02      	ldr	r3, [pc, #8]	; (8002644 <HAL_RCC_GetHCLKFreq+0x10>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	20000000 	.word	0x20000000

08002648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800264c:	f7ff fff2 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002650:	4601      	mov	r1, r0
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4a03      	ldr	r2, [pc, #12]	; (800266c <HAL_RCC_GetPCLK1Freq+0x24>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	08004684 	.word	0x08004684

08002670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002674:	f7ff ffde 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002678:	4601      	mov	r1, r0
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0adb      	lsrs	r3, r3, #11
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4a03      	ldr	r2, [pc, #12]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	fa21 f303 	lsr.w	r3, r1, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	08004684 	.word	0x08004684

08002698 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <RCC_Delay+0x34>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <RCC_Delay+0x38>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0a5b      	lsrs	r3, r3, #9
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026b4:	bf00      	nop
  }
  while (Delay --);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1e5a      	subs	r2, r3, #1
 80026ba:	60fa      	str	r2, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f9      	bne.n	80026b4 <RCC_Delay+0x1c>
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000
 80026d0:	10624dd3 	.word	0x10624dd3

080026d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e076      	b.n	80027d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d108      	bne.n	8002700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026f6:	d009      	beq.n	800270c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
 80026fe:	e005      	b.n	800270c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fca0 	bl	800106c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002742:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002790:	ea42 0103 	orr.w	r1, r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	0c1a      	lsrs	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f002 0204 	and.w	r2, r2, #4
 80027b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e041      	b.n	8002872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe fc7c 	bl	8001100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f000 fc8e 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d001      	beq.n	8002894 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e032      	b.n	80028fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a18      	ldr	r2, [pc, #96]	; (8002904 <HAL_TIM_Base_Start+0x88>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00e      	beq.n	80028c4 <HAL_TIM_Base_Start+0x48>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ae:	d009      	beq.n	80028c4 <HAL_TIM_Base_Start+0x48>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <HAL_TIM_Base_Start+0x8c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d004      	beq.n	80028c4 <HAL_TIM_Base_Start+0x48>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a13      	ldr	r2, [pc, #76]	; (800290c <HAL_TIM_Base_Start+0x90>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d111      	bne.n	80028e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d010      	beq.n	80028f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e6:	e007      	b.n	80028f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40000400 	.word	0x40000400
 800290c:	40000800 	.word	0x40000800

08002910 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6a1a      	ldr	r2, [r3, #32]
 800291e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10f      	bne.n	8002948 <HAL_TIM_Base_Stop+0x38>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6a1a      	ldr	r2, [r3, #32]
 800292e:	f240 4344 	movw	r3, #1092	; 0x444
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d107      	bne.n	8002948 <HAL_TIM_Base_Stop+0x38>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d001      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e03a      	b.n	80029ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_TIM_Base_Start_IT+0x98>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00e      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x58>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299e:	d009      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x58>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x58>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a13      	ldr	r2, [pc, #76]	; (80029fc <HAL_TIM_Base_Start_IT+0xa0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d111      	bne.n	80029d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d010      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	e007      	b.n	80029e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	40000400 	.word	0x40000400
 80029fc:	40000800 	.word	0x40000800

08002a00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e041      	b.n	8002a96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f839 	bl	8002a9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f000 fb7c 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e041      	b.n	8002b48 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f839 	bl	8002b50 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f000 fb23 	bl	800313c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0208 	bic.w	r2, r2, #8
 8002b04:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d122      	bne.n	8002bbe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d11b      	bne.n	8002bbe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f06f 0202 	mvn.w	r2, #2
 8002b8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 faae 	bl	8003106 <HAL_TIM_IC_CaptureCallback>
 8002baa:	e005      	b.n	8002bb8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 faa1 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fab0 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d122      	bne.n	8002c12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d11b      	bne.n	8002c12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f06f 0204 	mvn.w	r2, #4
 8002be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fa84 	bl	8003106 <HAL_TIM_IC_CaptureCallback>
 8002bfe:	e005      	b.n	8002c0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fa77 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa86 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d122      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d11b      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f06f 0208 	mvn.w	r2, #8
 8002c36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fa5a 	bl	8003106 <HAL_TIM_IC_CaptureCallback>
 8002c52:	e005      	b.n	8002c60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fa4d 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fa5c 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d122      	bne.n	8002cba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d11b      	bne.n	8002cba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 0210 	mvn.w	r2, #16
 8002c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2208      	movs	r2, #8
 8002c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fa30 	bl	8003106 <HAL_TIM_IC_CaptureCallback>
 8002ca6:	e005      	b.n	8002cb4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fa23 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa32 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10e      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d107      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0201 	mvn.w	r2, #1
 8002cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f9fe 	bl	80030e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d10e      	bne.n	8002d12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	2b80      	cmp	r3, #128	; 0x80
 8002d00:	d107      	bne.n	8002d12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fdf7 	bl	8003900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d10e      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d107      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f9f6 	bl	800312a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d10e      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	d107      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f06f 0220 	mvn.w	r2, #32
 8002d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fdc2 	bl	80038ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e0ac      	b.n	8002ee8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	f200 809f 	bhi.w	8002edc <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002dd9 	.word	0x08002dd9
 8002da8:	08002edd 	.word	0x08002edd
 8002dac:	08002edd 	.word	0x08002edd
 8002db0:	08002edd 	.word	0x08002edd
 8002db4:	08002e19 	.word	0x08002e19
 8002db8:	08002edd 	.word	0x08002edd
 8002dbc:	08002edd 	.word	0x08002edd
 8002dc0:	08002edd 	.word	0x08002edd
 8002dc4:	08002e5b 	.word	0x08002e5b
 8002dc8:	08002edd 	.word	0x08002edd
 8002dcc:	08002edd 	.word	0x08002edd
 8002dd0:	08002edd 	.word	0x08002edd
 8002dd4:	08002e9b 	.word	0x08002e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fa0e 	bl	8003200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0208 	orr.w	r2, r2, #8
 8002df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0204 	bic.w	r2, r2, #4
 8002e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6999      	ldr	r1, [r3, #24]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	619a      	str	r2, [r3, #24]
      break;
 8002e16:	e062      	b.n	8002ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fa54 	bl	80032cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6999      	ldr	r1, [r3, #24]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	021a      	lsls	r2, r3, #8
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	619a      	str	r2, [r3, #24]
      break;
 8002e58:	e041      	b.n	8002ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fa9d 	bl	80033a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0208 	orr.w	r2, r2, #8
 8002e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0204 	bic.w	r2, r2, #4
 8002e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69d9      	ldr	r1, [r3, #28]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	61da      	str	r2, [r3, #28]
      break;
 8002e98:	e021      	b.n	8002ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fae7 	bl	8003474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69d9      	ldr	r1, [r3, #28]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	021a      	lsls	r2, r3, #8
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	61da      	str	r2, [r3, #28]
      break;
 8002eda:	e000      	b.n	8002ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_TIM_ConfigClockSource+0x18>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0a6      	b.n	8003056 <HAL_TIM_ConfigClockSource+0x166>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b40      	cmp	r3, #64	; 0x40
 8002f3e:	d067      	beq.n	8003010 <HAL_TIM_ConfigClockSource+0x120>
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	d80b      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x6c>
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d073      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0x140>
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d802      	bhi.n	8002f52 <HAL_TIM_ConfigClockSource+0x62>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d06f      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f50:	e078      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d06c      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0x140>
 8002f56:	2b30      	cmp	r3, #48	; 0x30
 8002f58:	d06a      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f5a:	e073      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f5c:	2b70      	cmp	r3, #112	; 0x70
 8002f5e:	d00d      	beq.n	8002f7c <HAL_TIM_ConfigClockSource+0x8c>
 8002f60:	2b70      	cmp	r3, #112	; 0x70
 8002f62:	d804      	bhi.n	8002f6e <HAL_TIM_ConfigClockSource+0x7e>
 8002f64:	2b50      	cmp	r3, #80	; 0x50
 8002f66:	d033      	beq.n	8002fd0 <HAL_TIM_ConfigClockSource+0xe0>
 8002f68:	2b60      	cmp	r3, #96	; 0x60
 8002f6a:	d041      	beq.n	8002ff0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f6c:	e06a      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d066      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x152>
 8002f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f78:	d017      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f7a:	e063      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6899      	ldr	r1, [r3, #8]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f000 fbbd 	bl	800370a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	609a      	str	r2, [r3, #8]
      break;
 8002fa8:	e04c      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6899      	ldr	r1, [r3, #8]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f000 fba6 	bl	800370a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fcc:	609a      	str	r2, [r3, #8]
      break;
 8002fce:	e039      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f000 fb1d 	bl	800361c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2150      	movs	r1, #80	; 0x50
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fb74 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 8002fee:	e029      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f000 fb3b 	bl	8003678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2160      	movs	r1, #96	; 0x60
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fb64 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 800300e:	e019      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	461a      	mov	r2, r3
 800301e:	f000 fafd 	bl	800361c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2140      	movs	r1, #64	; 0x40
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fb54 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 800302e:	e009      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f000 fb4b 	bl	80036d6 <TIM_ITRx_SetConfig>
        break;
 8003040:	e000      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003072:	2302      	movs	r3, #2
 8003074:	e031      	b.n	80030da <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003086:	6839      	ldr	r1, [r7, #0]
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fa41 	bl	8003510 <TIM_SlaveTimer_SetConfig>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e018      	b.n	80030da <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <TIM_Base_SetConfig+0xb8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00b      	beq.n	800316c <TIM_Base_SetConfig+0x30>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d007      	beq.n	800316c <TIM_Base_SetConfig+0x30>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <TIM_Base_SetConfig+0xbc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0x30>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a25      	ldr	r2, [pc, #148]	; (80031fc <TIM_Base_SetConfig+0xc0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <TIM_Base_SetConfig+0xb8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00b      	beq.n	800319e <TIM_Base_SetConfig+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d007      	beq.n	800319e <TIM_Base_SetConfig+0x62>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <TIM_Base_SetConfig+0xbc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d003      	beq.n	800319e <TIM_Base_SetConfig+0x62>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a18      	ldr	r2, [pc, #96]	; (80031fc <TIM_Base_SetConfig+0xc0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d108      	bne.n	80031b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <TIM_Base_SetConfig+0xb8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	615a      	str	r2, [r3, #20]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40000400 	.word	0x40000400
 80031fc:	40000800 	.word	0x40000800

08003200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f023 0201 	bic.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f023 0302 	bic.w	r3, r3, #2
 8003248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <TIM_OC1_SetConfig+0xc8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10c      	bne.n	8003276 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f023 0308 	bic.w	r3, r3, #8
 8003262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <TIM_OC1_SetConfig+0xc8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d111      	bne.n	80032a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800328c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	621a      	str	r2, [r3, #32]
}
 80032bc:	bf00      	nop
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40012c00 	.word	0x40012c00

080032cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f023 0210 	bic.w	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0320 	bic.w	r3, r3, #32
 8003316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a1d      	ldr	r2, [pc, #116]	; (800339c <TIM_OC2_SetConfig+0xd0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d10d      	bne.n	8003348 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a14      	ldr	r2, [pc, #80]	; (800339c <TIM_OC2_SetConfig+0xd0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d113      	bne.n	8003378 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800335e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	621a      	str	r2, [r3, #32]
}
 8003392:	bf00      	nop
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00

080033a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0303 	bic.w	r3, r3, #3
 80033d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <TIM_OC3_SetConfig+0xd0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10d      	bne.n	800341a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <TIM_OC3_SetConfig+0xd0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d113      	bne.n	800344a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	621a      	str	r2, [r3, #32]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40012c00 	.word	0x40012c00

08003474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	031b      	lsls	r3, r3, #12
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a0f      	ldr	r2, [pc, #60]	; (800350c <TIM_OC4_SetConfig+0x98>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d109      	bne.n	80034e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	019b      	lsls	r3, r3, #6
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	40012c00 	.word	0x40012c00

08003510 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003528:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 0307 	bic.w	r3, r3, #7
 800353a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b30      	cmp	r3, #48	; 0x30
 8003554:	d05c      	beq.n	8003610 <TIM_SlaveTimer_SetConfig+0x100>
 8003556:	2b30      	cmp	r3, #48	; 0x30
 8003558:	d806      	bhi.n	8003568 <TIM_SlaveTimer_SetConfig+0x58>
 800355a:	2b10      	cmp	r3, #16
 800355c:	d058      	beq.n	8003610 <TIM_SlaveTimer_SetConfig+0x100>
 800355e:	2b20      	cmp	r3, #32
 8003560:	d056      	beq.n	8003610 <TIM_SlaveTimer_SetConfig+0x100>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d054      	beq.n	8003610 <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003566:	e054      	b.n	8003612 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003568:	2b50      	cmp	r3, #80	; 0x50
 800356a:	d03d      	beq.n	80035e8 <TIM_SlaveTimer_SetConfig+0xd8>
 800356c:	2b50      	cmp	r3, #80	; 0x50
 800356e:	d802      	bhi.n	8003576 <TIM_SlaveTimer_SetConfig+0x66>
 8003570:	2b40      	cmp	r3, #64	; 0x40
 8003572:	d010      	beq.n	8003596 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003574:	e04d      	b.n	8003612 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003576:	2b60      	cmp	r3, #96	; 0x60
 8003578:	d040      	beq.n	80035fc <TIM_SlaveTimer_SetConfig+0xec>
 800357a:	2b70      	cmp	r3, #112	; 0x70
 800357c:	d000      	beq.n	8003580 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800357e:	e048      	b.n	8003612 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68d9      	ldr	r1, [r3, #12]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f000 f8bb 	bl	800370a <TIM_ETR_SetConfig>
      break;
 8003594:	e03d      	b.n	8003612 <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b05      	cmp	r3, #5
 800359c:	d101      	bne.n	80035a2 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e038      	b.n	8003614 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0201 	bic.w	r2, r2, #1
 80035b8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	621a      	str	r2, [r3, #32]
      break;
 80035e6:	e014      	b.n	8003612 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6899      	ldr	r1, [r3, #8]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	461a      	mov	r2, r3
 80035f6:	f000 f811 	bl	800361c <TIM_TI1_ConfigInputStage>
      break;
 80035fa:	e00a      	b.n	8003612 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	461a      	mov	r2, r3
 800360a:	f000 f835 	bl	8003678 <TIM_TI2_ConfigInputStage>
      break;
 800360e:	e000      	b.n	8003612 <TIM_SlaveTimer_SetConfig+0x102>
        break;
 8003610:	bf00      	nop
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f023 0201 	bic.w	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f023 030a 	bic.w	r3, r3, #10
 8003658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f023 0210 	bic.w	r2, r3, #16
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	031b      	lsls	r3, r3, #12
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	621a      	str	r2, [r3, #32]
}
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f043 0307 	orr.w	r3, r3, #7
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	609a      	str	r2, [r3, #8]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800370a:	b480      	push	{r7}
 800370c:	b087      	sub	sp, #28
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003724:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	021a      	lsls	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	431a      	orrs	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4313      	orrs	r3, r2
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	609a      	str	r2, [r3, #8]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2201      	movs	r2, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	43db      	mvns	r3, r3
 800376a:	401a      	ands	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	431a      	orrs	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e046      	b.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a16      	ldr	r2, [pc, #88]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d009      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a12      	ldr	r2, [pc, #72]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a10      	ldr	r2, [pc, #64]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10c      	bne.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	4313      	orrs	r3, r2
 800381a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800

0800384c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003864:	2302      	movs	r3, #2
 8003866:	e03d      	b.n	80038e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e03f      	b.n	80039a4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d106      	bne.n	800393e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7fd fc89 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2224      	movs	r2, #36	; 0x24
 8003942:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003954:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f904 	bl	8003b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800396a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800397a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800398a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d17c      	bne.n	8003ac6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_UART_Transmit+0x2c>
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e075      	b.n	8003ac8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Transmit+0x3e>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e06e      	b.n	8003ac8 <HAL_UART_Transmit+0x11c>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2221      	movs	r2, #33	; 0x21
 80039fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a00:	f7fd fd8c 	bl	800151c <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	d108      	bne.n	8003a2e <HAL_UART_Transmit+0x82>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	e003      	b.n	8003a36 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003a3e:	e02a      	b.n	8003a96 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2200      	movs	r2, #0
 8003a48:	2180      	movs	r1, #128	; 0x80
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f840 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e036      	b.n	8003ac8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10b      	bne.n	8003a78 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a6e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	3302      	adds	r3, #2
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e007      	b.n	8003a88 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3301      	adds	r3, #1
 8003a86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1cf      	bne.n	8003a40 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2140      	movs	r1, #64	; 0x40
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f810 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e006      	b.n	8003ac8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e000      	b.n	8003ac8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ac6:	2302      	movs	r3, #2
  }
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae0:	e02c      	b.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae8:	d028      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003af0:	f7fd fd14 	bl	800151c <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d21d      	bcs.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e00f      	b.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d0c3      	beq.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b9e:	f023 030c 	bic.w	r3, r3, #12
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2c      	ldr	r2, [pc, #176]	; (8003c78 <UART_SetConfig+0x114>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d103      	bne.n	8003bd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bcc:	f7fe fd50 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	e002      	b.n	8003bda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bd4:	f7fe fd38 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8003bd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009a      	lsls	r2, r3, #2
 8003be4:	441a      	add	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <UART_SetConfig+0x118>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	0119      	lsls	r1, r3, #4
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009a      	lsls	r2, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <UART_SetConfig+0x118>)
 8003c12:	fba3 0302 	umull	r0, r3, r3, r2
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2064      	movs	r0, #100	; 0x64
 8003c1a:	fb00 f303 	mul.w	r3, r0, r3
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	3332      	adds	r3, #50	; 0x32
 8003c24:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <UART_SetConfig+0x118>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c30:	4419      	add	r1, r3
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009a      	lsls	r2, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <UART_SetConfig+0x118>)
 8003c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2064      	movs	r0, #100	; 0x64
 8003c52:	fb00 f303 	mul.w	r3, r0, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	3332      	adds	r3, #50	; 0x32
 8003c5c:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <UART_SetConfig+0x118>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	f003 020f 	and.w	r2, r3, #15
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40013800 	.word	0x40013800
 8003c7c:	51eb851f 	.word	0x51eb851f

08003c80 <_Znaj>:
 8003c80:	f000 b800 	b.w	8003c84 <_Znwj>

08003c84 <_Znwj>:
 8003c84:	b510      	push	{r4, lr}
 8003c86:	2800      	cmp	r0, #0
 8003c88:	bf14      	ite	ne
 8003c8a:	4604      	movne	r4, r0
 8003c8c:	2401      	moveq	r4, #1
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f000 f844 	bl	8003d1c <malloc>
 8003c94:	b930      	cbnz	r0, 8003ca4 <_Znwj+0x20>
 8003c96:	f000 f807 	bl	8003ca8 <_ZSt15get_new_handlerv>
 8003c9a:	b908      	cbnz	r0, 8003ca0 <_Znwj+0x1c>
 8003c9c:	f000 f80c 	bl	8003cb8 <abort>
 8003ca0:	4780      	blx	r0
 8003ca2:	e7f4      	b.n	8003c8e <_Znwj+0xa>
 8003ca4:	bd10      	pop	{r4, pc}
	...

08003ca8 <_ZSt15get_new_handlerv>:
 8003ca8:	4b02      	ldr	r3, [pc, #8]	; (8003cb4 <_ZSt15get_new_handlerv+0xc>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	f3bf 8f5b 	dmb	ish
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	200004b0 	.word	0x200004b0

08003cb8 <abort>:
 8003cb8:	b508      	push	{r3, lr}
 8003cba:	2006      	movs	r0, #6
 8003cbc:	f000 f91c 	bl	8003ef8 <raise>
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f7fd fb66 	bl	8001392 <_exit>
	...

08003cc8 <__errno>:
 8003cc8:	4b01      	ldr	r3, [pc, #4]	; (8003cd0 <__errno+0x8>)
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	2000000c 	.word	0x2000000c

08003cd4 <__libc_init_array>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	2500      	movs	r5, #0
 8003cd8:	4e0c      	ldr	r6, [pc, #48]	; (8003d0c <__libc_init_array+0x38>)
 8003cda:	4c0d      	ldr	r4, [pc, #52]	; (8003d10 <__libc_init_array+0x3c>)
 8003cdc:	1ba4      	subs	r4, r4, r6
 8003cde:	10a4      	asrs	r4, r4, #2
 8003ce0:	42a5      	cmp	r5, r4
 8003ce2:	d109      	bne.n	8003cf8 <__libc_init_array+0x24>
 8003ce4:	f000 fc80 	bl	80045e8 <_init>
 8003ce8:	2500      	movs	r5, #0
 8003cea:	4e0a      	ldr	r6, [pc, #40]	; (8003d14 <__libc_init_array+0x40>)
 8003cec:	4c0a      	ldr	r4, [pc, #40]	; (8003d18 <__libc_init_array+0x44>)
 8003cee:	1ba4      	subs	r4, r4, r6
 8003cf0:	10a4      	asrs	r4, r4, #2
 8003cf2:	42a5      	cmp	r5, r4
 8003cf4:	d105      	bne.n	8003d02 <__libc_init_array+0x2e>
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cfc:	4798      	blx	r3
 8003cfe:	3501      	adds	r5, #1
 8003d00:	e7ee      	b.n	8003ce0 <__libc_init_array+0xc>
 8003d02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d06:	4798      	blx	r3
 8003d08:	3501      	adds	r5, #1
 8003d0a:	e7f2      	b.n	8003cf2 <__libc_init_array+0x1e>
 8003d0c:	080046c0 	.word	0x080046c0
 8003d10:	080046c0 	.word	0x080046c0
 8003d14:	080046c0 	.word	0x080046c0
 8003d18:	080046c8 	.word	0x080046c8

08003d1c <malloc>:
 8003d1c:	4b02      	ldr	r3, [pc, #8]	; (8003d28 <malloc+0xc>)
 8003d1e:	4601      	mov	r1, r0
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	f000 b857 	b.w	8003dd4 <_malloc_r>
 8003d26:	bf00      	nop
 8003d28:	2000000c 	.word	0x2000000c

08003d2c <memset>:
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4402      	add	r2, r0
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d100      	bne.n	8003d36 <memset+0xa>
 8003d34:	4770      	bx	lr
 8003d36:	f803 1b01 	strb.w	r1, [r3], #1
 8003d3a:	e7f9      	b.n	8003d30 <memset+0x4>

08003d3c <_free_r>:
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4605      	mov	r5, r0
 8003d40:	2900      	cmp	r1, #0
 8003d42:	d043      	beq.n	8003dcc <_free_r+0x90>
 8003d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d48:	1f0c      	subs	r4, r1, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bfb8      	it	lt
 8003d4e:	18e4      	addlt	r4, r4, r3
 8003d50:	f000 f90e 	bl	8003f70 <__malloc_lock>
 8003d54:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <_free_r+0x94>)
 8003d56:	6813      	ldr	r3, [r2, #0]
 8003d58:	4610      	mov	r0, r2
 8003d5a:	b933      	cbnz	r3, 8003d6a <_free_r+0x2e>
 8003d5c:	6063      	str	r3, [r4, #4]
 8003d5e:	6014      	str	r4, [r2, #0]
 8003d60:	4628      	mov	r0, r5
 8003d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d66:	f000 b904 	b.w	8003f72 <__malloc_unlock>
 8003d6a:	42a3      	cmp	r3, r4
 8003d6c:	d90b      	bls.n	8003d86 <_free_r+0x4a>
 8003d6e:	6821      	ldr	r1, [r4, #0]
 8003d70:	1862      	adds	r2, r4, r1
 8003d72:	4293      	cmp	r3, r2
 8003d74:	bf01      	itttt	eq
 8003d76:	681a      	ldreq	r2, [r3, #0]
 8003d78:	685b      	ldreq	r3, [r3, #4]
 8003d7a:	1852      	addeq	r2, r2, r1
 8003d7c:	6022      	streq	r2, [r4, #0]
 8003d7e:	6063      	str	r3, [r4, #4]
 8003d80:	6004      	str	r4, [r0, #0]
 8003d82:	e7ed      	b.n	8003d60 <_free_r+0x24>
 8003d84:	4613      	mov	r3, r2
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	b10a      	cbz	r2, 8003d8e <_free_r+0x52>
 8003d8a:	42a2      	cmp	r2, r4
 8003d8c:	d9fa      	bls.n	8003d84 <_free_r+0x48>
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	1858      	adds	r0, r3, r1
 8003d92:	42a0      	cmp	r0, r4
 8003d94:	d10b      	bne.n	8003dae <_free_r+0x72>
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	4401      	add	r1, r0
 8003d9a:	1858      	adds	r0, r3, r1
 8003d9c:	4282      	cmp	r2, r0
 8003d9e:	6019      	str	r1, [r3, #0]
 8003da0:	d1de      	bne.n	8003d60 <_free_r+0x24>
 8003da2:	6810      	ldr	r0, [r2, #0]
 8003da4:	6852      	ldr	r2, [r2, #4]
 8003da6:	4401      	add	r1, r0
 8003da8:	6019      	str	r1, [r3, #0]
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	e7d8      	b.n	8003d60 <_free_r+0x24>
 8003dae:	d902      	bls.n	8003db6 <_free_r+0x7a>
 8003db0:	230c      	movs	r3, #12
 8003db2:	602b      	str	r3, [r5, #0]
 8003db4:	e7d4      	b.n	8003d60 <_free_r+0x24>
 8003db6:	6820      	ldr	r0, [r4, #0]
 8003db8:	1821      	adds	r1, r4, r0
 8003dba:	428a      	cmp	r2, r1
 8003dbc:	bf01      	itttt	eq
 8003dbe:	6811      	ldreq	r1, [r2, #0]
 8003dc0:	6852      	ldreq	r2, [r2, #4]
 8003dc2:	1809      	addeq	r1, r1, r0
 8003dc4:	6021      	streq	r1, [r4, #0]
 8003dc6:	6062      	str	r2, [r4, #4]
 8003dc8:	605c      	str	r4, [r3, #4]
 8003dca:	e7c9      	b.n	8003d60 <_free_r+0x24>
 8003dcc:	bd38      	pop	{r3, r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	200004b4 	.word	0x200004b4

08003dd4 <_malloc_r>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	1ccd      	adds	r5, r1, #3
 8003dd8:	f025 0503 	bic.w	r5, r5, #3
 8003ddc:	3508      	adds	r5, #8
 8003dde:	2d0c      	cmp	r5, #12
 8003de0:	bf38      	it	cc
 8003de2:	250c      	movcc	r5, #12
 8003de4:	2d00      	cmp	r5, #0
 8003de6:	4606      	mov	r6, r0
 8003de8:	db01      	blt.n	8003dee <_malloc_r+0x1a>
 8003dea:	42a9      	cmp	r1, r5
 8003dec:	d903      	bls.n	8003df6 <_malloc_r+0x22>
 8003dee:	230c      	movs	r3, #12
 8003df0:	6033      	str	r3, [r6, #0]
 8003df2:	2000      	movs	r0, #0
 8003df4:	bd70      	pop	{r4, r5, r6, pc}
 8003df6:	f000 f8bb 	bl	8003f70 <__malloc_lock>
 8003dfa:	4a21      	ldr	r2, [pc, #132]	; (8003e80 <_malloc_r+0xac>)
 8003dfc:	6814      	ldr	r4, [r2, #0]
 8003dfe:	4621      	mov	r1, r4
 8003e00:	b991      	cbnz	r1, 8003e28 <_malloc_r+0x54>
 8003e02:	4c20      	ldr	r4, [pc, #128]	; (8003e84 <_malloc_r+0xb0>)
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	b91b      	cbnz	r3, 8003e10 <_malloc_r+0x3c>
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f000 f83d 	bl	8003e88 <_sbrk_r>
 8003e0e:	6020      	str	r0, [r4, #0]
 8003e10:	4629      	mov	r1, r5
 8003e12:	4630      	mov	r0, r6
 8003e14:	f000 f838 	bl	8003e88 <_sbrk_r>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d124      	bne.n	8003e66 <_malloc_r+0x92>
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	4630      	mov	r0, r6
 8003e20:	6033      	str	r3, [r6, #0]
 8003e22:	f000 f8a6 	bl	8003f72 <__malloc_unlock>
 8003e26:	e7e4      	b.n	8003df2 <_malloc_r+0x1e>
 8003e28:	680b      	ldr	r3, [r1, #0]
 8003e2a:	1b5b      	subs	r3, r3, r5
 8003e2c:	d418      	bmi.n	8003e60 <_malloc_r+0x8c>
 8003e2e:	2b0b      	cmp	r3, #11
 8003e30:	d90f      	bls.n	8003e52 <_malloc_r+0x7e>
 8003e32:	600b      	str	r3, [r1, #0]
 8003e34:	18cc      	adds	r4, r1, r3
 8003e36:	50cd      	str	r5, [r1, r3]
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f000 f89a 	bl	8003f72 <__malloc_unlock>
 8003e3e:	f104 000b 	add.w	r0, r4, #11
 8003e42:	1d23      	adds	r3, r4, #4
 8003e44:	f020 0007 	bic.w	r0, r0, #7
 8003e48:	1ac3      	subs	r3, r0, r3
 8003e4a:	d0d3      	beq.n	8003df4 <_malloc_r+0x20>
 8003e4c:	425a      	negs	r2, r3
 8003e4e:	50e2      	str	r2, [r4, r3]
 8003e50:	e7d0      	b.n	8003df4 <_malloc_r+0x20>
 8003e52:	684b      	ldr	r3, [r1, #4]
 8003e54:	428c      	cmp	r4, r1
 8003e56:	bf16      	itet	ne
 8003e58:	6063      	strne	r3, [r4, #4]
 8003e5a:	6013      	streq	r3, [r2, #0]
 8003e5c:	460c      	movne	r4, r1
 8003e5e:	e7eb      	b.n	8003e38 <_malloc_r+0x64>
 8003e60:	460c      	mov	r4, r1
 8003e62:	6849      	ldr	r1, [r1, #4]
 8003e64:	e7cc      	b.n	8003e00 <_malloc_r+0x2c>
 8003e66:	1cc4      	adds	r4, r0, #3
 8003e68:	f024 0403 	bic.w	r4, r4, #3
 8003e6c:	42a0      	cmp	r0, r4
 8003e6e:	d005      	beq.n	8003e7c <_malloc_r+0xa8>
 8003e70:	1a21      	subs	r1, r4, r0
 8003e72:	4630      	mov	r0, r6
 8003e74:	f000 f808 	bl	8003e88 <_sbrk_r>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d0cf      	beq.n	8003e1c <_malloc_r+0x48>
 8003e7c:	6025      	str	r5, [r4, #0]
 8003e7e:	e7db      	b.n	8003e38 <_malloc_r+0x64>
 8003e80:	200004b4 	.word	0x200004b4
 8003e84:	200004b8 	.word	0x200004b8

08003e88 <_sbrk_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	4c05      	ldr	r4, [pc, #20]	; (8003ea4 <_sbrk_r+0x1c>)
 8003e8e:	4605      	mov	r5, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	6023      	str	r3, [r4, #0]
 8003e94:	f7fd fa88 	bl	80013a8 <_sbrk>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_sbrk_r+0x1a>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_sbrk_r+0x1a>
 8003ea0:	602b      	str	r3, [r5, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	20000680 	.word	0x20000680

08003ea8 <_raise_r>:
 8003ea8:	291f      	cmp	r1, #31
 8003eaa:	b538      	push	{r3, r4, r5, lr}
 8003eac:	4604      	mov	r4, r0
 8003eae:	460d      	mov	r5, r1
 8003eb0:	d904      	bls.n	8003ebc <_raise_r+0x14>
 8003eb2:	2316      	movs	r3, #22
 8003eb4:	6003      	str	r3, [r0, #0]
 8003eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eba:	bd38      	pop	{r3, r4, r5, pc}
 8003ebc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003ebe:	b112      	cbz	r2, 8003ec6 <_raise_r+0x1e>
 8003ec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003ec4:	b94b      	cbnz	r3, 8003eda <_raise_r+0x32>
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f000 f830 	bl	8003f2c <_getpid_r>
 8003ecc:	462a      	mov	r2, r5
 8003ece:	4601      	mov	r1, r0
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ed6:	f000 b817 	b.w	8003f08 <_kill_r>
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d00a      	beq.n	8003ef4 <_raise_r+0x4c>
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	d103      	bne.n	8003eea <_raise_r+0x42>
 8003ee2:	2316      	movs	r3, #22
 8003ee4:	6003      	str	r3, [r0, #0]
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	e7e7      	b.n	8003eba <_raise_r+0x12>
 8003eea:	2400      	movs	r4, #0
 8003eec:	4628      	mov	r0, r5
 8003eee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003ef2:	4798      	blx	r3
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	e7e0      	b.n	8003eba <_raise_r+0x12>

08003ef8 <raise>:
 8003ef8:	4b02      	ldr	r3, [pc, #8]	; (8003f04 <raise+0xc>)
 8003efa:	4601      	mov	r1, r0
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	f7ff bfd3 	b.w	8003ea8 <_raise_r>
 8003f02:	bf00      	nop
 8003f04:	2000000c 	.word	0x2000000c

08003f08 <_kill_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	4c06      	ldr	r4, [pc, #24]	; (8003f28 <_kill_r+0x20>)
 8003f0e:	4605      	mov	r5, r0
 8003f10:	4608      	mov	r0, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	f7fd fa2c 	bl	8001372 <_kill>
 8003f1a:	1c43      	adds	r3, r0, #1
 8003f1c:	d102      	bne.n	8003f24 <_kill_r+0x1c>
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	b103      	cbz	r3, 8003f24 <_kill_r+0x1c>
 8003f22:	602b      	str	r3, [r5, #0]
 8003f24:	bd38      	pop	{r3, r4, r5, pc}
 8003f26:	bf00      	nop
 8003f28:	20000680 	.word	0x20000680

08003f2c <_getpid_r>:
 8003f2c:	f7fd ba1a 	b.w	8001364 <_getpid>

08003f30 <siprintf>:
 8003f30:	b40e      	push	{r1, r2, r3}
 8003f32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f36:	b500      	push	{lr}
 8003f38:	b09c      	sub	sp, #112	; 0x70
 8003f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f3c:	9002      	str	r0, [sp, #8]
 8003f3e:	9006      	str	r0, [sp, #24]
 8003f40:	9107      	str	r1, [sp, #28]
 8003f42:	9104      	str	r1, [sp, #16]
 8003f44:	4808      	ldr	r0, [pc, #32]	; (8003f68 <siprintf+0x38>)
 8003f46:	4909      	ldr	r1, [pc, #36]	; (8003f6c <siprintf+0x3c>)
 8003f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f4c:	9105      	str	r1, [sp, #20]
 8003f4e:	6800      	ldr	r0, [r0, #0]
 8003f50:	a902      	add	r1, sp, #8
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	f000 f868 	bl	8004028 <_svfiprintf_r>
 8003f58:	2200      	movs	r2, #0
 8003f5a:	9b02      	ldr	r3, [sp, #8]
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	b01c      	add	sp, #112	; 0x70
 8003f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f64:	b003      	add	sp, #12
 8003f66:	4770      	bx	lr
 8003f68:	2000000c 	.word	0x2000000c
 8003f6c:	ffff0208 	.word	0xffff0208

08003f70 <__malloc_lock>:
 8003f70:	4770      	bx	lr

08003f72 <__malloc_unlock>:
 8003f72:	4770      	bx	lr

08003f74 <__ssputs_r>:
 8003f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f78:	688e      	ldr	r6, [r1, #8]
 8003f7a:	4682      	mov	sl, r0
 8003f7c:	429e      	cmp	r6, r3
 8003f7e:	460c      	mov	r4, r1
 8003f80:	4690      	mov	r8, r2
 8003f82:	4699      	mov	r9, r3
 8003f84:	d837      	bhi.n	8003ff6 <__ssputs_r+0x82>
 8003f86:	898a      	ldrh	r2, [r1, #12]
 8003f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f8c:	d031      	beq.n	8003ff2 <__ssputs_r+0x7e>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	6825      	ldr	r5, [r4, #0]
 8003f92:	6909      	ldr	r1, [r1, #16]
 8003f94:	1a6f      	subs	r7, r5, r1
 8003f96:	6965      	ldr	r5, [r4, #20]
 8003f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003fa0:	f109 0301 	add.w	r3, r9, #1
 8003fa4:	443b      	add	r3, r7
 8003fa6:	429d      	cmp	r5, r3
 8003fa8:	bf38      	it	cc
 8003faa:	461d      	movcc	r5, r3
 8003fac:	0553      	lsls	r3, r2, #21
 8003fae:	d530      	bpl.n	8004012 <__ssputs_r+0x9e>
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	f7ff ff0f 	bl	8003dd4 <_malloc_r>
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	b950      	cbnz	r0, 8003fd0 <__ssputs_r+0x5c>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fc0:	f8ca 3000 	str.w	r3, [sl]
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fca:	81a3      	strh	r3, [r4, #12]
 8003fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd0:	463a      	mov	r2, r7
 8003fd2:	6921      	ldr	r1, [r4, #16]
 8003fd4:	f000 fab6 	bl	8004544 <memcpy>
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	6126      	str	r6, [r4, #16]
 8003fe6:	443e      	add	r6, r7
 8003fe8:	6026      	str	r6, [r4, #0]
 8003fea:	464e      	mov	r6, r9
 8003fec:	6165      	str	r5, [r4, #20]
 8003fee:	1bed      	subs	r5, r5, r7
 8003ff0:	60a5      	str	r5, [r4, #8]
 8003ff2:	454e      	cmp	r6, r9
 8003ff4:	d900      	bls.n	8003ff8 <__ssputs_r+0x84>
 8003ff6:	464e      	mov	r6, r9
 8003ff8:	4632      	mov	r2, r6
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	6820      	ldr	r0, [r4, #0]
 8003ffe:	f000 faac 	bl	800455a <memmove>
 8004002:	68a3      	ldr	r3, [r4, #8]
 8004004:	2000      	movs	r0, #0
 8004006:	1b9b      	subs	r3, r3, r6
 8004008:	60a3      	str	r3, [r4, #8]
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	441e      	add	r6, r3
 800400e:	6026      	str	r6, [r4, #0]
 8004010:	e7dc      	b.n	8003fcc <__ssputs_r+0x58>
 8004012:	462a      	mov	r2, r5
 8004014:	f000 faba 	bl	800458c <_realloc_r>
 8004018:	4606      	mov	r6, r0
 800401a:	2800      	cmp	r0, #0
 800401c:	d1e2      	bne.n	8003fe4 <__ssputs_r+0x70>
 800401e:	6921      	ldr	r1, [r4, #16]
 8004020:	4650      	mov	r0, sl
 8004022:	f7ff fe8b 	bl	8003d3c <_free_r>
 8004026:	e7c8      	b.n	8003fba <__ssputs_r+0x46>

08004028 <_svfiprintf_r>:
 8004028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402c:	461d      	mov	r5, r3
 800402e:	898b      	ldrh	r3, [r1, #12]
 8004030:	b09d      	sub	sp, #116	; 0x74
 8004032:	061f      	lsls	r7, r3, #24
 8004034:	4680      	mov	r8, r0
 8004036:	460c      	mov	r4, r1
 8004038:	4616      	mov	r6, r2
 800403a:	d50f      	bpl.n	800405c <_svfiprintf_r+0x34>
 800403c:	690b      	ldr	r3, [r1, #16]
 800403e:	b96b      	cbnz	r3, 800405c <_svfiprintf_r+0x34>
 8004040:	2140      	movs	r1, #64	; 0x40
 8004042:	f7ff fec7 	bl	8003dd4 <_malloc_r>
 8004046:	6020      	str	r0, [r4, #0]
 8004048:	6120      	str	r0, [r4, #16]
 800404a:	b928      	cbnz	r0, 8004058 <_svfiprintf_r+0x30>
 800404c:	230c      	movs	r3, #12
 800404e:	f8c8 3000 	str.w	r3, [r8]
 8004052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004056:	e0c8      	b.n	80041ea <_svfiprintf_r+0x1c2>
 8004058:	2340      	movs	r3, #64	; 0x40
 800405a:	6163      	str	r3, [r4, #20]
 800405c:	2300      	movs	r3, #0
 800405e:	9309      	str	r3, [sp, #36]	; 0x24
 8004060:	2320      	movs	r3, #32
 8004062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004066:	2330      	movs	r3, #48	; 0x30
 8004068:	f04f 0b01 	mov.w	fp, #1
 800406c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004070:	9503      	str	r5, [sp, #12]
 8004072:	4637      	mov	r7, r6
 8004074:	463d      	mov	r5, r7
 8004076:	f815 3b01 	ldrb.w	r3, [r5], #1
 800407a:	b10b      	cbz	r3, 8004080 <_svfiprintf_r+0x58>
 800407c:	2b25      	cmp	r3, #37	; 0x25
 800407e:	d13e      	bne.n	80040fe <_svfiprintf_r+0xd6>
 8004080:	ebb7 0a06 	subs.w	sl, r7, r6
 8004084:	d00b      	beq.n	800409e <_svfiprintf_r+0x76>
 8004086:	4653      	mov	r3, sl
 8004088:	4632      	mov	r2, r6
 800408a:	4621      	mov	r1, r4
 800408c:	4640      	mov	r0, r8
 800408e:	f7ff ff71 	bl	8003f74 <__ssputs_r>
 8004092:	3001      	adds	r0, #1
 8004094:	f000 80a4 	beq.w	80041e0 <_svfiprintf_r+0x1b8>
 8004098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800409a:	4453      	add	r3, sl
 800409c:	9309      	str	r3, [sp, #36]	; 0x24
 800409e:	783b      	ldrb	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 809d 	beq.w	80041e0 <_svfiprintf_r+0x1b8>
 80040a6:	2300      	movs	r3, #0
 80040a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040b0:	9304      	str	r3, [sp, #16]
 80040b2:	9307      	str	r3, [sp, #28]
 80040b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040b8:	931a      	str	r3, [sp, #104]	; 0x68
 80040ba:	462f      	mov	r7, r5
 80040bc:	2205      	movs	r2, #5
 80040be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80040c2:	4850      	ldr	r0, [pc, #320]	; (8004204 <_svfiprintf_r+0x1dc>)
 80040c4:	f000 fa30 	bl	8004528 <memchr>
 80040c8:	9b04      	ldr	r3, [sp, #16]
 80040ca:	b9d0      	cbnz	r0, 8004102 <_svfiprintf_r+0xda>
 80040cc:	06d9      	lsls	r1, r3, #27
 80040ce:	bf44      	itt	mi
 80040d0:	2220      	movmi	r2, #32
 80040d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040d6:	071a      	lsls	r2, r3, #28
 80040d8:	bf44      	itt	mi
 80040da:	222b      	movmi	r2, #43	; 0x2b
 80040dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040e0:	782a      	ldrb	r2, [r5, #0]
 80040e2:	2a2a      	cmp	r2, #42	; 0x2a
 80040e4:	d015      	beq.n	8004112 <_svfiprintf_r+0xea>
 80040e6:	462f      	mov	r7, r5
 80040e8:	2000      	movs	r0, #0
 80040ea:	250a      	movs	r5, #10
 80040ec:	9a07      	ldr	r2, [sp, #28]
 80040ee:	4639      	mov	r1, r7
 80040f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040f4:	3b30      	subs	r3, #48	; 0x30
 80040f6:	2b09      	cmp	r3, #9
 80040f8:	d94d      	bls.n	8004196 <_svfiprintf_r+0x16e>
 80040fa:	b1b8      	cbz	r0, 800412c <_svfiprintf_r+0x104>
 80040fc:	e00f      	b.n	800411e <_svfiprintf_r+0xf6>
 80040fe:	462f      	mov	r7, r5
 8004100:	e7b8      	b.n	8004074 <_svfiprintf_r+0x4c>
 8004102:	4a40      	ldr	r2, [pc, #256]	; (8004204 <_svfiprintf_r+0x1dc>)
 8004104:	463d      	mov	r5, r7
 8004106:	1a80      	subs	r0, r0, r2
 8004108:	fa0b f000 	lsl.w	r0, fp, r0
 800410c:	4318      	orrs	r0, r3
 800410e:	9004      	str	r0, [sp, #16]
 8004110:	e7d3      	b.n	80040ba <_svfiprintf_r+0x92>
 8004112:	9a03      	ldr	r2, [sp, #12]
 8004114:	1d11      	adds	r1, r2, #4
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	9103      	str	r1, [sp, #12]
 800411a:	2a00      	cmp	r2, #0
 800411c:	db01      	blt.n	8004122 <_svfiprintf_r+0xfa>
 800411e:	9207      	str	r2, [sp, #28]
 8004120:	e004      	b.n	800412c <_svfiprintf_r+0x104>
 8004122:	4252      	negs	r2, r2
 8004124:	f043 0302 	orr.w	r3, r3, #2
 8004128:	9207      	str	r2, [sp, #28]
 800412a:	9304      	str	r3, [sp, #16]
 800412c:	783b      	ldrb	r3, [r7, #0]
 800412e:	2b2e      	cmp	r3, #46	; 0x2e
 8004130:	d10c      	bne.n	800414c <_svfiprintf_r+0x124>
 8004132:	787b      	ldrb	r3, [r7, #1]
 8004134:	2b2a      	cmp	r3, #42	; 0x2a
 8004136:	d133      	bne.n	80041a0 <_svfiprintf_r+0x178>
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	3702      	adds	r7, #2
 800413c:	1d1a      	adds	r2, r3, #4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	9203      	str	r2, [sp, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	bfb8      	it	lt
 8004146:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	4d2e      	ldr	r5, [pc, #184]	; (8004208 <_svfiprintf_r+0x1e0>)
 800414e:	2203      	movs	r2, #3
 8004150:	7839      	ldrb	r1, [r7, #0]
 8004152:	4628      	mov	r0, r5
 8004154:	f000 f9e8 	bl	8004528 <memchr>
 8004158:	b138      	cbz	r0, 800416a <_svfiprintf_r+0x142>
 800415a:	2340      	movs	r3, #64	; 0x40
 800415c:	1b40      	subs	r0, r0, r5
 800415e:	fa03 f000 	lsl.w	r0, r3, r0
 8004162:	9b04      	ldr	r3, [sp, #16]
 8004164:	3701      	adds	r7, #1
 8004166:	4303      	orrs	r3, r0
 8004168:	9304      	str	r3, [sp, #16]
 800416a:	7839      	ldrb	r1, [r7, #0]
 800416c:	2206      	movs	r2, #6
 800416e:	4827      	ldr	r0, [pc, #156]	; (800420c <_svfiprintf_r+0x1e4>)
 8004170:	1c7e      	adds	r6, r7, #1
 8004172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004176:	f000 f9d7 	bl	8004528 <memchr>
 800417a:	2800      	cmp	r0, #0
 800417c:	d038      	beq.n	80041f0 <_svfiprintf_r+0x1c8>
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <_svfiprintf_r+0x1e8>)
 8004180:	bb13      	cbnz	r3, 80041c8 <_svfiprintf_r+0x1a0>
 8004182:	9b03      	ldr	r3, [sp, #12]
 8004184:	3307      	adds	r3, #7
 8004186:	f023 0307 	bic.w	r3, r3, #7
 800418a:	3308      	adds	r3, #8
 800418c:	9303      	str	r3, [sp, #12]
 800418e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004190:	444b      	add	r3, r9
 8004192:	9309      	str	r3, [sp, #36]	; 0x24
 8004194:	e76d      	b.n	8004072 <_svfiprintf_r+0x4a>
 8004196:	fb05 3202 	mla	r2, r5, r2, r3
 800419a:	2001      	movs	r0, #1
 800419c:	460f      	mov	r7, r1
 800419e:	e7a6      	b.n	80040ee <_svfiprintf_r+0xc6>
 80041a0:	2300      	movs	r3, #0
 80041a2:	250a      	movs	r5, #10
 80041a4:	4619      	mov	r1, r3
 80041a6:	3701      	adds	r7, #1
 80041a8:	9305      	str	r3, [sp, #20]
 80041aa:	4638      	mov	r0, r7
 80041ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041b0:	3a30      	subs	r2, #48	; 0x30
 80041b2:	2a09      	cmp	r2, #9
 80041b4:	d903      	bls.n	80041be <_svfiprintf_r+0x196>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0c8      	beq.n	800414c <_svfiprintf_r+0x124>
 80041ba:	9105      	str	r1, [sp, #20]
 80041bc:	e7c6      	b.n	800414c <_svfiprintf_r+0x124>
 80041be:	fb05 2101 	mla	r1, r5, r1, r2
 80041c2:	2301      	movs	r3, #1
 80041c4:	4607      	mov	r7, r0
 80041c6:	e7f0      	b.n	80041aa <_svfiprintf_r+0x182>
 80041c8:	ab03      	add	r3, sp, #12
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	4622      	mov	r2, r4
 80041ce:	4b11      	ldr	r3, [pc, #68]	; (8004214 <_svfiprintf_r+0x1ec>)
 80041d0:	a904      	add	r1, sp, #16
 80041d2:	4640      	mov	r0, r8
 80041d4:	f3af 8000 	nop.w
 80041d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80041dc:	4681      	mov	r9, r0
 80041de:	d1d6      	bne.n	800418e <_svfiprintf_r+0x166>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	065b      	lsls	r3, r3, #25
 80041e4:	f53f af35 	bmi.w	8004052 <_svfiprintf_r+0x2a>
 80041e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ea:	b01d      	add	sp, #116	; 0x74
 80041ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f0:	ab03      	add	r3, sp, #12
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	4622      	mov	r2, r4
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <_svfiprintf_r+0x1ec>)
 80041f8:	a904      	add	r1, sp, #16
 80041fa:	4640      	mov	r0, r8
 80041fc:	f000 f882 	bl	8004304 <_printf_i>
 8004200:	e7ea      	b.n	80041d8 <_svfiprintf_r+0x1b0>
 8004202:	bf00      	nop
 8004204:	0800468c 	.word	0x0800468c
 8004208:	08004692 	.word	0x08004692
 800420c:	08004696 	.word	0x08004696
 8004210:	00000000 	.word	0x00000000
 8004214:	08003f75 	.word	0x08003f75

08004218 <_printf_common>:
 8004218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800421c:	4691      	mov	r9, r2
 800421e:	461f      	mov	r7, r3
 8004220:	688a      	ldr	r2, [r1, #8]
 8004222:	690b      	ldr	r3, [r1, #16]
 8004224:	4606      	mov	r6, r0
 8004226:	4293      	cmp	r3, r2
 8004228:	bfb8      	it	lt
 800422a:	4613      	movlt	r3, r2
 800422c:	f8c9 3000 	str.w	r3, [r9]
 8004230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004234:	460c      	mov	r4, r1
 8004236:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800423a:	b112      	cbz	r2, 8004242 <_printf_common+0x2a>
 800423c:	3301      	adds	r3, #1
 800423e:	f8c9 3000 	str.w	r3, [r9]
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0699      	lsls	r1, r3, #26
 8004246:	bf42      	ittt	mi
 8004248:	f8d9 3000 	ldrmi.w	r3, [r9]
 800424c:	3302      	addmi	r3, #2
 800424e:	f8c9 3000 	strmi.w	r3, [r9]
 8004252:	6825      	ldr	r5, [r4, #0]
 8004254:	f015 0506 	ands.w	r5, r5, #6
 8004258:	d107      	bne.n	800426a <_printf_common+0x52>
 800425a:	f104 0a19 	add.w	sl, r4, #25
 800425e:	68e3      	ldr	r3, [r4, #12]
 8004260:	f8d9 2000 	ldr.w	r2, [r9]
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	42ab      	cmp	r3, r5
 8004268:	dc29      	bgt.n	80042be <_printf_common+0xa6>
 800426a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800426e:	6822      	ldr	r2, [r4, #0]
 8004270:	3300      	adds	r3, #0
 8004272:	bf18      	it	ne
 8004274:	2301      	movne	r3, #1
 8004276:	0692      	lsls	r2, r2, #26
 8004278:	d42e      	bmi.n	80042d8 <_printf_common+0xc0>
 800427a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800427e:	4639      	mov	r1, r7
 8004280:	4630      	mov	r0, r6
 8004282:	47c0      	blx	r8
 8004284:	3001      	adds	r0, #1
 8004286:	d021      	beq.n	80042cc <_printf_common+0xb4>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	68e5      	ldr	r5, [r4, #12]
 800428c:	f003 0306 	and.w	r3, r3, #6
 8004290:	2b04      	cmp	r3, #4
 8004292:	bf18      	it	ne
 8004294:	2500      	movne	r5, #0
 8004296:	f8d9 2000 	ldr.w	r2, [r9]
 800429a:	f04f 0900 	mov.w	r9, #0
 800429e:	bf08      	it	eq
 80042a0:	1aad      	subeq	r5, r5, r2
 80042a2:	68a3      	ldr	r3, [r4, #8]
 80042a4:	6922      	ldr	r2, [r4, #16]
 80042a6:	bf08      	it	eq
 80042a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042ac:	4293      	cmp	r3, r2
 80042ae:	bfc4      	itt	gt
 80042b0:	1a9b      	subgt	r3, r3, r2
 80042b2:	18ed      	addgt	r5, r5, r3
 80042b4:	341a      	adds	r4, #26
 80042b6:	454d      	cmp	r5, r9
 80042b8:	d11a      	bne.n	80042f0 <_printf_common+0xd8>
 80042ba:	2000      	movs	r0, #0
 80042bc:	e008      	b.n	80042d0 <_printf_common+0xb8>
 80042be:	2301      	movs	r3, #1
 80042c0:	4652      	mov	r2, sl
 80042c2:	4639      	mov	r1, r7
 80042c4:	4630      	mov	r0, r6
 80042c6:	47c0      	blx	r8
 80042c8:	3001      	adds	r0, #1
 80042ca:	d103      	bne.n	80042d4 <_printf_common+0xbc>
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d4:	3501      	adds	r5, #1
 80042d6:	e7c2      	b.n	800425e <_printf_common+0x46>
 80042d8:	2030      	movs	r0, #48	; 0x30
 80042da:	18e1      	adds	r1, r4, r3
 80042dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042e6:	4422      	add	r2, r4
 80042e8:	3302      	adds	r3, #2
 80042ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042ee:	e7c4      	b.n	800427a <_printf_common+0x62>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4622      	mov	r2, r4
 80042f4:	4639      	mov	r1, r7
 80042f6:	4630      	mov	r0, r6
 80042f8:	47c0      	blx	r8
 80042fa:	3001      	adds	r0, #1
 80042fc:	d0e6      	beq.n	80042cc <_printf_common+0xb4>
 80042fe:	f109 0901 	add.w	r9, r9, #1
 8004302:	e7d8      	b.n	80042b6 <_printf_common+0x9e>

08004304 <_printf_i>:
 8004304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004308:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800430c:	460c      	mov	r4, r1
 800430e:	7e09      	ldrb	r1, [r1, #24]
 8004310:	b085      	sub	sp, #20
 8004312:	296e      	cmp	r1, #110	; 0x6e
 8004314:	4617      	mov	r7, r2
 8004316:	4606      	mov	r6, r0
 8004318:	4698      	mov	r8, r3
 800431a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800431c:	f000 80b3 	beq.w	8004486 <_printf_i+0x182>
 8004320:	d822      	bhi.n	8004368 <_printf_i+0x64>
 8004322:	2963      	cmp	r1, #99	; 0x63
 8004324:	d036      	beq.n	8004394 <_printf_i+0x90>
 8004326:	d80a      	bhi.n	800433e <_printf_i+0x3a>
 8004328:	2900      	cmp	r1, #0
 800432a:	f000 80b9 	beq.w	80044a0 <_printf_i+0x19c>
 800432e:	2958      	cmp	r1, #88	; 0x58
 8004330:	f000 8083 	beq.w	800443a <_printf_i+0x136>
 8004334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004338:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800433c:	e032      	b.n	80043a4 <_printf_i+0xa0>
 800433e:	2964      	cmp	r1, #100	; 0x64
 8004340:	d001      	beq.n	8004346 <_printf_i+0x42>
 8004342:	2969      	cmp	r1, #105	; 0x69
 8004344:	d1f6      	bne.n	8004334 <_printf_i+0x30>
 8004346:	6820      	ldr	r0, [r4, #0]
 8004348:	6813      	ldr	r3, [r2, #0]
 800434a:	0605      	lsls	r5, r0, #24
 800434c:	f103 0104 	add.w	r1, r3, #4
 8004350:	d52a      	bpl.n	80043a8 <_printf_i+0xa4>
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6011      	str	r1, [r2, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	da03      	bge.n	8004362 <_printf_i+0x5e>
 800435a:	222d      	movs	r2, #45	; 0x2d
 800435c:	425b      	negs	r3, r3
 800435e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004362:	486f      	ldr	r0, [pc, #444]	; (8004520 <_printf_i+0x21c>)
 8004364:	220a      	movs	r2, #10
 8004366:	e039      	b.n	80043dc <_printf_i+0xd8>
 8004368:	2973      	cmp	r1, #115	; 0x73
 800436a:	f000 809d 	beq.w	80044a8 <_printf_i+0x1a4>
 800436e:	d808      	bhi.n	8004382 <_printf_i+0x7e>
 8004370:	296f      	cmp	r1, #111	; 0x6f
 8004372:	d020      	beq.n	80043b6 <_printf_i+0xb2>
 8004374:	2970      	cmp	r1, #112	; 0x70
 8004376:	d1dd      	bne.n	8004334 <_printf_i+0x30>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	f043 0320 	orr.w	r3, r3, #32
 800437e:	6023      	str	r3, [r4, #0]
 8004380:	e003      	b.n	800438a <_printf_i+0x86>
 8004382:	2975      	cmp	r1, #117	; 0x75
 8004384:	d017      	beq.n	80043b6 <_printf_i+0xb2>
 8004386:	2978      	cmp	r1, #120	; 0x78
 8004388:	d1d4      	bne.n	8004334 <_printf_i+0x30>
 800438a:	2378      	movs	r3, #120	; 0x78
 800438c:	4865      	ldr	r0, [pc, #404]	; (8004524 <_printf_i+0x220>)
 800438e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004392:	e055      	b.n	8004440 <_printf_i+0x13c>
 8004394:	6813      	ldr	r3, [r2, #0]
 8004396:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800439a:	1d19      	adds	r1, r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6011      	str	r1, [r2, #0]
 80043a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a4:	2301      	movs	r3, #1
 80043a6:	e08c      	b.n	80044c2 <_printf_i+0x1be>
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043ae:	6011      	str	r1, [r2, #0]
 80043b0:	bf18      	it	ne
 80043b2:	b21b      	sxthne	r3, r3
 80043b4:	e7cf      	b.n	8004356 <_printf_i+0x52>
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	6825      	ldr	r5, [r4, #0]
 80043ba:	1d18      	adds	r0, r3, #4
 80043bc:	6010      	str	r0, [r2, #0]
 80043be:	0628      	lsls	r0, r5, #24
 80043c0:	d501      	bpl.n	80043c6 <_printf_i+0xc2>
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	e002      	b.n	80043cc <_printf_i+0xc8>
 80043c6:	0668      	lsls	r0, r5, #25
 80043c8:	d5fb      	bpl.n	80043c2 <_printf_i+0xbe>
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	296f      	cmp	r1, #111	; 0x6f
 80043ce:	bf14      	ite	ne
 80043d0:	220a      	movne	r2, #10
 80043d2:	2208      	moveq	r2, #8
 80043d4:	4852      	ldr	r0, [pc, #328]	; (8004520 <_printf_i+0x21c>)
 80043d6:	2100      	movs	r1, #0
 80043d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043dc:	6865      	ldr	r5, [r4, #4]
 80043de:	2d00      	cmp	r5, #0
 80043e0:	60a5      	str	r5, [r4, #8]
 80043e2:	f2c0 8095 	blt.w	8004510 <_printf_i+0x20c>
 80043e6:	6821      	ldr	r1, [r4, #0]
 80043e8:	f021 0104 	bic.w	r1, r1, #4
 80043ec:	6021      	str	r1, [r4, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d13d      	bne.n	800446e <_printf_i+0x16a>
 80043f2:	2d00      	cmp	r5, #0
 80043f4:	f040 808e 	bne.w	8004514 <_printf_i+0x210>
 80043f8:	4665      	mov	r5, ip
 80043fa:	2a08      	cmp	r2, #8
 80043fc:	d10b      	bne.n	8004416 <_printf_i+0x112>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	07db      	lsls	r3, r3, #31
 8004402:	d508      	bpl.n	8004416 <_printf_i+0x112>
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	6862      	ldr	r2, [r4, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	bfde      	ittt	le
 800440c:	2330      	movle	r3, #48	; 0x30
 800440e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004412:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004416:	ebac 0305 	sub.w	r3, ip, r5
 800441a:	6123      	str	r3, [r4, #16]
 800441c:	f8cd 8000 	str.w	r8, [sp]
 8004420:	463b      	mov	r3, r7
 8004422:	aa03      	add	r2, sp, #12
 8004424:	4621      	mov	r1, r4
 8004426:	4630      	mov	r0, r6
 8004428:	f7ff fef6 	bl	8004218 <_printf_common>
 800442c:	3001      	adds	r0, #1
 800442e:	d14d      	bne.n	80044cc <_printf_i+0x1c8>
 8004430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004434:	b005      	add	sp, #20
 8004436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800443a:	4839      	ldr	r0, [pc, #228]	; (8004520 <_printf_i+0x21c>)
 800443c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004440:	6813      	ldr	r3, [r2, #0]
 8004442:	6821      	ldr	r1, [r4, #0]
 8004444:	1d1d      	adds	r5, r3, #4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6015      	str	r5, [r2, #0]
 800444a:	060a      	lsls	r2, r1, #24
 800444c:	d50b      	bpl.n	8004466 <_printf_i+0x162>
 800444e:	07ca      	lsls	r2, r1, #31
 8004450:	bf44      	itt	mi
 8004452:	f041 0120 	orrmi.w	r1, r1, #32
 8004456:	6021      	strmi	r1, [r4, #0]
 8004458:	b91b      	cbnz	r3, 8004462 <_printf_i+0x15e>
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	f022 0220 	bic.w	r2, r2, #32
 8004460:	6022      	str	r2, [r4, #0]
 8004462:	2210      	movs	r2, #16
 8004464:	e7b7      	b.n	80043d6 <_printf_i+0xd2>
 8004466:	064d      	lsls	r5, r1, #25
 8004468:	bf48      	it	mi
 800446a:	b29b      	uxthmi	r3, r3
 800446c:	e7ef      	b.n	800444e <_printf_i+0x14a>
 800446e:	4665      	mov	r5, ip
 8004470:	fbb3 f1f2 	udiv	r1, r3, r2
 8004474:	fb02 3311 	mls	r3, r2, r1, r3
 8004478:	5cc3      	ldrb	r3, [r0, r3]
 800447a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800447e:	460b      	mov	r3, r1
 8004480:	2900      	cmp	r1, #0
 8004482:	d1f5      	bne.n	8004470 <_printf_i+0x16c>
 8004484:	e7b9      	b.n	80043fa <_printf_i+0xf6>
 8004486:	6813      	ldr	r3, [r2, #0]
 8004488:	6825      	ldr	r5, [r4, #0]
 800448a:	1d18      	adds	r0, r3, #4
 800448c:	6961      	ldr	r1, [r4, #20]
 800448e:	6010      	str	r0, [r2, #0]
 8004490:	0628      	lsls	r0, r5, #24
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	d501      	bpl.n	800449a <_printf_i+0x196>
 8004496:	6019      	str	r1, [r3, #0]
 8004498:	e002      	b.n	80044a0 <_printf_i+0x19c>
 800449a:	066a      	lsls	r2, r5, #25
 800449c:	d5fb      	bpl.n	8004496 <_printf_i+0x192>
 800449e:	8019      	strh	r1, [r3, #0]
 80044a0:	2300      	movs	r3, #0
 80044a2:	4665      	mov	r5, ip
 80044a4:	6123      	str	r3, [r4, #16]
 80044a6:	e7b9      	b.n	800441c <_printf_i+0x118>
 80044a8:	6813      	ldr	r3, [r2, #0]
 80044aa:	1d19      	adds	r1, r3, #4
 80044ac:	6011      	str	r1, [r2, #0]
 80044ae:	681d      	ldr	r5, [r3, #0]
 80044b0:	6862      	ldr	r2, [r4, #4]
 80044b2:	2100      	movs	r1, #0
 80044b4:	4628      	mov	r0, r5
 80044b6:	f000 f837 	bl	8004528 <memchr>
 80044ba:	b108      	cbz	r0, 80044c0 <_printf_i+0x1bc>
 80044bc:	1b40      	subs	r0, r0, r5
 80044be:	6060      	str	r0, [r4, #4]
 80044c0:	6863      	ldr	r3, [r4, #4]
 80044c2:	6123      	str	r3, [r4, #16]
 80044c4:	2300      	movs	r3, #0
 80044c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ca:	e7a7      	b.n	800441c <_printf_i+0x118>
 80044cc:	6923      	ldr	r3, [r4, #16]
 80044ce:	462a      	mov	r2, r5
 80044d0:	4639      	mov	r1, r7
 80044d2:	4630      	mov	r0, r6
 80044d4:	47c0      	blx	r8
 80044d6:	3001      	adds	r0, #1
 80044d8:	d0aa      	beq.n	8004430 <_printf_i+0x12c>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	079b      	lsls	r3, r3, #30
 80044de:	d413      	bmi.n	8004508 <_printf_i+0x204>
 80044e0:	68e0      	ldr	r0, [r4, #12]
 80044e2:	9b03      	ldr	r3, [sp, #12]
 80044e4:	4298      	cmp	r0, r3
 80044e6:	bfb8      	it	lt
 80044e8:	4618      	movlt	r0, r3
 80044ea:	e7a3      	b.n	8004434 <_printf_i+0x130>
 80044ec:	2301      	movs	r3, #1
 80044ee:	464a      	mov	r2, r9
 80044f0:	4639      	mov	r1, r7
 80044f2:	4630      	mov	r0, r6
 80044f4:	47c0      	blx	r8
 80044f6:	3001      	adds	r0, #1
 80044f8:	d09a      	beq.n	8004430 <_printf_i+0x12c>
 80044fa:	3501      	adds	r5, #1
 80044fc:	68e3      	ldr	r3, [r4, #12]
 80044fe:	9a03      	ldr	r2, [sp, #12]
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	42ab      	cmp	r3, r5
 8004504:	dcf2      	bgt.n	80044ec <_printf_i+0x1e8>
 8004506:	e7eb      	b.n	80044e0 <_printf_i+0x1dc>
 8004508:	2500      	movs	r5, #0
 800450a:	f104 0919 	add.w	r9, r4, #25
 800450e:	e7f5      	b.n	80044fc <_printf_i+0x1f8>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ac      	bne.n	800446e <_printf_i+0x16a>
 8004514:	7803      	ldrb	r3, [r0, #0]
 8004516:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800451a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800451e:	e76c      	b.n	80043fa <_printf_i+0xf6>
 8004520:	0800469d 	.word	0x0800469d
 8004524:	080046ae 	.word	0x080046ae

08004528 <memchr>:
 8004528:	b510      	push	{r4, lr}
 800452a:	b2c9      	uxtb	r1, r1
 800452c:	4402      	add	r2, r0
 800452e:	4290      	cmp	r0, r2
 8004530:	4603      	mov	r3, r0
 8004532:	d101      	bne.n	8004538 <memchr+0x10>
 8004534:	2300      	movs	r3, #0
 8004536:	e003      	b.n	8004540 <memchr+0x18>
 8004538:	781c      	ldrb	r4, [r3, #0]
 800453a:	3001      	adds	r0, #1
 800453c:	428c      	cmp	r4, r1
 800453e:	d1f6      	bne.n	800452e <memchr+0x6>
 8004540:	4618      	mov	r0, r3
 8004542:	bd10      	pop	{r4, pc}

08004544 <memcpy>:
 8004544:	b510      	push	{r4, lr}
 8004546:	1e43      	subs	r3, r0, #1
 8004548:	440a      	add	r2, r1
 800454a:	4291      	cmp	r1, r2
 800454c:	d100      	bne.n	8004550 <memcpy+0xc>
 800454e:	bd10      	pop	{r4, pc}
 8004550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004558:	e7f7      	b.n	800454a <memcpy+0x6>

0800455a <memmove>:
 800455a:	4288      	cmp	r0, r1
 800455c:	b510      	push	{r4, lr}
 800455e:	eb01 0302 	add.w	r3, r1, r2
 8004562:	d807      	bhi.n	8004574 <memmove+0x1a>
 8004564:	1e42      	subs	r2, r0, #1
 8004566:	4299      	cmp	r1, r3
 8004568:	d00a      	beq.n	8004580 <memmove+0x26>
 800456a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800456e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004572:	e7f8      	b.n	8004566 <memmove+0xc>
 8004574:	4283      	cmp	r3, r0
 8004576:	d9f5      	bls.n	8004564 <memmove+0xa>
 8004578:	1881      	adds	r1, r0, r2
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	42d3      	cmn	r3, r2
 800457e:	d100      	bne.n	8004582 <memmove+0x28>
 8004580:	bd10      	pop	{r4, pc}
 8004582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004586:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800458a:	e7f7      	b.n	800457c <memmove+0x22>

0800458c <_realloc_r>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	4607      	mov	r7, r0
 8004590:	4614      	mov	r4, r2
 8004592:	460e      	mov	r6, r1
 8004594:	b921      	cbnz	r1, 80045a0 <_realloc_r+0x14>
 8004596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800459a:	4611      	mov	r1, r2
 800459c:	f7ff bc1a 	b.w	8003dd4 <_malloc_r>
 80045a0:	b922      	cbnz	r2, 80045ac <_realloc_r+0x20>
 80045a2:	f7ff fbcb 	bl	8003d3c <_free_r>
 80045a6:	4625      	mov	r5, r4
 80045a8:	4628      	mov	r0, r5
 80045aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ac:	f000 f814 	bl	80045d8 <_malloc_usable_size_r>
 80045b0:	42a0      	cmp	r0, r4
 80045b2:	d20f      	bcs.n	80045d4 <_realloc_r+0x48>
 80045b4:	4621      	mov	r1, r4
 80045b6:	4638      	mov	r0, r7
 80045b8:	f7ff fc0c 	bl	8003dd4 <_malloc_r>
 80045bc:	4605      	mov	r5, r0
 80045be:	2800      	cmp	r0, #0
 80045c0:	d0f2      	beq.n	80045a8 <_realloc_r+0x1c>
 80045c2:	4631      	mov	r1, r6
 80045c4:	4622      	mov	r2, r4
 80045c6:	f7ff ffbd 	bl	8004544 <memcpy>
 80045ca:	4631      	mov	r1, r6
 80045cc:	4638      	mov	r0, r7
 80045ce:	f7ff fbb5 	bl	8003d3c <_free_r>
 80045d2:	e7e9      	b.n	80045a8 <_realloc_r+0x1c>
 80045d4:	4635      	mov	r5, r6
 80045d6:	e7e7      	b.n	80045a8 <_realloc_r+0x1c>

080045d8 <_malloc_usable_size_r>:
 80045d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045dc:	1f18      	subs	r0, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bfbc      	itt	lt
 80045e2:	580b      	ldrlt	r3, [r1, r0]
 80045e4:	18c0      	addlt	r0, r0, r3
 80045e6:	4770      	bx	lr

080045e8 <_init>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr

080045f4 <_fini>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	bf00      	nop
 80045f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fa:	bc08      	pop	{r3}
 80045fc:	469e      	mov	lr, r3
 80045fe:	4770      	bx	lr
