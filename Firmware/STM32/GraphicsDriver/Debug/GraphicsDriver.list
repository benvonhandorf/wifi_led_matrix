
GraphicsDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004230  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004404  08004404  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004404  08004404  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004404  08004404  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  20000070  08004480  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08004480  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010661  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002614  00000000  00000000  000306fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f50  00000000  00000000  00032d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00033c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b0bc  00000000  00000000  00034a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4aa  00000000  00000000  0004fb44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e17f  00000000  00000000  0005bfee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea16d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c4  00000000  00000000  000ea1e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004324 	.word	0x08004324

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004324 	.word	0x08004324

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <cpp_main>:

MatrixDriver matrix(64, 32, MatrixDriver::ScanType::SCAN_16);

char buffer[1024];

extern "C" int cpp_main(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af02      	add	r7, sp, #8
	__HAL_DBGMCU_FREEZE_IWDG();
 8000162:	4b3d      	ldr	r3, [pc, #244]	; (8000258 <cpp_main+0xfc>)
 8000164:	685b      	ldr	r3, [r3, #4]
 8000166:	4a3c      	ldr	r2, [pc, #240]	; (8000258 <cpp_main+0xfc>)
 8000168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800016c:	6053      	str	r3, [r2, #4]

	uint32_t start = HAL_GetTick();
 800016e:	f001 f833 	bl	80011d8 <HAL_GetTick>
 8000172:	6138      	str	r0, [r7, #16]

	uint16_t color_shift = 1;
 8000174:	2301      	movs	r3, #1
 8000176:	81fb      	strh	r3, [r7, #14]

	for (uint16_t row = 0; row < 32; row++) {
 8000178:	2300      	movs	r3, #0
 800017a:	82fb      	strh	r3, [r7, #22]
 800017c:	8afb      	ldrh	r3, [r7, #22]
 800017e:	2b1f      	cmp	r3, #31
 8000180:	d84a      	bhi.n	8000218 <cpp_main+0xbc>
		for (uint16_t col = 0; col < 64; col++) {
 8000182:	2300      	movs	r3, #0
 8000184:	82bb      	strh	r3, [r7, #20]
 8000186:	8abb      	ldrh	r3, [r7, #20]
 8000188:	2b3f      	cmp	r3, #63	; 0x3f
 800018a:	d841      	bhi.n	8000210 <cpp_main+0xb4>
			uint8_t r, g, b;

			r = ((row  + col + color_shift) % 4) == 0 ? 255 : 0;
 800018c:	8afa      	ldrh	r2, [r7, #22]
 800018e:	8abb      	ldrh	r3, [r7, #20]
 8000190:	441a      	add	r2, r3
 8000192:	89fb      	ldrh	r3, [r7, #14]
 8000194:	4413      	add	r3, r2
 8000196:	f003 0303 	and.w	r3, r3, #3
 800019a:	2b00      	cmp	r3, #0
 800019c:	d101      	bne.n	80001a2 <cpp_main+0x46>
 800019e:	23ff      	movs	r3, #255	; 0xff
 80001a0:	e000      	b.n	80001a4 <cpp_main+0x48>
 80001a2:	2300      	movs	r3, #0
 80001a4:	737b      	strb	r3, [r7, #13]
			g = ((row + col + color_shift) % 4) == 1 ? 255 : 0;
 80001a6:	8afa      	ldrh	r2, [r7, #22]
 80001a8:	8abb      	ldrh	r3, [r7, #20]
 80001aa:	441a      	add	r2, r3
 80001ac:	89fb      	ldrh	r3, [r7, #14]
 80001ae:	4413      	add	r3, r2
 80001b0:	425a      	negs	r2, r3
 80001b2:	f003 0303 	and.w	r3, r3, #3
 80001b6:	f002 0203 	and.w	r2, r2, #3
 80001ba:	bf58      	it	pl
 80001bc:	4253      	negpl	r3, r2
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d101      	bne.n	80001c6 <cpp_main+0x6a>
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	e000      	b.n	80001c8 <cpp_main+0x6c>
 80001c6:	2300      	movs	r3, #0
 80001c8:	733b      	strb	r3, [r7, #12]
			b = ((row + col + color_shift) % 4) == 2 ? 255 : 0;
 80001ca:	8afa      	ldrh	r2, [r7, #22]
 80001cc:	8abb      	ldrh	r3, [r7, #20]
 80001ce:	441a      	add	r2, r3
 80001d0:	89fb      	ldrh	r3, [r7, #14]
 80001d2:	4413      	add	r3, r2
 80001d4:	425a      	negs	r2, r3
 80001d6:	f003 0303 	and.w	r3, r3, #3
 80001da:	f002 0203 	and.w	r2, r2, #3
 80001de:	bf58      	it	pl
 80001e0:	4253      	negpl	r3, r2
 80001e2:	2b02      	cmp	r3, #2
 80001e4:	d101      	bne.n	80001ea <cpp_main+0x8e>
 80001e6:	23ff      	movs	r3, #255	; 0xff
 80001e8:	e000      	b.n	80001ec <cpp_main+0x90>
 80001ea:	2300      	movs	r3, #0
 80001ec:	72fb      	strb	r3, [r7, #11]

			matrix.SetPixel(col, row, r, g, b);
 80001ee:	8abb      	ldrh	r3, [r7, #20]
 80001f0:	b2d9      	uxtb	r1, r3
 80001f2:	8afb      	ldrh	r3, [r7, #22]
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	7b78      	ldrb	r0, [r7, #13]
 80001f8:	7afb      	ldrb	r3, [r7, #11]
 80001fa:	9301      	str	r3, [sp, #4]
 80001fc:	7b3b      	ldrb	r3, [r7, #12]
 80001fe:	9300      	str	r3, [sp, #0]
 8000200:	4603      	mov	r3, r0
 8000202:	4816      	ldr	r0, [pc, #88]	; (800025c <cpp_main+0x100>)
 8000204:	f000 fc1a 	bl	8000a3c <_ZN12MatrixDriver8SetPixelEhhhhh>
		for (uint16_t col = 0; col < 64; col++) {
 8000208:	8abb      	ldrh	r3, [r7, #20]
 800020a:	3301      	adds	r3, #1
 800020c:	82bb      	strh	r3, [r7, #20]
 800020e:	e7ba      	b.n	8000186 <cpp_main+0x2a>
	for (uint16_t row = 0; row < 32; row++) {
 8000210:	8afb      	ldrh	r3, [r7, #22]
 8000212:	3301      	adds	r3, #1
 8000214:	82fb      	strh	r3, [r7, #22]
 8000216:	e7b1      	b.n	800017c <cpp_main+0x20>
		}
	}

	color_shift++;
 8000218:	89fb      	ldrh	r3, [r7, #14]
 800021a:	3301      	adds	r3, #1
 800021c:	81fb      	strh	r3, [r7, #14]

//	matrix.Dump();

	matrix.SwapBuffer();
 800021e:	480f      	ldr	r0, [pc, #60]	; (800025c <cpp_main+0x100>)
 8000220:	f000 fcc3 	bl	8000baa <_ZN12MatrixDriver10SwapBufferEv>

	uint32_t duration = HAL_GetTick() - start;
 8000224:	f000 ffd8 	bl	80011d8 <HAL_GetTick>
 8000228:	4602      	mov	r2, r0
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	1ad3      	subs	r3, r2, r3
 800022e:	607b      	str	r3, [r7, #4]

	sprintf(buffer, "Setup Duration: %lu\n", duration);
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	490b      	ldr	r1, [pc, #44]	; (8000260 <cpp_main+0x104>)
 8000234:	480b      	ldr	r0, [pc, #44]	; (8000264 <cpp_main+0x108>)
 8000236:	f003 fd19 	bl	8003c6c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 500);
 800023a:	480a      	ldr	r0, [pc, #40]	; (8000264 <cpp_main+0x108>)
 800023c:	f7ff ff86 	bl	800014c <strlen>
 8000240:	4603      	mov	r3, r0
 8000242:	b29a      	uxth	r2, r3
 8000244:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000248:	4906      	ldr	r1, [pc, #24]	; (8000264 <cpp_main+0x108>)
 800024a:	4807      	ldr	r0, [pc, #28]	; (8000268 <cpp_main+0x10c>)
 800024c:	f003 fa4b 	bl	80036e6 <HAL_UART_Transmit>

//	HAL_IWDG_Init(&hiwdg);

//	HAL_TIM_OC_Start(&htim2, TIM_IT_CC1);

	matrix.open();
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <cpp_main+0x100>)
 8000252:	f000 fba5 	bl	80009a0 <_ZN12MatrixDriver4openEv>

	while (1) {
 8000256:	e7fe      	b.n	8000256 <cpp_main+0xfa>
 8000258:	e0042000 	.word	0xe0042000
 800025c:	2000008c 	.word	0x2000008c
 8000260:	0800433c 	.word	0x0800433c
 8000264:	200000a8 	.word	0x200000a8
 8000268:	20000558 	.word	0x20000558

0800026c <_Z41__static_initialization_and_destruction_0ii>:
//
//		color_shift++;
//
//		HAL_Delay(100);
	}
}
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d10a      	bne.n	8000292 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000282:	4293      	cmp	r3, r2
 8000284:	d105      	bne.n	8000292 <_Z41__static_initialization_and_destruction_0ii+0x26>
MatrixDriver matrix(64, 32, MatrixDriver::ScanType::SCAN_16);
 8000286:	2300      	movs	r3, #0
 8000288:	2220      	movs	r2, #32
 800028a:	2140      	movs	r1, #64	; 0x40
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800028e:	f000 fa9d 	bl	80007cc <_ZN12MatrixDriverC1EhhNS_8ScanTypeE>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	2000008c 	.word	0x2000008c

080002a0 <_GLOBAL__sub_I_matrix>:
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002a8:	2001      	movs	r0, #1
 80002aa:	f7ff ffdf 	bl	800026c <_Z41__static_initialization_and_destruction_0ii>
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b4:	f000 ff38 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f811 	bl	80002de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002bc:	f000 f9d6 	bl	800066c <MX_GPIO_Init>
  MX_DMA_Init();
 80002c0:	f000 f9b6 	bl	8000630 <MX_DMA_Init>
  MX_SPI1_Init();
 80002c4:	f000 f872 	bl	80003ac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002c8:	f000 f988 	bl	80005dc <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80002cc:	f000 f854 	bl	8000378 <MX_IWDG_Init>
  MX_TIM2_Init();
 80002d0:	f000 f8a2 	bl	8000418 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002d4:	f000 f92c 	bl	8000530 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 80002d8:	f7ff ff40 	bl	800015c <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <main+0x2c>

080002de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b090      	sub	sp, #64	; 0x40
 80002e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	2228      	movs	r2, #40	; 0x28
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f003 fbbb 	bl	8003a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000300:	2309      	movs	r3, #9
 8000302:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000308:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	2301      	movs	r3, #1
 8000310:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000312:	2301      	movs	r3, #1
 8000314:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	2302      	movs	r3, #2
 8000318:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000320:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000324:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	f107 0318 	add.w	r3, r7, #24
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fc14 	bl	8001b58 <HAL_RCC_OscConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000336:	f000 f9f3 	bl	8000720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	230f      	movs	r3, #15
 800033c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033e:	2302      	movs	r3, #2
 8000340:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2102      	movs	r1, #2
 8000354:	4618      	mov	r0, r3
 8000356:	f001 fe7f 	bl	8002058 <HAL_RCC_ClockConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000360:	f000 f9de 	bl	8000720 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8000364:	2200      	movs	r2, #0
 8000366:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 800036a:	2000      	movs	r0, #0
 800036c:	f001 ff5e 	bl	800222c <HAL_RCC_MCOConfig>
}
 8000370:	bf00      	nop
 8000372:	3740      	adds	r7, #64	; 0x40
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_IWDG_Init+0x2c>)
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <MX_IWDG_Init+0x30>)
 8000380:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_IWDG_Init+0x2c>)
 8000384:	2206      	movs	r2, #6
 8000386:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_IWDG_Init+0x2c>)
 800038a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800038e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_IWDG_Init+0x2c>)
 8000392:	f001 fb99 	bl	8001ac8 <HAL_IWDG_Init>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800039c:	f000 f9c0 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	200004c0 	.word	0x200004c0
 80003a8:	40003000 	.word	0x40003000

080003ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003b0:	4b17      	ldr	r3, [pc, #92]	; (8000410 <MX_SPI1_Init+0x64>)
 80003b2:	4a18      	ldr	r2, [pc, #96]	; (8000414 <MX_SPI1_Init+0x68>)
 80003b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80003b6:	4b16      	ldr	r3, [pc, #88]	; (8000410 <MX_SPI1_Init+0x64>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_SPI1_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003c2:	4b13      	ldr	r3, [pc, #76]	; (8000410 <MX_SPI1_Init+0x64>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_SPI1_Init+0x64>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <MX_SPI1_Init+0x64>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d4:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_SPI1_Init+0x64>)
 80003d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_SPI1_Init+0x64>)
 80003de:	2228      	movs	r2, #40	; 0x28
 80003e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_SPI1_Init+0x64>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_SPI1_Init+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_SPI1_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_SPI1_Init+0x64>)
 80003f6:	220a      	movs	r2, #10
 80003f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_SPI1_Init+0x64>)
 80003fc:	f002 f800 	bl	8002400 <HAL_SPI_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8000406:	f000 f98b 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000598 	.word	0x20000598
 8000414:	40013000 	.word	0x40013000

08000418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b092      	sub	sp, #72	; 0x48
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800042c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043c:	f107 031c 	add.w	r3, r7, #28
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000446:	463b      	mov	r3, r7
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
 8000452:	611a      	str	r2, [r3, #16]
 8000454:	615a      	str	r2, [r3, #20]
 8000456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000458:	4b34      	ldr	r3, [pc, #208]	; (800052c <MX_TIM2_Init+0x114>)
 800045a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000460:	4b32      	ldr	r3, [pc, #200]	; (800052c <MX_TIM2_Init+0x114>)
 8000462:	2200      	movs	r2, #0
 8000464:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000466:	4b31      	ldr	r3, [pc, #196]	; (800052c <MX_TIM2_Init+0x114>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800046c:	4b2f      	ldr	r3, [pc, #188]	; (800052c <MX_TIM2_Init+0x114>)
 800046e:	220a      	movs	r2, #10
 8000470:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000472:	4b2e      	ldr	r3, [pc, #184]	; (800052c <MX_TIM2_Init+0x114>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000478:	4b2c      	ldr	r3, [pc, #176]	; (800052c <MX_TIM2_Init+0x114>)
 800047a:	2200      	movs	r2, #0
 800047c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800047e:	482b      	ldr	r0, [pc, #172]	; (800052c <MX_TIM2_Init+0x114>)
 8000480:	f002 f842 	bl	8002508 <HAL_TIM_Base_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800048a:	f000 f949 	bl	8000720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800048e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000492:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000494:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000498:	4619      	mov	r1, r3
 800049a:	4824      	ldr	r0, [pc, #144]	; (800052c <MX_TIM2_Init+0x114>)
 800049c:	f002 fc1e 	bl	8002cdc <HAL_TIM_ConfigClockSource>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80004a6:	f000 f93b 	bl	8000720 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004aa:	4820      	ldr	r0, [pc, #128]	; (800052c <MX_TIM2_Init+0x114>)
 80004ac:	f002 f99e 	bl	80027ec <HAL_TIM_PWM_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80004b6:	f000 f933 	bl	8000720 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80004ba:	2305      	movs	r3, #5
 80004bc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 80004be:	2320      	movs	r3, #32
 80004c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80004c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c6:	4619      	mov	r1, r3
 80004c8:	4818      	ldr	r0, [pc, #96]	; (800052c <MX_TIM2_Init+0x114>)
 80004ca:	f002 fcbe 	bl	8002e4a <HAL_TIM_SlaveConfigSynchro>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 80004d4:	f000 f924 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d8:	2300      	movs	r3, #0
 80004da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004dc:	2300      	movs	r3, #0
 80004de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e0:	f107 031c 	add.w	r3, r7, #28
 80004e4:	4619      	mov	r1, r3
 80004e6:	4811      	ldr	r0, [pc, #68]	; (800052c <MX_TIM2_Init+0x114>)
 80004e8:	f003 f840 	bl	800356c <HAL_TIMEx_MasterConfigSynchronization>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80004f2:	f000 f915 	bl	8000720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f6:	2360      	movs	r3, #96	; 0x60
 80004f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 80004fa:	2305      	movs	r3, #5
 80004fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80004fe:	2302      	movs	r3, #2
 8000500:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	4619      	mov	r1, r3
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <MX_TIM2_Init+0x114>)
 800050e:	f002 fb27 	bl	8002b60 <HAL_TIM_PWM_ConfigChannel>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000518:	f000 f902 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <MX_TIM2_Init+0x114>)
 800051e:	f000 fcc5 	bl	8000eac <HAL_TIM_MspPostInit>

}
 8000522:	bf00      	nop
 8000524:	3748      	adds	r7, #72	; 0x48
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200005f0 	.word	0x200005f0

08000530 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000536:	f107 0308 	add.w	r3, r7, #8
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <MX_TIM3_Init+0xa4>)
 800054e:	4a22      	ldr	r2, [pc, #136]	; (80005d8 <MX_TIM3_Init+0xa8>)
 8000550:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <MX_TIM3_Init+0xa4>)
 8000554:	2200      	movs	r2, #0
 8000556:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <MX_TIM3_Init+0xa4>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 700;
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_TIM3_Init+0xa4>)
 8000560:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000564:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_TIM3_Init+0xa4>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_TIM3_Init+0xa4>)
 800056e:	2200      	movs	r2, #0
 8000570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000572:	4818      	ldr	r0, [pc, #96]	; (80005d4 <MX_TIM3_Init+0xa4>)
 8000574:	f001 ffc8 	bl	8002508 <HAL_TIM_Base_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800057e:	f000 f8cf 	bl	8000720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000586:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	4619      	mov	r1, r3
 800058e:	4811      	ldr	r0, [pc, #68]	; (80005d4 <MX_TIM3_Init+0xa4>)
 8000590:	f002 fba4 	bl	8002cdc <HAL_TIM_ConfigClockSource>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800059a:	f000 f8c1 	bl	8000720 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800059e:	2108      	movs	r1, #8
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <MX_TIM3_Init+0xa4>)
 80005a2:	f002 f97b 	bl	800289c <HAL_TIM_OnePulse_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80005ac:	f000 f8b8 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80005b0:	2310      	movs	r3, #16
 80005b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_TIM3_Init+0xa4>)
 80005be:	f002 ffd5 	bl	800356c <HAL_TIMEx_MasterConfigSynchronization>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80005c8:	f000 f8aa 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000510 	.word	0x20000510
 80005d8:	40000400 	.word	0x40000400

080005dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART1_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000614:	f003 f81a 	bl	800364c <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800061e:	f000 f87f 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000558 	.word	0x20000558
 800062c:	40013800 	.word	0x40013800

08000630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_DMA_Init+0x38>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <MX_DMA_Init+0x38>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_DMA_Init+0x38>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	200c      	movs	r0, #12
 8000654:	f000 fea1 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000658:	200c      	movs	r0, #12
 800065a:	f000 feba 	bl	80013d2 <HAL_NVIC_EnableIRQ>

}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_GPIO_Init+0xa8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a23      	ldr	r2, [pc, #140]	; (8000714 <MX_GPIO_Init+0xa8>)
 8000686:	f043 0320 	orr.w	r3, r3, #32
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_GPIO_Init+0xa8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0320 	and.w	r3, r3, #32
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_GPIO_Init+0xa8>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a1d      	ldr	r2, [pc, #116]	; (8000714 <MX_GPIO_Init+0xa8>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a17      	ldr	r2, [pc, #92]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B1_Pin|Matrix_CLK_Pin
 80006c8:	2200      	movs	r2, #0
 80006ca:	f64b 71fb 	movw	r1, #49147	; 0xbffb
 80006ce:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_GPIO_Init+0xac>)
 80006d0:	f001 f9e2 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B1_Pin Matrix_CLK_Pin
                           Matrix_LAT_Pin Matrix_OE_Pin Matrix_B0_Pin Matrix_A_Pin
                           Matrix_B_Pin Matrix_C_Pin Matrix_D_Pin Matrix_E_Pin
                           Matrix_R1_Pin Matrix_G1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B1_Pin|Matrix_CLK_Pin
 80006d4:	f64b 73fb 	movw	r3, #49147	; 0xbffb
 80006d8:	613b      	str	r3, [r7, #16]
                          |Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_B0_Pin|Matrix_A_Pin
                          |Matrix_B_Pin|Matrix_C_Pin|Matrix_D_Pin|Matrix_E_Pin
                          |Matrix_R1_Pin|Matrix_G1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <MX_GPIO_Init+0xac>)
 80006ee:	f001 f879 	bl	80017e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_GPIO_Init+0xb0>)
 8000708:	f001 f86c 	bl	80017e4 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	40010c00 	.word	0x40010c00
 800071c:	40010800 	.word	0x40010800

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <HAL_TIM_PeriodElapsedCallback>:

//void DMA_HalfComplete(DMA_HandleTypeDef *hdma) {
////	HAL_UART_Transmit(&huart1, (uint8_t*) "Half\n", 5, 10);
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a08      	ldr	r2, [pc, #32]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d108      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x22>
		instance->handleNeeded = true;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
		instance->Handle();
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fa41 	bl	8000bd0 <_ZN12MatrixDriver6HandleEv>
	}
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000510 	.word	0x20000510
 800075c:	200004a8 	.word	0x200004a8

08000760 <_Z12DMA_CompleteP19__DMA_HandleTypeDef>:

void DMA_Complete(DMA_HandleTypeDef *hdma) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <_ZN12MatrixDriver12BufferOffsetEhhh>:

uint16_t MatrixDriver::BufferOffset(uint8_t x, uint8_t y, uint8_t plane) {
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	4608      	mov	r0, r1
 800077c:	4611      	mov	r1, r2
 800077e:	461a      	mov	r2, r3
 8000780:	4603      	mov	r3, r0
 8000782:	70fb      	strb	r3, [r7, #3]
 8000784:	460b      	mov	r3, r1
 8000786:	70bb      	strb	r3, [r7, #2]
 8000788:	4613      	mov	r3, r2
 800078a:	707b      	strb	r3, [r7, #1]
	//TODO: Take plane into account for offset
	return ((y % (height / 2)) * rowPlaneSize) + rowLeadIn + x;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	78bb      	ldrb	r3, [r7, #2]
 8000796:	fbb3 f1f2 	udiv	r1, r3, r2
 800079a:	fb02 f201 	mul.w	r2, r2, r1
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	8ad2      	ldrh	r2, [r2, #22]
 80007a8:	fb02 f303 	mul.w	r3, r2, r3
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4413      	add	r3, r2
 80007be:	b29b      	uxth	r3, r3
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
	...

080007cc <_ZN12MatrixDriverC1EhhNS_8ScanTypeE>:

MatrixDriver::MatrixDriver(uint8_t width, uint8_t height, ScanType scanType) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	4608      	mov	r0, r1
 80007d6:	4611      	mov	r1, r2
 80007d8:	461a      	mov	r2, r3
 80007da:	4603      	mov	r3, r0
 80007dc:	70fb      	strb	r3, [r7, #3]
 80007de:	460b      	mov	r3, r1
 80007e0:	70bb      	strb	r3, [r7, #2]
 80007e2:	4613      	mov	r3, r2
 80007e4:	707b      	strb	r3, [r7, #1]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	829a      	strh	r2, [r3, #20]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	82da      	strh	r2, [r3, #22]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	831a      	strh	r2, [r3, #24]
	this->rowLeadIn = 0;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2200      	movs	r2, #0
 8000802:	705a      	strb	r2, [r3, #1]
	this->width = width;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	78fa      	ldrb	r2, [r7, #3]
 8000808:	709a      	strb	r2, [r3, #2]
	this->height = height;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	78ba      	ldrb	r2, [r7, #2]
 800080e:	70da      	strb	r2, [r3, #3]
	this->scanType = scanType;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	787a      	ldrb	r2, [r7, #1]
 8000814:	715a      	strb	r2, [r3, #5]
	this->planes = 1;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2201      	movs	r2, #1
 800081a:	711a      	strb	r2, [r3, #4]

	this->rowPlane = 0;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	829a      	strh	r2, [r3, #20]
	this->rowPlaneSize = width + rowLeadIn;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	b29a      	uxth	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	b29b      	uxth	r3, r3
 800082c:	4413      	add	r3, r2
 800082e:	b29a      	uxth	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	82da      	strh	r2, [r3, #22]
	this->bufferSize = (rowPlaneSize * (height / 2) * planes);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	8adb      	ldrh	r3, [r3, #22]
 8000838:	78ba      	ldrb	r2, [r7, #2]
 800083a:	0852      	lsrs	r2, r2, #1
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	b292      	uxth	r2, r2
 8000840:	fb02 f303 	mul.w	r3, r2, r3
 8000844:	b29b      	uxth	r3, r3
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	7912      	ldrb	r2, [r2, #4]
 800084a:	b292      	uxth	r2, r2
 800084c:	fb02 f303 	mul.w	r3, r2, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	811a      	strh	r2, [r3, #8]

	this->sendBufferA = true;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2201      	movs	r2, #1
 800085a:	719a      	strb	r2, [r3, #6]
	this->bufferA = new uint16_t[bufferSize];
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	891b      	ldrh	r3, [r3, #8]
 8000860:	4a4d      	ldr	r2, [pc, #308]	; (8000998 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x1cc>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d801      	bhi.n	800086a <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x9e>
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	e001      	b.n	800086e <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xa2>
 800086a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800086e:	4618      	mov	r0, r3
 8000870:	f003 f8a4 	bl	80039bc <_Znaj>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	60da      	str	r2, [r3, #12]
	this->bufferB = new uint16_t[bufferSize];
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	891b      	ldrh	r3, [r3, #8]
 8000880:	4a45      	ldr	r2, [pc, #276]	; (8000998 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x1cc>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d801      	bhi.n	800088a <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xbe>
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	e001      	b.n	800088e <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xc2>
 800088a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800088e:	4618      	mov	r0, r3
 8000890:	f003 f894 	bl	80039bc <_Znaj>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	611a      	str	r2, [r3, #16]

	for (uint8_t y = 0; y < height / 2; y++) {
 800089c:	2300      	movs	r3, #0
 800089e:	75fb      	strb	r3, [r7, #23]
 80008a0:	78bb      	ldrb	r3, [r7, #2]
 80008a2:	085b      	lsrs	r3, r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	7dfa      	ldrb	r2, [r7, #23]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d26c      	bcs.n	8000986 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x1ba>
		uint8_t previousRow = y == 0 ? (height / 2) - 1 : y - 1;
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d105      	bne.n	80008be <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xf2>
 80008b2:	78bb      	ldrb	r3, [r7, #2]
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	3b01      	subs	r3, #1
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	e002      	b.n	80008c4 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xf8>
 80008be:	7dfb      	ldrb	r3, [r7, #23]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	74fb      	strb	r3, [r7, #19]

		uint16_t rowLines = (previousRow & 0x01 ? 0x0001 << A_SHIFT : 0)
 80008c6:	7cfb      	ldrb	r3, [r7, #19]
 80008c8:	00db      	lsls	r3, r3, #3
				| (previousRow & 0x02 ? 0x0001 << B_SHIFT : 0)
				| (previousRow & 0x04 ? 0x0001 << C_SHIFT : 0)
				| (previousRow & 0x08 ? 0x0001 << D_SHIFT : 0);
 80008ca:	b29b      	uxth	r3, r3
		uint16_t rowLines = (previousRow & 0x01 ? 0x0001 << A_SHIFT : 0)
 80008cc:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80008d0:	823b      	strh	r3, [r7, #16]

		for (uint8_t plane = 0; plane < planes; plane++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	75bb      	strb	r3, [r7, #22]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	7dba      	ldrb	r2, [r7, #22]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d24e      	bcs.n	800097e <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x1b2>
			for(int8_t leadIn = -rowLeadIn ; leadIn < 0 ; leadIn++) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	425b      	negs	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	757b      	strb	r3, [r7, #21]
 80008ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da21      	bge.n	8000936 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x16a>
				uint16_t offset = BufferOffset(0, y, plane) + leadIn;
 80008f2:	7dbb      	ldrb	r3, [r7, #22]
 80008f4:	7dfa      	ldrb	r2, [r7, #23]
 80008f6:	2100      	movs	r1, #0
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff3a 	bl	8000772 <_ZN12MatrixDriver12BufferOffsetEhhh>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000906:	b29b      	uxth	r3, r3
 8000908:	4413      	add	r3, r2
 800090a:	81fb      	strh	r3, [r7, #14]

				bufferA[offset] = rowLines;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	89fb      	ldrh	r3, [r7, #14]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	4413      	add	r3, r2
 8000916:	8a3a      	ldrh	r2, [r7, #16]
 8000918:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = rowLines;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	691a      	ldr	r2, [r3, #16]
 800091e:	89fb      	ldrh	r3, [r7, #14]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	8a3a      	ldrh	r2, [r7, #16]
 8000926:	801a      	strh	r2, [r3, #0]
			for(int8_t leadIn = -rowLeadIn ; leadIn < 0 ; leadIn++) {
 8000928:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	3301      	adds	r3, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	757b      	strb	r3, [r7, #21]
 8000934:	e7d9      	b.n	80008ea <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x11e>
			}

			for (uint8_t x = 0; x < width; x++) {
 8000936:	2300      	movs	r3, #0
 8000938:	753b      	strb	r3, [r7, #20]
 800093a:	7d3a      	ldrb	r2, [r7, #20]
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	429a      	cmp	r2, r3
 8000940:	d219      	bcs.n	8000976 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x1aa>

				uint16_t offset = BufferOffset(x, y, plane);
 8000942:	7dbb      	ldrb	r3, [r7, #22]
 8000944:	7dfa      	ldrb	r2, [r7, #23]
 8000946:	7d39      	ldrb	r1, [r7, #20]
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ff12 	bl	8000772 <_ZN12MatrixDriver12BufferOffsetEhhh>
 800094e:	4603      	mov	r3, r0
 8000950:	81bb      	strh	r3, [r7, #12]

				bufferA[offset] = rowLines;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	68da      	ldr	r2, [r3, #12]
 8000956:	89bb      	ldrh	r3, [r7, #12]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	8a3a      	ldrh	r2, [r7, #16]
 800095e:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = rowLines;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	691a      	ldr	r2, [r3, #16]
 8000964:	89bb      	ldrh	r3, [r7, #12]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	8a3a      	ldrh	r2, [r7, #16]
 800096c:	801a      	strh	r2, [r3, #0]
			for (uint8_t x = 0; x < width; x++) {
 800096e:	7d3b      	ldrb	r3, [r7, #20]
 8000970:	3301      	adds	r3, #1
 8000972:	753b      	strb	r3, [r7, #20]
 8000974:	e7e1      	b.n	800093a <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x16e>
		for (uint8_t plane = 0; plane < planes; plane++) {
 8000976:	7dbb      	ldrb	r3, [r7, #22]
 8000978:	3301      	adds	r3, #1
 800097a:	75bb      	strb	r3, [r7, #22]
 800097c:	e7ab      	b.n	80008d6 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x10a>
	for (uint8_t y = 0; y < height / 2; y++) {
 800097e:	7dfb      	ldrb	r3, [r7, #23]
 8000980:	3301      	adds	r3, #1
 8000982:	75fb      	strb	r3, [r7, #23]
 8000984:	e78c      	b.n	80008a0 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xd4>
			}
		}
	}

	instance = this;
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x1d0>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	3ffffffc 	.word	0x3ffffffc
 800099c:	200004a8 	.word	0x200004a8

080009a0 <_ZN12MatrixDriver4openEv>:

void MatrixDriver::open() {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "Open\n", 5, 10);
 80009a8:	230a      	movs	r3, #10
 80009aa:	2205      	movs	r2, #5
 80009ac:	4912      	ldr	r1, [pc, #72]	; (80009f8 <_ZN12MatrixDriver4openEv+0x58>)
 80009ae:	4813      	ldr	r0, [pc, #76]	; (80009fc <_ZN12MatrixDriver4openEv+0x5c>)
 80009b0:	f002 fe99 	bl	80036e6 <HAL_UART_Transmit>

	hdma_tim2_up.XferCpltCallback = DMA_Complete;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <_ZN12MatrixDriver4openEv+0x60>)
 80009b6:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <_ZN12MatrixDriver4openEv+0x64>)
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	201c      	movs	r0, #28
 80009c0:	f000 fceb 	bl	800139a <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009c4:	201c      	movs	r0, #28
 80009c6:	f000 fd04 	bl	80013d2 <HAL_NVIC_EnableIRQ>
	//TODO: Configure TIM3 based on expected width
	//
//	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
	//  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <_ZN12MatrixDriver4openEv+0x68>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <_ZN12MatrixDriver4openEv+0x68>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009d8:	60da      	str	r2, [r3, #12]

//	__HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);

//	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);

	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 80009da:	2100      	movs	r1, #0
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <_ZN12MatrixDriver4openEv+0x68>)
 80009de:	f001 fe63 	bl	80026a8 <HAL_TIM_OC_Start>

	rowPlane = 0;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	829a      	strh	r2, [r3, #20]

	StartNextDma();
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f91d 	bl	8000c28 <_ZN12MatrixDriver12StartNextDmaEv>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	08004354 	.word	0x08004354
 80009fc:	20000558 	.word	0x20000558
 8000a00:	200004cc 	.word	0x200004cc
 8000a04:	08000761 	.word	0x08000761
 8000a08:	200005f0 	.word	0x200005f0

08000a0c <_ZN12MatrixDriver9PlaneBitsEh>:
//
//	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel3, (uint32_t) outputBuffer,
//			(uint32_t) &(GPIOB->ODR), bufferSize);
}

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0x00;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]
//	if (value > 31) {
//		result |= 0x02;
//		value -= 31;
//	}

	if (value > 1) {
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d906      	bls.n	8000a30 <_ZN12MatrixDriver9PlaneBitsEh+0x24>
		result |= 0x01;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
		value -= 1;
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	70fb      	strb	r3, [r7, #3]
	}

	return result;
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <_ZN12MatrixDriver8SetPixelEhhhhh>:
		}
	}
}

void MatrixDriver::SetPixel(uint8_t x, uint8_t y, uint8_t r, uint8_t g,
		uint8_t b) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	4608      	mov	r0, r1
 8000a46:	4611      	mov	r1, r2
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	70fb      	strb	r3, [r7, #3]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	70bb      	strb	r3, [r7, #2]
 8000a52:	4613      	mov	r3, r2
 8000a54:	707b      	strb	r3, [r7, #1]
	uint8_t rShift, gShift, bShift;

	//Set data into the buffer we aren't sending at the moment
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	799b      	ldrb	r3, [r3, #6]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <_ZN12MatrixDriver8SetPixelEhhhhh+0x28>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	691b      	ldr	r3, [r3, #16]
 8000a62:	e001      	b.n	8000a68 <_ZN12MatrixDriver8SetPixelEhhhhh+0x2c>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	617b      	str	r3, [r7, #20]

	if (y < (height / 2)) {
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	78db      	ldrb	r3, [r3, #3]
 8000a6e:	085b      	lsrs	r3, r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	78ba      	ldrb	r2, [r7, #2]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d206      	bcs.n	8000a86 <_ZN12MatrixDriver8SetPixelEhhhhh+0x4a>
		rShift = R0_SHIFT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	77fb      	strb	r3, [r7, #31]
		gShift = G0_SHIFT;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	77bb      	strb	r3, [r7, #30]
		bShift = B0_SHIFT;
 8000a80:	230f      	movs	r3, #15
 8000a82:	777b      	strb	r3, [r7, #29]
 8000a84:	e005      	b.n	8000a92 <_ZN12MatrixDriver8SetPixelEhhhhh+0x56>
	} else {
		rShift = R1_SHIFT;
 8000a86:	2308      	movs	r3, #8
 8000a88:	77fb      	strb	r3, [r7, #31]
		gShift = G1_SHIFT;
 8000a8a:	2309      	movs	r3, #9
 8000a8c:	77bb      	strb	r3, [r7, #30]
		bShift = B1_SHIFT;
 8000a8e:	230a      	movs	r3, #10
 8000a90:	777b      	strb	r3, [r7, #29]
	}

	uint16_t pixelMask = (0x0001 << rShift) | (0x0001 << gShift)
 8000a92:	7ffb      	ldrb	r3, [r7, #31]
 8000a94:	2201      	movs	r2, #1
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	b21a      	sxth	r2, r3
 8000a9c:	7fbb      	ldrb	r3, [r7, #30]
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b21a      	sxth	r2, r3
			| (0x0001 << bShift);
 8000aaa:	7f7b      	ldrb	r3, [r7, #29]
 8000aac:	2101      	movs	r1, #1
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	b21b      	sxth	r3, r3
	uint16_t pixelMask = (0x0001 << rShift) | (0x0001 << gShift)
 8000ab8:	827b      	strh	r3, [r7, #18]
	uint8_t rPlanes = PlaneBits(r);
 8000aba:	787b      	ldrb	r3, [r7, #1]
 8000abc:	4619      	mov	r1, r3
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ffa4 	bl	8000a0c <_ZN12MatrixDriver9PlaneBitsEh>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	747b      	strb	r3, [r7, #17]
	uint8_t gPlanes = PlaneBits(g);
 8000ac8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000acc:	4619      	mov	r1, r3
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ff9c 	bl	8000a0c <_ZN12MatrixDriver9PlaneBitsEh>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	743b      	strb	r3, [r7, #16]
	uint8_t bPlanes = PlaneBits(b);
 8000ad8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ff94 	bl	8000a0c <_ZN12MatrixDriver9PlaneBitsEh>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	73fb      	strb	r3, [r7, #15]

	for (int plane = 0; plane < planes; plane++) {
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	461a      	mov	r2, r3
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4293      	cmp	r3, r2
 8000af6:	da54      	bge.n	8000ba2 <_ZN12MatrixDriver8SetPixelEhhhhh+0x166>
		uint16_t planePixelBits = (
				(rPlanes & (0x01 << plane)) ? 0x0001 << rShift : 0)
 8000af8:	7c7a      	ldrb	r2, [r7, #17]
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	fa42 f303 	asr.w	r3, r2, r3
 8000b00:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & (0x01 << plane)) ? 0x0001 << gShift : 0)
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d005      	beq.n	8000b14 <_ZN12MatrixDriver8SetPixelEhhhhh+0xd8>
				(rPlanes & (0x01 << plane)) ? 0x0001 << rShift : 0)
 8000b08:	7ffb      	ldrb	r3, [r7, #31]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
				| ((gPlanes & (0x01 << plane)) ? 0x0001 << gShift : 0)
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	e000      	b.n	8000b16 <_ZN12MatrixDriver8SetPixelEhhhhh+0xda>
 8000b14:	2200      	movs	r2, #0
 8000b16:	7c39      	ldrb	r1, [r7, #16]
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa41 f303 	asr.w	r3, r1, r3
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d005      	beq.n	8000b32 <_ZN12MatrixDriver8SetPixelEhhhhh+0xf6>
 8000b26:	7fbb      	ldrb	r3, [r7, #30]
 8000b28:	2101      	movs	r1, #1
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	e000      	b.n	8000b34 <_ZN12MatrixDriver8SetPixelEhhhhh+0xf8>
 8000b32:	2300      	movs	r3, #0
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b21a      	sxth	r2, r3
				| ((bPlanes & (0x01 << plane)) ? 0x0001 << bShift : 0);
 8000b38:	7bf9      	ldrb	r1, [r7, #15]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	fa41 f303 	asr.w	r3, r1, r3
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d005      	beq.n	8000b54 <_ZN12MatrixDriver8SetPixelEhhhhh+0x118>
 8000b48:	7f7b      	ldrb	r3, [r7, #29]
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	e000      	b.n	8000b56 <_ZN12MatrixDriver8SetPixelEhhhhh+0x11a>
 8000b54:	2300      	movs	r3, #0
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = (
 8000b5a:	81bb      	strh	r3, [r7, #12]
//				x, y, rPlanes, gPlanes, bPlanes, planePixelBits, pixelMask);

//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
//				10);

		uint16_t offset = BufferOffset(x, y, plane);
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	78ba      	ldrb	r2, [r7, #2]
 8000b62:	78f9      	ldrb	r1, [r7, #3]
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fe04 	bl	8000772 <_ZN12MatrixDriver12BufferOffsetEhhh>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	817b      	strh	r3, [r7, #10]

		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000b6e:	897b      	ldrh	r3, [r7, #10]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	4413      	add	r3, r2
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	4013      	ands	r3, r2
 8000b84:	b21a      	sxth	r2, r3
				| planePixelBits;
 8000b86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b219      	sxth	r1, r3
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000b8e:	897b      	ldrh	r3, [r7, #10]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	4413      	add	r3, r2
				| planePixelBits;
 8000b96:	b28a      	uxth	r2, r1
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000b98:	801a      	strh	r2, [r3, #0]
	for (int plane = 0; plane < planes; plane++) {
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	e7a4      	b.n	8000aec <_ZN12MatrixDriver8SetPixelEhhhhh+0xb0>
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	3720      	adds	r7, #32
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	sendBufferA = !sendBufferA;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	799b      	ldrb	r3, [r3, #6]
 8000bb6:	f083 0301 	eor.w	r3, r3, #1
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	719a      	strb	r2, [r3, #6]

	rowPlane = 0;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	829a      	strh	r2, [r3, #20]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <_ZN12MatrixDriver6HandleEv>:
void MatrixDriver::Clock() {
//	GPIOB->BSRR = (0x0001 << CLK_SHIFT);
	//Clock will be cleared on next output
}

void MatrixDriver::Handle() {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	if (handleNeeded) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d01f      	beq.n	8000c20 <_ZN12MatrixDriver6HandleEv+0x50>
		Latch();
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 f851 	bl	8000c88 <_ZN12MatrixDriver5LatchEv>

		rowPlane++;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	8a9b      	ldrh	r3, [r3, #20]
 8000bea:	3301      	adds	r3, #1
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	829a      	strh	r2, [r3, #20]

		if(rowPlane >= ((height / 2) * planes)) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	8a9b      	ldrh	r3, [r3, #20]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	78db      	ldrb	r3, [r3, #3]
 8000bfc:	085b      	lsrs	r3, r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	791b      	ldrb	r3, [r3, #4]
 8000c06:	fb03 f301 	mul.w	r3, r3, r1
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	db02      	blt.n	8000c14 <_ZN12MatrixDriver6HandleEv+0x44>
			rowPlane = 0;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	829a      	strh	r2, [r3, #20]
		}

		StartNextDma();
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 f807 	bl	8000c28 <_ZN12MatrixDriver12StartNextDmaEv>

		handleNeeded = false;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
	}
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_ZN12MatrixDriver12StartNextDmaEv>:

void MatrixDriver::StartNextDma() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	uint16_t *outputBuffer = sendBufferA ? bufferA : bufferB;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	799b      	ldrb	r3, [r3, #6]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <_ZN12MatrixDriver12StartNextDmaEv+0x16>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	e001      	b.n	8000c42 <_ZN12MatrixDriver12StartNextDmaEv+0x1a>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	60fb      	str	r3, [r7, #12]
	outputBuffer += (rowPlane * rowPlaneSize);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	8a9b      	ldrh	r3, [r3, #20]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	8adb      	ldrh	r3, [r3, #22]
 8000c4e:	fb03 f302 	mul.w	r3, r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]

//	sprintf(buffer, "StartNextDma: %lu - %d\n", outputBuffer, rowPlane);
//	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);

	HAL_TIM_Base_Stop_IT(&htim3);
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <_ZN12MatrixDriver12StartNextDmaEv+0x54>)
 8000c5c:	f001 fcf6 	bl	800264c <HAL_TIM_Base_Stop_IT>

	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t) outputBuffer,
 8000c60:	68f9      	ldr	r1, [r7, #12]
			(uint32_t) &(GPIOB->ODR), rowPlaneSize);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	8adb      	ldrh	r3, [r3, #22]
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t) outputBuffer,
 8000c66:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <_ZN12MatrixDriver12StartNextDmaEv+0x58>)
 8000c68:	4806      	ldr	r0, [pc, #24]	; (8000c84 <_ZN12MatrixDriver12StartNextDmaEv+0x5c>)
 8000c6a:	f000 fc27 	bl	80014bc <HAL_DMA_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <_ZN12MatrixDriver12StartNextDmaEv+0x54>)
 8000c70:	f001 fc9a 	bl	80025a8 <HAL_TIM_Base_Start_IT>
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000510 	.word	0x20000510
 8000c80:	40010c0c 	.word	0x40010c0c
 8000c84:	200004cc 	.word	0x200004cc

08000c88 <_ZN12MatrixDriver5LatchEv>:

void MatrixDriver::Latch() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 8000c90:	f000 faa2 	bl	80011d8 <HAL_GetTick>
 8000c94:	60f8      	str	r0, [r7, #12]

	uint32_t duration = now - latchTicks;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <_ZN12MatrixDriver5LatchEv+0x54>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	60bb      	str	r3, [r7, #8]
	latchTicks = now;
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <_ZN12MatrixDriver5LatchEv+0x54>)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6013      	str	r3, [r2, #0]

//	sprintf(buffer, "LAT Duration: %lu\n", duration);

	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);

	HAL_IWDG_Refresh(&hiwdg);
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <_ZN12MatrixDriver5LatchEv+0x58>)
 8000ca8:	f000 ff47 	bl	8001b3a <HAL_IWDG_Refresh>

	htim2.Instance->CNT = 0;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <_ZN12MatrixDriver5LatchEv+0x5c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24

	//Disable output
	GPIOB->BSRR = (0x0001 << OE_SHIFT);
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <_ZN12MatrixDriver5LatchEv+0x60>)
 8000cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cba:	611a      	str	r2, [r3, #16]
	//Latch output
	GPIOB->BSRR = (0x0001 << LAT_SHIFT);
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <_ZN12MatrixDriver5LatchEv+0x60>)
 8000cbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cc2:	611a      	str	r2, [r3, #16]
	//Reset Latch
	GPIOB->BSRR = (0x0001 << (LAT_SHIFT + 16));
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_ZN12MatrixDriver5LatchEv+0x60>)
 8000cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cca:	611a      	str	r2, [r3, #16]
	//Reset ~OE
	GPIOB->BSRR = (0x0001 << (OE_SHIFT + 16));
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <_ZN12MatrixDriver5LatchEv+0x60>)
 8000cce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000cd2:	611a      	str	r2, [r3, #16]
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200004ac 	.word	0x200004ac
 8000ce0:	200004c0 	.word	0x200004c0
 8000ce4:	200005f0 	.word	0x200005f0
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_MspInit+0x5c>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <HAL_MspInit+0x5c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_MspInit+0x60>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_MspInit+0x60>)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000

08000d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_SPI_MspInit+0x88>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d12f      	bne.n	8000dd0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000da0:	23a0      	movs	r3, #160	; 0xa0
 8000da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <HAL_SPI_MspInit+0x90>)
 8000db4:	f000 fd16 	bl	80017e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db8:	2340      	movs	r3, #64	; 0x40
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_SPI_MspInit+0x90>)
 8000dcc:	f000 fd0a 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40013000 	.word	0x40013000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800

08000de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df4:	d134      	bne.n	8000e60 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000df6:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <HAL_TIM_Base_MspInit+0xb8>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a28      	ldr	r2, [pc, #160]	; (8000e9c <HAL_TIM_Base_MspInit+0xb8>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <HAL_TIM_Base_MspInit+0xb8>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e10:	4a24      	ldr	r2, [pc, #144]	; (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e12:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e1c:	2240      	movs	r2, #64	; 0x40
 8000e1e:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2c:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e34:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000e42:	4817      	ldr	r0, [pc, #92]	; (8000ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e44:	f000 fae0 	bl	8001408 <HAL_DMA_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000e4e:	f7ff fc67 	bl	8000720 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e56:	621a      	str	r2, [r3, #32]
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e5e:	e018      	b.n	8000e92 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_TIM_Base_MspInit+0xc4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d113      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_TIM_Base_MspInit+0xb8>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_TIM_Base_MspInit+0xb8>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_TIM_Base_MspInit+0xb8>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	201d      	movs	r0, #29
 8000e88:	f000 fa87 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e8c:	201d      	movs	r0, #29
 8000e8e:	f000 faa0 	bl	80013d2 <HAL_NVIC_EnableIRQ>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	200004cc 	.word	0x200004cc
 8000ea4:	4002001c 	.word	0x4002001c
 8000ea8:	40000400 	.word	0x40000400

08000eac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eca:	d117      	bne.n	8000efc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_TIM_MspPostInit+0x58>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <HAL_TIM_MspPostInit+0x58>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_TIM_MspPostInit+0x58>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4804      	ldr	r0, [pc, #16]	; (8000f08 <HAL_TIM_MspPostInit+0x5c>)
 8000ef8:	f000 fc74 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010800 	.word	0x40010800

08000f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <HAL_UART_MspInit+0x8c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d131      	bne.n	8000f90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a1a      	ldr	r2, [pc, #104]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <HAL_UART_MspInit+0x94>)
 8000f72:	f000 fc37 	bl	80017e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_UART_MspInit+0x94>)
 8000f8c:	f000 fc2a 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <MemManage_Handler+0x4>

08000fbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <BusFault_Handler+0x4>

08000fc2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <UsageFault_Handler+0x4>

08000fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 f8e0 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <DMA1_Channel2_IRQHandler+0x10>)
 8000ffe:	f000 fabd 	bl	800157c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200004cc 	.word	0x200004cc

0800100c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <TIM3_IRQHandler+0x10>)
 8001012:	f001 fc9c 	bl	800294e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000510 	.word	0x20000510

08001020 <_getpid>:
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
 8001024:	2301      	movs	r3, #1
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <_kill>:
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
 8001038:	f002 fce4 	bl	8003a04 <__errno>
 800103c:	4602      	mov	r2, r0
 800103e:	2316      	movs	r3, #22
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_exit>:
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffe7 	bl	800102e <_kill>
 8001060:	e7fe      	b.n	8001060 <_exit+0x12>
	...

08001064 <_sbrk>:
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
 8001094:	f002 fcb6 	bl	8003a04 <__errno>
 8001098:	4602      	mov	r2, r0
 800109a:	230c      	movs	r3, #12
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20005000 	.word	0x20005000
 80010c4:	00000400 	.word	0x00000400
 80010c8:	200004b0 	.word	0x200004b0
 80010cc:	20000640 	.word	0x20000640

080010d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <Reset_Handler>:
 80010dc:	2100      	movs	r1, #0
 80010de:	e003      	b.n	80010e8 <LoopCopyDataInit>

080010e0 <CopyDataInit>:
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <LoopFillZerobss+0x14>)
 80010e2:	585b      	ldr	r3, [r3, r1]
 80010e4:	5043      	str	r3, [r0, r1]
 80010e6:	3104      	adds	r1, #4

080010e8 <LoopCopyDataInit>:
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <LoopFillZerobss+0x18>)
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <LoopFillZerobss+0x1c>)
 80010ec:	1842      	adds	r2, r0, r1
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3f6      	bcc.n	80010e0 <CopyDataInit>
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopFillZerobss+0x20>)
 80010f4:	e002      	b.n	80010fc <LoopFillZerobss>

080010f6 <FillZerobss>:
 80010f6:	2300      	movs	r3, #0
 80010f8:	f842 3b04 	str.w	r3, [r2], #4

080010fc <LoopFillZerobss>:
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <LoopFillZerobss+0x24>)
 80010fe:	429a      	cmp	r2, r3
 8001100:	d3f9      	bcc.n	80010f6 <FillZerobss>
 8001102:	f7ff ffe5 	bl	80010d0 <SystemInit>
 8001106:	f002 fc83 	bl	8003a10 <__libc_init_array>
 800110a:	f7ff f8d1 	bl	80002b0 <main>
 800110e:	4770      	bx	lr
 8001110:	08004410 	.word	0x08004410
 8001114:	20000000 	.word	0x20000000
 8001118:	20000070 	.word	0x20000070
 800111c:	20000070 	.word	0x20000070
 8001120:	20000640 	.word	0x20000640

08001124 <ADC1_2_IRQHandler>:
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_Init+0x28>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_Init+0x28>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f923 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f808 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f7ff fdd2 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40022000 	.word	0x40022000

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x54>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f93b 	bl	80013ee <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001190:	f000 f903 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <HAL_InitTick+0x5c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000004 	.word	0x20000004

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x1c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x20>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <HAL_IncTick+0x20>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000638 	.word	0x20000638

080011d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_GetTick+0x10>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	20000638 	.word	0x20000638

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4906      	ldr	r1, [pc, #24]	; (8001284 <__NVIC_EnableIRQ+0x34>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001364:	f7ff ff90 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff2d 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff42 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff90 	bl	80012dc <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5f 	bl	8001288 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff35 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e043      	b.n	80014a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_DMA_Init+0xa8>)
 8001426:	4413      	add	r3, r2
 8001428:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <HAL_DMA_Init+0xac>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	009a      	lsls	r2, r3, #2
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <HAL_DMA_Init+0xb0>)
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001452:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001456:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	bffdfff8 	.word	0xbffdfff8
 80014b4:	cccccccd 	.word	0xcccccccd
 80014b8:	40020000 	.word	0x40020000

080014bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_DMA_Start_IT+0x20>
 80014d8:	2302      	movs	r3, #2
 80014da:	e04a      	b.n	8001572 <HAL_DMA_Start_IT+0xb6>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d13a      	bne.n	8001564 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2202      	movs	r2, #2
 80014f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0201 	bic.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f938 	bl	8001788 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 020e 	orr.w	r2, r2, #14
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e00f      	b.n	8001552 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0204 	bic.w	r2, r2, #4
 8001540:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 020a 	orr.w	r2, r2, #10
 8001550:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0201 	orr.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e005      	b.n	8001570 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800156c:	2302      	movs	r3, #2
 800156e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001570:	7dfb      	ldrb	r3, [r7, #23]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	2204      	movs	r2, #4
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d04f      	beq.n	8001644 <HAL_DMA_IRQHandler+0xc8>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d04a      	beq.n	8001644 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d107      	bne.n	80015cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0204 	bic.w	r2, r2, #4
 80015ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a66      	ldr	r2, [pc, #408]	; (800176c <HAL_DMA_IRQHandler+0x1f0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d029      	beq.n	800162a <HAL_DMA_IRQHandler+0xae>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a65      	ldr	r2, [pc, #404]	; (8001770 <HAL_DMA_IRQHandler+0x1f4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d022      	beq.n	8001626 <HAL_DMA_IRQHandler+0xaa>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a63      	ldr	r2, [pc, #396]	; (8001774 <HAL_DMA_IRQHandler+0x1f8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01a      	beq.n	8001620 <HAL_DMA_IRQHandler+0xa4>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a62      	ldr	r2, [pc, #392]	; (8001778 <HAL_DMA_IRQHandler+0x1fc>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d012      	beq.n	800161a <HAL_DMA_IRQHandler+0x9e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a60      	ldr	r2, [pc, #384]	; (800177c <HAL_DMA_IRQHandler+0x200>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00a      	beq.n	8001614 <HAL_DMA_IRQHandler+0x98>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a5f      	ldr	r2, [pc, #380]	; (8001780 <HAL_DMA_IRQHandler+0x204>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d102      	bne.n	800160e <HAL_DMA_IRQHandler+0x92>
 8001608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800160c:	e00e      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 800160e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001612:	e00b      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 8001614:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001618:	e008      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 800161a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161e:	e005      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 8001620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001624:	e002      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 8001626:	2340      	movs	r3, #64	; 0x40
 8001628:	e000      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 800162a:	2304      	movs	r3, #4
 800162c:	4a55      	ldr	r2, [pc, #340]	; (8001784 <HAL_DMA_IRQHandler+0x208>)
 800162e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 8094 	beq.w	8001762 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001642:	e08e      	b.n	8001762 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2202      	movs	r2, #2
 800164a:	409a      	lsls	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d056      	beq.n	8001702 <HAL_DMA_IRQHandler+0x186>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d051      	beq.n	8001702 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10b      	bne.n	8001684 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 020a 	bic.w	r2, r2, #10
 800167a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a38      	ldr	r2, [pc, #224]	; (800176c <HAL_DMA_IRQHandler+0x1f0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d029      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x166>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a37      	ldr	r2, [pc, #220]	; (8001770 <HAL_DMA_IRQHandler+0x1f4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d022      	beq.n	80016de <HAL_DMA_IRQHandler+0x162>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a35      	ldr	r2, [pc, #212]	; (8001774 <HAL_DMA_IRQHandler+0x1f8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01a      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x15c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a34      	ldr	r2, [pc, #208]	; (8001778 <HAL_DMA_IRQHandler+0x1fc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d012      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x156>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a32      	ldr	r2, [pc, #200]	; (800177c <HAL_DMA_IRQHandler+0x200>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00a      	beq.n	80016cc <HAL_DMA_IRQHandler+0x150>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a31      	ldr	r2, [pc, #196]	; (8001780 <HAL_DMA_IRQHandler+0x204>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d102      	bne.n	80016c6 <HAL_DMA_IRQHandler+0x14a>
 80016c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016c4:	e00e      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ca:	e00b      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	e008      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d6:	e005      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016dc:	e002      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016de:	2320      	movs	r3, #32
 80016e0:	e000      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016e2:	2302      	movs	r3, #2
 80016e4:	4a27      	ldr	r2, [pc, #156]	; (8001784 <HAL_DMA_IRQHandler+0x208>)
 80016e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d034      	beq.n	8001762 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001700:	e02f      	b.n	8001762 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2208      	movs	r2, #8
 8001708:	409a      	lsls	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d028      	beq.n	8001764 <HAL_DMA_IRQHandler+0x1e8>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d023      	beq.n	8001764 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 020e 	bic.w	r2, r2, #14
 800172a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	2b00      	cmp	r3, #0
 8001758:	d004      	beq.n	8001764 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	4798      	blx	r3
    }
  }
  return;
 8001762:	bf00      	nop
 8001764:	bf00      	nop
}
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40020008 	.word	0x40020008
 8001770:	4002001c 	.word	0x4002001c
 8001774:	40020030 	.word	0x40020030
 8001778:	40020044 	.word	0x40020044
 800177c:	40020058 	.word	0x40020058
 8001780:	4002006c 	.word	0x4002006c
 8001784:	40020000 	.word	0x40020000

08001788 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d108      	bne.n	80017c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017c6:	e007      	b.n	80017d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	60da      	str	r2, [r3, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b08b      	sub	sp, #44	; 0x2c
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e127      	b.n	8001a48 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f8:	2201      	movs	r2, #1
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	429a      	cmp	r2, r3
 8001812:	f040 8116 	bne.w	8001a42 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b12      	cmp	r3, #18
 800181c:	d034      	beq.n	8001888 <HAL_GPIO_Init+0xa4>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d80d      	bhi.n	800183e <HAL_GPIO_Init+0x5a>
 8001822:	2b02      	cmp	r3, #2
 8001824:	d02b      	beq.n	800187e <HAL_GPIO_Init+0x9a>
 8001826:	2b02      	cmp	r3, #2
 8001828:	d804      	bhi.n	8001834 <HAL_GPIO_Init+0x50>
 800182a:	2b00      	cmp	r3, #0
 800182c:	d031      	beq.n	8001892 <HAL_GPIO_Init+0xae>
 800182e:	2b01      	cmp	r3, #1
 8001830:	d01c      	beq.n	800186c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001832:	e048      	b.n	80018c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001834:	2b03      	cmp	r3, #3
 8001836:	d043      	beq.n	80018c0 <HAL_GPIO_Init+0xdc>
 8001838:	2b11      	cmp	r3, #17
 800183a:	d01b      	beq.n	8001874 <HAL_GPIO_Init+0x90>
          break;
 800183c:	e043      	b.n	80018c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800183e:	4a89      	ldr	r2, [pc, #548]	; (8001a64 <HAL_GPIO_Init+0x280>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d026      	beq.n	8001892 <HAL_GPIO_Init+0xae>
 8001844:	4a87      	ldr	r2, [pc, #540]	; (8001a64 <HAL_GPIO_Init+0x280>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d806      	bhi.n	8001858 <HAL_GPIO_Init+0x74>
 800184a:	4a87      	ldr	r2, [pc, #540]	; (8001a68 <HAL_GPIO_Init+0x284>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d020      	beq.n	8001892 <HAL_GPIO_Init+0xae>
 8001850:	4a86      	ldr	r2, [pc, #536]	; (8001a6c <HAL_GPIO_Init+0x288>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01d      	beq.n	8001892 <HAL_GPIO_Init+0xae>
          break;
 8001856:	e036      	b.n	80018c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001858:	4a85      	ldr	r2, [pc, #532]	; (8001a70 <HAL_GPIO_Init+0x28c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <HAL_GPIO_Init+0xae>
 800185e:	4a85      	ldr	r2, [pc, #532]	; (8001a74 <HAL_GPIO_Init+0x290>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d016      	beq.n	8001892 <HAL_GPIO_Init+0xae>
 8001864:	4a84      	ldr	r2, [pc, #528]	; (8001a78 <HAL_GPIO_Init+0x294>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0xae>
          break;
 800186a:	e02c      	b.n	80018c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e028      	b.n	80018c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	3304      	adds	r3, #4
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e023      	b.n	80018c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	3308      	adds	r3, #8
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e01e      	b.n	80018c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	330c      	adds	r3, #12
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e019      	b.n	80018c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800189a:	2304      	movs	r3, #4
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e012      	b.n	80018c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a8:	2308      	movs	r3, #8
 80018aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	611a      	str	r2, [r3, #16]
          break;
 80018b2:	e008      	b.n	80018c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b4:	2308      	movs	r3, #8
 80018b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	615a      	str	r2, [r3, #20]
          break;
 80018be:	e002      	b.n	80018c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2bff      	cmp	r3, #255	; 0xff
 80018ca:	d801      	bhi.n	80018d0 <HAL_GPIO_Init+0xec>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	e001      	b.n	80018d4 <HAL_GPIO_Init+0xf0>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3304      	adds	r3, #4
 80018d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2bff      	cmp	r3, #255	; 0xff
 80018da:	d802      	bhi.n	80018e2 <HAL_GPIO_Init+0xfe>
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x104>
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	3b08      	subs	r3, #8
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	210f      	movs	r1, #15
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	401a      	ands	r2, r3
 80018fa:	6a39      	ldr	r1, [r7, #32]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	431a      	orrs	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 8096 	beq.w	8001a42 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001916:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_GPIO_Init+0x298>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_GPIO_Init+0x298>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6193      	str	r3, [r2, #24]
 8001922:	4b56      	ldr	r3, [pc, #344]	; (8001a7c <HAL_GPIO_Init+0x298>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800192e:	4a54      	ldr	r2, [pc, #336]	; (8001a80 <HAL_GPIO_Init+0x29c>)
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3302      	adds	r3, #2
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	220f      	movs	r2, #15
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4013      	ands	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <HAL_GPIO_Init+0x2a0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0x19e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4a      	ldr	r2, [pc, #296]	; (8001a88 <HAL_GPIO_Init+0x2a4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00d      	beq.n	800197e <HAL_GPIO_Init+0x19a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a49      	ldr	r2, [pc, #292]	; (8001a8c <HAL_GPIO_Init+0x2a8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d007      	beq.n	800197a <HAL_GPIO_Init+0x196>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a48      	ldr	r2, [pc, #288]	; (8001a90 <HAL_GPIO_Init+0x2ac>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_GPIO_Init+0x192>
 8001972:	2303      	movs	r3, #3
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x1a0>
 8001976:	2304      	movs	r3, #4
 8001978:	e004      	b.n	8001984 <HAL_GPIO_Init+0x1a0>
 800197a:	2302      	movs	r3, #2
 800197c:	e002      	b.n	8001984 <HAL_GPIO_Init+0x1a0>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x1a0>
 8001982:	2300      	movs	r3, #0
 8001984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001986:	f002 0203 	and.w	r2, r2, #3
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	4093      	lsls	r3, r2
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001994:	493a      	ldr	r1, [pc, #232]	; (8001a80 <HAL_GPIO_Init+0x29c>)
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ae:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4938      	ldr	r1, [pc, #224]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019bc:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	4933      	ldr	r1, [pc, #204]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d6:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	492e      	ldr	r1, [pc, #184]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
 80019e2:	e006      	b.n	80019f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	4929      	ldr	r1, [pc, #164]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	4924      	ldr	r1, [pc, #144]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
 8001a0a:	e006      	b.n	8001a1a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	491f      	ldr	r1, [pc, #124]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	491a      	ldr	r1, [pc, #104]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60cb      	str	r3, [r1, #12]
 8001a32:	e006      	b.n	8001a42 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	4915      	ldr	r1, [pc, #84]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3301      	adds	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f47f aed0 	bne.w	80017f8 <HAL_GPIO_Init+0x14>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	372c      	adds	r7, #44	; 0x2c
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	10210000 	.word	0x10210000
 8001a68:	10110000 	.word	0x10110000
 8001a6c:	10120000 	.word	0x10120000
 8001a70:	10310000 	.word	0x10310000
 8001a74:	10320000 	.word	0x10320000
 8001a78:	10220000 	.word	0x10220000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010000 	.word	0x40010000
 8001a84:	40010800 	.word	0x40010800
 8001a88:	40010c00 	.word	0x40010c00
 8001a8c:	40011000 	.word	0x40011000
 8001a90:	40011400 	.word	0x40011400
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e02b      	b.n	8001b32 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f245 5255 	movw	r2, #21845	; 0x5555
 8001aec:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6852      	ldr	r2, [r2, #4]
 8001af6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6892      	ldr	r2, [r2, #8]
 8001b00:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001b02:	f7ff fb69 	bl	80011d8 <HAL_GetTick>
 8001b06:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001b08:	e008      	b.n	8001b1c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001b0a:	f7ff fb65 	bl	80011d8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b26      	cmp	r3, #38	; 0x26
 8001b16:	d901      	bls.n	8001b1c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e00a      	b.n	8001b32 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f1      	bne.n	8001b0a <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e26c      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8087 	beq.w	8001c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b78:	4b92      	ldr	r3, [pc, #584]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d00c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b84:	4b8f      	ldr	r3, [pc, #572]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d112      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x5e>
 8001b90:	4b8c      	ldr	r3, [pc, #560]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9e:	4b89      	ldr	r3, [pc, #548]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d06c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x12c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d168      	bne.n	8001c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e246      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x76>
 8001bc0:	4b80      	ldr	r3, [pc, #512]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a7f      	ldr	r2, [pc, #508]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e02e      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x98>
 8001bd6:	4b7b      	ldr	r3, [pc, #492]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7a      	ldr	r2, [pc, #488]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b78      	ldr	r3, [pc, #480]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a77      	ldr	r2, [pc, #476]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e01d      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0xbc>
 8001bfa:	4b72      	ldr	r3, [pc, #456]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a71      	ldr	r2, [pc, #452]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b6f      	ldr	r3, [pc, #444]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6e      	ldr	r2, [pc, #440]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001c14:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6a      	ldr	r2, [pc, #424]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a67      	ldr	r2, [pc, #412]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fad0 	bl	80011d8 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff facc 	bl	80011d8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1fa      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0xe4>
 8001c5a:	e014      	b.n	8001c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fabc 	bl	80011d8 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff fab8 	bl	80011d8 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1e6      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x10c>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d063      	beq.n	8001d5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c92:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c9e:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d11c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x18c>
 8001caa:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x176>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e1ba      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4939      	ldr	r1, [pc, #228]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	e03a      	b.n	8001d5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d020      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fa71 	bl	80011d8 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fa6d 	bl	80011d8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e19b      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4927      	ldr	r1, [pc, #156]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2e:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa50 	bl	80011d8 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fa4c 	bl	80011d8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e17a      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d03a      	beq.n	8001ddc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d019      	beq.n	8001da2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7ff fa30 	bl	80011d8 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fa2c 	bl	80011d8 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e15a      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f000 fb12 	bl	80023c4 <RCC_Delay>
 8001da0:	e01c      	b.n	8001ddc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da8:	f7ff fa16 	bl	80011d8 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dae:	e00f      	b.n	8001dd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff fa12 	bl	80011d8 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d908      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e140      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	42420000 	.word	0x42420000
 8001dcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd0:	4b9e      	ldr	r3, [pc, #632]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e9      	bne.n	8001db0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a6 	beq.w	8001f36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b97      	ldr	r3, [pc, #604]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10d      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b94      	ldr	r3, [pc, #592]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a93      	ldr	r2, [pc, #588]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b91      	ldr	r3, [pc, #580]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e12:	2301      	movs	r3, #1
 8001e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b8e      	ldr	r3, [pc, #568]	; (8002050 <HAL_RCC_OscConfig+0x4f8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e22:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a8a      	ldr	r2, [pc, #552]	; (8002050 <HAL_RCC_OscConfig+0x4f8>)
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f9d3 	bl	80011d8 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e36:	f7ff f9cf 	bl	80011d8 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b64      	cmp	r3, #100	; 0x64
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0fd      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	4b81      	ldr	r3, [pc, #516]	; (8002050 <HAL_RCC_OscConfig+0x4f8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x312>
 8001e5c:	4b7b      	ldr	r3, [pc, #492]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a7a      	ldr	r2, [pc, #488]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	e02d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x334>
 8001e72:	4b76      	ldr	r3, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a75      	ldr	r2, [pc, #468]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	6213      	str	r3, [r2, #32]
 8001e7e:	4b73      	ldr	r3, [pc, #460]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a72      	ldr	r2, [pc, #456]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	f023 0304 	bic.w	r3, r3, #4
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	e01c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d10c      	bne.n	8001eae <HAL_RCC_OscConfig+0x356>
 8001e94:	4b6d      	ldr	r3, [pc, #436]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a6c      	ldr	r2, [pc, #432]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6213      	str	r3, [r2, #32]
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a69      	ldr	r2, [pc, #420]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e00b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001eae:	4b67      	ldr	r3, [pc, #412]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4a66      	ldr	r2, [pc, #408]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6213      	str	r3, [r2, #32]
 8001eba:	4b64      	ldr	r3, [pc, #400]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a63      	ldr	r2, [pc, #396]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d015      	beq.n	8001efa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff f983 	bl	80011d8 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff f97f 	bl	80011d8 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0ab      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	4b57      	ldr	r3, [pc, #348]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ee      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x37e>
 8001ef8:	e014      	b.n	8001f24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7ff f96d 	bl	80011d8 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff f969 	bl	80011d8 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e095      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f18:	4b4c      	ldr	r3, [pc, #304]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ee      	bne.n	8001f02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d105      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4b48      	ldr	r3, [pc, #288]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a47      	ldr	r2, [pc, #284]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8081 	beq.w	8002042 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f40:	4b42      	ldr	r3, [pc, #264]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d061      	beq.n	8002010 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d146      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <HAL_RCC_OscConfig+0x4fc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f93d 	bl	80011d8 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff f939 	bl	80011d8 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e067      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f74:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f88:	d108      	bne.n	8001f9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f8a:	4b30      	ldr	r3, [pc, #192]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	492d      	ldr	r1, [pc, #180]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a19      	ldr	r1, [r3, #32]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	430b      	orrs	r3, r1
 8001fae:	4927      	ldr	r1, [pc, #156]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <HAL_RCC_OscConfig+0x4fc>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff f90d 	bl	80011d8 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7ff f909 	bl	80011d8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e037      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x46a>
 8001fe0:	e02f      	b.n	8002042 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_RCC_OscConfig+0x4fc>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f8f6 	bl	80011d8 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f8f2 	bl	80011d8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e020      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x498>
 800200e:	e018      	b.n	8002042 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e013      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	429a      	cmp	r2, r3
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
 8002054:	42420060 	.word	0x42420060

08002058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0d0      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d910      	bls.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b67      	ldr	r3, [pc, #412]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4965      	ldr	r1, [pc, #404]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b8      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a58      	ldr	r2, [pc, #352]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	494d      	ldr	r1, [pc, #308]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d040      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e07f      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e073      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e06b      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b39      	ldr	r3, [pc, #228]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4936      	ldr	r1, [pc, #216]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7ff f846 	bl	80011d8 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7ff f842 	bl	80011d8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e053      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d210      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	4922      	ldr	r1, [pc, #136]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e032      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4916      	ldr	r1, [pc, #88]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021e6:	f000 f859 	bl	800229c <HAL_RCC_GetSysClockFreq>
 80021ea:	4601      	mov	r1, r0
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021f8:	5cd3      	ldrb	r3, [r2, r3]
 80021fa:	fa21 f303 	lsr.w	r3, r1, r3
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1cc>)
 8002200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1d0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe ffa4 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40022000 	.word	0x40022000
 800221c:	40021000 	.word	0x40021000
 8002220:	080043b8 	.word	0x080043b8
 8002224:	20000000 	.word	0x20000000
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002238:	f107 0318 	add.w	r3, r7, #24
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800224a:	2303      	movs	r3, #3
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8002252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002256:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_RCC_MCOConfig+0x68>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <HAL_RCC_MCOConfig+0x68>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6193      	str	r3, [r2, #24]
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_MCOConfig+0x68>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002270:	f107 0318 	add.w	r3, r7, #24
 8002274:	4619      	mov	r1, r3
 8002276:	4808      	ldr	r0, [pc, #32]	; (8002298 <HAL_RCC_MCOConfig+0x6c>)
 8002278:	f7ff fab4 	bl	80017e4 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_MCOConfig+0x68>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_MCOConfig+0x68>)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
}
 800228c:	bf00      	nop
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	40010800 	.word	0x40010800

0800229c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800229c:	b490      	push	{r4, r7}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022a4:	1d3c      	adds	r4, r7, #4
 80022a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022ac:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d002      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x40>
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d003      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x46>
 80022da:	e02d      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022de:	623b      	str	r3, [r7, #32]
      break;
 80022e0:	e02d      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	0c9b      	lsrs	r3, r3, #18
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022ee:	4413      	add	r3, r2
 80022f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	0c5b      	lsrs	r3, r3, #17
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800230e:	4413      	add	r3, r2
 8002310:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002314:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800231a:	fb02 f203 	mul.w	r2, r2, r3
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	e004      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HAL_RCC_GetSysClockFreq+0xc0>)
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	623b      	str	r3, [r7, #32]
      break;
 8002336:	e002      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800233a:	623b      	str	r3, [r7, #32]
      break;
 800233c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233e:	6a3b      	ldr	r3, [r7, #32]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bc90      	pop	{r4, r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	080043a4 	.word	0x080043a4
 8002350:	080043b4 	.word	0x080043b4
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	003d0900 	.word	0x003d0900

08002360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <HAL_RCC_GetHCLKFreq+0x10>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000000 	.word	0x20000000

08002374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002378:	f7ff fff2 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 800237c:	4601      	mov	r1, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	080043c8 	.word	0x080043c8

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a0:	f7ff ffde 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023a4:	4601      	mov	r1, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0adb      	lsrs	r3, r3, #11
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	080043c8 	.word	0x080043c8

080023c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <RCC_Delay+0x34>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <RCC_Delay+0x38>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0a5b      	lsrs	r3, r3, #9
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023e0:	bf00      	nop
  }
  while (Delay --);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	60fa      	str	r2, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f9      	bne.n	80023e0 <RCC_Delay+0x1c>
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000
 80023fc:	10624dd3 	.word	0x10624dd3

08002400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e076      	b.n	8002500 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002422:	d009      	beq.n	8002438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
 800242a:	e005      	b.n	8002438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe fc7c 	bl	8000d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800246e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024bc:	ea42 0103 	orr.w	r1, r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	0c1a      	lsrs	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f002 0204 	and.w	r2, r2, #4
 80024de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e041      	b.n	800259e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe fc58 	bl	8000de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3304      	adds	r3, #4
 8002544:	4619      	mov	r1, r3
 8002546:	4610      	mov	r0, r2
 8002548:	f000 fce6 	bl	8002f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d001      	beq.n	80025c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e03a      	b.n	8002636 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_TIM_Base_Start_IT+0x98>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00e      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x58>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ea:	d009      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x58>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_TIM_Base_Start_IT+0x9c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x58>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a13      	ldr	r2, [pc, #76]	; (8002648 <HAL_TIM_Base_Start_IT+0xa0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d111      	bne.n	8002624 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b06      	cmp	r3, #6
 8002610:	d010      	beq.n	8002634 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	e007      	b.n	8002634 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	40012c00 	.word	0x40012c00
 8002644:	40000400 	.word	0x40000400
 8002648:	40000800 	.word	0x40000800

0800264c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a1a      	ldr	r2, [r3, #32]
 800266a:	f241 1311 	movw	r3, #4369	; 0x1111
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10f      	bne.n	8002694 <HAL_TIM_Base_Stop_IT+0x48>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a1a      	ldr	r2, [r3, #32]
 800267a:	f240 4344 	movw	r3, #1092	; 0x444
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_TIM_Base_Stop_IT+0x48>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d109      	bne.n	80026cc <HAL_TIM_OC_Start+0x24>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e022      	b.n	8002712 <HAL_TIM_OC_Start+0x6a>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d109      	bne.n	80026e6 <HAL_TIM_OC_Start+0x3e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	bf14      	ite	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	2300      	moveq	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	e015      	b.n	8002712 <HAL_TIM_OC_Start+0x6a>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d109      	bne.n	8002700 <HAL_TIM_OC_Start+0x58>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	bf14      	ite	ne
 80026f8:	2301      	movne	r3, #1
 80026fa:	2300      	moveq	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	e008      	b.n	8002712 <HAL_TIM_OC_Start+0x6a>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e05e      	b.n	80027d8 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d104      	bne.n	800272a <HAL_TIM_OC_Start+0x82>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002728:	e013      	b.n	8002752 <HAL_TIM_OC_Start+0xaa>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b04      	cmp	r3, #4
 800272e:	d104      	bne.n	800273a <HAL_TIM_OC_Start+0x92>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002738:	e00b      	b.n	8002752 <HAL_TIM_OC_Start+0xaa>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d104      	bne.n	800274a <HAL_TIM_OC_Start+0xa2>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002748:	e003      	b.n	8002752 <HAL_TIM_OC_Start+0xaa>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2202      	movs	r2, #2
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2201      	movs	r2, #1
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fee2 	bl	8003524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <HAL_TIM_OC_Start+0x138>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d107      	bne.n	800277a <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <HAL_TIM_OC_Start+0x138>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00e      	beq.n	80027a2 <HAL_TIM_OC_Start+0xfa>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278c:	d009      	beq.n	80027a2 <HAL_TIM_OC_Start+0xfa>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <HAL_TIM_OC_Start+0x13c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d004      	beq.n	80027a2 <HAL_TIM_OC_Start+0xfa>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <HAL_TIM_OC_Start+0x140>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d111      	bne.n	80027c6 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b06      	cmp	r3, #6
 80027b2:	d010      	beq.n	80027d6 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c4:	e007      	b.n	80027d6 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800

080027ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e041      	b.n	8002882 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f839 	bl	800288a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f000 fb74 	bl	8002f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e041      	b.n	8002934 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d106      	bne.n	80028ca <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f839 	bl	800293c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3304      	adds	r3, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f000 fb1b 	bl	8002f18 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0208 	bic.w	r2, r2, #8
 80028f0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6819      	ldr	r1, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d122      	bne.n	80029aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d11b      	bne.n	80029aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f06f 0202 	mvn.w	r2, #2
 800297a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 faa5 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002996:	e005      	b.n	80029a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fa98 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 faa7 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d122      	bne.n	80029fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d11b      	bne.n	80029fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f06f 0204 	mvn.w	r2, #4
 80029ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fa7b 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 80029ea:	e005      	b.n	80029f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fa6e 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fa7d 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d122      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d11b      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f06f 0208 	mvn.w	r2, #8
 8002a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2204      	movs	r2, #4
 8002a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fa51 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002a3e:	e005      	b.n	8002a4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fa44 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fa53 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d122      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d11b      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f06f 0210 	mvn.w	r2, #16
 8002a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fa27 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002a92:	e005      	b.n	8002aa0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fa1a 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fa29 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f06f 0201 	mvn.w	r2, #1
 8002aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7fd fe2d 	bl	800072c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d10e      	bne.n	8002afe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b80      	cmp	r3, #128	; 0x80
 8002aec:	d107      	bne.n	8002afe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fd9e 	bl	800363a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d10e      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f9ed 	bl	8002f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d10e      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d107      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0220 	mvn.w	r2, #32
 8002b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fd69 	bl	8003628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e0ac      	b.n	8002cd4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	f200 809f 	bhi.w	8002cc8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002b8a:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b90:	08002bc5 	.word	0x08002bc5
 8002b94:	08002cc9 	.word	0x08002cc9
 8002b98:	08002cc9 	.word	0x08002cc9
 8002b9c:	08002cc9 	.word	0x08002cc9
 8002ba0:	08002c05 	.word	0x08002c05
 8002ba4:	08002cc9 	.word	0x08002cc9
 8002ba8:	08002cc9 	.word	0x08002cc9
 8002bac:	08002cc9 	.word	0x08002cc9
 8002bb0:	08002c47 	.word	0x08002c47
 8002bb4:	08002cc9 	.word	0x08002cc9
 8002bb8:	08002cc9 	.word	0x08002cc9
 8002bbc:	08002cc9 	.word	0x08002cc9
 8002bc0:	08002c87 	.word	0x08002c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fa06 	bl	8002fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0208 	orr.w	r2, r2, #8
 8002bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0204 	bic.w	r2, r2, #4
 8002bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6999      	ldr	r1, [r3, #24]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	619a      	str	r2, [r3, #24]
      break;
 8002c02:	e062      	b.n	8002cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fa4c 	bl	80030a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6999      	ldr	r1, [r3, #24]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	021a      	lsls	r2, r3, #8
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	619a      	str	r2, [r3, #24]
      break;
 8002c44:	e041      	b.n	8002cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fa95 	bl	800317c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0208 	orr.w	r2, r2, #8
 8002c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0204 	bic.w	r2, r2, #4
 8002c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69d9      	ldr	r1, [r3, #28]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	61da      	str	r2, [r3, #28]
      break;
 8002c84:	e021      	b.n	8002cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fadf 	bl	8003250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69d9      	ldr	r1, [r3, #28]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	021a      	lsls	r2, r3, #8
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	61da      	str	r2, [r3, #28]
      break;
 8002cc6:	e000      	b.n	8002cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002cc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_TIM_ConfigClockSource+0x18>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e0a6      	b.n	8002e42 <HAL_TIM_ConfigClockSource+0x166>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d067      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0x120>
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d80b      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x6c>
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d073      	beq.n	8002e1c <HAL_TIM_ConfigClockSource+0x140>
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d802      	bhi.n	8002d3e <HAL_TIM_ConfigClockSource+0x62>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d06f      	beq.n	8002e1c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d3c:	e078      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d06c      	beq.n	8002e1c <HAL_TIM_ConfigClockSource+0x140>
 8002d42:	2b30      	cmp	r3, #48	; 0x30
 8002d44:	d06a      	beq.n	8002e1c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d46:	e073      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d48:	2b70      	cmp	r3, #112	; 0x70
 8002d4a:	d00d      	beq.n	8002d68 <HAL_TIM_ConfigClockSource+0x8c>
 8002d4c:	2b70      	cmp	r3, #112	; 0x70
 8002d4e:	d804      	bhi.n	8002d5a <HAL_TIM_ConfigClockSource+0x7e>
 8002d50:	2b50      	cmp	r3, #80	; 0x50
 8002d52:	d033      	beq.n	8002dbc <HAL_TIM_ConfigClockSource+0xe0>
 8002d54:	2b60      	cmp	r3, #96	; 0x60
 8002d56:	d041      	beq.n	8002ddc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d58:	e06a      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5e:	d066      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x152>
 8002d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d64:	d017      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d66:	e063      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f000 fbb5 	bl	80034e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]
      break;
 8002d94:	e04c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6899      	ldr	r1, [r3, #8]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f000 fb9e 	bl	80034e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db8:	609a      	str	r2, [r3, #8]
      break;
 8002dba:	e039      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f000 fb15 	bl	80033f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2150      	movs	r1, #80	; 0x50
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fb6c 	bl	80034b2 <TIM_ITRx_SetConfig>
      break;
 8002dda:	e029      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	461a      	mov	r2, r3
 8002dea:	f000 fb33 	bl	8003454 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2160      	movs	r1, #96	; 0x60
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fb5c 	bl	80034b2 <TIM_ITRx_SetConfig>
      break;
 8002dfa:	e019      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f000 faf5 	bl	80033f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2140      	movs	r1, #64	; 0x40
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fb4c 	bl	80034b2 <TIM_ITRx_SetConfig>
      break;
 8002e1a:	e009      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f000 fb43 	bl	80034b2 <TIM_ITRx_SetConfig>
        break;
 8002e2c:	e000      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002e2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e031      	b.n	8002ec6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002e72:	6839      	ldr	r1, [r7, #0]
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fa39 	bl	80032ec <TIM_SlaveTimer_SetConfig>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d009      	beq.n	8002e94 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e018      	b.n	8002ec6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002eb2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
	...

08002f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <TIM_Base_SetConfig+0xb8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00b      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f36:	d007      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <TIM_Base_SetConfig+0xbc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a25      	ldr	r2, [pc, #148]	; (8002fd8 <TIM_Base_SetConfig+0xc0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d108      	bne.n	8002f5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <TIM_Base_SetConfig+0xb8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <TIM_Base_SetConfig+0x62>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d007      	beq.n	8002f7a <TIM_Base_SetConfig+0x62>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <TIM_Base_SetConfig+0xbc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <TIM_Base_SetConfig+0x62>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <TIM_Base_SetConfig+0xc0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d108      	bne.n	8002f8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <TIM_Base_SetConfig+0xb8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d103      	bne.n	8002fc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	615a      	str	r2, [r3, #20]
}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40000800 	.word	0x40000800

08002fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f023 0201 	bic.w	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f023 0302 	bic.w	r3, r3, #2
 8003024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <TIM_OC1_SetConfig+0xc8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d10c      	bne.n	8003052 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f023 0308 	bic.w	r3, r3, #8
 800303e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a13      	ldr	r2, [pc, #76]	; (80030a4 <TIM_OC1_SetConfig+0xc8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d111      	bne.n	800307e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	621a      	str	r2, [r3, #32]
}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40012c00 	.word	0x40012c00

080030a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0210 	bic.w	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f023 0320 	bic.w	r3, r3, #32
 80030f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <TIM_OC2_SetConfig+0xd0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d10d      	bne.n	8003124 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800310e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003122:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a14      	ldr	r2, [pc, #80]	; (8003178 <TIM_OC2_SetConfig+0xd0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d113      	bne.n	8003154 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800313a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	621a      	str	r2, [r3, #32]
}
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	40012c00 	.word	0x40012c00

0800317c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0303 	bic.w	r3, r3, #3
 80031b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <TIM_OC3_SetConfig+0xd0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d10d      	bne.n	80031f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a14      	ldr	r2, [pc, #80]	; (800324c <TIM_OC3_SetConfig+0xd0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d113      	bne.n	8003226 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	621a      	str	r2, [r3, #32]
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00

08003250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800329a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	031b      	lsls	r3, r3, #12
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <TIM_OC4_SetConfig+0x98>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d109      	bne.n	80032c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	621a      	str	r2, [r3, #32]
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00

080032ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003304:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0307 	bic.w	r3, r3, #7
 8003316:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b30      	cmp	r3, #48	; 0x30
 8003330:	d05c      	beq.n	80033ec <TIM_SlaveTimer_SetConfig+0x100>
 8003332:	2b30      	cmp	r3, #48	; 0x30
 8003334:	d806      	bhi.n	8003344 <TIM_SlaveTimer_SetConfig+0x58>
 8003336:	2b10      	cmp	r3, #16
 8003338:	d058      	beq.n	80033ec <TIM_SlaveTimer_SetConfig+0x100>
 800333a:	2b20      	cmp	r3, #32
 800333c:	d056      	beq.n	80033ec <TIM_SlaveTimer_SetConfig+0x100>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d054      	beq.n	80033ec <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003342:	e054      	b.n	80033ee <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003344:	2b50      	cmp	r3, #80	; 0x50
 8003346:	d03d      	beq.n	80033c4 <TIM_SlaveTimer_SetConfig+0xd8>
 8003348:	2b50      	cmp	r3, #80	; 0x50
 800334a:	d802      	bhi.n	8003352 <TIM_SlaveTimer_SetConfig+0x66>
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d010      	beq.n	8003372 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003350:	e04d      	b.n	80033ee <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003352:	2b60      	cmp	r3, #96	; 0x60
 8003354:	d040      	beq.n	80033d8 <TIM_SlaveTimer_SetConfig+0xec>
 8003356:	2b70      	cmp	r3, #112	; 0x70
 8003358:	d000      	beq.n	800335c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800335a:	e048      	b.n	80033ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68d9      	ldr	r1, [r3, #12]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f000 f8bb 	bl	80034e6 <TIM_ETR_SetConfig>
      break;
 8003370:	e03d      	b.n	80033ee <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d101      	bne.n	800337e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e038      	b.n	80033f0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a1a      	ldr	r2, [r3, #32]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	621a      	str	r2, [r3, #32]
      break;
 80033c2:	e014      	b.n	80033ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6899      	ldr	r1, [r3, #8]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	461a      	mov	r2, r3
 80033d2:	f000 f811 	bl	80033f8 <TIM_TI1_ConfigInputStage>
      break;
 80033d6:	e00a      	b.n	80033ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6899      	ldr	r1, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	461a      	mov	r2, r3
 80033e6:	f000 f835 	bl	8003454 <TIM_TI2_ConfigInputStage>
      break;
 80033ea:	e000      	b.n	80033ee <TIM_SlaveTimer_SetConfig+0x102>
        break;
 80033ec:	bf00      	nop
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0201 	bic.w	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 030a 	bic.w	r3, r3, #10
 8003434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f023 0210 	bic.w	r2, r3, #16
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800347e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	031b      	lsls	r3, r3, #12
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003490:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	621a      	str	r2, [r3, #32]
}
 80034a8:	bf00      	nop
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b085      	sub	sp, #20
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f043 0307 	orr.w	r3, r3, #7
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	609a      	str	r2, [r3, #8]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b087      	sub	sp, #28
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003500:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	021a      	lsls	r2, r3, #8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	431a      	orrs	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4313      	orrs	r3, r2
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	609a      	str	r2, [r3, #8]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2201      	movs	r2, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a1a      	ldr	r2, [r3, #32]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	43db      	mvns	r3, r3
 8003546:	401a      	ands	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1a      	ldr	r2, [r3, #32]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003580:	2302      	movs	r3, #2
 8003582:	e046      	b.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a16      	ldr	r2, [pc, #88]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d009      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a12      	ldr	r2, [pc, #72]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a10      	ldr	r2, [pc, #64]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d10c      	bne.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800

08003628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr

0800363a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e03f      	b.n	80036de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fc4a 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	; 0x24
 800367c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800368e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f905 	bl	80038a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b08a      	sub	sp, #40	; 0x28
 80036ea:	af02      	add	r7, sp, #8
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b20      	cmp	r3, #32
 8003704:	d17c      	bne.n	8003800 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_UART_Transmit+0x2c>
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e075      	b.n	8003802 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_UART_Transmit+0x3e>
 8003720:	2302      	movs	r3, #2
 8003722:	e06e      	b.n	8003802 <HAL_UART_Transmit+0x11c>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2221      	movs	r2, #33	; 0x21
 8003736:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800373a:	f7fd fd4d 	bl	80011d8 <HAL_GetTick>
 800373e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	88fa      	ldrh	r2, [r7, #6]
 8003744:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	88fa      	ldrh	r2, [r7, #6]
 800374a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003754:	d108      	bne.n	8003768 <HAL_UART_Transmit+0x82>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	e003      	b.n	8003770 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800376c:	2300      	movs	r3, #0
 800376e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003778:	e02a      	b.n	80037d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2200      	movs	r2, #0
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f840 	bl	800380a <UART_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e036      	b.n	8003802 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	3302      	adds	r3, #2
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	e007      	b.n	80037c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	3301      	adds	r3, #1
 80037c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1cf      	bne.n	800377a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	2140      	movs	r1, #64	; 0x40
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f810 	bl	800380a <UART_WaitOnFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e006      	b.n	8003802 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003800:	2302      	movs	r3, #2
  }
}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381a:	e02c      	b.n	8003876 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003822:	d028      	beq.n	8003876 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x30>
 800382a:	f7fd fcd5 	bl	80011d8 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	429a      	cmp	r2, r3
 8003838:	d21d      	bcs.n	8003876 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003848:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e00f      	b.n	8003896 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4013      	ands	r3, r2
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	429a      	cmp	r2, r3
 8003892:	d0c3      	beq.n	800381c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038da:	f023 030c 	bic.w	r3, r3, #12
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a2c      	ldr	r2, [pc, #176]	; (80039b4 <UART_SetConfig+0x114>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d103      	bne.n	8003910 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7fe fd48 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	e002      	b.n	8003916 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003910:	f7fe fd30 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 8003914:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009a      	lsls	r2, r3, #2
 8003920:	441a      	add	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	4a22      	ldr	r2, [pc, #136]	; (80039b8 <UART_SetConfig+0x118>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	0119      	lsls	r1, r3, #4
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009a      	lsls	r2, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	fbb2 f2f3 	udiv	r2, r2, r3
 800394c:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <UART_SetConfig+0x118>)
 800394e:	fba3 0302 	umull	r0, r3, r3, r2
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2064      	movs	r0, #100	; 0x64
 8003956:	fb00 f303 	mul.w	r3, r0, r3
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	3332      	adds	r3, #50	; 0x32
 8003960:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <UART_SetConfig+0x118>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396c:	4419      	add	r1, r3
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009a      	lsls	r2, r3, #2
 8003978:	441a      	add	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	fbb2 f2f3 	udiv	r2, r2, r3
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <UART_SetConfig+0x118>)
 8003986:	fba3 0302 	umull	r0, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2064      	movs	r0, #100	; 0x64
 800398e:	fb00 f303 	mul.w	r3, r0, r3
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	3332      	adds	r3, #50	; 0x32
 8003998:	4a07      	ldr	r2, [pc, #28]	; (80039b8 <UART_SetConfig+0x118>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	f003 020f 	and.w	r2, r3, #15
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	440a      	add	r2, r1
 80039aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40013800 	.word	0x40013800
 80039b8:	51eb851f 	.word	0x51eb851f

080039bc <_Znaj>:
 80039bc:	f000 b800 	b.w	80039c0 <_Znwj>

080039c0 <_Znwj>:
 80039c0:	b510      	push	{r4, lr}
 80039c2:	2800      	cmp	r0, #0
 80039c4:	bf14      	ite	ne
 80039c6:	4604      	movne	r4, r0
 80039c8:	2401      	moveq	r4, #1
 80039ca:	4620      	mov	r0, r4
 80039cc:	f000 f844 	bl	8003a58 <malloc>
 80039d0:	b930      	cbnz	r0, 80039e0 <_Znwj+0x20>
 80039d2:	f000 f807 	bl	80039e4 <_ZSt15get_new_handlerv>
 80039d6:	b908      	cbnz	r0, 80039dc <_Znwj+0x1c>
 80039d8:	f000 f80c 	bl	80039f4 <abort>
 80039dc:	4780      	blx	r0
 80039de:	e7f4      	b.n	80039ca <_Znwj+0xa>
 80039e0:	bd10      	pop	{r4, pc}
	...

080039e4 <_ZSt15get_new_handlerv>:
 80039e4:	4b02      	ldr	r3, [pc, #8]	; (80039f0 <_ZSt15get_new_handlerv+0xc>)
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	f3bf 8f5b 	dmb	ish
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	200004b4 	.word	0x200004b4

080039f4 <abort>:
 80039f4:	b508      	push	{r3, lr}
 80039f6:	2006      	movs	r0, #6
 80039f8:	f000 f91c 	bl	8003c34 <raise>
 80039fc:	2001      	movs	r0, #1
 80039fe:	f7fd fb26 	bl	800104e <_exit>
	...

08003a04 <__errno>:
 8003a04:	4b01      	ldr	r3, [pc, #4]	; (8003a0c <__errno+0x8>)
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	2000000c 	.word	0x2000000c

08003a10 <__libc_init_array>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	2500      	movs	r5, #0
 8003a14:	4e0c      	ldr	r6, [pc, #48]	; (8003a48 <__libc_init_array+0x38>)
 8003a16:	4c0d      	ldr	r4, [pc, #52]	; (8003a4c <__libc_init_array+0x3c>)
 8003a18:	1ba4      	subs	r4, r4, r6
 8003a1a:	10a4      	asrs	r4, r4, #2
 8003a1c:	42a5      	cmp	r5, r4
 8003a1e:	d109      	bne.n	8003a34 <__libc_init_array+0x24>
 8003a20:	f000 fc80 	bl	8004324 <_init>
 8003a24:	2500      	movs	r5, #0
 8003a26:	4e0a      	ldr	r6, [pc, #40]	; (8003a50 <__libc_init_array+0x40>)
 8003a28:	4c0a      	ldr	r4, [pc, #40]	; (8003a54 <__libc_init_array+0x44>)
 8003a2a:	1ba4      	subs	r4, r4, r6
 8003a2c:	10a4      	asrs	r4, r4, #2
 8003a2e:	42a5      	cmp	r5, r4
 8003a30:	d105      	bne.n	8003a3e <__libc_init_array+0x2e>
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
 8003a34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a38:	4798      	blx	r3
 8003a3a:	3501      	adds	r5, #1
 8003a3c:	e7ee      	b.n	8003a1c <__libc_init_array+0xc>
 8003a3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a42:	4798      	blx	r3
 8003a44:	3501      	adds	r5, #1
 8003a46:	e7f2      	b.n	8003a2e <__libc_init_array+0x1e>
 8003a48:	08004404 	.word	0x08004404
 8003a4c:	08004404 	.word	0x08004404
 8003a50:	08004404 	.word	0x08004404
 8003a54:	0800440c 	.word	0x0800440c

08003a58 <malloc>:
 8003a58:	4b02      	ldr	r3, [pc, #8]	; (8003a64 <malloc+0xc>)
 8003a5a:	4601      	mov	r1, r0
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	f000 b857 	b.w	8003b10 <_malloc_r>
 8003a62:	bf00      	nop
 8003a64:	2000000c 	.word	0x2000000c

08003a68 <memset>:
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4402      	add	r2, r0
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d100      	bne.n	8003a72 <memset+0xa>
 8003a70:	4770      	bx	lr
 8003a72:	f803 1b01 	strb.w	r1, [r3], #1
 8003a76:	e7f9      	b.n	8003a6c <memset+0x4>

08003a78 <_free_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4605      	mov	r5, r0
 8003a7c:	2900      	cmp	r1, #0
 8003a7e:	d043      	beq.n	8003b08 <_free_r+0x90>
 8003a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a84:	1f0c      	subs	r4, r1, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bfb8      	it	lt
 8003a8a:	18e4      	addlt	r4, r4, r3
 8003a8c:	f000 f90e 	bl	8003cac <__malloc_lock>
 8003a90:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <_free_r+0x94>)
 8003a92:	6813      	ldr	r3, [r2, #0]
 8003a94:	4610      	mov	r0, r2
 8003a96:	b933      	cbnz	r3, 8003aa6 <_free_r+0x2e>
 8003a98:	6063      	str	r3, [r4, #4]
 8003a9a:	6014      	str	r4, [r2, #0]
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aa2:	f000 b904 	b.w	8003cae <__malloc_unlock>
 8003aa6:	42a3      	cmp	r3, r4
 8003aa8:	d90b      	bls.n	8003ac2 <_free_r+0x4a>
 8003aaa:	6821      	ldr	r1, [r4, #0]
 8003aac:	1862      	adds	r2, r4, r1
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	bf01      	itttt	eq
 8003ab2:	681a      	ldreq	r2, [r3, #0]
 8003ab4:	685b      	ldreq	r3, [r3, #4]
 8003ab6:	1852      	addeq	r2, r2, r1
 8003ab8:	6022      	streq	r2, [r4, #0]
 8003aba:	6063      	str	r3, [r4, #4]
 8003abc:	6004      	str	r4, [r0, #0]
 8003abe:	e7ed      	b.n	8003a9c <_free_r+0x24>
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	b10a      	cbz	r2, 8003aca <_free_r+0x52>
 8003ac6:	42a2      	cmp	r2, r4
 8003ac8:	d9fa      	bls.n	8003ac0 <_free_r+0x48>
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	1858      	adds	r0, r3, r1
 8003ace:	42a0      	cmp	r0, r4
 8003ad0:	d10b      	bne.n	8003aea <_free_r+0x72>
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	4401      	add	r1, r0
 8003ad6:	1858      	adds	r0, r3, r1
 8003ad8:	4282      	cmp	r2, r0
 8003ada:	6019      	str	r1, [r3, #0]
 8003adc:	d1de      	bne.n	8003a9c <_free_r+0x24>
 8003ade:	6810      	ldr	r0, [r2, #0]
 8003ae0:	6852      	ldr	r2, [r2, #4]
 8003ae2:	4401      	add	r1, r0
 8003ae4:	6019      	str	r1, [r3, #0]
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	e7d8      	b.n	8003a9c <_free_r+0x24>
 8003aea:	d902      	bls.n	8003af2 <_free_r+0x7a>
 8003aec:	230c      	movs	r3, #12
 8003aee:	602b      	str	r3, [r5, #0]
 8003af0:	e7d4      	b.n	8003a9c <_free_r+0x24>
 8003af2:	6820      	ldr	r0, [r4, #0]
 8003af4:	1821      	adds	r1, r4, r0
 8003af6:	428a      	cmp	r2, r1
 8003af8:	bf01      	itttt	eq
 8003afa:	6811      	ldreq	r1, [r2, #0]
 8003afc:	6852      	ldreq	r2, [r2, #4]
 8003afe:	1809      	addeq	r1, r1, r0
 8003b00:	6021      	streq	r1, [r4, #0]
 8003b02:	6062      	str	r2, [r4, #4]
 8003b04:	605c      	str	r4, [r3, #4]
 8003b06:	e7c9      	b.n	8003a9c <_free_r+0x24>
 8003b08:	bd38      	pop	{r3, r4, r5, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200004b8 	.word	0x200004b8

08003b10 <_malloc_r>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	1ccd      	adds	r5, r1, #3
 8003b14:	f025 0503 	bic.w	r5, r5, #3
 8003b18:	3508      	adds	r5, #8
 8003b1a:	2d0c      	cmp	r5, #12
 8003b1c:	bf38      	it	cc
 8003b1e:	250c      	movcc	r5, #12
 8003b20:	2d00      	cmp	r5, #0
 8003b22:	4606      	mov	r6, r0
 8003b24:	db01      	blt.n	8003b2a <_malloc_r+0x1a>
 8003b26:	42a9      	cmp	r1, r5
 8003b28:	d903      	bls.n	8003b32 <_malloc_r+0x22>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	6033      	str	r3, [r6, #0]
 8003b2e:	2000      	movs	r0, #0
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
 8003b32:	f000 f8bb 	bl	8003cac <__malloc_lock>
 8003b36:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <_malloc_r+0xac>)
 8003b38:	6814      	ldr	r4, [r2, #0]
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	b991      	cbnz	r1, 8003b64 <_malloc_r+0x54>
 8003b3e:	4c20      	ldr	r4, [pc, #128]	; (8003bc0 <_malloc_r+0xb0>)
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	b91b      	cbnz	r3, 8003b4c <_malloc_r+0x3c>
 8003b44:	4630      	mov	r0, r6
 8003b46:	f000 f83d 	bl	8003bc4 <_sbrk_r>
 8003b4a:	6020      	str	r0, [r4, #0]
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f000 f838 	bl	8003bc4 <_sbrk_r>
 8003b54:	1c43      	adds	r3, r0, #1
 8003b56:	d124      	bne.n	8003ba2 <_malloc_r+0x92>
 8003b58:	230c      	movs	r3, #12
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	6033      	str	r3, [r6, #0]
 8003b5e:	f000 f8a6 	bl	8003cae <__malloc_unlock>
 8003b62:	e7e4      	b.n	8003b2e <_malloc_r+0x1e>
 8003b64:	680b      	ldr	r3, [r1, #0]
 8003b66:	1b5b      	subs	r3, r3, r5
 8003b68:	d418      	bmi.n	8003b9c <_malloc_r+0x8c>
 8003b6a:	2b0b      	cmp	r3, #11
 8003b6c:	d90f      	bls.n	8003b8e <_malloc_r+0x7e>
 8003b6e:	600b      	str	r3, [r1, #0]
 8003b70:	18cc      	adds	r4, r1, r3
 8003b72:	50cd      	str	r5, [r1, r3]
 8003b74:	4630      	mov	r0, r6
 8003b76:	f000 f89a 	bl	8003cae <__malloc_unlock>
 8003b7a:	f104 000b 	add.w	r0, r4, #11
 8003b7e:	1d23      	adds	r3, r4, #4
 8003b80:	f020 0007 	bic.w	r0, r0, #7
 8003b84:	1ac3      	subs	r3, r0, r3
 8003b86:	d0d3      	beq.n	8003b30 <_malloc_r+0x20>
 8003b88:	425a      	negs	r2, r3
 8003b8a:	50e2      	str	r2, [r4, r3]
 8003b8c:	e7d0      	b.n	8003b30 <_malloc_r+0x20>
 8003b8e:	684b      	ldr	r3, [r1, #4]
 8003b90:	428c      	cmp	r4, r1
 8003b92:	bf16      	itet	ne
 8003b94:	6063      	strne	r3, [r4, #4]
 8003b96:	6013      	streq	r3, [r2, #0]
 8003b98:	460c      	movne	r4, r1
 8003b9a:	e7eb      	b.n	8003b74 <_malloc_r+0x64>
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	6849      	ldr	r1, [r1, #4]
 8003ba0:	e7cc      	b.n	8003b3c <_malloc_r+0x2c>
 8003ba2:	1cc4      	adds	r4, r0, #3
 8003ba4:	f024 0403 	bic.w	r4, r4, #3
 8003ba8:	42a0      	cmp	r0, r4
 8003baa:	d005      	beq.n	8003bb8 <_malloc_r+0xa8>
 8003bac:	1a21      	subs	r1, r4, r0
 8003bae:	4630      	mov	r0, r6
 8003bb0:	f000 f808 	bl	8003bc4 <_sbrk_r>
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d0cf      	beq.n	8003b58 <_malloc_r+0x48>
 8003bb8:	6025      	str	r5, [r4, #0]
 8003bba:	e7db      	b.n	8003b74 <_malloc_r+0x64>
 8003bbc:	200004b8 	.word	0x200004b8
 8003bc0:	200004bc 	.word	0x200004bc

08003bc4 <_sbrk_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	4c05      	ldr	r4, [pc, #20]	; (8003be0 <_sbrk_r+0x1c>)
 8003bca:	4605      	mov	r5, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	6023      	str	r3, [r4, #0]
 8003bd0:	f7fd fa48 	bl	8001064 <_sbrk>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_sbrk_r+0x1a>
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_sbrk_r+0x1a>
 8003bdc:	602b      	str	r3, [r5, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	2000063c 	.word	0x2000063c

08003be4 <_raise_r>:
 8003be4:	291f      	cmp	r1, #31
 8003be6:	b538      	push	{r3, r4, r5, lr}
 8003be8:	4604      	mov	r4, r0
 8003bea:	460d      	mov	r5, r1
 8003bec:	d904      	bls.n	8003bf8 <_raise_r+0x14>
 8003bee:	2316      	movs	r3, #22
 8003bf0:	6003      	str	r3, [r0, #0]
 8003bf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003bfa:	b112      	cbz	r2, 8003c02 <_raise_r+0x1e>
 8003bfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003c00:	b94b      	cbnz	r3, 8003c16 <_raise_r+0x32>
 8003c02:	4620      	mov	r0, r4
 8003c04:	f000 f830 	bl	8003c68 <_getpid_r>
 8003c08:	462a      	mov	r2, r5
 8003c0a:	4601      	mov	r1, r0
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c12:	f000 b817 	b.w	8003c44 <_kill_r>
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d00a      	beq.n	8003c30 <_raise_r+0x4c>
 8003c1a:	1c59      	adds	r1, r3, #1
 8003c1c:	d103      	bne.n	8003c26 <_raise_r+0x42>
 8003c1e:	2316      	movs	r3, #22
 8003c20:	6003      	str	r3, [r0, #0]
 8003c22:	2001      	movs	r0, #1
 8003c24:	e7e7      	b.n	8003bf6 <_raise_r+0x12>
 8003c26:	2400      	movs	r4, #0
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c2e:	4798      	blx	r3
 8003c30:	2000      	movs	r0, #0
 8003c32:	e7e0      	b.n	8003bf6 <_raise_r+0x12>

08003c34 <raise>:
 8003c34:	4b02      	ldr	r3, [pc, #8]	; (8003c40 <raise+0xc>)
 8003c36:	4601      	mov	r1, r0
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	f7ff bfd3 	b.w	8003be4 <_raise_r>
 8003c3e:	bf00      	nop
 8003c40:	2000000c 	.word	0x2000000c

08003c44 <_kill_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	2300      	movs	r3, #0
 8003c48:	4c06      	ldr	r4, [pc, #24]	; (8003c64 <_kill_r+0x20>)
 8003c4a:	4605      	mov	r5, r0
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	4611      	mov	r1, r2
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	f7fd f9ec 	bl	800102e <_kill>
 8003c56:	1c43      	adds	r3, r0, #1
 8003c58:	d102      	bne.n	8003c60 <_kill_r+0x1c>
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	b103      	cbz	r3, 8003c60 <_kill_r+0x1c>
 8003c5e:	602b      	str	r3, [r5, #0]
 8003c60:	bd38      	pop	{r3, r4, r5, pc}
 8003c62:	bf00      	nop
 8003c64:	2000063c 	.word	0x2000063c

08003c68 <_getpid_r>:
 8003c68:	f7fd b9da 	b.w	8001020 <_getpid>

08003c6c <siprintf>:
 8003c6c:	b40e      	push	{r1, r2, r3}
 8003c6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c72:	b500      	push	{lr}
 8003c74:	b09c      	sub	sp, #112	; 0x70
 8003c76:	ab1d      	add	r3, sp, #116	; 0x74
 8003c78:	9002      	str	r0, [sp, #8]
 8003c7a:	9006      	str	r0, [sp, #24]
 8003c7c:	9107      	str	r1, [sp, #28]
 8003c7e:	9104      	str	r1, [sp, #16]
 8003c80:	4808      	ldr	r0, [pc, #32]	; (8003ca4 <siprintf+0x38>)
 8003c82:	4909      	ldr	r1, [pc, #36]	; (8003ca8 <siprintf+0x3c>)
 8003c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c88:	9105      	str	r1, [sp, #20]
 8003c8a:	6800      	ldr	r0, [r0, #0]
 8003c8c:	a902      	add	r1, sp, #8
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	f000 f868 	bl	8003d64 <_svfiprintf_r>
 8003c94:	2200      	movs	r2, #0
 8003c96:	9b02      	ldr	r3, [sp, #8]
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	b01c      	add	sp, #112	; 0x70
 8003c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ca0:	b003      	add	sp, #12
 8003ca2:	4770      	bx	lr
 8003ca4:	2000000c 	.word	0x2000000c
 8003ca8:	ffff0208 	.word	0xffff0208

08003cac <__malloc_lock>:
 8003cac:	4770      	bx	lr

08003cae <__malloc_unlock>:
 8003cae:	4770      	bx	lr

08003cb0 <__ssputs_r>:
 8003cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb4:	688e      	ldr	r6, [r1, #8]
 8003cb6:	4682      	mov	sl, r0
 8003cb8:	429e      	cmp	r6, r3
 8003cba:	460c      	mov	r4, r1
 8003cbc:	4690      	mov	r8, r2
 8003cbe:	4699      	mov	r9, r3
 8003cc0:	d837      	bhi.n	8003d32 <__ssputs_r+0x82>
 8003cc2:	898a      	ldrh	r2, [r1, #12]
 8003cc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cc8:	d031      	beq.n	8003d2e <__ssputs_r+0x7e>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	6825      	ldr	r5, [r4, #0]
 8003cce:	6909      	ldr	r1, [r1, #16]
 8003cd0:	1a6f      	subs	r7, r5, r1
 8003cd2:	6965      	ldr	r5, [r4, #20]
 8003cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cdc:	f109 0301 	add.w	r3, r9, #1
 8003ce0:	443b      	add	r3, r7
 8003ce2:	429d      	cmp	r5, r3
 8003ce4:	bf38      	it	cc
 8003ce6:	461d      	movcc	r5, r3
 8003ce8:	0553      	lsls	r3, r2, #21
 8003cea:	d530      	bpl.n	8003d4e <__ssputs_r+0x9e>
 8003cec:	4629      	mov	r1, r5
 8003cee:	f7ff ff0f 	bl	8003b10 <_malloc_r>
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	b950      	cbnz	r0, 8003d0c <__ssputs_r+0x5c>
 8003cf6:	230c      	movs	r3, #12
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cfc:	f8ca 3000 	str.w	r3, [sl]
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d06:	81a3      	strh	r3, [r4, #12]
 8003d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0c:	463a      	mov	r2, r7
 8003d0e:	6921      	ldr	r1, [r4, #16]
 8003d10:	f000 fab6 	bl	8004280 <memcpy>
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d1e:	81a3      	strh	r3, [r4, #12]
 8003d20:	6126      	str	r6, [r4, #16]
 8003d22:	443e      	add	r6, r7
 8003d24:	6026      	str	r6, [r4, #0]
 8003d26:	464e      	mov	r6, r9
 8003d28:	6165      	str	r5, [r4, #20]
 8003d2a:	1bed      	subs	r5, r5, r7
 8003d2c:	60a5      	str	r5, [r4, #8]
 8003d2e:	454e      	cmp	r6, r9
 8003d30:	d900      	bls.n	8003d34 <__ssputs_r+0x84>
 8003d32:	464e      	mov	r6, r9
 8003d34:	4632      	mov	r2, r6
 8003d36:	4641      	mov	r1, r8
 8003d38:	6820      	ldr	r0, [r4, #0]
 8003d3a:	f000 faac 	bl	8004296 <memmove>
 8003d3e:	68a3      	ldr	r3, [r4, #8]
 8003d40:	2000      	movs	r0, #0
 8003d42:	1b9b      	subs	r3, r3, r6
 8003d44:	60a3      	str	r3, [r4, #8]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	441e      	add	r6, r3
 8003d4a:	6026      	str	r6, [r4, #0]
 8003d4c:	e7dc      	b.n	8003d08 <__ssputs_r+0x58>
 8003d4e:	462a      	mov	r2, r5
 8003d50:	f000 faba 	bl	80042c8 <_realloc_r>
 8003d54:	4606      	mov	r6, r0
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d1e2      	bne.n	8003d20 <__ssputs_r+0x70>
 8003d5a:	6921      	ldr	r1, [r4, #16]
 8003d5c:	4650      	mov	r0, sl
 8003d5e:	f7ff fe8b 	bl	8003a78 <_free_r>
 8003d62:	e7c8      	b.n	8003cf6 <__ssputs_r+0x46>

08003d64 <_svfiprintf_r>:
 8003d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d68:	461d      	mov	r5, r3
 8003d6a:	898b      	ldrh	r3, [r1, #12]
 8003d6c:	b09d      	sub	sp, #116	; 0x74
 8003d6e:	061f      	lsls	r7, r3, #24
 8003d70:	4680      	mov	r8, r0
 8003d72:	460c      	mov	r4, r1
 8003d74:	4616      	mov	r6, r2
 8003d76:	d50f      	bpl.n	8003d98 <_svfiprintf_r+0x34>
 8003d78:	690b      	ldr	r3, [r1, #16]
 8003d7a:	b96b      	cbnz	r3, 8003d98 <_svfiprintf_r+0x34>
 8003d7c:	2140      	movs	r1, #64	; 0x40
 8003d7e:	f7ff fec7 	bl	8003b10 <_malloc_r>
 8003d82:	6020      	str	r0, [r4, #0]
 8003d84:	6120      	str	r0, [r4, #16]
 8003d86:	b928      	cbnz	r0, 8003d94 <_svfiprintf_r+0x30>
 8003d88:	230c      	movs	r3, #12
 8003d8a:	f8c8 3000 	str.w	r3, [r8]
 8003d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d92:	e0c8      	b.n	8003f26 <_svfiprintf_r+0x1c2>
 8003d94:	2340      	movs	r3, #64	; 0x40
 8003d96:	6163      	str	r3, [r4, #20]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003da2:	2330      	movs	r3, #48	; 0x30
 8003da4:	f04f 0b01 	mov.w	fp, #1
 8003da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dac:	9503      	str	r5, [sp, #12]
 8003dae:	4637      	mov	r7, r6
 8003db0:	463d      	mov	r5, r7
 8003db2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003db6:	b10b      	cbz	r3, 8003dbc <_svfiprintf_r+0x58>
 8003db8:	2b25      	cmp	r3, #37	; 0x25
 8003dba:	d13e      	bne.n	8003e3a <_svfiprintf_r+0xd6>
 8003dbc:	ebb7 0a06 	subs.w	sl, r7, r6
 8003dc0:	d00b      	beq.n	8003dda <_svfiprintf_r+0x76>
 8003dc2:	4653      	mov	r3, sl
 8003dc4:	4632      	mov	r2, r6
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4640      	mov	r0, r8
 8003dca:	f7ff ff71 	bl	8003cb0 <__ssputs_r>
 8003dce:	3001      	adds	r0, #1
 8003dd0:	f000 80a4 	beq.w	8003f1c <_svfiprintf_r+0x1b8>
 8003dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dd6:	4453      	add	r3, sl
 8003dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dda:	783b      	ldrb	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 809d 	beq.w	8003f1c <_svfiprintf_r+0x1b8>
 8003de2:	2300      	movs	r3, #0
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dec:	9304      	str	r3, [sp, #16]
 8003dee:	9307      	str	r3, [sp, #28]
 8003df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003df4:	931a      	str	r3, [sp, #104]	; 0x68
 8003df6:	462f      	mov	r7, r5
 8003df8:	2205      	movs	r2, #5
 8003dfa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003dfe:	4850      	ldr	r0, [pc, #320]	; (8003f40 <_svfiprintf_r+0x1dc>)
 8003e00:	f000 fa30 	bl	8004264 <memchr>
 8003e04:	9b04      	ldr	r3, [sp, #16]
 8003e06:	b9d0      	cbnz	r0, 8003e3e <_svfiprintf_r+0xda>
 8003e08:	06d9      	lsls	r1, r3, #27
 8003e0a:	bf44      	itt	mi
 8003e0c:	2220      	movmi	r2, #32
 8003e0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e12:	071a      	lsls	r2, r3, #28
 8003e14:	bf44      	itt	mi
 8003e16:	222b      	movmi	r2, #43	; 0x2b
 8003e18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e1c:	782a      	ldrb	r2, [r5, #0]
 8003e1e:	2a2a      	cmp	r2, #42	; 0x2a
 8003e20:	d015      	beq.n	8003e4e <_svfiprintf_r+0xea>
 8003e22:	462f      	mov	r7, r5
 8003e24:	2000      	movs	r0, #0
 8003e26:	250a      	movs	r5, #10
 8003e28:	9a07      	ldr	r2, [sp, #28]
 8003e2a:	4639      	mov	r1, r7
 8003e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e30:	3b30      	subs	r3, #48	; 0x30
 8003e32:	2b09      	cmp	r3, #9
 8003e34:	d94d      	bls.n	8003ed2 <_svfiprintf_r+0x16e>
 8003e36:	b1b8      	cbz	r0, 8003e68 <_svfiprintf_r+0x104>
 8003e38:	e00f      	b.n	8003e5a <_svfiprintf_r+0xf6>
 8003e3a:	462f      	mov	r7, r5
 8003e3c:	e7b8      	b.n	8003db0 <_svfiprintf_r+0x4c>
 8003e3e:	4a40      	ldr	r2, [pc, #256]	; (8003f40 <_svfiprintf_r+0x1dc>)
 8003e40:	463d      	mov	r5, r7
 8003e42:	1a80      	subs	r0, r0, r2
 8003e44:	fa0b f000 	lsl.w	r0, fp, r0
 8003e48:	4318      	orrs	r0, r3
 8003e4a:	9004      	str	r0, [sp, #16]
 8003e4c:	e7d3      	b.n	8003df6 <_svfiprintf_r+0x92>
 8003e4e:	9a03      	ldr	r2, [sp, #12]
 8003e50:	1d11      	adds	r1, r2, #4
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	9103      	str	r1, [sp, #12]
 8003e56:	2a00      	cmp	r2, #0
 8003e58:	db01      	blt.n	8003e5e <_svfiprintf_r+0xfa>
 8003e5a:	9207      	str	r2, [sp, #28]
 8003e5c:	e004      	b.n	8003e68 <_svfiprintf_r+0x104>
 8003e5e:	4252      	negs	r2, r2
 8003e60:	f043 0302 	orr.w	r3, r3, #2
 8003e64:	9207      	str	r2, [sp, #28]
 8003e66:	9304      	str	r3, [sp, #16]
 8003e68:	783b      	ldrb	r3, [r7, #0]
 8003e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e6c:	d10c      	bne.n	8003e88 <_svfiprintf_r+0x124>
 8003e6e:	787b      	ldrb	r3, [r7, #1]
 8003e70:	2b2a      	cmp	r3, #42	; 0x2a
 8003e72:	d133      	bne.n	8003edc <_svfiprintf_r+0x178>
 8003e74:	9b03      	ldr	r3, [sp, #12]
 8003e76:	3702      	adds	r7, #2
 8003e78:	1d1a      	adds	r2, r3, #4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	9203      	str	r2, [sp, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bfb8      	it	lt
 8003e82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e86:	9305      	str	r3, [sp, #20]
 8003e88:	4d2e      	ldr	r5, [pc, #184]	; (8003f44 <_svfiprintf_r+0x1e0>)
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	7839      	ldrb	r1, [r7, #0]
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f000 f9e8 	bl	8004264 <memchr>
 8003e94:	b138      	cbz	r0, 8003ea6 <_svfiprintf_r+0x142>
 8003e96:	2340      	movs	r3, #64	; 0x40
 8003e98:	1b40      	subs	r0, r0, r5
 8003e9a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e9e:	9b04      	ldr	r3, [sp, #16]
 8003ea0:	3701      	adds	r7, #1
 8003ea2:	4303      	orrs	r3, r0
 8003ea4:	9304      	str	r3, [sp, #16]
 8003ea6:	7839      	ldrb	r1, [r7, #0]
 8003ea8:	2206      	movs	r2, #6
 8003eaa:	4827      	ldr	r0, [pc, #156]	; (8003f48 <_svfiprintf_r+0x1e4>)
 8003eac:	1c7e      	adds	r6, r7, #1
 8003eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eb2:	f000 f9d7 	bl	8004264 <memchr>
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d038      	beq.n	8003f2c <_svfiprintf_r+0x1c8>
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <_svfiprintf_r+0x1e8>)
 8003ebc:	bb13      	cbnz	r3, 8003f04 <_svfiprintf_r+0x1a0>
 8003ebe:	9b03      	ldr	r3, [sp, #12]
 8003ec0:	3307      	adds	r3, #7
 8003ec2:	f023 0307 	bic.w	r3, r3, #7
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	9303      	str	r3, [sp, #12]
 8003eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ecc:	444b      	add	r3, r9
 8003ece:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed0:	e76d      	b.n	8003dae <_svfiprintf_r+0x4a>
 8003ed2:	fb05 3202 	mla	r2, r5, r2, r3
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	460f      	mov	r7, r1
 8003eda:	e7a6      	b.n	8003e2a <_svfiprintf_r+0xc6>
 8003edc:	2300      	movs	r3, #0
 8003ede:	250a      	movs	r5, #10
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	3701      	adds	r7, #1
 8003ee4:	9305      	str	r3, [sp, #20]
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eec:	3a30      	subs	r2, #48	; 0x30
 8003eee:	2a09      	cmp	r2, #9
 8003ef0:	d903      	bls.n	8003efa <_svfiprintf_r+0x196>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0c8      	beq.n	8003e88 <_svfiprintf_r+0x124>
 8003ef6:	9105      	str	r1, [sp, #20]
 8003ef8:	e7c6      	b.n	8003e88 <_svfiprintf_r+0x124>
 8003efa:	fb05 2101 	mla	r1, r5, r1, r2
 8003efe:	2301      	movs	r3, #1
 8003f00:	4607      	mov	r7, r0
 8003f02:	e7f0      	b.n	8003ee6 <_svfiprintf_r+0x182>
 8003f04:	ab03      	add	r3, sp, #12
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	4622      	mov	r2, r4
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <_svfiprintf_r+0x1ec>)
 8003f0c:	a904      	add	r1, sp, #16
 8003f0e:	4640      	mov	r0, r8
 8003f10:	f3af 8000 	nop.w
 8003f14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003f18:	4681      	mov	r9, r0
 8003f1a:	d1d6      	bne.n	8003eca <_svfiprintf_r+0x166>
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	065b      	lsls	r3, r3, #25
 8003f20:	f53f af35 	bmi.w	8003d8e <_svfiprintf_r+0x2a>
 8003f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f26:	b01d      	add	sp, #116	; 0x74
 8003f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2c:	ab03      	add	r3, sp, #12
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4622      	mov	r2, r4
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <_svfiprintf_r+0x1ec>)
 8003f34:	a904      	add	r1, sp, #16
 8003f36:	4640      	mov	r0, r8
 8003f38:	f000 f882 	bl	8004040 <_printf_i>
 8003f3c:	e7ea      	b.n	8003f14 <_svfiprintf_r+0x1b0>
 8003f3e:	bf00      	nop
 8003f40:	080043d0 	.word	0x080043d0
 8003f44:	080043d6 	.word	0x080043d6
 8003f48:	080043da 	.word	0x080043da
 8003f4c:	00000000 	.word	0x00000000
 8003f50:	08003cb1 	.word	0x08003cb1

08003f54 <_printf_common>:
 8003f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f58:	4691      	mov	r9, r2
 8003f5a:	461f      	mov	r7, r3
 8003f5c:	688a      	ldr	r2, [r1, #8]
 8003f5e:	690b      	ldr	r3, [r1, #16]
 8003f60:	4606      	mov	r6, r0
 8003f62:	4293      	cmp	r3, r2
 8003f64:	bfb8      	it	lt
 8003f66:	4613      	movlt	r3, r2
 8003f68:	f8c9 3000 	str.w	r3, [r9]
 8003f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f70:	460c      	mov	r4, r1
 8003f72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f76:	b112      	cbz	r2, 8003f7e <_printf_common+0x2a>
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f8c9 3000 	str.w	r3, [r9]
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	0699      	lsls	r1, r3, #26
 8003f82:	bf42      	ittt	mi
 8003f84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f88:	3302      	addmi	r3, #2
 8003f8a:	f8c9 3000 	strmi.w	r3, [r9]
 8003f8e:	6825      	ldr	r5, [r4, #0]
 8003f90:	f015 0506 	ands.w	r5, r5, #6
 8003f94:	d107      	bne.n	8003fa6 <_printf_common+0x52>
 8003f96:	f104 0a19 	add.w	sl, r4, #25
 8003f9a:	68e3      	ldr	r3, [r4, #12]
 8003f9c:	f8d9 2000 	ldr.w	r2, [r9]
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	42ab      	cmp	r3, r5
 8003fa4:	dc29      	bgt.n	8003ffa <_printf_common+0xa6>
 8003fa6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003faa:	6822      	ldr	r2, [r4, #0]
 8003fac:	3300      	adds	r3, #0
 8003fae:	bf18      	it	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	0692      	lsls	r2, r2, #26
 8003fb4:	d42e      	bmi.n	8004014 <_printf_common+0xc0>
 8003fb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fba:	4639      	mov	r1, r7
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	47c0      	blx	r8
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d021      	beq.n	8004008 <_printf_common+0xb4>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	68e5      	ldr	r5, [r4, #12]
 8003fc8:	f003 0306 	and.w	r3, r3, #6
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	bf18      	it	ne
 8003fd0:	2500      	movne	r5, #0
 8003fd2:	f8d9 2000 	ldr.w	r2, [r9]
 8003fd6:	f04f 0900 	mov.w	r9, #0
 8003fda:	bf08      	it	eq
 8003fdc:	1aad      	subeq	r5, r5, r2
 8003fde:	68a3      	ldr	r3, [r4, #8]
 8003fe0:	6922      	ldr	r2, [r4, #16]
 8003fe2:	bf08      	it	eq
 8003fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	bfc4      	itt	gt
 8003fec:	1a9b      	subgt	r3, r3, r2
 8003fee:	18ed      	addgt	r5, r5, r3
 8003ff0:	341a      	adds	r4, #26
 8003ff2:	454d      	cmp	r5, r9
 8003ff4:	d11a      	bne.n	800402c <_printf_common+0xd8>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e008      	b.n	800400c <_printf_common+0xb8>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4652      	mov	r2, sl
 8003ffe:	4639      	mov	r1, r7
 8004000:	4630      	mov	r0, r6
 8004002:	47c0      	blx	r8
 8004004:	3001      	adds	r0, #1
 8004006:	d103      	bne.n	8004010 <_printf_common+0xbc>
 8004008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800400c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004010:	3501      	adds	r5, #1
 8004012:	e7c2      	b.n	8003f9a <_printf_common+0x46>
 8004014:	2030      	movs	r0, #48	; 0x30
 8004016:	18e1      	adds	r1, r4, r3
 8004018:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004022:	4422      	add	r2, r4
 8004024:	3302      	adds	r3, #2
 8004026:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800402a:	e7c4      	b.n	8003fb6 <_printf_common+0x62>
 800402c:	2301      	movs	r3, #1
 800402e:	4622      	mov	r2, r4
 8004030:	4639      	mov	r1, r7
 8004032:	4630      	mov	r0, r6
 8004034:	47c0      	blx	r8
 8004036:	3001      	adds	r0, #1
 8004038:	d0e6      	beq.n	8004008 <_printf_common+0xb4>
 800403a:	f109 0901 	add.w	r9, r9, #1
 800403e:	e7d8      	b.n	8003ff2 <_printf_common+0x9e>

08004040 <_printf_i>:
 8004040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004044:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004048:	460c      	mov	r4, r1
 800404a:	7e09      	ldrb	r1, [r1, #24]
 800404c:	b085      	sub	sp, #20
 800404e:	296e      	cmp	r1, #110	; 0x6e
 8004050:	4617      	mov	r7, r2
 8004052:	4606      	mov	r6, r0
 8004054:	4698      	mov	r8, r3
 8004056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004058:	f000 80b3 	beq.w	80041c2 <_printf_i+0x182>
 800405c:	d822      	bhi.n	80040a4 <_printf_i+0x64>
 800405e:	2963      	cmp	r1, #99	; 0x63
 8004060:	d036      	beq.n	80040d0 <_printf_i+0x90>
 8004062:	d80a      	bhi.n	800407a <_printf_i+0x3a>
 8004064:	2900      	cmp	r1, #0
 8004066:	f000 80b9 	beq.w	80041dc <_printf_i+0x19c>
 800406a:	2958      	cmp	r1, #88	; 0x58
 800406c:	f000 8083 	beq.w	8004176 <_printf_i+0x136>
 8004070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004074:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004078:	e032      	b.n	80040e0 <_printf_i+0xa0>
 800407a:	2964      	cmp	r1, #100	; 0x64
 800407c:	d001      	beq.n	8004082 <_printf_i+0x42>
 800407e:	2969      	cmp	r1, #105	; 0x69
 8004080:	d1f6      	bne.n	8004070 <_printf_i+0x30>
 8004082:	6820      	ldr	r0, [r4, #0]
 8004084:	6813      	ldr	r3, [r2, #0]
 8004086:	0605      	lsls	r5, r0, #24
 8004088:	f103 0104 	add.w	r1, r3, #4
 800408c:	d52a      	bpl.n	80040e4 <_printf_i+0xa4>
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6011      	str	r1, [r2, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	da03      	bge.n	800409e <_printf_i+0x5e>
 8004096:	222d      	movs	r2, #45	; 0x2d
 8004098:	425b      	negs	r3, r3
 800409a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800409e:	486f      	ldr	r0, [pc, #444]	; (800425c <_printf_i+0x21c>)
 80040a0:	220a      	movs	r2, #10
 80040a2:	e039      	b.n	8004118 <_printf_i+0xd8>
 80040a4:	2973      	cmp	r1, #115	; 0x73
 80040a6:	f000 809d 	beq.w	80041e4 <_printf_i+0x1a4>
 80040aa:	d808      	bhi.n	80040be <_printf_i+0x7e>
 80040ac:	296f      	cmp	r1, #111	; 0x6f
 80040ae:	d020      	beq.n	80040f2 <_printf_i+0xb2>
 80040b0:	2970      	cmp	r1, #112	; 0x70
 80040b2:	d1dd      	bne.n	8004070 <_printf_i+0x30>
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	f043 0320 	orr.w	r3, r3, #32
 80040ba:	6023      	str	r3, [r4, #0]
 80040bc:	e003      	b.n	80040c6 <_printf_i+0x86>
 80040be:	2975      	cmp	r1, #117	; 0x75
 80040c0:	d017      	beq.n	80040f2 <_printf_i+0xb2>
 80040c2:	2978      	cmp	r1, #120	; 0x78
 80040c4:	d1d4      	bne.n	8004070 <_printf_i+0x30>
 80040c6:	2378      	movs	r3, #120	; 0x78
 80040c8:	4865      	ldr	r0, [pc, #404]	; (8004260 <_printf_i+0x220>)
 80040ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040ce:	e055      	b.n	800417c <_printf_i+0x13c>
 80040d0:	6813      	ldr	r3, [r2, #0]
 80040d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040d6:	1d19      	adds	r1, r3, #4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6011      	str	r1, [r2, #0]
 80040dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040e0:	2301      	movs	r3, #1
 80040e2:	e08c      	b.n	80041fe <_printf_i+0x1be>
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040ea:	6011      	str	r1, [r2, #0]
 80040ec:	bf18      	it	ne
 80040ee:	b21b      	sxthne	r3, r3
 80040f0:	e7cf      	b.n	8004092 <_printf_i+0x52>
 80040f2:	6813      	ldr	r3, [r2, #0]
 80040f4:	6825      	ldr	r5, [r4, #0]
 80040f6:	1d18      	adds	r0, r3, #4
 80040f8:	6010      	str	r0, [r2, #0]
 80040fa:	0628      	lsls	r0, r5, #24
 80040fc:	d501      	bpl.n	8004102 <_printf_i+0xc2>
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	e002      	b.n	8004108 <_printf_i+0xc8>
 8004102:	0668      	lsls	r0, r5, #25
 8004104:	d5fb      	bpl.n	80040fe <_printf_i+0xbe>
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	296f      	cmp	r1, #111	; 0x6f
 800410a:	bf14      	ite	ne
 800410c:	220a      	movne	r2, #10
 800410e:	2208      	moveq	r2, #8
 8004110:	4852      	ldr	r0, [pc, #328]	; (800425c <_printf_i+0x21c>)
 8004112:	2100      	movs	r1, #0
 8004114:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004118:	6865      	ldr	r5, [r4, #4]
 800411a:	2d00      	cmp	r5, #0
 800411c:	60a5      	str	r5, [r4, #8]
 800411e:	f2c0 8095 	blt.w	800424c <_printf_i+0x20c>
 8004122:	6821      	ldr	r1, [r4, #0]
 8004124:	f021 0104 	bic.w	r1, r1, #4
 8004128:	6021      	str	r1, [r4, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d13d      	bne.n	80041aa <_printf_i+0x16a>
 800412e:	2d00      	cmp	r5, #0
 8004130:	f040 808e 	bne.w	8004250 <_printf_i+0x210>
 8004134:	4665      	mov	r5, ip
 8004136:	2a08      	cmp	r2, #8
 8004138:	d10b      	bne.n	8004152 <_printf_i+0x112>
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	07db      	lsls	r3, r3, #31
 800413e:	d508      	bpl.n	8004152 <_printf_i+0x112>
 8004140:	6923      	ldr	r3, [r4, #16]
 8004142:	6862      	ldr	r2, [r4, #4]
 8004144:	429a      	cmp	r2, r3
 8004146:	bfde      	ittt	le
 8004148:	2330      	movle	r3, #48	; 0x30
 800414a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800414e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004152:	ebac 0305 	sub.w	r3, ip, r5
 8004156:	6123      	str	r3, [r4, #16]
 8004158:	f8cd 8000 	str.w	r8, [sp]
 800415c:	463b      	mov	r3, r7
 800415e:	aa03      	add	r2, sp, #12
 8004160:	4621      	mov	r1, r4
 8004162:	4630      	mov	r0, r6
 8004164:	f7ff fef6 	bl	8003f54 <_printf_common>
 8004168:	3001      	adds	r0, #1
 800416a:	d14d      	bne.n	8004208 <_printf_i+0x1c8>
 800416c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004170:	b005      	add	sp, #20
 8004172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004176:	4839      	ldr	r0, [pc, #228]	; (800425c <_printf_i+0x21c>)
 8004178:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800417c:	6813      	ldr	r3, [r2, #0]
 800417e:	6821      	ldr	r1, [r4, #0]
 8004180:	1d1d      	adds	r5, r3, #4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6015      	str	r5, [r2, #0]
 8004186:	060a      	lsls	r2, r1, #24
 8004188:	d50b      	bpl.n	80041a2 <_printf_i+0x162>
 800418a:	07ca      	lsls	r2, r1, #31
 800418c:	bf44      	itt	mi
 800418e:	f041 0120 	orrmi.w	r1, r1, #32
 8004192:	6021      	strmi	r1, [r4, #0]
 8004194:	b91b      	cbnz	r3, 800419e <_printf_i+0x15e>
 8004196:	6822      	ldr	r2, [r4, #0]
 8004198:	f022 0220 	bic.w	r2, r2, #32
 800419c:	6022      	str	r2, [r4, #0]
 800419e:	2210      	movs	r2, #16
 80041a0:	e7b7      	b.n	8004112 <_printf_i+0xd2>
 80041a2:	064d      	lsls	r5, r1, #25
 80041a4:	bf48      	it	mi
 80041a6:	b29b      	uxthmi	r3, r3
 80041a8:	e7ef      	b.n	800418a <_printf_i+0x14a>
 80041aa:	4665      	mov	r5, ip
 80041ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80041b0:	fb02 3311 	mls	r3, r2, r1, r3
 80041b4:	5cc3      	ldrb	r3, [r0, r3]
 80041b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80041ba:	460b      	mov	r3, r1
 80041bc:	2900      	cmp	r1, #0
 80041be:	d1f5      	bne.n	80041ac <_printf_i+0x16c>
 80041c0:	e7b9      	b.n	8004136 <_printf_i+0xf6>
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	6825      	ldr	r5, [r4, #0]
 80041c6:	1d18      	adds	r0, r3, #4
 80041c8:	6961      	ldr	r1, [r4, #20]
 80041ca:	6010      	str	r0, [r2, #0]
 80041cc:	0628      	lsls	r0, r5, #24
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	d501      	bpl.n	80041d6 <_printf_i+0x196>
 80041d2:	6019      	str	r1, [r3, #0]
 80041d4:	e002      	b.n	80041dc <_printf_i+0x19c>
 80041d6:	066a      	lsls	r2, r5, #25
 80041d8:	d5fb      	bpl.n	80041d2 <_printf_i+0x192>
 80041da:	8019      	strh	r1, [r3, #0]
 80041dc:	2300      	movs	r3, #0
 80041de:	4665      	mov	r5, ip
 80041e0:	6123      	str	r3, [r4, #16]
 80041e2:	e7b9      	b.n	8004158 <_printf_i+0x118>
 80041e4:	6813      	ldr	r3, [r2, #0]
 80041e6:	1d19      	adds	r1, r3, #4
 80041e8:	6011      	str	r1, [r2, #0]
 80041ea:	681d      	ldr	r5, [r3, #0]
 80041ec:	6862      	ldr	r2, [r4, #4]
 80041ee:	2100      	movs	r1, #0
 80041f0:	4628      	mov	r0, r5
 80041f2:	f000 f837 	bl	8004264 <memchr>
 80041f6:	b108      	cbz	r0, 80041fc <_printf_i+0x1bc>
 80041f8:	1b40      	subs	r0, r0, r5
 80041fa:	6060      	str	r0, [r4, #4]
 80041fc:	6863      	ldr	r3, [r4, #4]
 80041fe:	6123      	str	r3, [r4, #16]
 8004200:	2300      	movs	r3, #0
 8004202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004206:	e7a7      	b.n	8004158 <_printf_i+0x118>
 8004208:	6923      	ldr	r3, [r4, #16]
 800420a:	462a      	mov	r2, r5
 800420c:	4639      	mov	r1, r7
 800420e:	4630      	mov	r0, r6
 8004210:	47c0      	blx	r8
 8004212:	3001      	adds	r0, #1
 8004214:	d0aa      	beq.n	800416c <_printf_i+0x12c>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	079b      	lsls	r3, r3, #30
 800421a:	d413      	bmi.n	8004244 <_printf_i+0x204>
 800421c:	68e0      	ldr	r0, [r4, #12]
 800421e:	9b03      	ldr	r3, [sp, #12]
 8004220:	4298      	cmp	r0, r3
 8004222:	bfb8      	it	lt
 8004224:	4618      	movlt	r0, r3
 8004226:	e7a3      	b.n	8004170 <_printf_i+0x130>
 8004228:	2301      	movs	r3, #1
 800422a:	464a      	mov	r2, r9
 800422c:	4639      	mov	r1, r7
 800422e:	4630      	mov	r0, r6
 8004230:	47c0      	blx	r8
 8004232:	3001      	adds	r0, #1
 8004234:	d09a      	beq.n	800416c <_printf_i+0x12c>
 8004236:	3501      	adds	r5, #1
 8004238:	68e3      	ldr	r3, [r4, #12]
 800423a:	9a03      	ldr	r2, [sp, #12]
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	42ab      	cmp	r3, r5
 8004240:	dcf2      	bgt.n	8004228 <_printf_i+0x1e8>
 8004242:	e7eb      	b.n	800421c <_printf_i+0x1dc>
 8004244:	2500      	movs	r5, #0
 8004246:	f104 0919 	add.w	r9, r4, #25
 800424a:	e7f5      	b.n	8004238 <_printf_i+0x1f8>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ac      	bne.n	80041aa <_printf_i+0x16a>
 8004250:	7803      	ldrb	r3, [r0, #0]
 8004252:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004256:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800425a:	e76c      	b.n	8004136 <_printf_i+0xf6>
 800425c:	080043e1 	.word	0x080043e1
 8004260:	080043f2 	.word	0x080043f2

08004264 <memchr>:
 8004264:	b510      	push	{r4, lr}
 8004266:	b2c9      	uxtb	r1, r1
 8004268:	4402      	add	r2, r0
 800426a:	4290      	cmp	r0, r2
 800426c:	4603      	mov	r3, r0
 800426e:	d101      	bne.n	8004274 <memchr+0x10>
 8004270:	2300      	movs	r3, #0
 8004272:	e003      	b.n	800427c <memchr+0x18>
 8004274:	781c      	ldrb	r4, [r3, #0]
 8004276:	3001      	adds	r0, #1
 8004278:	428c      	cmp	r4, r1
 800427a:	d1f6      	bne.n	800426a <memchr+0x6>
 800427c:	4618      	mov	r0, r3
 800427e:	bd10      	pop	{r4, pc}

08004280 <memcpy>:
 8004280:	b510      	push	{r4, lr}
 8004282:	1e43      	subs	r3, r0, #1
 8004284:	440a      	add	r2, r1
 8004286:	4291      	cmp	r1, r2
 8004288:	d100      	bne.n	800428c <memcpy+0xc>
 800428a:	bd10      	pop	{r4, pc}
 800428c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004290:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004294:	e7f7      	b.n	8004286 <memcpy+0x6>

08004296 <memmove>:
 8004296:	4288      	cmp	r0, r1
 8004298:	b510      	push	{r4, lr}
 800429a:	eb01 0302 	add.w	r3, r1, r2
 800429e:	d807      	bhi.n	80042b0 <memmove+0x1a>
 80042a0:	1e42      	subs	r2, r0, #1
 80042a2:	4299      	cmp	r1, r3
 80042a4:	d00a      	beq.n	80042bc <memmove+0x26>
 80042a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80042ae:	e7f8      	b.n	80042a2 <memmove+0xc>
 80042b0:	4283      	cmp	r3, r0
 80042b2:	d9f5      	bls.n	80042a0 <memmove+0xa>
 80042b4:	1881      	adds	r1, r0, r2
 80042b6:	1ad2      	subs	r2, r2, r3
 80042b8:	42d3      	cmn	r3, r2
 80042ba:	d100      	bne.n	80042be <memmove+0x28>
 80042bc:	bd10      	pop	{r4, pc}
 80042be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80042c6:	e7f7      	b.n	80042b8 <memmove+0x22>

080042c8 <_realloc_r>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	4607      	mov	r7, r0
 80042cc:	4614      	mov	r4, r2
 80042ce:	460e      	mov	r6, r1
 80042d0:	b921      	cbnz	r1, 80042dc <_realloc_r+0x14>
 80042d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042d6:	4611      	mov	r1, r2
 80042d8:	f7ff bc1a 	b.w	8003b10 <_malloc_r>
 80042dc:	b922      	cbnz	r2, 80042e8 <_realloc_r+0x20>
 80042de:	f7ff fbcb 	bl	8003a78 <_free_r>
 80042e2:	4625      	mov	r5, r4
 80042e4:	4628      	mov	r0, r5
 80042e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e8:	f000 f814 	bl	8004314 <_malloc_usable_size_r>
 80042ec:	42a0      	cmp	r0, r4
 80042ee:	d20f      	bcs.n	8004310 <_realloc_r+0x48>
 80042f0:	4621      	mov	r1, r4
 80042f2:	4638      	mov	r0, r7
 80042f4:	f7ff fc0c 	bl	8003b10 <_malloc_r>
 80042f8:	4605      	mov	r5, r0
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d0f2      	beq.n	80042e4 <_realloc_r+0x1c>
 80042fe:	4631      	mov	r1, r6
 8004300:	4622      	mov	r2, r4
 8004302:	f7ff ffbd 	bl	8004280 <memcpy>
 8004306:	4631      	mov	r1, r6
 8004308:	4638      	mov	r0, r7
 800430a:	f7ff fbb5 	bl	8003a78 <_free_r>
 800430e:	e7e9      	b.n	80042e4 <_realloc_r+0x1c>
 8004310:	4635      	mov	r5, r6
 8004312:	e7e7      	b.n	80042e4 <_realloc_r+0x1c>

08004314 <_malloc_usable_size_r>:
 8004314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004318:	1f18      	subs	r0, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	bfbc      	itt	lt
 800431e:	580b      	ldrlt	r3, [r1, r0]
 8004320:	18c0      	addlt	r0, r0, r3
 8004322:	4770      	bx	lr

08004324 <_init>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	bf00      	nop
 8004328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432a:	bc08      	pop	{r3}
 800432c:	469e      	mov	lr, r3
 800432e:	4770      	bx	lr

08004330 <_fini>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr
