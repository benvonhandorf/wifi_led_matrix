
GraphicsDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003960  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b48  08003b48  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b48  08003b48  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b48  08003b48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000070  08003bc4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  08003bc4  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010483  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002596  00000000  00000000  0003051c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00032ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  000339e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b0c2  00000000  00000000  000347f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c46a  00000000  00000000  0004f8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e0fe  00000000  00000000  0005bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9e1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  000e9e98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a54 	.word	0x08003a54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003a54 	.word	0x08003a54

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <cpp_main>:

MatrixDriver matrix(128, 32, MatrixDriver::ScanType::SCAN_16, &htim3);

char buffer[1024];

extern "C" int cpp_main(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af02      	add	r7, sp, #8

//	__HAL_DBGMCU_FREEZE_IWDG();

	uint32_t start = HAL_GetTick();
 8000162:	f000 ff41 	bl	8000fe8 <HAL_GetTick>
 8000166:	60f8      	str	r0, [r7, #12]

	uint8_t color_shift = 1;
 8000168:	2301      	movs	r3, #1
 800016a:	75fb      	strb	r3, [r7, #23]

	for (uint8_t row = 0; row < 32; row++) {
 800016c:	2300      	movs	r3, #0
 800016e:	75bb      	strb	r3, [r7, #22]
 8000170:	7dbb      	ldrb	r3, [r7, #22]
 8000172:	2b1f      	cmp	r3, #31
 8000174:	d84e      	bhi.n	8000214 <cpp_main+0xb8>
		for (uint8_t col = 0; col < 128; col++) {
 8000176:	2300      	movs	r3, #0
 8000178:	757b      	strb	r3, [r7, #21]
 800017a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db44      	blt.n	800020c <cpp_main+0xb0>
			uint8_t r, g, b;

			r = ((row + color_shift) % 3) == 0 ? 255 : 0;
 8000182:	7dba      	ldrb	r2, [r7, #22]
 8000184:	7dfb      	ldrb	r3, [r7, #23]
 8000186:	18d1      	adds	r1, r2, r3
 8000188:	4b68      	ldr	r3, [pc, #416]	; (800032c <cpp_main+0x1d0>)
 800018a:	fb83 3201 	smull	r3, r2, r3, r1
 800018e:	17cb      	asrs	r3, r1, #31
 8000190:	1ad2      	subs	r2, r2, r3
 8000192:	4613      	mov	r3, r2
 8000194:	005b      	lsls	r3, r3, #1
 8000196:	4413      	add	r3, r2
 8000198:	1aca      	subs	r2, r1, r3
 800019a:	2a00      	cmp	r2, #0
 800019c:	d101      	bne.n	80001a2 <cpp_main+0x46>
 800019e:	23ff      	movs	r3, #255	; 0xff
 80001a0:	e000      	b.n	80001a4 <cpp_main+0x48>
 80001a2:	2300      	movs	r3, #0
 80001a4:	72fb      	strb	r3, [r7, #11]
			g = ((row + color_shift) % 3) == 1 ? 255 : 0;
 80001a6:	7dba      	ldrb	r2, [r7, #22]
 80001a8:	7dfb      	ldrb	r3, [r7, #23]
 80001aa:	18d1      	adds	r1, r2, r3
 80001ac:	4b5f      	ldr	r3, [pc, #380]	; (800032c <cpp_main+0x1d0>)
 80001ae:	fb83 3201 	smull	r3, r2, r3, r1
 80001b2:	17cb      	asrs	r3, r1, #31
 80001b4:	1ad2      	subs	r2, r2, r3
 80001b6:	4613      	mov	r3, r2
 80001b8:	005b      	lsls	r3, r3, #1
 80001ba:	4413      	add	r3, r2
 80001bc:	1aca      	subs	r2, r1, r3
 80001be:	2a01      	cmp	r2, #1
 80001c0:	d101      	bne.n	80001c6 <cpp_main+0x6a>
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	e000      	b.n	80001c8 <cpp_main+0x6c>
 80001c6:	2300      	movs	r3, #0
 80001c8:	72bb      	strb	r3, [r7, #10]
			b = ((row + color_shift) % 3) == 2 ? 255 : 0;
 80001ca:	7dba      	ldrb	r2, [r7, #22]
 80001cc:	7dfb      	ldrb	r3, [r7, #23]
 80001ce:	18d1      	adds	r1, r2, r3
 80001d0:	4b56      	ldr	r3, [pc, #344]	; (800032c <cpp_main+0x1d0>)
 80001d2:	fb83 3201 	smull	r3, r2, r3, r1
 80001d6:	17cb      	asrs	r3, r1, #31
 80001d8:	1ad2      	subs	r2, r2, r3
 80001da:	4613      	mov	r3, r2
 80001dc:	005b      	lsls	r3, r3, #1
 80001de:	4413      	add	r3, r2
 80001e0:	1aca      	subs	r2, r1, r3
 80001e2:	2a02      	cmp	r2, #2
 80001e4:	d101      	bne.n	80001ea <cpp_main+0x8e>
 80001e6:	23ff      	movs	r3, #255	; 0xff
 80001e8:	e000      	b.n	80001ec <cpp_main+0x90>
 80001ea:	2300      	movs	r3, #0
 80001ec:	727b      	strb	r3, [r7, #9]

			matrix.SetPixel(col, row, r, g, b);
 80001ee:	7af8      	ldrb	r0, [r7, #11]
 80001f0:	7dba      	ldrb	r2, [r7, #22]
 80001f2:	7d79      	ldrb	r1, [r7, #21]
 80001f4:	7a7b      	ldrb	r3, [r7, #9]
 80001f6:	9301      	str	r3, [sp, #4]
 80001f8:	7abb      	ldrb	r3, [r7, #10]
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	4603      	mov	r3, r0
 80001fe:	484c      	ldr	r0, [pc, #304]	; (8000330 <cpp_main+0x1d4>)
 8000200:	f000 fc1a 	bl	8000a38 <_ZN12MatrixDriver8SetPixelEhhhhh>
		for (uint8_t col = 0; col < 128; col++) {
 8000204:	7d7b      	ldrb	r3, [r7, #21]
 8000206:	3301      	adds	r3, #1
 8000208:	757b      	strb	r3, [r7, #21]
 800020a:	e7b6      	b.n	800017a <cpp_main+0x1e>
	for (uint8_t row = 0; row < 32; row++) {
 800020c:	7dbb      	ldrb	r3, [r7, #22]
 800020e:	3301      	adds	r3, #1
 8000210:	75bb      	strb	r3, [r7, #22]
 8000212:	e7ad      	b.n	8000170 <cpp_main+0x14>
		}
	}

	color_shift++;
 8000214:	7dfb      	ldrb	r3, [r7, #23]
 8000216:	3301      	adds	r3, #1
 8000218:	75fb      	strb	r3, [r7, #23]

	matrix.SwapBuffer();
 800021a:	4845      	ldr	r0, [pc, #276]	; (8000330 <cpp_main+0x1d4>)
 800021c:	f000 fcc3 	bl	8000ba6 <_ZN12MatrixDriver10SwapBufferEv>

	uint32_t duration = HAL_GetTick() - start;
 8000220:	f000 fee2 	bl	8000fe8 <HAL_GetTick>
 8000224:	4602      	mov	r2, r0
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	1ad3      	subs	r3, r2, r3
 800022a:	607b      	str	r3, [r7, #4]

	//matrix.Dump();

	sprintf(buffer, "Setup Duration: %lu\n", duration);
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	4941      	ldr	r1, [pc, #260]	; (8000334 <cpp_main+0x1d8>)
 8000230:	4841      	ldr	r0, [pc, #260]	; (8000338 <cpp_main+0x1dc>)
 8000232:	f003 f8b3 	bl	800339c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 500);
 8000236:	4840      	ldr	r0, [pc, #256]	; (8000338 <cpp_main+0x1dc>)
 8000238:	f7ff ff88 	bl	800014c <strlen>
 800023c:	4603      	mov	r3, r0
 800023e:	b29a      	uxth	r2, r3
 8000240:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000244:	493c      	ldr	r1, [pc, #240]	; (8000338 <cpp_main+0x1dc>)
 8000246:	483d      	ldr	r0, [pc, #244]	; (800033c <cpp_main+0x1e0>)
 8000248:	f002 fde5 	bl	8002e16 <HAL_UART_Transmit>

	HAL_IWDG_Init(&hiwdg);
 800024c:	483c      	ldr	r0, [pc, #240]	; (8000340 <cpp_main+0x1e4>)
 800024e:	f001 fa5d 	bl	800170c <HAL_IWDG_Init>

	matrix.open();
 8000252:	4837      	ldr	r0, [pc, #220]	; (8000330 <cpp_main+0x1d4>)
 8000254:	f000 fb96 	bl	8000984 <_ZN12MatrixDriver4openEv>

	while (1) {
		for (uint8_t row = 0; row < 32; row++) {
 8000258:	2300      	movs	r3, #0
 800025a:	753b      	strb	r3, [r7, #20]
 800025c:	7d3b      	ldrb	r3, [r7, #20]
 800025e:	2b1f      	cmp	r3, #31
 8000260:	d84e      	bhi.n	8000300 <cpp_main+0x1a4>
			for (uint8_t col = 0; col < 128; col++) {
 8000262:	2300      	movs	r3, #0
 8000264:	74fb      	strb	r3, [r7, #19]
 8000266:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800026a:	2b00      	cmp	r3, #0
 800026c:	db44      	blt.n	80002f8 <cpp_main+0x19c>
				uint8_t r, g, b;

				r = ((row + color_shift) % 3) == 0 ? 255 : 0;
 800026e:	7d3a      	ldrb	r2, [r7, #20]
 8000270:	7dfb      	ldrb	r3, [r7, #23]
 8000272:	18d1      	adds	r1, r2, r3
 8000274:	4b2d      	ldr	r3, [pc, #180]	; (800032c <cpp_main+0x1d0>)
 8000276:	fb83 3201 	smull	r3, r2, r3, r1
 800027a:	17cb      	asrs	r3, r1, #31
 800027c:	1ad2      	subs	r2, r2, r3
 800027e:	4613      	mov	r3, r2
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	4413      	add	r3, r2
 8000284:	1aca      	subs	r2, r1, r3
 8000286:	2a00      	cmp	r2, #0
 8000288:	d101      	bne.n	800028e <cpp_main+0x132>
 800028a:	23ff      	movs	r3, #255	; 0xff
 800028c:	e000      	b.n	8000290 <cpp_main+0x134>
 800028e:	2300      	movs	r3, #0
 8000290:	70fb      	strb	r3, [r7, #3]
				g = ((row + color_shift) % 3) == 1 ? 255 : 0;
 8000292:	7d3a      	ldrb	r2, [r7, #20]
 8000294:	7dfb      	ldrb	r3, [r7, #23]
 8000296:	18d1      	adds	r1, r2, r3
 8000298:	4b24      	ldr	r3, [pc, #144]	; (800032c <cpp_main+0x1d0>)
 800029a:	fb83 3201 	smull	r3, r2, r3, r1
 800029e:	17cb      	asrs	r3, r1, #31
 80002a0:	1ad2      	subs	r2, r2, r3
 80002a2:	4613      	mov	r3, r2
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	4413      	add	r3, r2
 80002a8:	1aca      	subs	r2, r1, r3
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	d101      	bne.n	80002b2 <cpp_main+0x156>
 80002ae:	23ff      	movs	r3, #255	; 0xff
 80002b0:	e000      	b.n	80002b4 <cpp_main+0x158>
 80002b2:	2300      	movs	r3, #0
 80002b4:	70bb      	strb	r3, [r7, #2]
				b = ((row + color_shift) % 3) == 2 ? 255 : 0;
 80002b6:	7d3a      	ldrb	r2, [r7, #20]
 80002b8:	7dfb      	ldrb	r3, [r7, #23]
 80002ba:	18d1      	adds	r1, r2, r3
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <cpp_main+0x1d0>)
 80002be:	fb83 3201 	smull	r3, r2, r3, r1
 80002c2:	17cb      	asrs	r3, r1, #31
 80002c4:	1ad2      	subs	r2, r2, r3
 80002c6:	4613      	mov	r3, r2
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	4413      	add	r3, r2
 80002cc:	1aca      	subs	r2, r1, r3
 80002ce:	2a02      	cmp	r2, #2
 80002d0:	d101      	bne.n	80002d6 <cpp_main+0x17a>
 80002d2:	23ff      	movs	r3, #255	; 0xff
 80002d4:	e000      	b.n	80002d8 <cpp_main+0x17c>
 80002d6:	2300      	movs	r3, #0
 80002d8:	707b      	strb	r3, [r7, #1]

				matrix.SetPixel(col, row, r, g, b);
 80002da:	78f8      	ldrb	r0, [r7, #3]
 80002dc:	7d3a      	ldrb	r2, [r7, #20]
 80002de:	7cf9      	ldrb	r1, [r7, #19]
 80002e0:	787b      	ldrb	r3, [r7, #1]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	78bb      	ldrb	r3, [r7, #2]
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	4603      	mov	r3, r0
 80002ea:	4811      	ldr	r0, [pc, #68]	; (8000330 <cpp_main+0x1d4>)
 80002ec:	f000 fba4 	bl	8000a38 <_ZN12MatrixDriver8SetPixelEhhhhh>
			for (uint8_t col = 0; col < 128; col++) {
 80002f0:	7cfb      	ldrb	r3, [r7, #19]
 80002f2:	3301      	adds	r3, #1
 80002f4:	74fb      	strb	r3, [r7, #19]
 80002f6:	e7b6      	b.n	8000266 <cpp_main+0x10a>
		for (uint8_t row = 0; row < 32; row++) {
 80002f8:	7d3b      	ldrb	r3, [r7, #20]
 80002fa:	3301      	adds	r3, #1
 80002fc:	753b      	strb	r3, [r7, #20]
 80002fe:	e7ad      	b.n	800025c <cpp_main+0x100>
			}
		}

		color_shift++;
 8000300:	7dfb      	ldrb	r3, [r7, #23]
 8000302:	3301      	adds	r3, #1
 8000304:	75fb      	strb	r3, [r7, #23]

		color_shift = color_shift % 3;
 8000306:	7dfa      	ldrb	r2, [r7, #23]
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <cpp_main+0x1e8>)
 800030a:	fba3 1302 	umull	r1, r3, r3, r2
 800030e:	0859      	lsrs	r1, r3, #1
 8000310:	460b      	mov	r3, r1
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	440b      	add	r3, r1
 8000316:	1ad3      	subs	r3, r2, r3
 8000318:	75fb      	strb	r3, [r7, #23]

		matrix.SwapBuffer();
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <cpp_main+0x1d4>)
 800031c:	f000 fc43 	bl	8000ba6 <_ZN12MatrixDriver10SwapBufferEv>

		HAL_Delay(1000);
 8000320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000324:	f000 fe6a 	bl	8000ffc <HAL_Delay>
	}
 8000328:	e796      	b.n	8000258 <cpp_main+0xfc>
 800032a:	bf00      	nop
 800032c:	55555556 	.word	0x55555556
 8000330:	2000008c 	.word	0x2000008c
 8000334:	08003a6c 	.word	0x08003a6c
 8000338:	200000a4 	.word	0x200000a4
 800033c:	20000550 	.word	0x20000550
 8000340:	200004fc 	.word	0x200004fc
 8000344:	aaaaaaab 	.word	0xaaaaaaab

08000348 <_Z41__static_initialization_and_destruction_0ii>:
}
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af02      	add	r7, sp, #8
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d10c      	bne.n	8000372 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800035e:	4293      	cmp	r3, r2
 8000360:	d107      	bne.n	8000372 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MatrixDriver matrix(128, 32, MatrixDriver::ScanType::SCAN_16, &htim3);
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	2300      	movs	r3, #0
 8000368:	2220      	movs	r2, #32
 800036a:	2180      	movs	r1, #128	; 0x80
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800036e:	f000 fa55 	bl	800081c <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef>
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000508 	.word	0x20000508
 8000380:	2000008c 	.word	0x2000008c

08000384 <_GLOBAL__sub_I_matrix>:
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
 8000388:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800038c:	2001      	movs	r0, #1
 800038e:	f7ff ffdb 	bl	8000348 <_Z41__static_initialization_and_destruction_0ii>
 8000392:	bd80      	pop	{r7, pc}

08000394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000398:	f000 fdce 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039c:	f000 f80f 	bl	80003be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a0:	f000 f982 	bl	80006a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80003a4:	f000 f944 	bl	8000630 <MX_DMA_Init>
  MX_SPI1_Init();
 80003a8:	f000 f870 	bl	800048c <MX_SPI1_Init>
  MX_TIM3_Init();
 80003ac:	f000 f8a4 	bl	80004f8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80003b0:	f000 f914 	bl	80005dc <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80003b4:	f000 f850 	bl	8000458 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 80003b8:	f7ff fed0 	bl	800015c <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <main+0x28>

080003be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b090      	sub	sp, #64	; 0x40
 80003c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c4:	f107 0318 	add.w	r3, r7, #24
 80003c8:	2228      	movs	r2, #40	; 0x28
 80003ca:	2100      	movs	r1, #0
 80003cc:	4618      	mov	r0, r3
 80003ce:	f002 fee3 	bl	8003198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80003e0:	2309      	movs	r3, #9
 80003e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ee:	2301      	movs	r3, #1
 80003f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003f2:	2301      	movs	r3, #1
 80003f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f6:	2302      	movs	r3, #2
 80003f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000400:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000404:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000406:	f107 0318 	add.w	r3, r7, #24
 800040a:	4618      	mov	r0, r3
 800040c:	f001 f9b8 	bl	8001780 <HAL_RCC_OscConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000416:	f000 f9a1 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041a:	230f      	movs	r3, #15
 800041c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041e:	2302      	movs	r3, #2
 8000420:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2102      	movs	r1, #2
 8000434:	4618      	mov	r0, r3
 8000436:	f001 fc23 	bl	8001c80 <HAL_RCC_ClockConfig>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000440:	f000 f98c 	bl	800075c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8000444:	2200      	movs	r2, #0
 8000446:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 800044a:	2000      	movs	r0, #0
 800044c:	f001 fd02 	bl	8001e54 <HAL_RCC_MCOConfig>
}
 8000450:	bf00      	nop
 8000452:	3740      	adds	r7, #64	; 0x40
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_IWDG_Init+0x2c>)
 800045e:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <MX_IWDG_Init+0x30>)
 8000460:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_IWDG_Init+0x2c>)
 8000464:	2206      	movs	r2, #6
 8000466:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_IWDG_Init+0x2c>)
 800046a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800046e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000470:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_IWDG_Init+0x2c>)
 8000472:	f001 f94b 	bl	800170c <HAL_IWDG_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800047c:	f000 f96e 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200004fc 	.word	0x200004fc
 8000488:	40003000 	.word	0x40003000

0800048c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_SPI1_Init+0x64>)
 8000492:	4a18      	ldr	r2, [pc, #96]	; (80004f4 <MX_SPI1_Init+0x68>)
 8000494:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000496:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <MX_SPI1_Init+0x64>)
 8000498:	2200      	movs	r2, #0
 800049a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_SPI1_Init+0x64>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <MX_SPI1_Init+0x64>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_SPI1_Init+0x64>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <MX_SPI1_Init+0x64>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004b4:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_SPI1_Init+0x64>)
 80004b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <MX_SPI1_Init+0x64>)
 80004be:	2228      	movs	r2, #40	; 0x28
 80004c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <MX_SPI1_Init+0x64>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_SPI1_Init+0x64>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_SPI1_Init+0x64>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_SPI1_Init+0x64>)
 80004d6:	220a      	movs	r2, #10
 80004d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_SPI1_Init+0x64>)
 80004dc:	f001 fda4 	bl	8002028 <HAL_SPI_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80004e6:	f000 f939 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000590 	.word	0x20000590
 80004f4:	40013000 	.word	0x40013000

080004f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08e      	sub	sp, #56	; 0x38
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050c:	f107 0320 	add.w	r3, r7, #32
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
 8000524:	615a      	str	r2, [r3, #20]
 8000526:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000528:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <MX_TIM3_Init+0xdc>)
 800052a:	4a2b      	ldr	r2, [pc, #172]	; (80005d8 <MX_TIM3_Init+0xe0>)
 800052c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800052e:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <MX_TIM3_Init+0xdc>)
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <MX_TIM3_Init+0xdc>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2;
 800053a:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <MX_TIM3_Init+0xdc>)
 800053c:	2202      	movs	r2, #2
 800053e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <MX_TIM3_Init+0xdc>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000546:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <MX_TIM3_Init+0xdc>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800054c:	4821      	ldr	r0, [pc, #132]	; (80005d4 <MX_TIM3_Init+0xdc>)
 800054e:	f001 fdef 	bl	8002130 <HAL_TIM_Base_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000558:	f000 f900 	bl	800075c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000566:	4619      	mov	r1, r3
 8000568:	481a      	ldr	r0, [pc, #104]	; (80005d4 <MX_TIM3_Init+0xdc>)
 800056a:	f002 f83b 	bl	80025e4 <HAL_TIM_ConfigClockSource>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000574:	f000 f8f2 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000578:	4816      	ldr	r0, [pc, #88]	; (80005d4 <MX_TIM3_Init+0xdc>)
 800057a:	f001 fe7b 	bl	8002274 <HAL_TIM_OC_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000584:	f000 f8ea 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4619      	mov	r1, r3
 8000596:	480f      	ldr	r0, [pc, #60]	; (80005d4 <MX_TIM3_Init+0xdc>)
 8000598:	f002 fb80 	bl	8002c9c <HAL_TIMEx_MasterConfigSynchronization>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80005a2:	f000 f8db 	bl	800075c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80005a6:	2310      	movs	r3, #16
 80005a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	220c      	movs	r2, #12
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_TIM3_Init+0xdc>)
 80005be:	f001 ffb9 	bl	8002534 <HAL_TIM_OC_ConfigChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80005c8:	f000 f8c8 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	3738      	adds	r7, #56	; 0x38
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000508 	.word	0x20000508
 80005d8:	40000400 	.word	0x40000400

080005dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART1_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART1_UART_Init+0x4c>)
 8000614:	f002 fbb2 	bl	8002d7c <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800061e:	f000 f89d 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000550 	.word	0x20000550
 800062c:	40013800 	.word	0x40013800

08000630 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel3
  */
static void MX_DMA_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_DMA_Init+0x6c>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <MX_DMA_Init+0x6c>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_DMA_Init+0x6c>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel3 on DMA1_Channel3 */
  hdma_memtomem_dma1_channel3.Instance = DMA1_Channel3;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_DMA_Init+0x70>)
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_DMA_Init+0x74>)
 8000652:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_DMA_Init+0x70>)
 8000656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065a:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel3.Init.PeriphInc = DMA_PINC_ENABLE;
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_DMA_Init+0x70>)
 800065e:	2240      	movs	r2, #64	; 0x40
 8000660:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel3.Init.MemInc = DMA_MINC_DISABLE;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_DMA_Init+0x70>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_DMA_Init+0x70>)
 800066a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800066e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_DMA_Init+0x70>)
 8000672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000676:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel3.Init.Mode = DMA_NORMAL;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_DMA_Init+0x70>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel3.Init.Priority = DMA_PRIORITY_LOW;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_DMA_Init+0x70>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel3) != HAL_OK)
 8000684:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_DMA_Init+0x70>)
 8000686:	f000 fde9 	bl	800125c <HAL_DMA_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_DMA_Init+0x64>
  {
    Error_Handler( );
 8000690:	f000 f864 	bl	800075c <Error_Handler>
  }

}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	200004b8 	.word	0x200004b8
 80006a4:	40020030 	.word	0x40020030

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <MX_GPIO_Init+0xa8>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a23      	ldr	r2, [pc, #140]	; (8000750 <MX_GPIO_Init+0xa8>)
 80006c2:	f043 0320 	orr.w	r3, r3, #32
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_GPIO_Init+0xa8>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0320 	and.w	r3, r3, #32
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_GPIO_Init+0xa8>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <MX_GPIO_Init+0xa8>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_GPIO_Init+0xa8>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_GPIO_Init+0xa8>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a17      	ldr	r2, [pc, #92]	; (8000750 <MX_GPIO_Init+0xa8>)
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_GPIO_Init+0xa8>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0308 	and.w	r3, r3, #8
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B1_Pin|Matrix_CLK_Pin
 8000704:	2200      	movs	r2, #0
 8000706:	f64b 71fb 	movw	r1, #49147	; 0xbffb
 800070a:	4812      	ldr	r0, [pc, #72]	; (8000754 <MX_GPIO_Init+0xac>)
 800070c:	f000 ffe6 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B1_Pin Matrix_CLK_Pin
                           Matrix_LAT_Pin Matrix_OE_Pin Matrix_B0_Pin Matrix_A_Pin
                           Matrix_B_Pin Matrix_C_Pin Matrix_D_Pin Matrix_E_Pin
                           Matrix_R1_Pin Matrix_G1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B1_Pin|Matrix_CLK_Pin
 8000710:	f64b 73fb 	movw	r3, #49147	; 0xbffb
 8000714:	613b      	str	r3, [r7, #16]
                          |Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_B0_Pin|Matrix_A_Pin
                          |Matrix_B_Pin|Matrix_C_Pin|Matrix_D_Pin|Matrix_E_Pin
                          |Matrix_R1_Pin|Matrix_G1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2302      	movs	r3, #2
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	4619      	mov	r1, r3
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <MX_GPIO_Init+0xac>)
 800072a:	f000 fe7d 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800072e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2302      	movs	r3, #2
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_GPIO_Init+0xb0>)
 8000744:	f000 fe70 	bl	8001428 <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	40010c00 	.word	0x40010c00
 8000758:	40010800 	.word	0x40010800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <HAL_TIM_PeriodElapsedCallback>:
//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
//	//This will trigger DMA eventually
//	instance->SendPlanePixel();
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	//This will trigger clock pulse
	instance->Clock();
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fa29 	bl	8000bcc <_ZN12MatrixDriver5ClockEv>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200004a4 	.word	0x200004a4

08000788 <_Z16DMA_HalfCompleteP19__DMA_HandleTypeDef>:

void DMA_HalfComplete(DMA_HandleTypeDef *hdma) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "Half\n", 5, 10);
 8000790:	230a      	movs	r3, #10
 8000792:	2205      	movs	r2, #5
 8000794:	4903      	ldr	r1, [pc, #12]	; (80007a4 <_Z16DMA_HalfCompleteP19__DMA_HandleTypeDef+0x1c>)
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <_Z16DMA_HalfCompleteP19__DMA_HandleTypeDef+0x20>)
 8000798:	f002 fb3d 	bl	8002e16 <HAL_UART_Transmit>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	08003a84 	.word	0x08003a84
 80007a8:	20000550 	.word	0x20000550

080007ac <_Z12DMA_CompleteP19__DMA_HandleTypeDef>:

void DMA_Complete(DMA_HandleTypeDef *hdma) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	instance->Send();
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x1c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f8fd 	bl	80009b8 <_ZN12MatrixDriver4SendEv>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200004a4 	.word	0x200004a4

080007cc <_ZN12MatrixDriver12BufferOffsetEhhh>:

uint16_t MatrixDriver::BufferOffset(uint8_t x, uint8_t y, uint8_t plane) {
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	4608      	mov	r0, r1
 80007d6:	4611      	mov	r1, r2
 80007d8:	461a      	mov	r2, r3
 80007da:	4603      	mov	r3, r0
 80007dc:	70fb      	strb	r3, [r7, #3]
 80007de:	460b      	mov	r3, r1
 80007e0:	70bb      	strb	r3, [r7, #2]
 80007e2:	4613      	mov	r3, r2
 80007e4:	707b      	strb	r3, [r7, #1]
	//TODO: Take plane into account for offset
	return ((y % (height / 2))  * width) + x;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	795b      	ldrb	r3, [r3, #5]
 80007ea:	085b      	lsrs	r3, r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	78bb      	ldrb	r3, [r7, #2]
 80007f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80007f4:	fb02 f201 	mul.w	r2, r2, r1
 80007f8:	1a9b      	subs	r3, r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	7912      	ldrb	r2, [r2, #4]
 8000802:	b292      	uxth	r2, r2
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	b29a      	uxth	r2, r3
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	b29b      	uxth	r3, r3
 800080e:	4413      	add	r3, r2
 8000810:	b29b      	uxth	r3, r3
}
 8000812:	4618      	mov	r0, r3
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef>:

MatrixDriver::MatrixDriver(uint8_t width, uint8_t height, ScanType scanType,
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	4608      	mov	r0, r1
 8000826:	4611      	mov	r1, r2
 8000828:	461a      	mov	r2, r3
 800082a:	4603      	mov	r3, r0
 800082c:	70fb      	strb	r3, [r7, #3]
 800082e:	460b      	mov	r3, r1
 8000830:	70bb      	strb	r3, [r7, #2]
 8000832:	4613      	mov	r3, r2
 8000834:	707b      	strb	r3, [r7, #1]
		TIM_HandleTypeDef *htim) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	829a      	strh	r2, [r3, #20]
	this->htim = htim;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	601a      	str	r2, [r3, #0]

	this->width = width;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	78fa      	ldrb	r2, [r7, #3]
 8000846:	711a      	strb	r2, [r3, #4]
	this->height = height;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	78ba      	ldrb	r2, [r7, #2]
 800084c:	715a      	strb	r2, [r3, #5]
	this->scanType = scanType;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	787a      	ldrb	r2, [r7, #1]
 8000852:	71da      	strb	r2, [r3, #7]
	this->planes = 1;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2201      	movs	r2, #1
 8000858:	719a      	strb	r2, [r3, #6]

	this->bufferSize = (width * (height / 2) * planes);
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	b29b      	uxth	r3, r3
 800085e:	78ba      	ldrb	r2, [r7, #2]
 8000860:	0852      	lsrs	r2, r2, #1
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	b292      	uxth	r2, r2
 8000866:	fb02 f303 	mul.w	r3, r2, r3
 800086a:	b29b      	uxth	r3, r3
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	7992      	ldrb	r2, [r2, #6]
 8000870:	b292      	uxth	r2, r2
 8000872:	fb02 f303 	mul.w	r3, r2, r3
 8000876:	b29a      	uxth	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	815a      	strh	r2, [r3, #10]

	this->sendBufferA = true;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	721a      	strb	r2, [r3, #8]
	this->bufferA = new uint16_t[bufferSize];
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	895b      	ldrh	r3, [r3, #10]
 8000886:	4a3a      	ldr	r2, [pc, #232]	; (8000970 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x154>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d801      	bhi.n	8000890 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x74>
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	e001      	b.n	8000894 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x78>
 8000890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000894:	4618      	mov	r0, r3
 8000896:	f002 fc29 	bl	80030ec <_Znaj>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60da      	str	r2, [r3, #12]
	this->bufferB = new uint16_t[bufferSize];
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	895b      	ldrh	r3, [r3, #10]
 80008a6:	4a32      	ldr	r2, [pc, #200]	; (8000970 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x154>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d801      	bhi.n	80008b0 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x94>
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	e001      	b.n	80008b4 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x98>
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fc19 	bl	80030ec <_Znaj>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	611a      	str	r2, [r3, #16]

	for (uint8_t y = 0; y < height / 2; y++) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
 80008c6:	78bb      	ldrb	r3, [r7, #2]
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	7bfa      	ldrb	r2, [r7, #15]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d23f      	bcs.n	8000952 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x136>
		uint8_t previousRow = y == 0 ? (height / 2) - 1 : y;
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d105      	bne.n	80008e4 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xc8>
 80008d8:	78bb      	ldrb	r3, [r7, #2]
 80008da:	085b      	lsrs	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	e000      	b.n	80008e6 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xca>
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	733b      	strb	r3, [r7, #12]

		uint16_t rowLines = (previousRow & 0x01 ? 0x0001 << A_SHIFT : 0)
 80008e8:	7b3b      	ldrb	r3, [r7, #12]
 80008ea:	00db      	lsls	r3, r3, #3
				| (previousRow & 0x02 ? 0x0001 << B_SHIFT : 0)
				| (previousRow & 0x04 ? 0x0001 << C_SHIFT : 0)
				| (previousRow & 0x08 ? 0x0001 << D_SHIFT : 0);
 80008ec:	b29b      	uxth	r3, r3
		uint16_t rowLines = (previousRow & 0x01 ? 0x0001 << A_SHIFT : 0)
 80008ee:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80008f2:	817b      	strh	r3, [r7, #10]

		for (uint8_t x = 0; x < width; x++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	73bb      	strb	r3, [r7, #14]
 80008f8:	7bba      	ldrb	r2, [r7, #14]
 80008fa:	78fb      	ldrb	r3, [r7, #3]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d224      	bcs.n	800094a <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x12e>
			for (uint8_t plane = 0; plane < planes; plane++) {
 8000900:	2300      	movs	r3, #0
 8000902:	737b      	strb	r3, [r7, #13]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	799b      	ldrb	r3, [r3, #6]
 8000908:	7b7a      	ldrb	r2, [r7, #13]
 800090a:	429a      	cmp	r2, r3
 800090c:	d219      	bcs.n	8000942 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x126>
				uint16_t offset = BufferOffset(x, y, plane);
 800090e:	7b7b      	ldrb	r3, [r7, #13]
 8000910:	7bfa      	ldrb	r2, [r7, #15]
 8000912:	7bb9      	ldrb	r1, [r7, #14]
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff59 	bl	80007cc <_ZN12MatrixDriver12BufferOffsetEhhh>
 800091a:	4603      	mov	r3, r0
 800091c:	813b      	strh	r3, [r7, #8]

				bufferA[offset] = rowLines;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	893b      	ldrh	r3, [r7, #8]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	897a      	ldrh	r2, [r7, #10]
 800092a:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = rowLines;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	691a      	ldr	r2, [r3, #16]
 8000930:	893b      	ldrh	r3, [r7, #8]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	897a      	ldrh	r2, [r7, #10]
 8000938:	801a      	strh	r2, [r3, #0]
			for (uint8_t plane = 0; plane < planes; plane++) {
 800093a:	7b7b      	ldrb	r3, [r7, #13]
 800093c:	3301      	adds	r3, #1
 800093e:	737b      	strb	r3, [r7, #13]
 8000940:	e7e0      	b.n	8000904 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xe8>
		for (uint8_t x = 0; x < width; x++) {
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	3301      	adds	r3, #1
 8000946:	73bb      	strb	r3, [r7, #14]
 8000948:	e7d6      	b.n	80008f8 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xdc>
	for (uint8_t y = 0; y < height / 2; y++) {
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	3301      	adds	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	e7b9      	b.n	80008c6 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0xaa>
			}
		}
	}

	instance = this;
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x158>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6013      	str	r3, [r2, #0]

	hdma_memtomem_dma1_channel3.XferHalfCpltCallback = DMA_HalfComplete;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x15c>)
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x160>)
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma1_channel3.XferCpltCallback = DMA_Complete;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x15c>)
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <_ZN12MatrixDriverC1EhhNS_8ScanTypeEP17TIM_HandleTypeDef+0x164>)
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	3ffffffc 	.word	0x3ffffffc
 8000974:	200004a4 	.word	0x200004a4
 8000978:	200004b8 	.word	0x200004b8
 800097c:	08000789 	.word	0x08000789
 8000980:	080007ad 	.word	0x080007ad

08000984 <_ZN12MatrixDriver4openEv>:

void MatrixDriver::open() {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	Send();
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 f813 	bl	80009b8 <_ZN12MatrixDriver4SendEv>

//	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);

	__HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80009a4:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(htim);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fc10 	bl	80021d0 <HAL_TIM_Base_Start_IT>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <_ZN12MatrixDriver4SendEv>:

void MatrixDriver::Send() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "Send\n", 5, 10);
 80009c0:	230a      	movs	r3, #10
 80009c2:	2205      	movs	r2, #5
 80009c4:	490c      	ldr	r1, [pc, #48]	; (80009f8 <_ZN12MatrixDriver4SendEv+0x40>)
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <_ZN12MatrixDriver4SendEv+0x44>)
 80009c8:	f002 fa25 	bl	8002e16 <HAL_UART_Transmit>

	uint16_t *outputBuffer = sendBufferA ? bufferA : bufferB;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7a1b      	ldrb	r3, [r3, #8]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <_ZN12MatrixDriver4SendEv+0x22>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	e001      	b.n	80009de <_ZN12MatrixDriver4SendEv+0x26>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	691b      	ldr	r3, [r3, #16]
 80009de:	60fb      	str	r3, [r7, #12]

	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel3, (uint32_t) outputBuffer, (uint32_t)&(GPIOB->ODR), bufferSize);
 80009e0:	68f9      	ldr	r1, [r7, #12]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	895b      	ldrh	r3, [r3, #10]
 80009e6:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <_ZN12MatrixDriver4SendEv+0x48>)
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <_ZN12MatrixDriver4SendEv+0x4c>)
 80009ea:	f000 fc91 	bl	8001310 <HAL_DMA_Start_IT>
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	08003a8c 	.word	0x08003a8c
 80009fc:	20000550 	.word	0x20000550
 8000a00:	40010c0c 	.word	0x40010c0c
 8000a04:	200004b8 	.word	0x200004b8

08000a08 <_ZN12MatrixDriver9PlaneBitsEh>:

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0x00;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]
//	if (value > 31) {
//		result |= 0x02;
//		value -= 31;
//	}

	if (value > 1) {
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d906      	bls.n	8000a2c <_ZN12MatrixDriver9PlaneBitsEh+0x24>
		result |= 0x01;
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
		value -= 1;
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	70fb      	strb	r3, [r7, #3]
	}

	return result;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <_ZN12MatrixDriver8SetPixelEhhhhh>:
		}
	}
}

void MatrixDriver::SetPixel(uint8_t x, uint8_t y, uint8_t r, uint8_t g,
		uint8_t b) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	4608      	mov	r0, r1
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	4603      	mov	r3, r0
 8000a48:	70fb      	strb	r3, [r7, #3]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	70bb      	strb	r3, [r7, #2]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	707b      	strb	r3, [r7, #1]
	uint8_t rShift, gShift, bShift;

	//Set data into the buffer we aren't sending at the moment
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7a1b      	ldrb	r3, [r3, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <_ZN12MatrixDriver8SetPixelEhhhhh+0x28>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	e001      	b.n	8000a64 <_ZN12MatrixDriver8SetPixelEhhhhh+0x2c>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	617b      	str	r3, [r7, #20]

	if (y < (height / 2)) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	795b      	ldrb	r3, [r3, #5]
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	78ba      	ldrb	r2, [r7, #2]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d206      	bcs.n	8000a82 <_ZN12MatrixDriver8SetPixelEhhhhh+0x4a>
		rShift = R0_SHIFT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	77fb      	strb	r3, [r7, #31]
		gShift = G0_SHIFT;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	77bb      	strb	r3, [r7, #30]
		bShift = B0_SHIFT;
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	777b      	strb	r3, [r7, #29]
 8000a80:	e005      	b.n	8000a8e <_ZN12MatrixDriver8SetPixelEhhhhh+0x56>
	} else {
		rShift = R1_SHIFT;
 8000a82:	2308      	movs	r3, #8
 8000a84:	77fb      	strb	r3, [r7, #31]
		gShift = G1_SHIFT;
 8000a86:	2309      	movs	r3, #9
 8000a88:	77bb      	strb	r3, [r7, #30]
		bShift = B1_SHIFT;
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	777b      	strb	r3, [r7, #29]
	}

	uint16_t pixelMask = (0x0001 << rShift) | (0x0001 << gShift)
 8000a8e:	7ffb      	ldrb	r3, [r7, #31]
 8000a90:	2201      	movs	r2, #1
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	7fbb      	ldrb	r3, [r7, #30]
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b21a      	sxth	r2, r3
			| (0x0001 << bShift);
 8000aa6:	7f7b      	ldrb	r3, [r7, #29]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b21b      	sxth	r3, r3
	uint16_t pixelMask = (0x0001 << rShift) | (0x0001 << gShift)
 8000ab4:	827b      	strh	r3, [r7, #18]
	uint8_t rPlanes = PlaneBits(r);
 8000ab6:	787b      	ldrb	r3, [r7, #1]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ffa4 	bl	8000a08 <_ZN12MatrixDriver9PlaneBitsEh>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	747b      	strb	r3, [r7, #17]
	uint8_t gPlanes = PlaneBits(g);
 8000ac4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ff9c 	bl	8000a08 <_ZN12MatrixDriver9PlaneBitsEh>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	743b      	strb	r3, [r7, #16]
	uint8_t bPlanes = PlaneBits(b);
 8000ad4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff ff94 	bl	8000a08 <_ZN12MatrixDriver9PlaneBitsEh>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73fb      	strb	r3, [r7, #15]

	for (int plane = 0; plane < planes; plane++) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	799b      	ldrb	r3, [r3, #6]
 8000aec:	461a      	mov	r2, r3
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4293      	cmp	r3, r2
 8000af2:	da54      	bge.n	8000b9e <_ZN12MatrixDriver8SetPixelEhhhhh+0x166>
		uint16_t planePixelBits = (
				(rPlanes & (0x01 << plane)) ? 0x0001 << rShift : 0)
 8000af4:	7c7a      	ldrb	r2, [r7, #17]
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	fa42 f303 	asr.w	r3, r2, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & (0x01 << plane)) ? 0x0001 << gShift : 0)
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d005      	beq.n	8000b10 <_ZN12MatrixDriver8SetPixelEhhhhh+0xd8>
				(rPlanes & (0x01 << plane)) ? 0x0001 << rShift : 0)
 8000b04:	7ffb      	ldrb	r3, [r7, #31]
 8000b06:	2201      	movs	r2, #1
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
				| ((gPlanes & (0x01 << plane)) ? 0x0001 << gShift : 0)
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	e000      	b.n	8000b12 <_ZN12MatrixDriver8SetPixelEhhhhh+0xda>
 8000b10:	2200      	movs	r2, #0
 8000b12:	7c39      	ldrb	r1, [r7, #16]
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa41 f303 	asr.w	r3, r1, r3
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d005      	beq.n	8000b2e <_ZN12MatrixDriver8SetPixelEhhhhh+0xf6>
 8000b22:	7fbb      	ldrb	r3, [r7, #30]
 8000b24:	2101      	movs	r1, #1
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	e000      	b.n	8000b30 <_ZN12MatrixDriver8SetPixelEhhhhh+0xf8>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b21a      	sxth	r2, r3
				| ((bPlanes & (0x01 << plane)) ? 0x0001 << bShift : 0);
 8000b34:	7bf9      	ldrb	r1, [r7, #15]
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	fa41 f303 	asr.w	r3, r1, r3
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d005      	beq.n	8000b50 <_ZN12MatrixDriver8SetPixelEhhhhh+0x118>
 8000b44:	7f7b      	ldrb	r3, [r7, #29]
 8000b46:	2101      	movs	r1, #1
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	e000      	b.n	8000b52 <_ZN12MatrixDriver8SetPixelEhhhhh+0x11a>
 8000b50:	2300      	movs	r3, #0
 8000b52:	4313      	orrs	r3, r2
 8000b54:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = (
 8000b56:	81bb      	strh	r3, [r7, #12]
//				x, y, rPlanes, gPlanes, bPlanes, planePixelBits, pixelMask);

//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
//				10);

		uint16_t offset = BufferOffset(x, y, plane);
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	78ba      	ldrb	r2, [r7, #2]
 8000b5e:	78f9      	ldrb	r1, [r7, #3]
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff fe33 	bl	80007cc <_ZN12MatrixDriver12BufferOffsetEhhh>
 8000b66:	4603      	mov	r3, r0
 8000b68:	817b      	strh	r3, [r7, #10]

		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000b6a:	897b      	ldrh	r3, [r7, #10]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	4413      	add	r3, r2
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	4013      	ands	r3, r2
 8000b80:	b21a      	sxth	r2, r3
				| planePixelBits;
 8000b82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b219      	sxth	r1, r3
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000b8a:	897b      	ldrh	r3, [r7, #10]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	4413      	add	r3, r2
				| planePixelBits;
 8000b92:	b28a      	uxth	r2, r1
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8000b94:	801a      	strh	r2, [r3, #0]
	for (int plane = 0; plane < planes; plane++) {
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
 8000b9c:	e7a4      	b.n	8000ae8 <_ZN12MatrixDriver8SetPixelEhhhhh+0xb0>
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	sendBufferA = !sendBufferA;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7a1b      	ldrb	r3, [r3, #8]
 8000bb2:	f083 0301 	eor.w	r3, r3, #1
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	721a      	strb	r2, [r3, #8]

	nextOffset = 0;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	829a      	strh	r2, [r3, #20]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <_ZN12MatrixDriver5ClockEv>:
	if (nextOffset >= bufferSize) {
		nextOffset = 0;
	}
}

void MatrixDriver::Clock() {
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	GPIOB->BSRR = (0x0001 << CLK_SHIFT);
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <_ZN12MatrixDriver5ClockEv+0x1c>)
 8000bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bda:	611a      	str	r2, [r3, #16]
	//Clock will be cleared on next output
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40010c00 	.word	0x40010c00

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_MspInit+0x60>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_MspInit+0x60>)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000

08000c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d12f      	bne.n	8000cd0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ca0:	23a0      	movs	r3, #160	; 0xa0
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000cb4:	f000 fbb8 	bl	8001428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb8:	2340      	movs	r3, #64	; 0x40
 8000cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000ccc:	f000 fbac 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40013000 	.word	0x40013000
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <HAL_TIM_Base_MspInit+0x44>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d113      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	201d      	movs	r0, #29
 8000d14:	f000 fa6b 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d18:	201d      	movs	r0, #29
 8000d1a:	f000 fa84 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40000400 	.word	0x40000400
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <HAL_UART_MspInit+0x8c>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d131      	bne.n	8000db4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	4619      	mov	r1, r3
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <HAL_UART_MspInit+0x94>)
 8000d96:	f000 fb47 	bl	8001428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_UART_MspInit+0x94>)
 8000db0:	f000 fb3a 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40013800 	.word	0x40013800
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010800 	.word	0x40010800

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <HardFault_Handler+0x4>

08000dda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <MemManage_Handler+0x4>

08000de0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <BusFault_Handler+0x4>

08000de6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <UsageFault_Handler+0x4>

08000dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f8d6 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM3_IRQHandler+0x10>)
 8000e22:	f001 fa7f 	bl	8002324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000508 	.word	0x20000508

08000e30 <_getpid>:
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	2301      	movs	r3, #1
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <_kill>:
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
 8000e48:	f002 f974 	bl	8003134 <__errno>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	2316      	movs	r3, #22
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_exit>:
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffe7 	bl	8000e3e <_kill>
 8000e70:	e7fe      	b.n	8000e70 <_exit+0x12>
	...

08000e74 <_sbrk>:
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <_sbrk+0x5c>)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <_sbrk+0x60>)
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <_sbrk+0x22>
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <_sbrk+0x64>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <_sbrk+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d207      	bcs.n	8000eb4 <_sbrk+0x40>
 8000ea4:	f002 f946 	bl	8003134 <__errno>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	230c      	movs	r3, #12
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb2:	e009      	b.n	8000ec8 <_sbrk+0x54>
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <_sbrk+0x64>)
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20005000 	.word	0x20005000
 8000ed4:	00000400 	.word	0x00000400
 8000ed8:	200004a8 	.word	0x200004a8
 8000edc:	200005f0 	.word	0x200005f0

08000ee0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <Reset_Handler>:
 8000eec:	2100      	movs	r1, #0
 8000eee:	e003      	b.n	8000ef8 <LoopCopyDataInit>

08000ef0 <CopyDataInit>:
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <LoopFillZerobss+0x14>)
 8000ef2:	585b      	ldr	r3, [r3, r1]
 8000ef4:	5043      	str	r3, [r0, r1]
 8000ef6:	3104      	adds	r1, #4

08000ef8 <LoopCopyDataInit>:
 8000ef8:	480a      	ldr	r0, [pc, #40]	; (8000f24 <LoopFillZerobss+0x18>)
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <LoopFillZerobss+0x1c>)
 8000efc:	1842      	adds	r2, r0, r1
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3f6      	bcc.n	8000ef0 <CopyDataInit>
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <LoopFillZerobss+0x20>)
 8000f04:	e002      	b.n	8000f0c <LoopFillZerobss>

08000f06 <FillZerobss>:
 8000f06:	2300      	movs	r3, #0
 8000f08:	f842 3b04 	str.w	r3, [r2], #4

08000f0c <LoopFillZerobss>:
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <LoopFillZerobss+0x24>)
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3f9      	bcc.n	8000f06 <FillZerobss>
 8000f12:	f7ff ffe5 	bl	8000ee0 <SystemInit>
 8000f16:	f002 f913 	bl	8003140 <__libc_init_array>
 8000f1a:	f7ff fa3b 	bl	8000394 <main>
 8000f1e:	4770      	bx	lr
 8000f20:	08003b54 	.word	0x08003b54
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000070 	.word	0x20000070
 8000f2c:	20000070 	.word	0x20000070
 8000f30:	200005f0 	.word	0x200005f0

08000f34 <ADC1_2_IRQHandler>:
 8000f34:	e7fe      	b.n	8000f34 <ADC1_2_IRQHandler>
	...

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_Init+0x28>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_Init+0x28>)
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f945 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f808 	bl	8000f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f54:	f7ff fe4a 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40022000 	.word	0x40022000

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x54>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x58>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f95d 	bl	8001242 <HAL_SYSTICK_Config>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00e      	b.n	8000fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d80a      	bhi.n	8000fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	f000 f925 	bl	80011ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <HAL_InitTick+0x5c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a03      	ldr	r2, [pc, #12]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200005e8 	.word	0x200005e8

08000fe8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <HAL_GetTick+0x10>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	200005e8 	.word	0x200005e8

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff fff0 	bl	8000fe8 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_Delay+0x40>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffe0 	bl	8000fe8 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000008 	.word	0x20000008

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4906      	ldr	r1, [pc, #24]	; (80010d8 <__NVIC_EnableIRQ+0x34>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b8:	f7ff ff90 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff2d 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff42 	bl	8001088 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff90 	bl	8001130 <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5f 	bl	80010dc <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff35 	bl	80010a4 <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa2 	bl	8001194 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e043      	b.n	80012fa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <HAL_DMA_Init+0xa8>)
 800127a:	4413      	add	r3, r2
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_DMA_Init+0xac>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	009a      	lsls	r2, r3, #2
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a1f      	ldr	r2, [pc, #124]	; (800130c <HAL_DMA_Init+0xb0>)
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2202      	movs	r2, #2
 8001294:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	bffdfff8 	.word	0xbffdfff8
 8001308:	cccccccd 	.word	0xcccccccd
 800130c:	40020000 	.word	0x40020000

08001310 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <HAL_DMA_Start_IT+0x20>
 800132c:	2302      	movs	r3, #2
 800132e:	e04a      	b.n	80013c6 <HAL_DMA_Start_IT+0xb6>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800133e:	2b01      	cmp	r3, #1
 8001340:	d13a      	bne.n	80013b8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2202      	movs	r2, #2
 8001346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f831 	bl	80013ce <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 020e 	orr.w	r2, r2, #14
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e00f      	b.n	80013a6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0204 	bic.w	r2, r2, #4
 8001394:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 020a 	orr.w	r2, r2, #10
 80013a4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0201 	orr.w	r2, r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e005      	b.n	80013c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80013c0:	2302      	movs	r3, #2
 80013c2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e4:	2101      	movs	r1, #1
 80013e6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ea:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b10      	cmp	r3, #16
 80013fa:	d108      	bne.n	800140e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800140c:	e007      	b.n	800141e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	60da      	str	r2, [r3, #12]
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b08b      	sub	sp, #44	; 0x2c
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	e127      	b.n	800168c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800143c:	2201      	movs	r2, #1
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	429a      	cmp	r2, r3
 8001456:	f040 8116 	bne.w	8001686 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b12      	cmp	r3, #18
 8001460:	d034      	beq.n	80014cc <HAL_GPIO_Init+0xa4>
 8001462:	2b12      	cmp	r3, #18
 8001464:	d80d      	bhi.n	8001482 <HAL_GPIO_Init+0x5a>
 8001466:	2b02      	cmp	r3, #2
 8001468:	d02b      	beq.n	80014c2 <HAL_GPIO_Init+0x9a>
 800146a:	2b02      	cmp	r3, #2
 800146c:	d804      	bhi.n	8001478 <HAL_GPIO_Init+0x50>
 800146e:	2b00      	cmp	r3, #0
 8001470:	d031      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
 8001472:	2b01      	cmp	r3, #1
 8001474:	d01c      	beq.n	80014b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001476:	e048      	b.n	800150a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001478:	2b03      	cmp	r3, #3
 800147a:	d043      	beq.n	8001504 <HAL_GPIO_Init+0xdc>
 800147c:	2b11      	cmp	r3, #17
 800147e:	d01b      	beq.n	80014b8 <HAL_GPIO_Init+0x90>
          break;
 8001480:	e043      	b.n	800150a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001482:	4a89      	ldr	r2, [pc, #548]	; (80016a8 <HAL_GPIO_Init+0x280>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d026      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
 8001488:	4a87      	ldr	r2, [pc, #540]	; (80016a8 <HAL_GPIO_Init+0x280>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d806      	bhi.n	800149c <HAL_GPIO_Init+0x74>
 800148e:	4a87      	ldr	r2, [pc, #540]	; (80016ac <HAL_GPIO_Init+0x284>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d020      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
 8001494:	4a86      	ldr	r2, [pc, #536]	; (80016b0 <HAL_GPIO_Init+0x288>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01d      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
          break;
 800149a:	e036      	b.n	800150a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800149c:	4a85      	ldr	r2, [pc, #532]	; (80016b4 <HAL_GPIO_Init+0x28c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
 80014a2:	4a85      	ldr	r2, [pc, #532]	; (80016b8 <HAL_GPIO_Init+0x290>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d016      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
 80014a8:	4a84      	ldr	r2, [pc, #528]	; (80016bc <HAL_GPIO_Init+0x294>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
          break;
 80014ae:	e02c      	b.n	800150a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e028      	b.n	800150a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	3304      	adds	r3, #4
 80014be:	623b      	str	r3, [r7, #32]
          break;
 80014c0:	e023      	b.n	800150a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	3308      	adds	r3, #8
 80014c8:	623b      	str	r3, [r7, #32]
          break;
 80014ca:	e01e      	b.n	800150a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	330c      	adds	r3, #12
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e019      	b.n	800150a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014de:	2304      	movs	r3, #4
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e012      	b.n	800150a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d105      	bne.n	80014f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	611a      	str	r2, [r3, #16]
          break;
 80014f6:	e008      	b.n	800150a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f8:	2308      	movs	r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	615a      	str	r2, [r3, #20]
          break;
 8001502:	e002      	b.n	800150a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2bff      	cmp	r3, #255	; 0xff
 800150e:	d801      	bhi.n	8001514 <HAL_GPIO_Init+0xec>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	e001      	b.n	8001518 <HAL_GPIO_Init+0xf0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3304      	adds	r3, #4
 8001518:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2bff      	cmp	r3, #255	; 0xff
 800151e:	d802      	bhi.n	8001526 <HAL_GPIO_Init+0xfe>
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	e002      	b.n	800152c <HAL_GPIO_Init+0x104>
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	3b08      	subs	r3, #8
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	210f      	movs	r1, #15
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	401a      	ands	r2, r3
 800153e:	6a39      	ldr	r1, [r7, #32]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	431a      	orrs	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8096 	beq.w	8001686 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800155a:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_GPIO_Init+0x298>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a58      	ldr	r2, [pc, #352]	; (80016c0 <HAL_GPIO_Init+0x298>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6193      	str	r3, [r2, #24]
 8001566:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_GPIO_Init+0x298>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001572:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_GPIO_Init+0x29c>)
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4013      	ands	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_GPIO_Init+0x2a0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0x19e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4a      	ldr	r2, [pc, #296]	; (80016cc <HAL_GPIO_Init+0x2a4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <HAL_GPIO_Init+0x19a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a49      	ldr	r2, [pc, #292]	; (80016d0 <HAL_GPIO_Init+0x2a8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_Init+0x196>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a48      	ldr	r2, [pc, #288]	; (80016d4 <HAL_GPIO_Init+0x2ac>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_GPIO_Init+0x192>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x1a0>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x1a0>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x1a0>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x1a0>
 80015c6:	2300      	movs	r3, #0
 80015c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015d8:	493a      	ldr	r1, [pc, #232]	; (80016c4 <HAL_GPIO_Init+0x29c>)
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015f2:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4938      	ldr	r1, [pc, #224]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
 80015fe:	e006      	b.n	800160e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	43db      	mvns	r3, r3
 8001608:	4933      	ldr	r1, [pc, #204]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800160a:	4013      	ands	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800161a:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	492e      	ldr	r1, [pc, #184]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
 8001626:	e006      	b.n	8001636 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	43db      	mvns	r3, r3
 8001630:	4929      	ldr	r1, [pc, #164]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001632:	4013      	ands	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	4924      	ldr	r1, [pc, #144]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	43db      	mvns	r3, r3
 8001658:	491f      	ldr	r1, [pc, #124]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800165a:	4013      	ands	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	491a      	ldr	r1, [pc, #104]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	60cb      	str	r3, [r1, #12]
 8001676:	e006      	b.n	8001686 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	43db      	mvns	r3, r3
 8001680:	4915      	ldr	r1, [pc, #84]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001682:	4013      	ands	r3, r2
 8001684:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	3301      	adds	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	f47f aed0 	bne.w	800143c <HAL_GPIO_Init+0x14>
  }
}
 800169c:	bf00      	nop
 800169e:	372c      	adds	r7, #44	; 0x2c
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	10210000 	.word	0x10210000
 80016ac:	10110000 	.word	0x10110000
 80016b0:	10120000 	.word	0x10120000
 80016b4:	10310000 	.word	0x10310000
 80016b8:	10320000 	.word	0x10320000
 80016bc:	10220000 	.word	0x10220000
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010000 	.word	0x40010000
 80016c8:	40010800 	.word	0x40010800
 80016cc:	40010c00 	.word	0x40010c00
 80016d0:	40011000 	.word	0x40011000
 80016d4:	40011400 	.word	0x40011400
 80016d8:	40010400 	.word	0x40010400

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	611a      	str	r2, [r3, #16]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e02b      	b.n	8001776 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001726:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f245 5255 	movw	r2, #21845	; 0x5555
 8001730:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6852      	ldr	r2, [r2, #4]
 800173a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6892      	ldr	r2, [r2, #8]
 8001744:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001746:	f7ff fc4f 	bl	8000fe8 <HAL_GetTick>
 800174a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800174c:	e008      	b.n	8001760 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800174e:	f7ff fc4b 	bl	8000fe8 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b26      	cmp	r3, #38	; 0x26
 800175a:	d901      	bls.n	8001760 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e00a      	b.n	8001776 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f1      	bne.n	800174e <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001772:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e26c      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 8087 	beq.w	80018ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a0:	4b92      	ldr	r3, [pc, #584]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d00c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ac:	4b8f      	ldr	r3, [pc, #572]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d112      	bne.n	80017de <HAL_RCC_OscConfig+0x5e>
 80017b8:	4b8c      	ldr	r3, [pc, #560]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c4:	d10b      	bne.n	80017de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c6:	4b89      	ldr	r3, [pc, #548]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d06c      	beq.n	80018ac <HAL_RCC_OscConfig+0x12c>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d168      	bne.n	80018ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e246      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x76>
 80017e8:	4b80      	ldr	r3, [pc, #512]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a7f      	ldr	r2, [pc, #508]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	e02e      	b.n	8001854 <HAL_RCC_OscConfig+0xd4>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x98>
 80017fe:	4b7b      	ldr	r3, [pc, #492]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7a      	ldr	r2, [pc, #488]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b78      	ldr	r3, [pc, #480]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a77      	ldr	r2, [pc, #476]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e01d      	b.n	8001854 <HAL_RCC_OscConfig+0xd4>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0xbc>
 8001822:	4b72      	ldr	r3, [pc, #456]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a71      	ldr	r2, [pc, #452]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b6f      	ldr	r3, [pc, #444]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a6e      	ldr	r2, [pc, #440]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0xd4>
 800183c:	4b6b      	ldr	r3, [pc, #428]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a6a      	ldr	r2, [pc, #424]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b68      	ldr	r3, [pc, #416]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a67      	ldr	r2, [pc, #412]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 800184e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001852:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fbc4 	bl	8000fe8 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff fbc0 	bl	8000fe8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e1fa      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0xe4>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fbb0 	bl	8000fe8 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fbac 	bl	8000fe8 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1e6      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189e:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x10c>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d063      	beq.n	8001982 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ba:	4b4c      	ldr	r3, [pc, #304]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018c6:	4b49      	ldr	r3, [pc, #292]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d11c      	bne.n	800190c <HAL_RCC_OscConfig+0x18c>
 80018d2:	4b46      	ldr	r3, [pc, #280]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d116      	bne.n	800190c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018de:	4b43      	ldr	r3, [pc, #268]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_OscConfig+0x176>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e1ba      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4939      	ldr	r1, [pc, #228]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190a:	e03a      	b.n	8001982 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001914:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <HAL_RCC_OscConfig+0x270>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff fb65 	bl	8000fe8 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff fb61 	bl	8000fe8 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e19b      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4927      	ldr	r1, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_RCC_OscConfig+0x270>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fb44 	bl	8000fe8 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001964:	f7ff fb40 	bl	8000fe8 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e17a      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d03a      	beq.n	8001a04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d019      	beq.n	80019ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff fb24 	bl	8000fe8 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fb20 	bl	8000fe8 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e15a      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f000 fb12 	bl	8001fec <RCC_Delay>
 80019c8:	e01c      	b.n	8001a04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_RCC_OscConfig+0x274>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d0:	f7ff fb0a 	bl	8000fe8 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d6:	e00f      	b.n	80019f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff fb06 	bl	8000fe8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d908      	bls.n	80019f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e140      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	42420000 	.word	0x42420000
 80019f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f8:	4b9e      	ldr	r3, [pc, #632]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e9      	bne.n	80019d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80a6 	beq.w	8001b5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a16:	4b97      	ldr	r3, [pc, #604]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10d      	bne.n	8001a3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	4b94      	ldr	r3, [pc, #592]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a93      	ldr	r2, [pc, #588]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	61d3      	str	r3, [r2, #28]
 8001a2e:	4b91      	ldr	r3, [pc, #580]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	4b8e      	ldr	r3, [pc, #568]	; (8001c78 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d118      	bne.n	8001a7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4a:	4b8b      	ldr	r3, [pc, #556]	; (8001c78 <HAL_RCC_OscConfig+0x4f8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a8a      	ldr	r2, [pc, #552]	; (8001c78 <HAL_RCC_OscConfig+0x4f8>)
 8001a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fac7 	bl	8000fe8 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5e:	f7ff fac3 	bl	8000fe8 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b64      	cmp	r3, #100	; 0x64
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0fd      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	4b81      	ldr	r3, [pc, #516]	; (8001c78 <HAL_RCC_OscConfig+0x4f8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x312>
 8001a84:	4b7b      	ldr	r3, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4a7a      	ldr	r2, [pc, #488]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6213      	str	r3, [r2, #32]
 8001a90:	e02d      	b.n	8001aee <HAL_RCC_OscConfig+0x36e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x334>
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a75      	ldr	r2, [pc, #468]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a72      	ldr	r2, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6213      	str	r3, [r2, #32]
 8001ab2:	e01c      	b.n	8001aee <HAL_RCC_OscConfig+0x36e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d10c      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x356>
 8001abc:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4a6c      	ldr	r2, [pc, #432]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6213      	str	r3, [r2, #32]
 8001ac8:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a69      	ldr	r2, [pc, #420]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	e00b      	b.n	8001aee <HAL_RCC_OscConfig+0x36e>
 8001ad6:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a66      	ldr	r2, [pc, #408]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	4b64      	ldr	r3, [pc, #400]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a63      	ldr	r2, [pc, #396]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d015      	beq.n	8001b22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fa77 	bl	8000fe8 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7ff fa73 	bl	8000fe8 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0ab      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b14:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0ee      	beq.n	8001afe <HAL_RCC_OscConfig+0x37e>
 8001b20:	e014      	b.n	8001b4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7ff fa61 	bl	8000fe8 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b28:	e00a      	b.n	8001b40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7ff fa5d 	bl	8000fe8 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e095      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1ee      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d105      	bne.n	8001b5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b52:	4b48      	ldr	r3, [pc, #288]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a47      	ldr	r2, [pc, #284]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8081 	beq.w	8001c6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b68:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d061      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d146      	bne.n	8001c0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7c:	4b3f      	ldr	r3, [pc, #252]	; (8001c7c <HAL_RCC_OscConfig+0x4fc>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff fa31 	bl	8000fe8 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7ff fa2d 	bl	8000fe8 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e067      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9c:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb0:	d108      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bb2:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	492d      	ldr	r1, [pc, #180]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a19      	ldr	r1, [r3, #32]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	4927      	ldr	r1, [pc, #156]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_RCC_OscConfig+0x4fc>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff fa01 	bl	8000fe8 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bea:	f7ff f9fd 	bl	8000fe8 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e037      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x46a>
 8001c08:	e02f      	b.n	8001c6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <HAL_RCC_OscConfig+0x4fc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff f9ea 	bl	8000fe8 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f9e6 	bl	8000fe8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e020      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x498>
 8001c36:	e018      	b.n	8001c6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e013      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	42420060 	.word	0x42420060

08001c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0d0      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c94:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d910      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b67      	ldr	r3, [pc, #412]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 0207 	bic.w	r2, r3, #7
 8001caa:	4965      	ldr	r1, [pc, #404]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b63      	ldr	r3, [pc, #396]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0b8      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cdc:	4b59      	ldr	r3, [pc, #356]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf4:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d00:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	494d      	ldr	r1, [pc, #308]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d040      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d115      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e07f      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e073      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e06b      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f023 0203 	bic.w	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4936      	ldr	r1, [pc, #216]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d70:	f7ff f93a 	bl	8000fe8 <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7ff f936 	bl	8000fe8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e053      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 020c 	and.w	r2, r3, #12
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1eb      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d210      	bcs.n	8001dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	4922      	ldr	r1, [pc, #136]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e032      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4916      	ldr	r1, [pc, #88]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	490e      	ldr	r1, [pc, #56]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e0e:	f000 f859 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8001e12:	4601      	mov	r1, r0
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_RCC_ClockConfig+0x1c8>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	fa21 f303 	lsr.w	r3, r1, r3
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <HAL_RCC_ClockConfig+0x1cc>)
 8001e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_RCC_ClockConfig+0x1d0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f898 	bl	8000f64 <HAL_InitTick>

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08003afc 	.word	0x08003afc
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000004 	.word	0x20000004

08001e54 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8001e60:	f107 0318 	add.w	r3, r7, #24
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_RCC_MCOConfig+0x68>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <HAL_RCC_MCOConfig+0x68>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_MCOConfig+0x68>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001e98:	f107 0318 	add.w	r3, r7, #24
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4808      	ldr	r0, [pc, #32]	; (8001ec0 <HAL_RCC_MCOConfig+0x6c>)
 8001ea0:	f7ff fac2 	bl	8001428 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_MCOConfig+0x68>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <HAL_RCC_MCOConfig+0x68>)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	; 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010800 	.word	0x40010800

08001ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec4:	b490      	push	{r4, r7}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ecc:	1d3c      	adds	r4, r7, #4
 8001ece:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ed4:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eee:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d002      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x40>
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x46>
 8001f02:	e02d      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f06:	623b      	str	r3, [r7, #32]
      break;
 8001f08:	e02d      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	0c9b      	lsrs	r3, r3, #18
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f16:	4413      	add	r3, r2
 8001f18:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f1c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	0c5b      	lsrs	r3, r3, #17
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f36:	4413      	add	r3, r2
 8001f38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f42:	fb02 f203 	mul.w	r2, r2, r3
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4e:	e004      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	623b      	str	r3, [r7, #32]
      break;
 8001f5e:	e002      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f62:	623b      	str	r3, [r7, #32]
      break;
 8001f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f66:	6a3b      	ldr	r3, [r7, #32]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc90      	pop	{r4, r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	08003ae8 	.word	0x08003ae8
 8001f78:	08003af8 	.word	0x08003af8
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	007a1200 	.word	0x007a1200
 8001f84:	003d0900 	.word	0x003d0900

08001f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f8c:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	20000000 	.word	0x20000000

08001f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa0:	f7ff fff2 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
 8001fb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	08003b0c 	.word	0x08003b0c

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fc8:	f7ff ffde 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4601      	mov	r1, r0
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	0adb      	lsrs	r3, r3, #11
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	08003b0c 	.word	0x08003b0c

08001fec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <RCC_Delay+0x34>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <RCC_Delay+0x38>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0a5b      	lsrs	r3, r3, #9
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002008:	bf00      	nop
  }
  while (Delay --);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1e5a      	subs	r2, r3, #1
 800200e:	60fa      	str	r2, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f9      	bne.n	8002008 <RCC_Delay+0x1c>
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000000 	.word	0x20000000
 8002024:	10624dd3 	.word	0x10624dd3

08002028 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e076      	b.n	8002128 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	2b00      	cmp	r3, #0
 8002040:	d108      	bne.n	8002054 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800204a:	d009      	beq.n	8002060 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
 8002052:	e005      	b.n	8002060 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fde8 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002096:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e4:	ea42 0103 	orr.w	r1, r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	0c1a      	lsrs	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f002 0204 	and.w	r2, r2, #4
 8002106:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69da      	ldr	r2, [r3, #28]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002116:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e041      	b.n	80021c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fdc4 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f000 fb14 	bl	800279c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d001      	beq.n	80021e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e03a      	b.n	800225e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a18      	ldr	r2, [pc, #96]	; (8002268 <HAL_TIM_Base_Start_IT+0x98>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00e      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x58>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002212:	d009      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x58>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <HAL_TIM_Base_Start_IT+0x9c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d004      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x58>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a13      	ldr	r2, [pc, #76]	; (8002270 <HAL_TIM_Base_Start_IT+0xa0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d111      	bne.n	800224c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b06      	cmp	r3, #6
 8002238:	d010      	beq.n	800225c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224a:	e007      	b.n	800225c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	40012c00 	.word	0x40012c00
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800

08002274 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e041      	b.n	800230a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f839 	bl	8002312 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3304      	adds	r3, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f000 fa72 	bl	800279c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d122      	bne.n	8002380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b02      	cmp	r3, #2
 8002346:	d11b      	bne.n	8002380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0202 	mvn.w	r2, #2
 8002350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f9fc 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 800236c:	e005      	b.n	800237a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f9ef 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f9fe 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b04      	cmp	r3, #4
 800238c:	d122      	bne.n	80023d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b04      	cmp	r3, #4
 800239a:	d11b      	bne.n	80023d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0204 	mvn.w	r2, #4
 80023a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2202      	movs	r2, #2
 80023aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f9d2 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f9c5 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f9d4 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d122      	bne.n	8002428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d11b      	bne.n	8002428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0208 	mvn.w	r2, #8
 80023f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2204      	movs	r2, #4
 80023fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f9a8 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f99b 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f9aa 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b10      	cmp	r3, #16
 8002434:	d122      	bne.n	800247c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b10      	cmp	r3, #16
 8002442:	d11b      	bne.n	800247c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0210 	mvn.w	r2, #16
 800244c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2208      	movs	r2, #8
 8002452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f97e 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f971 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f980 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d107      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0201 	mvn.w	r2, #1
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe f960 	bl	8000768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b2:	2b80      	cmp	r3, #128	; 0x80
 80024b4:	d10e      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c0:	2b80      	cmp	r3, #128	; 0x80
 80024c2:	d107      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fc4b 	bl	8002d6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b40      	cmp	r3, #64	; 0x40
 80024e0:	d10e      	bne.n	8002500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d107      	bne.n	8002500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f944 	bl	8002788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b20      	cmp	r3, #32
 800250c:	d10e      	bne.n	800252c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b20      	cmp	r3, #32
 800251a:	d107      	bne.n	800252c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0220 	mvn.w	r2, #32
 8002524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fc16 	bl	8002d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_TIM_OC_ConfigChannel+0x1a>
 800254a:	2302      	movs	r3, #2
 800254c:	e046      	b.n	80025dc <HAL_TIM_OC_ConfigChannel+0xa8>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b0c      	cmp	r3, #12
 800255a:	d839      	bhi.n	80025d0 <HAL_TIM_OC_ConfigChannel+0x9c>
 800255c:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <HAL_TIM_OC_ConfigChannel+0x30>)
 800255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002562:	bf00      	nop
 8002564:	08002599 	.word	0x08002599
 8002568:	080025d1 	.word	0x080025d1
 800256c:	080025d1 	.word	0x080025d1
 8002570:	080025d1 	.word	0x080025d1
 8002574:	080025a7 	.word	0x080025a7
 8002578:	080025d1 	.word	0x080025d1
 800257c:	080025d1 	.word	0x080025d1
 8002580:	080025d1 	.word	0x080025d1
 8002584:	080025b5 	.word	0x080025b5
 8002588:	080025d1 	.word	0x080025d1
 800258c:	080025d1 	.word	0x080025d1
 8002590:	080025d1 	.word	0x080025d1
 8002594:	080025c3 	.word	0x080025c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f95e 	bl	8002860 <TIM_OC1_SetConfig>
      break;
 80025a4:	e015      	b.n	80025d2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 f9bd 	bl	800292c <TIM_OC2_SetConfig>
      break;
 80025b2:	e00e      	b.n	80025d2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fa20 	bl	8002a00 <TIM_OC3_SetConfig>
      break;
 80025c0:	e007      	b.n	80025d2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fa83 	bl	8002ad4 <TIM_OC4_SetConfig>
      break;
 80025ce:	e000      	b.n	80025d2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80025d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x18>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e0a6      	b.n	800274a <HAL_TIM_ConfigClockSource+0x166>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800261a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002622:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d067      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x120>
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d80b      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x6c>
 8002638:	2b10      	cmp	r3, #16
 800263a:	d073      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x140>
 800263c:	2b10      	cmp	r3, #16
 800263e:	d802      	bhi.n	8002646 <HAL_TIM_ConfigClockSource+0x62>
 8002640:	2b00      	cmp	r3, #0
 8002642:	d06f      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002644:	e078      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002646:	2b20      	cmp	r3, #32
 8002648:	d06c      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x140>
 800264a:	2b30      	cmp	r3, #48	; 0x30
 800264c:	d06a      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800264e:	e073      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d00d      	beq.n	8002670 <HAL_TIM_ConfigClockSource+0x8c>
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d804      	bhi.n	8002662 <HAL_TIM_ConfigClockSource+0x7e>
 8002658:	2b50      	cmp	r3, #80	; 0x50
 800265a:	d033      	beq.n	80026c4 <HAL_TIM_ConfigClockSource+0xe0>
 800265c:	2b60      	cmp	r3, #96	; 0x60
 800265e:	d041      	beq.n	80026e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002660:	e06a      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002666:	d066      	beq.n	8002736 <HAL_TIM_ConfigClockSource+0x152>
 8002668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266c:	d017      	beq.n	800269e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800266e:	e063      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6899      	ldr	r1, [r3, #8]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f000 faed 	bl	8002c5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002692:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	609a      	str	r2, [r3, #8]
      break;
 800269c:	e04c      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6899      	ldr	r1, [r3, #8]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f000 fad6 	bl	8002c5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026c0:	609a      	str	r2, [r3, #8]
      break;
 80026c2:	e039      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	461a      	mov	r2, r3
 80026d2:	f000 fa4d 	bl	8002b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2150      	movs	r1, #80	; 0x50
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 faa4 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 80026e2:	e029      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f000 fa6b 	bl	8002bcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2160      	movs	r1, #96	; 0x60
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fa94 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 8002702:	e019      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	461a      	mov	r2, r3
 8002712:	f000 fa2d 	bl	8002b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2140      	movs	r1, #64	; 0x40
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fa84 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 8002722:	e009      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f000 fa7b 	bl	8002c2a <TIM_ITRx_SetConfig>
        break;
 8002734:	e000      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
	...

0800279c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a29      	ldr	r2, [pc, #164]	; (8002854 <TIM_Base_SetConfig+0xb8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00b      	beq.n	80027cc <TIM_Base_SetConfig+0x30>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ba:	d007      	beq.n	80027cc <TIM_Base_SetConfig+0x30>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a26      	ldr	r2, [pc, #152]	; (8002858 <TIM_Base_SetConfig+0xbc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d003      	beq.n	80027cc <TIM_Base_SetConfig+0x30>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a25      	ldr	r2, [pc, #148]	; (800285c <TIM_Base_SetConfig+0xc0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d108      	bne.n	80027de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <TIM_Base_SetConfig+0xb8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00b      	beq.n	80027fe <TIM_Base_SetConfig+0x62>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ec:	d007      	beq.n	80027fe <TIM_Base_SetConfig+0x62>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <TIM_Base_SetConfig+0xbc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d003      	beq.n	80027fe <TIM_Base_SetConfig+0x62>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a18      	ldr	r2, [pc, #96]	; (800285c <TIM_Base_SetConfig+0xc0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d108      	bne.n	8002810 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a07      	ldr	r2, [pc, #28]	; (8002854 <TIM_Base_SetConfig+0xb8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d103      	bne.n	8002844 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	615a      	str	r2, [r3, #20]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40000400 	.word	0x40000400
 800285c:	40000800 	.word	0x40000800

08002860 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0201 	bic.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f023 0302 	bic.w	r3, r3, #2
 80028a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <TIM_OC1_SetConfig+0xc8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d10c      	bne.n	80028d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f023 0308 	bic.w	r3, r3, #8
 80028c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f023 0304 	bic.w	r3, r3, #4
 80028d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a13      	ldr	r2, [pc, #76]	; (8002928 <TIM_OC1_SetConfig+0xc8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d111      	bne.n	8002902 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	621a      	str	r2, [r3, #32]
}
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40012c00 	.word	0x40012c00

0800292c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f023 0210 	bic.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f023 0320 	bic.w	r3, r3, #32
 8002976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <TIM_OC2_SetConfig+0xd0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10d      	bne.n	80029a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a14      	ldr	r2, [pc, #80]	; (80029fc <TIM_OC2_SetConfig+0xd0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d113      	bne.n	80029d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	40012c00 	.word	0x40012c00

08002a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <TIM_OC3_SetConfig+0xd0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10d      	bne.n	8002a7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <TIM_OC3_SetConfig+0xd0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d113      	bne.n	8002aaa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	621a      	str	r2, [r3, #32]
}
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40012c00 	.word	0x40012c00

08002ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	031b      	lsls	r3, r3, #12
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a0f      	ldr	r2, [pc, #60]	; (8002b6c <TIM_OC4_SetConfig+0x98>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d109      	bne.n	8002b48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	019b      	lsls	r3, r3, #6
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	40012c00 	.word	0x40012c00

08002b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f023 0201 	bic.w	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f023 030a 	bic.w	r3, r3, #10
 8002bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	621a      	str	r2, [r3, #32]
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f023 0210 	bic.w	r2, r3, #16
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	031b      	lsls	r3, r3, #12
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	621a      	str	r2, [r3, #32]
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f043 0307 	orr.w	r3, r3, #7
 8002c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	609a      	str	r2, [r3, #8]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr

08002c5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b087      	sub	sp, #28
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	021a      	lsls	r2, r3, #8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	609a      	str	r2, [r3, #8]
}
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e046      	b.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00e      	beq.n	8002d16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d00:	d009      	beq.n	8002d16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a10      	ldr	r2, [pc, #64]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10c      	bne.n	8002d30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	40012c00 	.word	0x40012c00
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800

08002d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e03f      	b.n	8002e0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fd ffc4 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	; 0x24
 8002dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f905 	bl	8002fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b08a      	sub	sp, #40	; 0x28
 8002e1a:	af02      	add	r7, sp, #8
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4613      	mov	r3, r2
 8002e24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d17c      	bne.n	8002f30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_UART_Transmit+0x2c>
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e075      	b.n	8002f32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_UART_Transmit+0x3e>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e06e      	b.n	8002f32 <HAL_UART_Transmit+0x11c>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2221      	movs	r2, #33	; 0x21
 8002e66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e6a:	f7fe f8bd 	bl	8000fe8 <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	88fa      	ldrh	r2, [r7, #6]
 8002e74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e84:	d108      	bne.n	8002e98 <HAL_UART_Transmit+0x82>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	e003      	b.n	8002ea0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002ea8:	e02a      	b.n	8002f00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f840 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e036      	b.n	8002f32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	3302      	adds	r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	e007      	b.n	8002ef2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1cf      	bne.n	8002eaa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f810 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e006      	b.n	8002f32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4a:	e02c      	b.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f52:	d028      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f5a:	f7fe f845 	bl	8000fe8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d21d      	bcs.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f78:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e00f      	b.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d0c3      	beq.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800300a:	f023 030c 	bic.w	r3, r3, #12
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	430b      	orrs	r3, r1
 8003016:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2c      	ldr	r2, [pc, #176]	; (80030e4 <UART_SetConfig+0x114>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d103      	bne.n	8003040 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003038:	f7fe ffc4 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	e002      	b.n	8003046 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003040:	f7fe ffac 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8003044:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	009a      	lsls	r2, r3, #2
 8003050:	441a      	add	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <UART_SetConfig+0x118>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	0119      	lsls	r1, r3, #4
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	009a      	lsls	r2, r3, #2
 8003070:	441a      	add	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	fbb2 f2f3 	udiv	r2, r2, r3
 800307c:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <UART_SetConfig+0x118>)
 800307e:	fba3 0302 	umull	r0, r3, r3, r2
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	2064      	movs	r0, #100	; 0x64
 8003086:	fb00 f303 	mul.w	r3, r0, r3
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	3332      	adds	r3, #50	; 0x32
 8003090:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <UART_SetConfig+0x118>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309c:	4419      	add	r1, r3
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009a      	lsls	r2, r3, #2
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <UART_SetConfig+0x118>)
 80030b6:	fba3 0302 	umull	r0, r3, r3, r2
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2064      	movs	r0, #100	; 0x64
 80030be:	fb00 f303 	mul.w	r3, r0, r3
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	3332      	adds	r3, #50	; 0x32
 80030c8:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <UART_SetConfig+0x118>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	f003 020f 	and.w	r2, r3, #15
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	440a      	add	r2, r1
 80030da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40013800 	.word	0x40013800
 80030e8:	51eb851f 	.word	0x51eb851f

080030ec <_Znaj>:
 80030ec:	f000 b800 	b.w	80030f0 <_Znwj>

080030f0 <_Znwj>:
 80030f0:	b510      	push	{r4, lr}
 80030f2:	2800      	cmp	r0, #0
 80030f4:	bf14      	ite	ne
 80030f6:	4604      	movne	r4, r0
 80030f8:	2401      	moveq	r4, #1
 80030fa:	4620      	mov	r0, r4
 80030fc:	f000 f844 	bl	8003188 <malloc>
 8003100:	b930      	cbnz	r0, 8003110 <_Znwj+0x20>
 8003102:	f000 f807 	bl	8003114 <_ZSt15get_new_handlerv>
 8003106:	b908      	cbnz	r0, 800310c <_Znwj+0x1c>
 8003108:	f000 f80c 	bl	8003124 <abort>
 800310c:	4780      	blx	r0
 800310e:	e7f4      	b.n	80030fa <_Znwj+0xa>
 8003110:	bd10      	pop	{r4, pc}
	...

08003114 <_ZSt15get_new_handlerv>:
 8003114:	4b02      	ldr	r3, [pc, #8]	; (8003120 <_ZSt15get_new_handlerv+0xc>)
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	f3bf 8f5b 	dmb	ish
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	200004ac 	.word	0x200004ac

08003124 <abort>:
 8003124:	b508      	push	{r3, lr}
 8003126:	2006      	movs	r0, #6
 8003128:	f000 f91c 	bl	8003364 <raise>
 800312c:	2001      	movs	r0, #1
 800312e:	f7fd fe96 	bl	8000e5e <_exit>
	...

08003134 <__errno>:
 8003134:	4b01      	ldr	r3, [pc, #4]	; (800313c <__errno+0x8>)
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	2000000c 	.word	0x2000000c

08003140 <__libc_init_array>:
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	2500      	movs	r5, #0
 8003144:	4e0c      	ldr	r6, [pc, #48]	; (8003178 <__libc_init_array+0x38>)
 8003146:	4c0d      	ldr	r4, [pc, #52]	; (800317c <__libc_init_array+0x3c>)
 8003148:	1ba4      	subs	r4, r4, r6
 800314a:	10a4      	asrs	r4, r4, #2
 800314c:	42a5      	cmp	r5, r4
 800314e:	d109      	bne.n	8003164 <__libc_init_array+0x24>
 8003150:	f000 fc80 	bl	8003a54 <_init>
 8003154:	2500      	movs	r5, #0
 8003156:	4e0a      	ldr	r6, [pc, #40]	; (8003180 <__libc_init_array+0x40>)
 8003158:	4c0a      	ldr	r4, [pc, #40]	; (8003184 <__libc_init_array+0x44>)
 800315a:	1ba4      	subs	r4, r4, r6
 800315c:	10a4      	asrs	r4, r4, #2
 800315e:	42a5      	cmp	r5, r4
 8003160:	d105      	bne.n	800316e <__libc_init_array+0x2e>
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003168:	4798      	blx	r3
 800316a:	3501      	adds	r5, #1
 800316c:	e7ee      	b.n	800314c <__libc_init_array+0xc>
 800316e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003172:	4798      	blx	r3
 8003174:	3501      	adds	r5, #1
 8003176:	e7f2      	b.n	800315e <__libc_init_array+0x1e>
 8003178:	08003b48 	.word	0x08003b48
 800317c:	08003b48 	.word	0x08003b48
 8003180:	08003b48 	.word	0x08003b48
 8003184:	08003b50 	.word	0x08003b50

08003188 <malloc>:
 8003188:	4b02      	ldr	r3, [pc, #8]	; (8003194 <malloc+0xc>)
 800318a:	4601      	mov	r1, r0
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	f000 b857 	b.w	8003240 <_malloc_r>
 8003192:	bf00      	nop
 8003194:	2000000c 	.word	0x2000000c

08003198 <memset>:
 8003198:	4603      	mov	r3, r0
 800319a:	4402      	add	r2, r0
 800319c:	4293      	cmp	r3, r2
 800319e:	d100      	bne.n	80031a2 <memset+0xa>
 80031a0:	4770      	bx	lr
 80031a2:	f803 1b01 	strb.w	r1, [r3], #1
 80031a6:	e7f9      	b.n	800319c <memset+0x4>

080031a8 <_free_r>:
 80031a8:	b538      	push	{r3, r4, r5, lr}
 80031aa:	4605      	mov	r5, r0
 80031ac:	2900      	cmp	r1, #0
 80031ae:	d043      	beq.n	8003238 <_free_r+0x90>
 80031b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031b4:	1f0c      	subs	r4, r1, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bfb8      	it	lt
 80031ba:	18e4      	addlt	r4, r4, r3
 80031bc:	f000 f90e 	bl	80033dc <__malloc_lock>
 80031c0:	4a1e      	ldr	r2, [pc, #120]	; (800323c <_free_r+0x94>)
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	4610      	mov	r0, r2
 80031c6:	b933      	cbnz	r3, 80031d6 <_free_r+0x2e>
 80031c8:	6063      	str	r3, [r4, #4]
 80031ca:	6014      	str	r4, [r2, #0]
 80031cc:	4628      	mov	r0, r5
 80031ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031d2:	f000 b904 	b.w	80033de <__malloc_unlock>
 80031d6:	42a3      	cmp	r3, r4
 80031d8:	d90b      	bls.n	80031f2 <_free_r+0x4a>
 80031da:	6821      	ldr	r1, [r4, #0]
 80031dc:	1862      	adds	r2, r4, r1
 80031de:	4293      	cmp	r3, r2
 80031e0:	bf01      	itttt	eq
 80031e2:	681a      	ldreq	r2, [r3, #0]
 80031e4:	685b      	ldreq	r3, [r3, #4]
 80031e6:	1852      	addeq	r2, r2, r1
 80031e8:	6022      	streq	r2, [r4, #0]
 80031ea:	6063      	str	r3, [r4, #4]
 80031ec:	6004      	str	r4, [r0, #0]
 80031ee:	e7ed      	b.n	80031cc <_free_r+0x24>
 80031f0:	4613      	mov	r3, r2
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	b10a      	cbz	r2, 80031fa <_free_r+0x52>
 80031f6:	42a2      	cmp	r2, r4
 80031f8:	d9fa      	bls.n	80031f0 <_free_r+0x48>
 80031fa:	6819      	ldr	r1, [r3, #0]
 80031fc:	1858      	adds	r0, r3, r1
 80031fe:	42a0      	cmp	r0, r4
 8003200:	d10b      	bne.n	800321a <_free_r+0x72>
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	4401      	add	r1, r0
 8003206:	1858      	adds	r0, r3, r1
 8003208:	4282      	cmp	r2, r0
 800320a:	6019      	str	r1, [r3, #0]
 800320c:	d1de      	bne.n	80031cc <_free_r+0x24>
 800320e:	6810      	ldr	r0, [r2, #0]
 8003210:	6852      	ldr	r2, [r2, #4]
 8003212:	4401      	add	r1, r0
 8003214:	6019      	str	r1, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	e7d8      	b.n	80031cc <_free_r+0x24>
 800321a:	d902      	bls.n	8003222 <_free_r+0x7a>
 800321c:	230c      	movs	r3, #12
 800321e:	602b      	str	r3, [r5, #0]
 8003220:	e7d4      	b.n	80031cc <_free_r+0x24>
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	1821      	adds	r1, r4, r0
 8003226:	428a      	cmp	r2, r1
 8003228:	bf01      	itttt	eq
 800322a:	6811      	ldreq	r1, [r2, #0]
 800322c:	6852      	ldreq	r2, [r2, #4]
 800322e:	1809      	addeq	r1, r1, r0
 8003230:	6021      	streq	r1, [r4, #0]
 8003232:	6062      	str	r2, [r4, #4]
 8003234:	605c      	str	r4, [r3, #4]
 8003236:	e7c9      	b.n	80031cc <_free_r+0x24>
 8003238:	bd38      	pop	{r3, r4, r5, pc}
 800323a:	bf00      	nop
 800323c:	200004b0 	.word	0x200004b0

08003240 <_malloc_r>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	1ccd      	adds	r5, r1, #3
 8003244:	f025 0503 	bic.w	r5, r5, #3
 8003248:	3508      	adds	r5, #8
 800324a:	2d0c      	cmp	r5, #12
 800324c:	bf38      	it	cc
 800324e:	250c      	movcc	r5, #12
 8003250:	2d00      	cmp	r5, #0
 8003252:	4606      	mov	r6, r0
 8003254:	db01      	blt.n	800325a <_malloc_r+0x1a>
 8003256:	42a9      	cmp	r1, r5
 8003258:	d903      	bls.n	8003262 <_malloc_r+0x22>
 800325a:	230c      	movs	r3, #12
 800325c:	6033      	str	r3, [r6, #0]
 800325e:	2000      	movs	r0, #0
 8003260:	bd70      	pop	{r4, r5, r6, pc}
 8003262:	f000 f8bb 	bl	80033dc <__malloc_lock>
 8003266:	4a21      	ldr	r2, [pc, #132]	; (80032ec <_malloc_r+0xac>)
 8003268:	6814      	ldr	r4, [r2, #0]
 800326a:	4621      	mov	r1, r4
 800326c:	b991      	cbnz	r1, 8003294 <_malloc_r+0x54>
 800326e:	4c20      	ldr	r4, [pc, #128]	; (80032f0 <_malloc_r+0xb0>)
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	b91b      	cbnz	r3, 800327c <_malloc_r+0x3c>
 8003274:	4630      	mov	r0, r6
 8003276:	f000 f83d 	bl	80032f4 <_sbrk_r>
 800327a:	6020      	str	r0, [r4, #0]
 800327c:	4629      	mov	r1, r5
 800327e:	4630      	mov	r0, r6
 8003280:	f000 f838 	bl	80032f4 <_sbrk_r>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d124      	bne.n	80032d2 <_malloc_r+0x92>
 8003288:	230c      	movs	r3, #12
 800328a:	4630      	mov	r0, r6
 800328c:	6033      	str	r3, [r6, #0]
 800328e:	f000 f8a6 	bl	80033de <__malloc_unlock>
 8003292:	e7e4      	b.n	800325e <_malloc_r+0x1e>
 8003294:	680b      	ldr	r3, [r1, #0]
 8003296:	1b5b      	subs	r3, r3, r5
 8003298:	d418      	bmi.n	80032cc <_malloc_r+0x8c>
 800329a:	2b0b      	cmp	r3, #11
 800329c:	d90f      	bls.n	80032be <_malloc_r+0x7e>
 800329e:	600b      	str	r3, [r1, #0]
 80032a0:	18cc      	adds	r4, r1, r3
 80032a2:	50cd      	str	r5, [r1, r3]
 80032a4:	4630      	mov	r0, r6
 80032a6:	f000 f89a 	bl	80033de <__malloc_unlock>
 80032aa:	f104 000b 	add.w	r0, r4, #11
 80032ae:	1d23      	adds	r3, r4, #4
 80032b0:	f020 0007 	bic.w	r0, r0, #7
 80032b4:	1ac3      	subs	r3, r0, r3
 80032b6:	d0d3      	beq.n	8003260 <_malloc_r+0x20>
 80032b8:	425a      	negs	r2, r3
 80032ba:	50e2      	str	r2, [r4, r3]
 80032bc:	e7d0      	b.n	8003260 <_malloc_r+0x20>
 80032be:	684b      	ldr	r3, [r1, #4]
 80032c0:	428c      	cmp	r4, r1
 80032c2:	bf16      	itet	ne
 80032c4:	6063      	strne	r3, [r4, #4]
 80032c6:	6013      	streq	r3, [r2, #0]
 80032c8:	460c      	movne	r4, r1
 80032ca:	e7eb      	b.n	80032a4 <_malloc_r+0x64>
 80032cc:	460c      	mov	r4, r1
 80032ce:	6849      	ldr	r1, [r1, #4]
 80032d0:	e7cc      	b.n	800326c <_malloc_r+0x2c>
 80032d2:	1cc4      	adds	r4, r0, #3
 80032d4:	f024 0403 	bic.w	r4, r4, #3
 80032d8:	42a0      	cmp	r0, r4
 80032da:	d005      	beq.n	80032e8 <_malloc_r+0xa8>
 80032dc:	1a21      	subs	r1, r4, r0
 80032de:	4630      	mov	r0, r6
 80032e0:	f000 f808 	bl	80032f4 <_sbrk_r>
 80032e4:	3001      	adds	r0, #1
 80032e6:	d0cf      	beq.n	8003288 <_malloc_r+0x48>
 80032e8:	6025      	str	r5, [r4, #0]
 80032ea:	e7db      	b.n	80032a4 <_malloc_r+0x64>
 80032ec:	200004b0 	.word	0x200004b0
 80032f0:	200004b4 	.word	0x200004b4

080032f4 <_sbrk_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	2300      	movs	r3, #0
 80032f8:	4c05      	ldr	r4, [pc, #20]	; (8003310 <_sbrk_r+0x1c>)
 80032fa:	4605      	mov	r5, r0
 80032fc:	4608      	mov	r0, r1
 80032fe:	6023      	str	r3, [r4, #0]
 8003300:	f7fd fdb8 	bl	8000e74 <_sbrk>
 8003304:	1c43      	adds	r3, r0, #1
 8003306:	d102      	bne.n	800330e <_sbrk_r+0x1a>
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	b103      	cbz	r3, 800330e <_sbrk_r+0x1a>
 800330c:	602b      	str	r3, [r5, #0]
 800330e:	bd38      	pop	{r3, r4, r5, pc}
 8003310:	200005ec 	.word	0x200005ec

08003314 <_raise_r>:
 8003314:	291f      	cmp	r1, #31
 8003316:	b538      	push	{r3, r4, r5, lr}
 8003318:	4604      	mov	r4, r0
 800331a:	460d      	mov	r5, r1
 800331c:	d904      	bls.n	8003328 <_raise_r+0x14>
 800331e:	2316      	movs	r3, #22
 8003320:	6003      	str	r3, [r0, #0]
 8003322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800332a:	b112      	cbz	r2, 8003332 <_raise_r+0x1e>
 800332c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003330:	b94b      	cbnz	r3, 8003346 <_raise_r+0x32>
 8003332:	4620      	mov	r0, r4
 8003334:	f000 f830 	bl	8003398 <_getpid_r>
 8003338:	462a      	mov	r2, r5
 800333a:	4601      	mov	r1, r0
 800333c:	4620      	mov	r0, r4
 800333e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003342:	f000 b817 	b.w	8003374 <_kill_r>
 8003346:	2b01      	cmp	r3, #1
 8003348:	d00a      	beq.n	8003360 <_raise_r+0x4c>
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	d103      	bne.n	8003356 <_raise_r+0x42>
 800334e:	2316      	movs	r3, #22
 8003350:	6003      	str	r3, [r0, #0]
 8003352:	2001      	movs	r0, #1
 8003354:	e7e7      	b.n	8003326 <_raise_r+0x12>
 8003356:	2400      	movs	r4, #0
 8003358:	4628      	mov	r0, r5
 800335a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800335e:	4798      	blx	r3
 8003360:	2000      	movs	r0, #0
 8003362:	e7e0      	b.n	8003326 <_raise_r+0x12>

08003364 <raise>:
 8003364:	4b02      	ldr	r3, [pc, #8]	; (8003370 <raise+0xc>)
 8003366:	4601      	mov	r1, r0
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	f7ff bfd3 	b.w	8003314 <_raise_r>
 800336e:	bf00      	nop
 8003370:	2000000c 	.word	0x2000000c

08003374 <_kill_r>:
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	2300      	movs	r3, #0
 8003378:	4c06      	ldr	r4, [pc, #24]	; (8003394 <_kill_r+0x20>)
 800337a:	4605      	mov	r5, r0
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	f7fd fd5c 	bl	8000e3e <_kill>
 8003386:	1c43      	adds	r3, r0, #1
 8003388:	d102      	bne.n	8003390 <_kill_r+0x1c>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	b103      	cbz	r3, 8003390 <_kill_r+0x1c>
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	bd38      	pop	{r3, r4, r5, pc}
 8003392:	bf00      	nop
 8003394:	200005ec 	.word	0x200005ec

08003398 <_getpid_r>:
 8003398:	f7fd bd4a 	b.w	8000e30 <_getpid>

0800339c <siprintf>:
 800339c:	b40e      	push	{r1, r2, r3}
 800339e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033a2:	b500      	push	{lr}
 80033a4:	b09c      	sub	sp, #112	; 0x70
 80033a6:	ab1d      	add	r3, sp, #116	; 0x74
 80033a8:	9002      	str	r0, [sp, #8]
 80033aa:	9006      	str	r0, [sp, #24]
 80033ac:	9107      	str	r1, [sp, #28]
 80033ae:	9104      	str	r1, [sp, #16]
 80033b0:	4808      	ldr	r0, [pc, #32]	; (80033d4 <siprintf+0x38>)
 80033b2:	4909      	ldr	r1, [pc, #36]	; (80033d8 <siprintf+0x3c>)
 80033b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033b8:	9105      	str	r1, [sp, #20]
 80033ba:	6800      	ldr	r0, [r0, #0]
 80033bc:	a902      	add	r1, sp, #8
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	f000 f868 	bl	8003494 <_svfiprintf_r>
 80033c4:	2200      	movs	r2, #0
 80033c6:	9b02      	ldr	r3, [sp, #8]
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	b01c      	add	sp, #112	; 0x70
 80033cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80033d0:	b003      	add	sp, #12
 80033d2:	4770      	bx	lr
 80033d4:	2000000c 	.word	0x2000000c
 80033d8:	ffff0208 	.word	0xffff0208

080033dc <__malloc_lock>:
 80033dc:	4770      	bx	lr

080033de <__malloc_unlock>:
 80033de:	4770      	bx	lr

080033e0 <__ssputs_r>:
 80033e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e4:	688e      	ldr	r6, [r1, #8]
 80033e6:	4682      	mov	sl, r0
 80033e8:	429e      	cmp	r6, r3
 80033ea:	460c      	mov	r4, r1
 80033ec:	4690      	mov	r8, r2
 80033ee:	4699      	mov	r9, r3
 80033f0:	d837      	bhi.n	8003462 <__ssputs_r+0x82>
 80033f2:	898a      	ldrh	r2, [r1, #12]
 80033f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033f8:	d031      	beq.n	800345e <__ssputs_r+0x7e>
 80033fa:	2302      	movs	r3, #2
 80033fc:	6825      	ldr	r5, [r4, #0]
 80033fe:	6909      	ldr	r1, [r1, #16]
 8003400:	1a6f      	subs	r7, r5, r1
 8003402:	6965      	ldr	r5, [r4, #20]
 8003404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003408:	fb95 f5f3 	sdiv	r5, r5, r3
 800340c:	f109 0301 	add.w	r3, r9, #1
 8003410:	443b      	add	r3, r7
 8003412:	429d      	cmp	r5, r3
 8003414:	bf38      	it	cc
 8003416:	461d      	movcc	r5, r3
 8003418:	0553      	lsls	r3, r2, #21
 800341a:	d530      	bpl.n	800347e <__ssputs_r+0x9e>
 800341c:	4629      	mov	r1, r5
 800341e:	f7ff ff0f 	bl	8003240 <_malloc_r>
 8003422:	4606      	mov	r6, r0
 8003424:	b950      	cbnz	r0, 800343c <__ssputs_r+0x5c>
 8003426:	230c      	movs	r3, #12
 8003428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800342c:	f8ca 3000 	str.w	r3, [sl]
 8003430:	89a3      	ldrh	r3, [r4, #12]
 8003432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003436:	81a3      	strh	r3, [r4, #12]
 8003438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800343c:	463a      	mov	r2, r7
 800343e:	6921      	ldr	r1, [r4, #16]
 8003440:	f000 fab6 	bl	80039b0 <memcpy>
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344e:	81a3      	strh	r3, [r4, #12]
 8003450:	6126      	str	r6, [r4, #16]
 8003452:	443e      	add	r6, r7
 8003454:	6026      	str	r6, [r4, #0]
 8003456:	464e      	mov	r6, r9
 8003458:	6165      	str	r5, [r4, #20]
 800345a:	1bed      	subs	r5, r5, r7
 800345c:	60a5      	str	r5, [r4, #8]
 800345e:	454e      	cmp	r6, r9
 8003460:	d900      	bls.n	8003464 <__ssputs_r+0x84>
 8003462:	464e      	mov	r6, r9
 8003464:	4632      	mov	r2, r6
 8003466:	4641      	mov	r1, r8
 8003468:	6820      	ldr	r0, [r4, #0]
 800346a:	f000 faac 	bl	80039c6 <memmove>
 800346e:	68a3      	ldr	r3, [r4, #8]
 8003470:	2000      	movs	r0, #0
 8003472:	1b9b      	subs	r3, r3, r6
 8003474:	60a3      	str	r3, [r4, #8]
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	441e      	add	r6, r3
 800347a:	6026      	str	r6, [r4, #0]
 800347c:	e7dc      	b.n	8003438 <__ssputs_r+0x58>
 800347e:	462a      	mov	r2, r5
 8003480:	f000 faba 	bl	80039f8 <_realloc_r>
 8003484:	4606      	mov	r6, r0
 8003486:	2800      	cmp	r0, #0
 8003488:	d1e2      	bne.n	8003450 <__ssputs_r+0x70>
 800348a:	6921      	ldr	r1, [r4, #16]
 800348c:	4650      	mov	r0, sl
 800348e:	f7ff fe8b 	bl	80031a8 <_free_r>
 8003492:	e7c8      	b.n	8003426 <__ssputs_r+0x46>

08003494 <_svfiprintf_r>:
 8003494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003498:	461d      	mov	r5, r3
 800349a:	898b      	ldrh	r3, [r1, #12]
 800349c:	b09d      	sub	sp, #116	; 0x74
 800349e:	061f      	lsls	r7, r3, #24
 80034a0:	4680      	mov	r8, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	4616      	mov	r6, r2
 80034a6:	d50f      	bpl.n	80034c8 <_svfiprintf_r+0x34>
 80034a8:	690b      	ldr	r3, [r1, #16]
 80034aa:	b96b      	cbnz	r3, 80034c8 <_svfiprintf_r+0x34>
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	f7ff fec7 	bl	8003240 <_malloc_r>
 80034b2:	6020      	str	r0, [r4, #0]
 80034b4:	6120      	str	r0, [r4, #16]
 80034b6:	b928      	cbnz	r0, 80034c4 <_svfiprintf_r+0x30>
 80034b8:	230c      	movs	r3, #12
 80034ba:	f8c8 3000 	str.w	r3, [r8]
 80034be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034c2:	e0c8      	b.n	8003656 <_svfiprintf_r+0x1c2>
 80034c4:	2340      	movs	r3, #64	; 0x40
 80034c6:	6163      	str	r3, [r4, #20]
 80034c8:	2300      	movs	r3, #0
 80034ca:	9309      	str	r3, [sp, #36]	; 0x24
 80034cc:	2320      	movs	r3, #32
 80034ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034d2:	2330      	movs	r3, #48	; 0x30
 80034d4:	f04f 0b01 	mov.w	fp, #1
 80034d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034dc:	9503      	str	r5, [sp, #12]
 80034de:	4637      	mov	r7, r6
 80034e0:	463d      	mov	r5, r7
 80034e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034e6:	b10b      	cbz	r3, 80034ec <_svfiprintf_r+0x58>
 80034e8:	2b25      	cmp	r3, #37	; 0x25
 80034ea:	d13e      	bne.n	800356a <_svfiprintf_r+0xd6>
 80034ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80034f0:	d00b      	beq.n	800350a <_svfiprintf_r+0x76>
 80034f2:	4653      	mov	r3, sl
 80034f4:	4632      	mov	r2, r6
 80034f6:	4621      	mov	r1, r4
 80034f8:	4640      	mov	r0, r8
 80034fa:	f7ff ff71 	bl	80033e0 <__ssputs_r>
 80034fe:	3001      	adds	r0, #1
 8003500:	f000 80a4 	beq.w	800364c <_svfiprintf_r+0x1b8>
 8003504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003506:	4453      	add	r3, sl
 8003508:	9309      	str	r3, [sp, #36]	; 0x24
 800350a:	783b      	ldrb	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 809d 	beq.w	800364c <_svfiprintf_r+0x1b8>
 8003512:	2300      	movs	r3, #0
 8003514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800351c:	9304      	str	r3, [sp, #16]
 800351e:	9307      	str	r3, [sp, #28]
 8003520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003524:	931a      	str	r3, [sp, #104]	; 0x68
 8003526:	462f      	mov	r7, r5
 8003528:	2205      	movs	r2, #5
 800352a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800352e:	4850      	ldr	r0, [pc, #320]	; (8003670 <_svfiprintf_r+0x1dc>)
 8003530:	f000 fa30 	bl	8003994 <memchr>
 8003534:	9b04      	ldr	r3, [sp, #16]
 8003536:	b9d0      	cbnz	r0, 800356e <_svfiprintf_r+0xda>
 8003538:	06d9      	lsls	r1, r3, #27
 800353a:	bf44      	itt	mi
 800353c:	2220      	movmi	r2, #32
 800353e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003542:	071a      	lsls	r2, r3, #28
 8003544:	bf44      	itt	mi
 8003546:	222b      	movmi	r2, #43	; 0x2b
 8003548:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800354c:	782a      	ldrb	r2, [r5, #0]
 800354e:	2a2a      	cmp	r2, #42	; 0x2a
 8003550:	d015      	beq.n	800357e <_svfiprintf_r+0xea>
 8003552:	462f      	mov	r7, r5
 8003554:	2000      	movs	r0, #0
 8003556:	250a      	movs	r5, #10
 8003558:	9a07      	ldr	r2, [sp, #28]
 800355a:	4639      	mov	r1, r7
 800355c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003560:	3b30      	subs	r3, #48	; 0x30
 8003562:	2b09      	cmp	r3, #9
 8003564:	d94d      	bls.n	8003602 <_svfiprintf_r+0x16e>
 8003566:	b1b8      	cbz	r0, 8003598 <_svfiprintf_r+0x104>
 8003568:	e00f      	b.n	800358a <_svfiprintf_r+0xf6>
 800356a:	462f      	mov	r7, r5
 800356c:	e7b8      	b.n	80034e0 <_svfiprintf_r+0x4c>
 800356e:	4a40      	ldr	r2, [pc, #256]	; (8003670 <_svfiprintf_r+0x1dc>)
 8003570:	463d      	mov	r5, r7
 8003572:	1a80      	subs	r0, r0, r2
 8003574:	fa0b f000 	lsl.w	r0, fp, r0
 8003578:	4318      	orrs	r0, r3
 800357a:	9004      	str	r0, [sp, #16]
 800357c:	e7d3      	b.n	8003526 <_svfiprintf_r+0x92>
 800357e:	9a03      	ldr	r2, [sp, #12]
 8003580:	1d11      	adds	r1, r2, #4
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	9103      	str	r1, [sp, #12]
 8003586:	2a00      	cmp	r2, #0
 8003588:	db01      	blt.n	800358e <_svfiprintf_r+0xfa>
 800358a:	9207      	str	r2, [sp, #28]
 800358c:	e004      	b.n	8003598 <_svfiprintf_r+0x104>
 800358e:	4252      	negs	r2, r2
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	9207      	str	r2, [sp, #28]
 8003596:	9304      	str	r3, [sp, #16]
 8003598:	783b      	ldrb	r3, [r7, #0]
 800359a:	2b2e      	cmp	r3, #46	; 0x2e
 800359c:	d10c      	bne.n	80035b8 <_svfiprintf_r+0x124>
 800359e:	787b      	ldrb	r3, [r7, #1]
 80035a0:	2b2a      	cmp	r3, #42	; 0x2a
 80035a2:	d133      	bne.n	800360c <_svfiprintf_r+0x178>
 80035a4:	9b03      	ldr	r3, [sp, #12]
 80035a6:	3702      	adds	r7, #2
 80035a8:	1d1a      	adds	r2, r3, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	9203      	str	r2, [sp, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bfb8      	it	lt
 80035b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80035b6:	9305      	str	r3, [sp, #20]
 80035b8:	4d2e      	ldr	r5, [pc, #184]	; (8003674 <_svfiprintf_r+0x1e0>)
 80035ba:	2203      	movs	r2, #3
 80035bc:	7839      	ldrb	r1, [r7, #0]
 80035be:	4628      	mov	r0, r5
 80035c0:	f000 f9e8 	bl	8003994 <memchr>
 80035c4:	b138      	cbz	r0, 80035d6 <_svfiprintf_r+0x142>
 80035c6:	2340      	movs	r3, #64	; 0x40
 80035c8:	1b40      	subs	r0, r0, r5
 80035ca:	fa03 f000 	lsl.w	r0, r3, r0
 80035ce:	9b04      	ldr	r3, [sp, #16]
 80035d0:	3701      	adds	r7, #1
 80035d2:	4303      	orrs	r3, r0
 80035d4:	9304      	str	r3, [sp, #16]
 80035d6:	7839      	ldrb	r1, [r7, #0]
 80035d8:	2206      	movs	r2, #6
 80035da:	4827      	ldr	r0, [pc, #156]	; (8003678 <_svfiprintf_r+0x1e4>)
 80035dc:	1c7e      	adds	r6, r7, #1
 80035de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035e2:	f000 f9d7 	bl	8003994 <memchr>
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d038      	beq.n	800365c <_svfiprintf_r+0x1c8>
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <_svfiprintf_r+0x1e8>)
 80035ec:	bb13      	cbnz	r3, 8003634 <_svfiprintf_r+0x1a0>
 80035ee:	9b03      	ldr	r3, [sp, #12]
 80035f0:	3307      	adds	r3, #7
 80035f2:	f023 0307 	bic.w	r3, r3, #7
 80035f6:	3308      	adds	r3, #8
 80035f8:	9303      	str	r3, [sp, #12]
 80035fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035fc:	444b      	add	r3, r9
 80035fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003600:	e76d      	b.n	80034de <_svfiprintf_r+0x4a>
 8003602:	fb05 3202 	mla	r2, r5, r2, r3
 8003606:	2001      	movs	r0, #1
 8003608:	460f      	mov	r7, r1
 800360a:	e7a6      	b.n	800355a <_svfiprintf_r+0xc6>
 800360c:	2300      	movs	r3, #0
 800360e:	250a      	movs	r5, #10
 8003610:	4619      	mov	r1, r3
 8003612:	3701      	adds	r7, #1
 8003614:	9305      	str	r3, [sp, #20]
 8003616:	4638      	mov	r0, r7
 8003618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800361c:	3a30      	subs	r2, #48	; 0x30
 800361e:	2a09      	cmp	r2, #9
 8003620:	d903      	bls.n	800362a <_svfiprintf_r+0x196>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0c8      	beq.n	80035b8 <_svfiprintf_r+0x124>
 8003626:	9105      	str	r1, [sp, #20]
 8003628:	e7c6      	b.n	80035b8 <_svfiprintf_r+0x124>
 800362a:	fb05 2101 	mla	r1, r5, r1, r2
 800362e:	2301      	movs	r3, #1
 8003630:	4607      	mov	r7, r0
 8003632:	e7f0      	b.n	8003616 <_svfiprintf_r+0x182>
 8003634:	ab03      	add	r3, sp, #12
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	4622      	mov	r2, r4
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <_svfiprintf_r+0x1ec>)
 800363c:	a904      	add	r1, sp, #16
 800363e:	4640      	mov	r0, r8
 8003640:	f3af 8000 	nop.w
 8003644:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003648:	4681      	mov	r9, r0
 800364a:	d1d6      	bne.n	80035fa <_svfiprintf_r+0x166>
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	065b      	lsls	r3, r3, #25
 8003650:	f53f af35 	bmi.w	80034be <_svfiprintf_r+0x2a>
 8003654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003656:	b01d      	add	sp, #116	; 0x74
 8003658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800365c:	ab03      	add	r3, sp, #12
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4622      	mov	r2, r4
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <_svfiprintf_r+0x1ec>)
 8003664:	a904      	add	r1, sp, #16
 8003666:	4640      	mov	r0, r8
 8003668:	f000 f882 	bl	8003770 <_printf_i>
 800366c:	e7ea      	b.n	8003644 <_svfiprintf_r+0x1b0>
 800366e:	bf00      	nop
 8003670:	08003b14 	.word	0x08003b14
 8003674:	08003b1a 	.word	0x08003b1a
 8003678:	08003b1e 	.word	0x08003b1e
 800367c:	00000000 	.word	0x00000000
 8003680:	080033e1 	.word	0x080033e1

08003684 <_printf_common>:
 8003684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003688:	4691      	mov	r9, r2
 800368a:	461f      	mov	r7, r3
 800368c:	688a      	ldr	r2, [r1, #8]
 800368e:	690b      	ldr	r3, [r1, #16]
 8003690:	4606      	mov	r6, r0
 8003692:	4293      	cmp	r3, r2
 8003694:	bfb8      	it	lt
 8003696:	4613      	movlt	r3, r2
 8003698:	f8c9 3000 	str.w	r3, [r9]
 800369c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036a0:	460c      	mov	r4, r1
 80036a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a6:	b112      	cbz	r2, 80036ae <_printf_common+0x2a>
 80036a8:	3301      	adds	r3, #1
 80036aa:	f8c9 3000 	str.w	r3, [r9]
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	0699      	lsls	r1, r3, #26
 80036b2:	bf42      	ittt	mi
 80036b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036b8:	3302      	addmi	r3, #2
 80036ba:	f8c9 3000 	strmi.w	r3, [r9]
 80036be:	6825      	ldr	r5, [r4, #0]
 80036c0:	f015 0506 	ands.w	r5, r5, #6
 80036c4:	d107      	bne.n	80036d6 <_printf_common+0x52>
 80036c6:	f104 0a19 	add.w	sl, r4, #25
 80036ca:	68e3      	ldr	r3, [r4, #12]
 80036cc:	f8d9 2000 	ldr.w	r2, [r9]
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	42ab      	cmp	r3, r5
 80036d4:	dc29      	bgt.n	800372a <_printf_common+0xa6>
 80036d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80036da:	6822      	ldr	r2, [r4, #0]
 80036dc:	3300      	adds	r3, #0
 80036de:	bf18      	it	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	0692      	lsls	r2, r2, #26
 80036e4:	d42e      	bmi.n	8003744 <_printf_common+0xc0>
 80036e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ea:	4639      	mov	r1, r7
 80036ec:	4630      	mov	r0, r6
 80036ee:	47c0      	blx	r8
 80036f0:	3001      	adds	r0, #1
 80036f2:	d021      	beq.n	8003738 <_printf_common+0xb4>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	68e5      	ldr	r5, [r4, #12]
 80036f8:	f003 0306 	and.w	r3, r3, #6
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	bf18      	it	ne
 8003700:	2500      	movne	r5, #0
 8003702:	f8d9 2000 	ldr.w	r2, [r9]
 8003706:	f04f 0900 	mov.w	r9, #0
 800370a:	bf08      	it	eq
 800370c:	1aad      	subeq	r5, r5, r2
 800370e:	68a3      	ldr	r3, [r4, #8]
 8003710:	6922      	ldr	r2, [r4, #16]
 8003712:	bf08      	it	eq
 8003714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003718:	4293      	cmp	r3, r2
 800371a:	bfc4      	itt	gt
 800371c:	1a9b      	subgt	r3, r3, r2
 800371e:	18ed      	addgt	r5, r5, r3
 8003720:	341a      	adds	r4, #26
 8003722:	454d      	cmp	r5, r9
 8003724:	d11a      	bne.n	800375c <_printf_common+0xd8>
 8003726:	2000      	movs	r0, #0
 8003728:	e008      	b.n	800373c <_printf_common+0xb8>
 800372a:	2301      	movs	r3, #1
 800372c:	4652      	mov	r2, sl
 800372e:	4639      	mov	r1, r7
 8003730:	4630      	mov	r0, r6
 8003732:	47c0      	blx	r8
 8003734:	3001      	adds	r0, #1
 8003736:	d103      	bne.n	8003740 <_printf_common+0xbc>
 8003738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800373c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003740:	3501      	adds	r5, #1
 8003742:	e7c2      	b.n	80036ca <_printf_common+0x46>
 8003744:	2030      	movs	r0, #48	; 0x30
 8003746:	18e1      	adds	r1, r4, r3
 8003748:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003752:	4422      	add	r2, r4
 8003754:	3302      	adds	r3, #2
 8003756:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800375a:	e7c4      	b.n	80036e6 <_printf_common+0x62>
 800375c:	2301      	movs	r3, #1
 800375e:	4622      	mov	r2, r4
 8003760:	4639      	mov	r1, r7
 8003762:	4630      	mov	r0, r6
 8003764:	47c0      	blx	r8
 8003766:	3001      	adds	r0, #1
 8003768:	d0e6      	beq.n	8003738 <_printf_common+0xb4>
 800376a:	f109 0901 	add.w	r9, r9, #1
 800376e:	e7d8      	b.n	8003722 <_printf_common+0x9e>

08003770 <_printf_i>:
 8003770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003774:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003778:	460c      	mov	r4, r1
 800377a:	7e09      	ldrb	r1, [r1, #24]
 800377c:	b085      	sub	sp, #20
 800377e:	296e      	cmp	r1, #110	; 0x6e
 8003780:	4617      	mov	r7, r2
 8003782:	4606      	mov	r6, r0
 8003784:	4698      	mov	r8, r3
 8003786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003788:	f000 80b3 	beq.w	80038f2 <_printf_i+0x182>
 800378c:	d822      	bhi.n	80037d4 <_printf_i+0x64>
 800378e:	2963      	cmp	r1, #99	; 0x63
 8003790:	d036      	beq.n	8003800 <_printf_i+0x90>
 8003792:	d80a      	bhi.n	80037aa <_printf_i+0x3a>
 8003794:	2900      	cmp	r1, #0
 8003796:	f000 80b9 	beq.w	800390c <_printf_i+0x19c>
 800379a:	2958      	cmp	r1, #88	; 0x58
 800379c:	f000 8083 	beq.w	80038a6 <_printf_i+0x136>
 80037a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037a8:	e032      	b.n	8003810 <_printf_i+0xa0>
 80037aa:	2964      	cmp	r1, #100	; 0x64
 80037ac:	d001      	beq.n	80037b2 <_printf_i+0x42>
 80037ae:	2969      	cmp	r1, #105	; 0x69
 80037b0:	d1f6      	bne.n	80037a0 <_printf_i+0x30>
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	0605      	lsls	r5, r0, #24
 80037b8:	f103 0104 	add.w	r1, r3, #4
 80037bc:	d52a      	bpl.n	8003814 <_printf_i+0xa4>
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6011      	str	r1, [r2, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	da03      	bge.n	80037ce <_printf_i+0x5e>
 80037c6:	222d      	movs	r2, #45	; 0x2d
 80037c8:	425b      	negs	r3, r3
 80037ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80037ce:	486f      	ldr	r0, [pc, #444]	; (800398c <_printf_i+0x21c>)
 80037d0:	220a      	movs	r2, #10
 80037d2:	e039      	b.n	8003848 <_printf_i+0xd8>
 80037d4:	2973      	cmp	r1, #115	; 0x73
 80037d6:	f000 809d 	beq.w	8003914 <_printf_i+0x1a4>
 80037da:	d808      	bhi.n	80037ee <_printf_i+0x7e>
 80037dc:	296f      	cmp	r1, #111	; 0x6f
 80037de:	d020      	beq.n	8003822 <_printf_i+0xb2>
 80037e0:	2970      	cmp	r1, #112	; 0x70
 80037e2:	d1dd      	bne.n	80037a0 <_printf_i+0x30>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	f043 0320 	orr.w	r3, r3, #32
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	e003      	b.n	80037f6 <_printf_i+0x86>
 80037ee:	2975      	cmp	r1, #117	; 0x75
 80037f0:	d017      	beq.n	8003822 <_printf_i+0xb2>
 80037f2:	2978      	cmp	r1, #120	; 0x78
 80037f4:	d1d4      	bne.n	80037a0 <_printf_i+0x30>
 80037f6:	2378      	movs	r3, #120	; 0x78
 80037f8:	4865      	ldr	r0, [pc, #404]	; (8003990 <_printf_i+0x220>)
 80037fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037fe:	e055      	b.n	80038ac <_printf_i+0x13c>
 8003800:	6813      	ldr	r3, [r2, #0]
 8003802:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003806:	1d19      	adds	r1, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6011      	str	r1, [r2, #0]
 800380c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003810:	2301      	movs	r3, #1
 8003812:	e08c      	b.n	800392e <_printf_i+0x1be>
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f010 0f40 	tst.w	r0, #64	; 0x40
 800381a:	6011      	str	r1, [r2, #0]
 800381c:	bf18      	it	ne
 800381e:	b21b      	sxthne	r3, r3
 8003820:	e7cf      	b.n	80037c2 <_printf_i+0x52>
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	6825      	ldr	r5, [r4, #0]
 8003826:	1d18      	adds	r0, r3, #4
 8003828:	6010      	str	r0, [r2, #0]
 800382a:	0628      	lsls	r0, r5, #24
 800382c:	d501      	bpl.n	8003832 <_printf_i+0xc2>
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	e002      	b.n	8003838 <_printf_i+0xc8>
 8003832:	0668      	lsls	r0, r5, #25
 8003834:	d5fb      	bpl.n	800382e <_printf_i+0xbe>
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	296f      	cmp	r1, #111	; 0x6f
 800383a:	bf14      	ite	ne
 800383c:	220a      	movne	r2, #10
 800383e:	2208      	moveq	r2, #8
 8003840:	4852      	ldr	r0, [pc, #328]	; (800398c <_printf_i+0x21c>)
 8003842:	2100      	movs	r1, #0
 8003844:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003848:	6865      	ldr	r5, [r4, #4]
 800384a:	2d00      	cmp	r5, #0
 800384c:	60a5      	str	r5, [r4, #8]
 800384e:	f2c0 8095 	blt.w	800397c <_printf_i+0x20c>
 8003852:	6821      	ldr	r1, [r4, #0]
 8003854:	f021 0104 	bic.w	r1, r1, #4
 8003858:	6021      	str	r1, [r4, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d13d      	bne.n	80038da <_printf_i+0x16a>
 800385e:	2d00      	cmp	r5, #0
 8003860:	f040 808e 	bne.w	8003980 <_printf_i+0x210>
 8003864:	4665      	mov	r5, ip
 8003866:	2a08      	cmp	r2, #8
 8003868:	d10b      	bne.n	8003882 <_printf_i+0x112>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	07db      	lsls	r3, r3, #31
 800386e:	d508      	bpl.n	8003882 <_printf_i+0x112>
 8003870:	6923      	ldr	r3, [r4, #16]
 8003872:	6862      	ldr	r2, [r4, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	bfde      	ittt	le
 8003878:	2330      	movle	r3, #48	; 0x30
 800387a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800387e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003882:	ebac 0305 	sub.w	r3, ip, r5
 8003886:	6123      	str	r3, [r4, #16]
 8003888:	f8cd 8000 	str.w	r8, [sp]
 800388c:	463b      	mov	r3, r7
 800388e:	aa03      	add	r2, sp, #12
 8003890:	4621      	mov	r1, r4
 8003892:	4630      	mov	r0, r6
 8003894:	f7ff fef6 	bl	8003684 <_printf_common>
 8003898:	3001      	adds	r0, #1
 800389a:	d14d      	bne.n	8003938 <_printf_i+0x1c8>
 800389c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038a0:	b005      	add	sp, #20
 80038a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038a6:	4839      	ldr	r0, [pc, #228]	; (800398c <_printf_i+0x21c>)
 80038a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	6821      	ldr	r1, [r4, #0]
 80038b0:	1d1d      	adds	r5, r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6015      	str	r5, [r2, #0]
 80038b6:	060a      	lsls	r2, r1, #24
 80038b8:	d50b      	bpl.n	80038d2 <_printf_i+0x162>
 80038ba:	07ca      	lsls	r2, r1, #31
 80038bc:	bf44      	itt	mi
 80038be:	f041 0120 	orrmi.w	r1, r1, #32
 80038c2:	6021      	strmi	r1, [r4, #0]
 80038c4:	b91b      	cbnz	r3, 80038ce <_printf_i+0x15e>
 80038c6:	6822      	ldr	r2, [r4, #0]
 80038c8:	f022 0220 	bic.w	r2, r2, #32
 80038cc:	6022      	str	r2, [r4, #0]
 80038ce:	2210      	movs	r2, #16
 80038d0:	e7b7      	b.n	8003842 <_printf_i+0xd2>
 80038d2:	064d      	lsls	r5, r1, #25
 80038d4:	bf48      	it	mi
 80038d6:	b29b      	uxthmi	r3, r3
 80038d8:	e7ef      	b.n	80038ba <_printf_i+0x14a>
 80038da:	4665      	mov	r5, ip
 80038dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80038e0:	fb02 3311 	mls	r3, r2, r1, r3
 80038e4:	5cc3      	ldrb	r3, [r0, r3]
 80038e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80038ea:	460b      	mov	r3, r1
 80038ec:	2900      	cmp	r1, #0
 80038ee:	d1f5      	bne.n	80038dc <_printf_i+0x16c>
 80038f0:	e7b9      	b.n	8003866 <_printf_i+0xf6>
 80038f2:	6813      	ldr	r3, [r2, #0]
 80038f4:	6825      	ldr	r5, [r4, #0]
 80038f6:	1d18      	adds	r0, r3, #4
 80038f8:	6961      	ldr	r1, [r4, #20]
 80038fa:	6010      	str	r0, [r2, #0]
 80038fc:	0628      	lsls	r0, r5, #24
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	d501      	bpl.n	8003906 <_printf_i+0x196>
 8003902:	6019      	str	r1, [r3, #0]
 8003904:	e002      	b.n	800390c <_printf_i+0x19c>
 8003906:	066a      	lsls	r2, r5, #25
 8003908:	d5fb      	bpl.n	8003902 <_printf_i+0x192>
 800390a:	8019      	strh	r1, [r3, #0]
 800390c:	2300      	movs	r3, #0
 800390e:	4665      	mov	r5, ip
 8003910:	6123      	str	r3, [r4, #16]
 8003912:	e7b9      	b.n	8003888 <_printf_i+0x118>
 8003914:	6813      	ldr	r3, [r2, #0]
 8003916:	1d19      	adds	r1, r3, #4
 8003918:	6011      	str	r1, [r2, #0]
 800391a:	681d      	ldr	r5, [r3, #0]
 800391c:	6862      	ldr	r2, [r4, #4]
 800391e:	2100      	movs	r1, #0
 8003920:	4628      	mov	r0, r5
 8003922:	f000 f837 	bl	8003994 <memchr>
 8003926:	b108      	cbz	r0, 800392c <_printf_i+0x1bc>
 8003928:	1b40      	subs	r0, r0, r5
 800392a:	6060      	str	r0, [r4, #4]
 800392c:	6863      	ldr	r3, [r4, #4]
 800392e:	6123      	str	r3, [r4, #16]
 8003930:	2300      	movs	r3, #0
 8003932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003936:	e7a7      	b.n	8003888 <_printf_i+0x118>
 8003938:	6923      	ldr	r3, [r4, #16]
 800393a:	462a      	mov	r2, r5
 800393c:	4639      	mov	r1, r7
 800393e:	4630      	mov	r0, r6
 8003940:	47c0      	blx	r8
 8003942:	3001      	adds	r0, #1
 8003944:	d0aa      	beq.n	800389c <_printf_i+0x12c>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	079b      	lsls	r3, r3, #30
 800394a:	d413      	bmi.n	8003974 <_printf_i+0x204>
 800394c:	68e0      	ldr	r0, [r4, #12]
 800394e:	9b03      	ldr	r3, [sp, #12]
 8003950:	4298      	cmp	r0, r3
 8003952:	bfb8      	it	lt
 8003954:	4618      	movlt	r0, r3
 8003956:	e7a3      	b.n	80038a0 <_printf_i+0x130>
 8003958:	2301      	movs	r3, #1
 800395a:	464a      	mov	r2, r9
 800395c:	4639      	mov	r1, r7
 800395e:	4630      	mov	r0, r6
 8003960:	47c0      	blx	r8
 8003962:	3001      	adds	r0, #1
 8003964:	d09a      	beq.n	800389c <_printf_i+0x12c>
 8003966:	3501      	adds	r5, #1
 8003968:	68e3      	ldr	r3, [r4, #12]
 800396a:	9a03      	ldr	r2, [sp, #12]
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	42ab      	cmp	r3, r5
 8003970:	dcf2      	bgt.n	8003958 <_printf_i+0x1e8>
 8003972:	e7eb      	b.n	800394c <_printf_i+0x1dc>
 8003974:	2500      	movs	r5, #0
 8003976:	f104 0919 	add.w	r9, r4, #25
 800397a:	e7f5      	b.n	8003968 <_printf_i+0x1f8>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1ac      	bne.n	80038da <_printf_i+0x16a>
 8003980:	7803      	ldrb	r3, [r0, #0]
 8003982:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003986:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800398a:	e76c      	b.n	8003866 <_printf_i+0xf6>
 800398c:	08003b25 	.word	0x08003b25
 8003990:	08003b36 	.word	0x08003b36

08003994 <memchr>:
 8003994:	b510      	push	{r4, lr}
 8003996:	b2c9      	uxtb	r1, r1
 8003998:	4402      	add	r2, r0
 800399a:	4290      	cmp	r0, r2
 800399c:	4603      	mov	r3, r0
 800399e:	d101      	bne.n	80039a4 <memchr+0x10>
 80039a0:	2300      	movs	r3, #0
 80039a2:	e003      	b.n	80039ac <memchr+0x18>
 80039a4:	781c      	ldrb	r4, [r3, #0]
 80039a6:	3001      	adds	r0, #1
 80039a8:	428c      	cmp	r4, r1
 80039aa:	d1f6      	bne.n	800399a <memchr+0x6>
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd10      	pop	{r4, pc}

080039b0 <memcpy>:
 80039b0:	b510      	push	{r4, lr}
 80039b2:	1e43      	subs	r3, r0, #1
 80039b4:	440a      	add	r2, r1
 80039b6:	4291      	cmp	r1, r2
 80039b8:	d100      	bne.n	80039bc <memcpy+0xc>
 80039ba:	bd10      	pop	{r4, pc}
 80039bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039c4:	e7f7      	b.n	80039b6 <memcpy+0x6>

080039c6 <memmove>:
 80039c6:	4288      	cmp	r0, r1
 80039c8:	b510      	push	{r4, lr}
 80039ca:	eb01 0302 	add.w	r3, r1, r2
 80039ce:	d807      	bhi.n	80039e0 <memmove+0x1a>
 80039d0:	1e42      	subs	r2, r0, #1
 80039d2:	4299      	cmp	r1, r3
 80039d4:	d00a      	beq.n	80039ec <memmove+0x26>
 80039d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80039de:	e7f8      	b.n	80039d2 <memmove+0xc>
 80039e0:	4283      	cmp	r3, r0
 80039e2:	d9f5      	bls.n	80039d0 <memmove+0xa>
 80039e4:	1881      	adds	r1, r0, r2
 80039e6:	1ad2      	subs	r2, r2, r3
 80039e8:	42d3      	cmn	r3, r2
 80039ea:	d100      	bne.n	80039ee <memmove+0x28>
 80039ec:	bd10      	pop	{r4, pc}
 80039ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80039f6:	e7f7      	b.n	80039e8 <memmove+0x22>

080039f8 <_realloc_r>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	4607      	mov	r7, r0
 80039fc:	4614      	mov	r4, r2
 80039fe:	460e      	mov	r6, r1
 8003a00:	b921      	cbnz	r1, 8003a0c <_realloc_r+0x14>
 8003a02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a06:	4611      	mov	r1, r2
 8003a08:	f7ff bc1a 	b.w	8003240 <_malloc_r>
 8003a0c:	b922      	cbnz	r2, 8003a18 <_realloc_r+0x20>
 8003a0e:	f7ff fbcb 	bl	80031a8 <_free_r>
 8003a12:	4625      	mov	r5, r4
 8003a14:	4628      	mov	r0, r5
 8003a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a18:	f000 f814 	bl	8003a44 <_malloc_usable_size_r>
 8003a1c:	42a0      	cmp	r0, r4
 8003a1e:	d20f      	bcs.n	8003a40 <_realloc_r+0x48>
 8003a20:	4621      	mov	r1, r4
 8003a22:	4638      	mov	r0, r7
 8003a24:	f7ff fc0c 	bl	8003240 <_malloc_r>
 8003a28:	4605      	mov	r5, r0
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d0f2      	beq.n	8003a14 <_realloc_r+0x1c>
 8003a2e:	4631      	mov	r1, r6
 8003a30:	4622      	mov	r2, r4
 8003a32:	f7ff ffbd 	bl	80039b0 <memcpy>
 8003a36:	4631      	mov	r1, r6
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f7ff fbb5 	bl	80031a8 <_free_r>
 8003a3e:	e7e9      	b.n	8003a14 <_realloc_r+0x1c>
 8003a40:	4635      	mov	r5, r6
 8003a42:	e7e7      	b.n	8003a14 <_realloc_r+0x1c>

08003a44 <_malloc_usable_size_r>:
 8003a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a48:	1f18      	subs	r0, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bfbc      	itt	lt
 8003a4e:	580b      	ldrlt	r3, [r1, r0]
 8003a50:	18c0      	addlt	r0, r0, r3
 8003a52:	4770      	bx	lr

08003a54 <_init>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr

08003a60 <_fini>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr
