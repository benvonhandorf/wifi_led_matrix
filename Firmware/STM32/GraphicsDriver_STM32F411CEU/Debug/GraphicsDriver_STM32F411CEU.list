
GraphicsDriver_STM32F411CEU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000024  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c8  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af8  08006af8  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08006b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000174  08006c7c  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00008404  2000070c  08006c7c  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001387f  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326d  00000000  00000000  00033a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00036c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00037c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b13f  00000000  00000000  00038b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011732  00000000  00000000  00053c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f16  00000000  00000000  000653a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009f  00000000  00000000  000f72b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c64  00000000  00000000  000f7358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006768 	.word	0x08006768

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	08006768 	.word	0x08006768

080001e0 <_ZN7RequestC1Ev>:

#include "Protocol.h"
#include "Request.h"
#include <string.h>

Request::Request() {
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <_ZN7RequestC1Ev+0x1c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	601a      	str	r2, [r3, #0]

}
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4618      	mov	r0, r3
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	08006824 	.word	0x08006824

08000200 <_ZN7RequestD1Ev>:

Request::~Request() {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <_ZN7RequestD1Ev+0x1c>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	601a      	str	r2, [r3, #0]

}
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4618      	mov	r0, r3
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	08006824 	.word	0x08006824

08000220 <_ZN7RequestD0Ev>:
Request::~Request() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
}
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffe9 	bl	8000200 <_ZN7RequestD1Ev>
 800022e:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f005 fd10 	bl	8005c58 <_ZdlPvj>
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4618      	mov	r0, r3
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <_ZN7Request5ParseEPht>:

bool Request::Parse(uint8_t *data, uint16_t dataLength) {
 8000242:	b580      	push	{r7, lr}
 8000244:	b084      	sub	sp, #16
 8000246:	af00      	add	r7, sp, #0
 8000248:	60f8      	str	r0, [r7, #12]
 800024a:	60b9      	str	r1, [r7, #8]
 800024c:	4613      	mov	r3, r2
 800024e:	80fb      	strh	r3, [r7, #6]
	if (dataLength < 3 || data == 0) {
 8000250:	88fb      	ldrh	r3, [r7, #6]
 8000252:	2b02      	cmp	r3, #2
 8000254:	d902      	bls.n	800025c <_ZN7Request5ParseEPht+0x1a>
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d101      	bne.n	8000260 <_ZN7Request5ParseEPht+0x1e>
		return false;
 800025c:	2300      	movs	r3, #0
 800025e:	e02e      	b.n	80002be <_ZN7Request5ParseEPht+0x7c>
	}

	type = data[0];
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	781a      	ldrb	r2, [r3, #0]
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	711a      	strb	r2, [r3, #4]
	bodyLength = (data[1] << 8) | data[2];
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	3301      	adds	r3, #1
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	021b      	lsls	r3, r3, #8
 8000270:	b21a      	sxth	r2, r3
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	3302      	adds	r3, #2
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	b21b      	sxth	r3, r3
 800027a:	4313      	orrs	r3, r2
 800027c:	b21b      	sxth	r3, r3
 800027e:	b29a      	uxth	r2, r3
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	80da      	strh	r2, [r3, #6]

	if (bodyLength != dataLength - 3) {
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	88db      	ldrh	r3, [r3, #6]
 8000288:	461a      	mov	r2, r3
 800028a:	88fb      	ldrh	r3, [r7, #6]
 800028c:	3b03      	subs	r3, #3
 800028e:	429a      	cmp	r2, r3
 8000290:	d001      	beq.n	8000296 <_ZN7Request5ParseEPht+0x54>
		return false;
 8000292:	2300      	movs	r3, #0
 8000294:	e013      	b.n	80002be <_ZN7Request5ParseEPht+0x7c>
	}

	memcpy(this->body, data + 3, bodyLength);
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	f103 0008 	add.w	r0, r3, #8
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	1cd9      	adds	r1, r3, #3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	88db      	ldrh	r3, [r3, #6]
 80002a4:	461a      	mov	r2, r3
 80002a6:	f005 fde5 	bl	8005e74 <memcpy>

	switch (type) {
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d104      	bne.n	80002bc <_ZN7Request5ParseEPht+0x7a>
	case RequestType::SetPixelData:
		return ParseSetPixelDataRequest();
 80002b2:	68f8      	ldr	r0, [r7, #12]
 80002b4:	f000 f807 	bl	80002c6 <_ZN7Request24ParseSetPixelDataRequestEv>
 80002b8:	4603      	mov	r3, r0
 80002ba:	e000      	b.n	80002be <_ZN7Request5ParseEPht+0x7c>
	}

	return true;
 80002bc:	2301      	movs	r3, #1
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <_ZN7Request24ParseSetPixelDataRequestEv>:

bool Request::ParseSetPixelDataRequest() {
 80002c6:	b480      	push	{r7}
 80002c8:	b083      	sub	sp, #12
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	6078      	str	r0, [r7, #4]
	if (bodyLength % 4 != 0 || bodyLength == 4) {
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	88db      	ldrh	r3, [r3, #6]
 80002d2:	f003 0303 	and.w	r3, r3, #3
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d103      	bne.n	80002e2 <_ZN7Request24ParseSetPixelDataRequestEv+0x1c>
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	88db      	ldrh	r3, [r3, #6]
 80002de:	2b04      	cmp	r3, #4
 80002e0:	d101      	bne.n	80002e6 <_ZN7Request24ParseSetPixelDataRequestEv+0x20>
		return false;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e000      	b.n	80002e8 <_ZN7Request24ParseSetPixelDataRequestEv+0x22>
	}

	return true;
 80002e6:	2301      	movs	r3, #1
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <_ZN16CommandProcessorC1Ev>:
 *      Author: benvh
 */

#include "CommandProcessor.h"

CommandProcessor::CommandProcessor() {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <_ZN16CommandProcessorC1Ev+0x1c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4618      	mov	r0, r3
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	08006848 	.word	0x08006848

08000314 <_ZN16CommandProcessorD1Ev>:

CommandProcessor::~CommandProcessor() {
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <_ZN16CommandProcessorD1Ev+0x1c>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4618      	mov	r0, r3
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	08006848 	.word	0x08006848

08000334 <_ZN16CommandProcessorD0Ev>:
CommandProcessor::~CommandProcessor() {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
}
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f7ff ffe9 	bl	8000314 <_ZN16CommandProcessorD1Ev>
 8000342:	2104      	movs	r1, #4
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f005 fc87 	bl	8005c58 <_ZdlPvj>
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4618      	mov	r0, r3
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriver>:

void CommandProcessor::ProcessRequest(Request *request,
		DisplayDriver *display) {
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b08d      	sub	sp, #52	; 0x34
 8000358:	af04      	add	r7, sp, #16
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
	switch (request->type) {
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	791b      	ldrb	r3, [r3, #4]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d002      	beq.n	800036e <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriver+0x1a>
 8000368:	2b02      	cmp	r3, #2
 800036a:	d049      	beq.n	8000400 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriver+0xac>
	case RequestType::Commit: {
		display->SwapBuffer();
		break;
	}
	}
}
 800036c:	e050      	b.n	8000410 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriver+0xbc>
		uint16_t x = request->body[0] << 8 | request->body[1];
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	7a1b      	ldrb	r3, [r3, #8]
 8000372:	021b      	lsls	r3, r3, #8
 8000374:	b21a      	sxth	r2, r3
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	7a5b      	ldrb	r3, [r3, #9]
 800037a:	b21b      	sxth	r3, r3
 800037c:	4313      	orrs	r3, r2
 800037e:	b21b      	sxth	r3, r3
 8000380:	83fb      	strh	r3, [r7, #30]
		uint16_t y = request->body[2] << 8 | request->body[3];
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	7a9b      	ldrb	r3, [r3, #10]
 8000386:	021b      	lsls	r3, r3, #8
 8000388:	b21a      	sxth	r2, r3
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	7adb      	ldrb	r3, [r3, #11]
 800038e:	b21b      	sxth	r3, r3
 8000390:	4313      	orrs	r3, r2
 8000392:	b21b      	sxth	r3, r3
 8000394:	837b      	strh	r3, [r7, #26]
		uint16_t pixelStart = 4;
 8000396:	2304      	movs	r3, #4
 8000398:	83bb      	strh	r3, [r7, #28]
		while (pixelStart < request->bodyLength) {
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	88db      	ldrh	r3, [r3, #6]
 800039e:	8bba      	ldrh	r2, [r7, #28]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d234      	bcs.n	800040e <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriver+0xba>
			uint8_t r = request->body[pixelStart + 0];
 80003a4:	8bbb      	ldrh	r3, [r7, #28]
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	4413      	add	r3, r2
 80003aa:	7a1b      	ldrb	r3, [r3, #8]
 80003ac:	767b      	strb	r3, [r7, #25]
			uint8_t g = request->body[pixelStart + 1];
 80003ae:	8bbb      	ldrh	r3, [r7, #28]
 80003b0:	3301      	adds	r3, #1
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	4413      	add	r3, r2
 80003b6:	7a1b      	ldrb	r3, [r3, #8]
 80003b8:	763b      	strb	r3, [r7, #24]
			uint8_t b = request->body[pixelStart + 2];
 80003ba:	8bbb      	ldrh	r3, [r7, #28]
 80003bc:	3302      	adds	r3, #2
 80003be:	68ba      	ldr	r2, [r7, #8]
 80003c0:	4413      	add	r3, r2
 80003c2:	7a1b      	ldrb	r3, [r3, #8]
 80003c4:	75fb      	strb	r3, [r7, #23]
			uint8_t w = request->body[pixelStart + 3];
 80003c6:	8bbb      	ldrh	r3, [r7, #28]
 80003c8:	3303      	adds	r3, #3
 80003ca:	68ba      	ldr	r2, [r7, #8]
 80003cc:	4413      	add	r3, r2
 80003ce:	7a1b      	ldrb	r3, [r3, #8]
 80003d0:	75bb      	strb	r3, [r7, #22]
			display->SetPixel(x, y, r, g, b, w);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3308      	adds	r3, #8
 80003d8:	681c      	ldr	r4, [r3, #0]
 80003da:	7e78      	ldrb	r0, [r7, #25]
 80003dc:	8b7a      	ldrh	r2, [r7, #26]
 80003de:	8bf9      	ldrh	r1, [r7, #30]
 80003e0:	7dbb      	ldrb	r3, [r7, #22]
 80003e2:	9302      	str	r3, [sp, #8]
 80003e4:	7dfb      	ldrb	r3, [r7, #23]
 80003e6:	9301      	str	r3, [sp, #4]
 80003e8:	7e3b      	ldrb	r3, [r7, #24]
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	4603      	mov	r3, r0
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	47a0      	blx	r4
			pixelStart += 4;
 80003f2:	8bbb      	ldrh	r3, [r7, #28]
 80003f4:	3304      	adds	r3, #4
 80003f6:	83bb      	strh	r3, [r7, #28]
			x++;
 80003f8:	8bfb      	ldrh	r3, [r7, #30]
 80003fa:	3301      	adds	r3, #1
 80003fc:	83fb      	strh	r3, [r7, #30]
		while (pixelStart < request->bodyLength) {
 80003fe:	e7cc      	b.n	800039a <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriver+0x46>
		display->SwapBuffer();
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	330c      	adds	r3, #12
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	4798      	blx	r3
		break;
 800040c:	e000      	b.n	8000410 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriver+0xbc>
		break;
 800040e:	bf00      	nop
}
 8000410:	bf00      	nop
 8000412:	3724      	adds	r7, #36	; 0x24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd90      	pop	{r4, r7, pc}

08000418 <strcmp>:
 8000418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800041c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000420:	2a01      	cmp	r2, #1
 8000422:	bf28      	it	cs
 8000424:	429a      	cmpcs	r2, r3
 8000426:	d0f7      	beq.n	8000418 <strcmp>
 8000428:	1ad0      	subs	r0, r2, r3
 800042a:	4770      	bx	lr

0800042c <strlen>:
 800042c:	4603      	mov	r3, r0
 800042e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000432:	2a00      	cmp	r2, #0
 8000434:	d1fb      	bne.n	800042e <strlen+0x2>
 8000436:	1a18      	subs	r0, r3, r0
 8000438:	3801      	subs	r0, #1
 800043a:	4770      	bx	lr
 800043c:	0000      	movs	r0, r0
	...

08000440 <memchr>:
 8000440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000444:	2a10      	cmp	r2, #16
 8000446:	db2b      	blt.n	80004a0 <memchr+0x60>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	d008      	beq.n	8000460 <memchr+0x20>
 800044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000452:	3a01      	subs	r2, #1
 8000454:	428b      	cmp	r3, r1
 8000456:	d02d      	beq.n	80004b4 <memchr+0x74>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	b342      	cbz	r2, 80004b0 <memchr+0x70>
 800045e:	d1f6      	bne.n	800044e <memchr+0xe>
 8000460:	b4f0      	push	{r4, r5, r6, r7}
 8000462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800046a:	f022 0407 	bic.w	r4, r2, #7
 800046e:	f07f 0700 	mvns.w	r7, #0
 8000472:	2300      	movs	r3, #0
 8000474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000478:	3c08      	subs	r4, #8
 800047a:	ea85 0501 	eor.w	r5, r5, r1
 800047e:	ea86 0601 	eor.w	r6, r6, r1
 8000482:	fa85 f547 	uadd8	r5, r5, r7
 8000486:	faa3 f587 	sel	r5, r3, r7
 800048a:	fa86 f647 	uadd8	r6, r6, r7
 800048e:	faa5 f687 	sel	r6, r5, r7
 8000492:	b98e      	cbnz	r6, 80004b8 <memchr+0x78>
 8000494:	d1ee      	bne.n	8000474 <memchr+0x34>
 8000496:	bcf0      	pop	{r4, r5, r6, r7}
 8000498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800049c:	f002 0207 	and.w	r2, r2, #7
 80004a0:	b132      	cbz	r2, 80004b0 <memchr+0x70>
 80004a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a6:	3a01      	subs	r2, #1
 80004a8:	ea83 0301 	eor.w	r3, r3, r1
 80004ac:	b113      	cbz	r3, 80004b4 <memchr+0x74>
 80004ae:	d1f8      	bne.n	80004a2 <memchr+0x62>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4770      	bx	lr
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	bf06      	itte	eq
 80004bc:	4635      	moveq	r5, r6
 80004be:	3803      	subeq	r0, #3
 80004c0:	3807      	subne	r0, #7
 80004c2:	f015 0f01 	tst.w	r5, #1
 80004c6:	d107      	bne.n	80004d8 <memchr+0x98>
 80004c8:	3001      	adds	r0, #1
 80004ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ce:	bf02      	ittt	eq
 80004d0:	3001      	addeq	r0, #1
 80004d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004d6:	3001      	addeq	r0, #1
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	3801      	subs	r0, #1
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <__aeabi_uldivmod>:
 80004e0:	b953      	cbnz	r3, 80004f8 <__aeabi_uldivmod+0x18>
 80004e2:	b94a      	cbnz	r2, 80004f8 <__aeabi_uldivmod+0x18>
 80004e4:	2900      	cmp	r1, #0
 80004e6:	bf08      	it	eq
 80004e8:	2800      	cmpeq	r0, #0
 80004ea:	bf1c      	itt	ne
 80004ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80004f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80004f4:	f001 b8c0 	b.w	8001678 <__aeabi_idiv0>
 80004f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000500:	f000 f806 	bl	8000510 <__udivmoddi4>
 8000504:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800050c:	b004      	add	sp, #16
 800050e:	4770      	bx	lr

08000510 <__udivmoddi4>:
 8000510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000514:	9d08      	ldr	r5, [sp, #32]
 8000516:	4604      	mov	r4, r0
 8000518:	468c      	mov	ip, r1
 800051a:	2b00      	cmp	r3, #0
 800051c:	f040 8083 	bne.w	8000626 <__udivmoddi4+0x116>
 8000520:	428a      	cmp	r2, r1
 8000522:	4617      	mov	r7, r2
 8000524:	d947      	bls.n	80005b6 <__udivmoddi4+0xa6>
 8000526:	fab2 f282 	clz	r2, r2
 800052a:	b142      	cbz	r2, 800053e <__udivmoddi4+0x2e>
 800052c:	f1c2 0020 	rsb	r0, r2, #32
 8000530:	fa24 f000 	lsr.w	r0, r4, r0
 8000534:	4091      	lsls	r1, r2
 8000536:	4097      	lsls	r7, r2
 8000538:	ea40 0c01 	orr.w	ip, r0, r1
 800053c:	4094      	lsls	r4, r2
 800053e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000542:	0c23      	lsrs	r3, r4, #16
 8000544:	fbbc f6f8 	udiv	r6, ip, r8
 8000548:	fa1f fe87 	uxth.w	lr, r7
 800054c:	fb08 c116 	mls	r1, r8, r6, ip
 8000550:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000554:	fb06 f10e 	mul.w	r1, r6, lr
 8000558:	4299      	cmp	r1, r3
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x60>
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000562:	f080 8119 	bcs.w	8000798 <__udivmoddi4+0x288>
 8000566:	4299      	cmp	r1, r3
 8000568:	f240 8116 	bls.w	8000798 <__udivmoddi4+0x288>
 800056c:	3e02      	subs	r6, #2
 800056e:	443b      	add	r3, r7
 8000570:	1a5b      	subs	r3, r3, r1
 8000572:	b2a4      	uxth	r4, r4
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000580:	fb00 fe0e 	mul.w	lr, r0, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d909      	bls.n	800059c <__udivmoddi4+0x8c>
 8000588:	193c      	adds	r4, r7, r4
 800058a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800058e:	f080 8105 	bcs.w	800079c <__udivmoddi4+0x28c>
 8000592:	45a6      	cmp	lr, r4
 8000594:	f240 8102 	bls.w	800079c <__udivmoddi4+0x28c>
 8000598:	3802      	subs	r0, #2
 800059a:	443c      	add	r4, r7
 800059c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005a0:	eba4 040e 	sub.w	r4, r4, lr
 80005a4:	2600      	movs	r6, #0
 80005a6:	b11d      	cbz	r5, 80005b0 <__udivmoddi4+0xa0>
 80005a8:	40d4      	lsrs	r4, r2
 80005aa:	2300      	movs	r3, #0
 80005ac:	e9c5 4300 	strd	r4, r3, [r5]
 80005b0:	4631      	mov	r1, r6
 80005b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b6:	b902      	cbnz	r2, 80005ba <__udivmoddi4+0xaa>
 80005b8:	deff      	udf	#255	; 0xff
 80005ba:	fab2 f282 	clz	r2, r2
 80005be:	2a00      	cmp	r2, #0
 80005c0:	d150      	bne.n	8000664 <__udivmoddi4+0x154>
 80005c2:	1bcb      	subs	r3, r1, r7
 80005c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005c8:	fa1f f887 	uxth.w	r8, r7
 80005cc:	2601      	movs	r6, #1
 80005ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80005d2:	0c21      	lsrs	r1, r4, #16
 80005d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80005d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005dc:	fb08 f30c 	mul.w	r3, r8, ip
 80005e0:	428b      	cmp	r3, r1
 80005e2:	d907      	bls.n	80005f4 <__udivmoddi4+0xe4>
 80005e4:	1879      	adds	r1, r7, r1
 80005e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80005ea:	d202      	bcs.n	80005f2 <__udivmoddi4+0xe2>
 80005ec:	428b      	cmp	r3, r1
 80005ee:	f200 80e9 	bhi.w	80007c4 <__udivmoddi4+0x2b4>
 80005f2:	4684      	mov	ip, r0
 80005f4:	1ac9      	subs	r1, r1, r3
 80005f6:	b2a3      	uxth	r3, r4
 80005f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000600:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000604:	fb08 f800 	mul.w	r8, r8, r0
 8000608:	45a0      	cmp	r8, r4
 800060a:	d907      	bls.n	800061c <__udivmoddi4+0x10c>
 800060c:	193c      	adds	r4, r7, r4
 800060e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000612:	d202      	bcs.n	800061a <__udivmoddi4+0x10a>
 8000614:	45a0      	cmp	r8, r4
 8000616:	f200 80d9 	bhi.w	80007cc <__udivmoddi4+0x2bc>
 800061a:	4618      	mov	r0, r3
 800061c:	eba4 0408 	sub.w	r4, r4, r8
 8000620:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000624:	e7bf      	b.n	80005a6 <__udivmoddi4+0x96>
 8000626:	428b      	cmp	r3, r1
 8000628:	d909      	bls.n	800063e <__udivmoddi4+0x12e>
 800062a:	2d00      	cmp	r5, #0
 800062c:	f000 80b1 	beq.w	8000792 <__udivmoddi4+0x282>
 8000630:	2600      	movs	r6, #0
 8000632:	e9c5 0100 	strd	r0, r1, [r5]
 8000636:	4630      	mov	r0, r6
 8000638:	4631      	mov	r1, r6
 800063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063e:	fab3 f683 	clz	r6, r3
 8000642:	2e00      	cmp	r6, #0
 8000644:	d14a      	bne.n	80006dc <__udivmoddi4+0x1cc>
 8000646:	428b      	cmp	r3, r1
 8000648:	d302      	bcc.n	8000650 <__udivmoddi4+0x140>
 800064a:	4282      	cmp	r2, r0
 800064c:	f200 80b8 	bhi.w	80007c0 <__udivmoddi4+0x2b0>
 8000650:	1a84      	subs	r4, r0, r2
 8000652:	eb61 0103 	sbc.w	r1, r1, r3
 8000656:	2001      	movs	r0, #1
 8000658:	468c      	mov	ip, r1
 800065a:	2d00      	cmp	r5, #0
 800065c:	d0a8      	beq.n	80005b0 <__udivmoddi4+0xa0>
 800065e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000662:	e7a5      	b.n	80005b0 <__udivmoddi4+0xa0>
 8000664:	f1c2 0320 	rsb	r3, r2, #32
 8000668:	fa20 f603 	lsr.w	r6, r0, r3
 800066c:	4097      	lsls	r7, r2
 800066e:	fa01 f002 	lsl.w	r0, r1, r2
 8000672:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000676:	40d9      	lsrs	r1, r3
 8000678:	4330      	orrs	r0, r6
 800067a:	0c03      	lsrs	r3, r0, #16
 800067c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000680:	fa1f f887 	uxth.w	r8, r7
 8000684:	fb0e 1116 	mls	r1, lr, r6, r1
 8000688:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800068c:	fb06 f108 	mul.w	r1, r6, r8
 8000690:	4299      	cmp	r1, r3
 8000692:	fa04 f402 	lsl.w	r4, r4, r2
 8000696:	d909      	bls.n	80006ac <__udivmoddi4+0x19c>
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800069e:	f080 808d 	bcs.w	80007bc <__udivmoddi4+0x2ac>
 80006a2:	4299      	cmp	r1, r3
 80006a4:	f240 808a 	bls.w	80007bc <__udivmoddi4+0x2ac>
 80006a8:	3e02      	subs	r6, #2
 80006aa:	443b      	add	r3, r7
 80006ac:	1a5b      	subs	r3, r3, r1
 80006ae:	b281      	uxth	r1, r0
 80006b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80006b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80006b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006bc:	fb00 f308 	mul.w	r3, r0, r8
 80006c0:	428b      	cmp	r3, r1
 80006c2:	d907      	bls.n	80006d4 <__udivmoddi4+0x1c4>
 80006c4:	1879      	adds	r1, r7, r1
 80006c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80006ca:	d273      	bcs.n	80007b4 <__udivmoddi4+0x2a4>
 80006cc:	428b      	cmp	r3, r1
 80006ce:	d971      	bls.n	80007b4 <__udivmoddi4+0x2a4>
 80006d0:	3802      	subs	r0, #2
 80006d2:	4439      	add	r1, r7
 80006d4:	1acb      	subs	r3, r1, r3
 80006d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80006da:	e778      	b.n	80005ce <__udivmoddi4+0xbe>
 80006dc:	f1c6 0c20 	rsb	ip, r6, #32
 80006e0:	fa03 f406 	lsl.w	r4, r3, r6
 80006e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80006e8:	431c      	orrs	r4, r3
 80006ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80006ee:	fa01 f306 	lsl.w	r3, r1, r6
 80006f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80006f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80006fa:	431f      	orrs	r7, r3
 80006fc:	0c3b      	lsrs	r3, r7, #16
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fa1f f884 	uxth.w	r8, r4
 8000706:	fb0e 1119 	mls	r1, lr, r9, r1
 800070a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800070e:	fb09 fa08 	mul.w	sl, r9, r8
 8000712:	458a      	cmp	sl, r1
 8000714:	fa02 f206 	lsl.w	r2, r2, r6
 8000718:	fa00 f306 	lsl.w	r3, r0, r6
 800071c:	d908      	bls.n	8000730 <__udivmoddi4+0x220>
 800071e:	1861      	adds	r1, r4, r1
 8000720:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000724:	d248      	bcs.n	80007b8 <__udivmoddi4+0x2a8>
 8000726:	458a      	cmp	sl, r1
 8000728:	d946      	bls.n	80007b8 <__udivmoddi4+0x2a8>
 800072a:	f1a9 0902 	sub.w	r9, r9, #2
 800072e:	4421      	add	r1, r4
 8000730:	eba1 010a 	sub.w	r1, r1, sl
 8000734:	b2bf      	uxth	r7, r7
 8000736:	fbb1 f0fe 	udiv	r0, r1, lr
 800073a:	fb0e 1110 	mls	r1, lr, r0, r1
 800073e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000742:	fb00 f808 	mul.w	r8, r0, r8
 8000746:	45b8      	cmp	r8, r7
 8000748:	d907      	bls.n	800075a <__udivmoddi4+0x24a>
 800074a:	19e7      	adds	r7, r4, r7
 800074c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000750:	d22e      	bcs.n	80007b0 <__udivmoddi4+0x2a0>
 8000752:	45b8      	cmp	r8, r7
 8000754:	d92c      	bls.n	80007b0 <__udivmoddi4+0x2a0>
 8000756:	3802      	subs	r0, #2
 8000758:	4427      	add	r7, r4
 800075a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800075e:	eba7 0708 	sub.w	r7, r7, r8
 8000762:	fba0 8902 	umull	r8, r9, r0, r2
 8000766:	454f      	cmp	r7, r9
 8000768:	46c6      	mov	lr, r8
 800076a:	4649      	mov	r1, r9
 800076c:	d31a      	bcc.n	80007a4 <__udivmoddi4+0x294>
 800076e:	d017      	beq.n	80007a0 <__udivmoddi4+0x290>
 8000770:	b15d      	cbz	r5, 800078a <__udivmoddi4+0x27a>
 8000772:	ebb3 020e 	subs.w	r2, r3, lr
 8000776:	eb67 0701 	sbc.w	r7, r7, r1
 800077a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800077e:	40f2      	lsrs	r2, r6
 8000780:	ea4c 0202 	orr.w	r2, ip, r2
 8000784:	40f7      	lsrs	r7, r6
 8000786:	e9c5 2700 	strd	r2, r7, [r5]
 800078a:	2600      	movs	r6, #0
 800078c:	4631      	mov	r1, r6
 800078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000792:	462e      	mov	r6, r5
 8000794:	4628      	mov	r0, r5
 8000796:	e70b      	b.n	80005b0 <__udivmoddi4+0xa0>
 8000798:	4606      	mov	r6, r0
 800079a:	e6e9      	b.n	8000570 <__udivmoddi4+0x60>
 800079c:	4618      	mov	r0, r3
 800079e:	e6fd      	b.n	800059c <__udivmoddi4+0x8c>
 80007a0:	4543      	cmp	r3, r8
 80007a2:	d2e5      	bcs.n	8000770 <__udivmoddi4+0x260>
 80007a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80007a8:	eb69 0104 	sbc.w	r1, r9, r4
 80007ac:	3801      	subs	r0, #1
 80007ae:	e7df      	b.n	8000770 <__udivmoddi4+0x260>
 80007b0:	4608      	mov	r0, r1
 80007b2:	e7d2      	b.n	800075a <__udivmoddi4+0x24a>
 80007b4:	4660      	mov	r0, ip
 80007b6:	e78d      	b.n	80006d4 <__udivmoddi4+0x1c4>
 80007b8:	4681      	mov	r9, r0
 80007ba:	e7b9      	b.n	8000730 <__udivmoddi4+0x220>
 80007bc:	4666      	mov	r6, ip
 80007be:	e775      	b.n	80006ac <__udivmoddi4+0x19c>
 80007c0:	4630      	mov	r0, r6
 80007c2:	e74a      	b.n	800065a <__udivmoddi4+0x14a>
 80007c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80007c8:	4439      	add	r1, r7
 80007ca:	e713      	b.n	80005f4 <__udivmoddi4+0xe4>
 80007cc:	3802      	subs	r0, #2
 80007ce:	443c      	add	r4, r7
 80007d0:	e724      	b.n	800061c <__udivmoddi4+0x10c>
 80007d2:	bf00      	nop

080007d4 <selfrel_offset31>:
 80007d4:	6803      	ldr	r3, [r0, #0]
 80007d6:	005a      	lsls	r2, r3, #1
 80007d8:	bf4c      	ite	mi
 80007da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80007de:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80007e2:	4418      	add	r0, r3
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop

080007e8 <search_EIT_table>:
 80007e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007ec:	b329      	cbz	r1, 800083a <search_EIT_table+0x52>
 80007ee:	1e4f      	subs	r7, r1, #1
 80007f0:	4604      	mov	r4, r0
 80007f2:	4615      	mov	r5, r2
 80007f4:	463e      	mov	r6, r7
 80007f6:	f04f 0800 	mov.w	r8, #0
 80007fa:	eb08 0106 	add.w	r1, r8, r6
 80007fe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000802:	1049      	asrs	r1, r1, #1
 8000804:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000808:	4648      	mov	r0, r9
 800080a:	f7ff ffe3 	bl	80007d4 <selfrel_offset31>
 800080e:	4603      	mov	r3, r0
 8000810:	00c8      	lsls	r0, r1, #3
 8000812:	3008      	adds	r0, #8
 8000814:	428f      	cmp	r7, r1
 8000816:	4420      	add	r0, r4
 8000818:	d009      	beq.n	800082e <search_EIT_table+0x46>
 800081a:	42ab      	cmp	r3, r5
 800081c:	d809      	bhi.n	8000832 <search_EIT_table+0x4a>
 800081e:	f7ff ffd9 	bl	80007d4 <selfrel_offset31>
 8000822:	3801      	subs	r0, #1
 8000824:	42a8      	cmp	r0, r5
 8000826:	d20a      	bcs.n	800083e <search_EIT_table+0x56>
 8000828:	f101 0801 	add.w	r8, r1, #1
 800082c:	e7e5      	b.n	80007fa <search_EIT_table+0x12>
 800082e:	42ab      	cmp	r3, r5
 8000830:	d905      	bls.n	800083e <search_EIT_table+0x56>
 8000832:	4588      	cmp	r8, r1
 8000834:	d001      	beq.n	800083a <search_EIT_table+0x52>
 8000836:	1e4e      	subs	r6, r1, #1
 8000838:	e7df      	b.n	80007fa <search_EIT_table+0x12>
 800083a:	f04f 0900 	mov.w	r9, #0
 800083e:	4648      	mov	r0, r9
 8000840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000844 <__gnu_unwind_get_pr_addr>:
 8000844:	2801      	cmp	r0, #1
 8000846:	d007      	beq.n	8000858 <__gnu_unwind_get_pr_addr+0x14>
 8000848:	2802      	cmp	r0, #2
 800084a:	d007      	beq.n	800085c <__gnu_unwind_get_pr_addr+0x18>
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__gnu_unwind_get_pr_addr+0x1c>)
 800084e:	2800      	cmp	r0, #0
 8000850:	bf0c      	ite	eq
 8000852:	4618      	moveq	r0, r3
 8000854:	2000      	movne	r0, #0
 8000856:	4770      	bx	lr
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <__gnu_unwind_get_pr_addr+0x20>)
 800085a:	4770      	bx	lr
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <__gnu_unwind_get_pr_addr+0x24>)
 800085e:	4770      	bx	lr
 8000860:	08000f09 	.word	0x08000f09
 8000864:	08000f0d 	.word	0x08000f0d
 8000868:	08000f11 	.word	0x08000f11

0800086c <get_eit_entry>:
 800086c:	b530      	push	{r4, r5, lr}
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <get_eit_entry+0x90>)
 8000870:	b083      	sub	sp, #12
 8000872:	4604      	mov	r4, r0
 8000874:	1e8d      	subs	r5, r1, #2
 8000876:	b33b      	cbz	r3, 80008c8 <get_eit_entry+0x5c>
 8000878:	a901      	add	r1, sp, #4
 800087a:	4628      	mov	r0, r5
 800087c:	f3af 8000 	nop.w
 8000880:	b1e8      	cbz	r0, 80008be <get_eit_entry+0x52>
 8000882:	9901      	ldr	r1, [sp, #4]
 8000884:	462a      	mov	r2, r5
 8000886:	f7ff ffaf 	bl	80007e8 <search_EIT_table>
 800088a:	4601      	mov	r1, r0
 800088c:	b1b8      	cbz	r0, 80008be <get_eit_entry+0x52>
 800088e:	f7ff ffa1 	bl	80007d4 <selfrel_offset31>
 8000892:	684b      	ldr	r3, [r1, #4]
 8000894:	64a0      	str	r0, [r4, #72]	; 0x48
 8000896:	2b01      	cmp	r3, #1
 8000898:	d02b      	beq.n	80008f2 <get_eit_entry+0x86>
 800089a:	2b00      	cmp	r3, #0
 800089c:	f101 0004 	add.w	r0, r1, #4
 80008a0:	db23      	blt.n	80008ea <get_eit_entry+0x7e>
 80008a2:	f7ff ff97 	bl	80007d4 <selfrel_offset31>
 80008a6:	2300      	movs	r3, #0
 80008a8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80008ac:	6803      	ldr	r3, [r0, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	db10      	blt.n	80008d4 <get_eit_entry+0x68>
 80008b2:	f7ff ff8f 	bl	80007d4 <selfrel_offset31>
 80008b6:	6120      	str	r0, [r4, #16]
 80008b8:	2000      	movs	r0, #0
 80008ba:	b003      	add	sp, #12
 80008bc:	bd30      	pop	{r4, r5, pc}
 80008be:	2300      	movs	r3, #0
 80008c0:	2009      	movs	r0, #9
 80008c2:	6123      	str	r3, [r4, #16]
 80008c4:	b003      	add	sp, #12
 80008c6:	bd30      	pop	{r4, r5, pc}
 80008c8:	490d      	ldr	r1, [pc, #52]	; (8000900 <get_eit_entry+0x94>)
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <get_eit_entry+0x98>)
 80008cc:	1a09      	subs	r1, r1, r0
 80008ce:	10c9      	asrs	r1, r1, #3
 80008d0:	9101      	str	r1, [sp, #4]
 80008d2:	e7d7      	b.n	8000884 <get_eit_entry+0x18>
 80008d4:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80008d8:	f7ff ffb4 	bl	8000844 <__gnu_unwind_get_pr_addr>
 80008dc:	2800      	cmp	r0, #0
 80008de:	6120      	str	r0, [r4, #16]
 80008e0:	bf14      	ite	ne
 80008e2:	2000      	movne	r0, #0
 80008e4:	2009      	moveq	r0, #9
 80008e6:	b003      	add	sp, #12
 80008e8:	bd30      	pop	{r4, r5, pc}
 80008ea:	2301      	movs	r3, #1
 80008ec:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80008f0:	e7dc      	b.n	80008ac <get_eit_entry+0x40>
 80008f2:	2300      	movs	r3, #0
 80008f4:	6123      	str	r3, [r4, #16]
 80008f6:	2005      	movs	r0, #5
 80008f8:	e7df      	b.n	80008ba <get_eit_entry+0x4e>
 80008fa:	bf00      	nop
 80008fc:	00000000 	.word	0x00000000
 8000900:	08006af8 	.word	0x08006af8
 8000904:	08006a30 	.word	0x08006a30

08000908 <restore_non_core_regs>:
 8000908:	6803      	ldr	r3, [r0, #0]
 800090a:	07da      	lsls	r2, r3, #31
 800090c:	b510      	push	{r4, lr}
 800090e:	4604      	mov	r4, r0
 8000910:	d406      	bmi.n	8000920 <restore_non_core_regs+0x18>
 8000912:	079b      	lsls	r3, r3, #30
 8000914:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000918:	d509      	bpl.n	800092e <restore_non_core_regs+0x26>
 800091a:	f000 fc4b 	bl	80011b4 <__gnu_Unwind_Restore_VFP_D>
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	0759      	lsls	r1, r3, #29
 8000922:	d509      	bpl.n	8000938 <restore_non_core_regs+0x30>
 8000924:	071a      	lsls	r2, r3, #28
 8000926:	d50e      	bpl.n	8000946 <restore_non_core_regs+0x3e>
 8000928:	06db      	lsls	r3, r3, #27
 800092a:	d513      	bpl.n	8000954 <restore_non_core_regs+0x4c>
 800092c:	bd10      	pop	{r4, pc}
 800092e:	f000 fc39 	bl	80011a4 <__gnu_Unwind_Restore_VFP>
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	0759      	lsls	r1, r3, #29
 8000936:	d4f5      	bmi.n	8000924 <restore_non_core_regs+0x1c>
 8000938:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800093c:	f000 fc42 	bl	80011c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	071a      	lsls	r2, r3, #28
 8000944:	d4f0      	bmi.n	8000928 <restore_non_core_regs+0x20>
 8000946:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800094a:	f000 fc43 	bl	80011d4 <__gnu_Unwind_Restore_WMMXD>
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	06db      	lsls	r3, r3, #27
 8000952:	d4eb      	bmi.n	800092c <restore_non_core_regs+0x24>
 8000954:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800095c:	f000 bc7e 	b.w	800125c <__gnu_Unwind_Restore_WMMXC>

08000960 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000960:	4603      	mov	r3, r0
 8000962:	6800      	ldr	r0, [r0, #0]
 8000964:	b100      	cbz	r0, 8000968 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8000966:	4418      	add	r0, r3
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <__gnu_unwind_24bit.isra.0>:
 800096c:	2009      	movs	r0, #9
 800096e:	4770      	bx	lr

08000970 <_Unwind_DebugHook>:
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <unwind_phase2>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	4604      	mov	r4, r0
 8000978:	460e      	mov	r6, r1
 800097a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800097c:	4620      	mov	r0, r4
 800097e:	f7ff ff75 	bl	800086c <get_eit_entry>
 8000982:	4605      	mov	r5, r0
 8000984:	b988      	cbnz	r0, 80009aa <unwind_phase2+0x36>
 8000986:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000988:	6163      	str	r3, [r4, #20]
 800098a:	4632      	mov	r2, r6
 800098c:	6923      	ldr	r3, [r4, #16]
 800098e:	4621      	mov	r1, r4
 8000990:	2001      	movs	r0, #1
 8000992:	4798      	blx	r3
 8000994:	2808      	cmp	r0, #8
 8000996:	d0f0      	beq.n	800097a <unwind_phase2+0x6>
 8000998:	2807      	cmp	r0, #7
 800099a:	d106      	bne.n	80009aa <unwind_phase2+0x36>
 800099c:	4628      	mov	r0, r5
 800099e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80009a0:	f7ff ffe6 	bl	8000970 <_Unwind_DebugHook>
 80009a4:	1d30      	adds	r0, r6, #4
 80009a6:	f000 fbf1 	bl	800118c <__restore_core_regs>
 80009aa:	f005 fa21 	bl	8005df0 <abort>
 80009ae:	bf00      	nop

080009b0 <unwind_phase2_forced>:
 80009b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b4:	1d0d      	adds	r5, r1, #4
 80009b6:	4606      	mov	r6, r0
 80009b8:	4614      	mov	r4, r2
 80009ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009bc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80009c0:	f10d 0c0c 	add.w	ip, sp, #12
 80009c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80009c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80009d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009d8:	ad02      	add	r5, sp, #8
 80009da:	68f7      	ldr	r7, [r6, #12]
 80009dc:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80009e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80009e4:	2300      	movs	r3, #0
 80009e6:	602b      	str	r3, [r5, #0]
 80009e8:	e021      	b.n	8000a2e <unwind_phase2_forced+0x7e>
 80009ea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80009ec:	6173      	str	r3, [r6, #20]
 80009ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80009f2:	4629      	mov	r1, r5
 80009f4:	a87a      	add	r0, sp, #488	; 0x1e8
 80009f6:	f005 fa3d 	bl	8005e74 <memcpy>
 80009fa:	6933      	ldr	r3, [r6, #16]
 80009fc:	aa7a      	add	r2, sp, #488	; 0x1e8
 80009fe:	4631      	mov	r1, r6
 8000a00:	4650      	mov	r0, sl
 8000a02:	4798      	blx	r3
 8000a04:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000a06:	e9cd 5800 	strd	r5, r8, [sp]
 8000a0a:	4621      	mov	r1, r4
 8000a0c:	646b      	str	r3, [r5, #68]	; 0x44
 8000a0e:	4681      	mov	r9, r0
 8000a10:	4633      	mov	r3, r6
 8000a12:	4632      	mov	r2, r6
 8000a14:	2001      	movs	r0, #1
 8000a16:	47b8      	blx	r7
 8000a18:	4604      	mov	r4, r0
 8000a1a:	b9e8      	cbnz	r0, 8000a58 <unwind_phase2_forced+0xa8>
 8000a1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a20:	a97a      	add	r1, sp, #488	; 0x1e8
 8000a22:	4628      	mov	r0, r5
 8000a24:	f005 fa26 	bl	8005e74 <memcpy>
 8000a28:	f1b9 0f08 	cmp.w	r9, #8
 8000a2c:	d11b      	bne.n	8000a66 <unwind_phase2_forced+0xb6>
 8000a2e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000a30:	4630      	mov	r0, r6
 8000a32:	f7ff ff1b 	bl	800086c <get_eit_entry>
 8000a36:	3409      	adds	r4, #9
 8000a38:	fa5f fa84 	uxtb.w	sl, r4
 8000a3c:	4681      	mov	r9, r0
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d0d3      	beq.n	80009ea <unwind_phase2_forced+0x3a>
 8000a42:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000a44:	f04a 0110 	orr.w	r1, sl, #16
 8000a48:	e9cd 5800 	strd	r5, r8, [sp]
 8000a4c:	4632      	mov	r2, r6
 8000a4e:	646b      	str	r3, [r5, #68]	; 0x44
 8000a50:	2001      	movs	r0, #1
 8000a52:	4633      	mov	r3, r6
 8000a54:	47b8      	blx	r7
 8000a56:	b108      	cbz	r0, 8000a5c <unwind_phase2_forced+0xac>
 8000a58:	f04f 0909 	mov.w	r9, #9
 8000a5c:	4648      	mov	r0, r9
 8000a5e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a66:	f1b9 0f07 	cmp.w	r9, #7
 8000a6a:	d1f5      	bne.n	8000a58 <unwind_phase2_forced+0xa8>
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000a70:	f7ff ff7e 	bl	8000970 <_Unwind_DebugHook>
 8000a74:	a803      	add	r0, sp, #12
 8000a76:	f000 fb89 	bl	800118c <__restore_core_regs>
 8000a7a:	bf00      	nop

08000a7c <_Unwind_GetCFA>:
 8000a7c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000a7e:	4770      	bx	lr

08000a80 <__gnu_Unwind_RaiseException>:
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000a84:	640b      	str	r3, [r1, #64]	; 0x40
 8000a86:	1d0e      	adds	r6, r1, #4
 8000a88:	460f      	mov	r7, r1
 8000a8a:	4605      	mov	r5, r0
 8000a8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a8e:	b0f9      	sub	sp, #484	; 0x1e4
 8000a90:	ac01      	add	r4, sp, #4
 8000a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000aa0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000aa8:	9600      	str	r6, [sp, #0]
 8000aaa:	e006      	b.n	8000aba <__gnu_Unwind_RaiseException+0x3a>
 8000aac:	692b      	ldr	r3, [r5, #16]
 8000aae:	466a      	mov	r2, sp
 8000ab0:	4629      	mov	r1, r5
 8000ab2:	4798      	blx	r3
 8000ab4:	2808      	cmp	r0, #8
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	d108      	bne.n	8000acc <__gnu_Unwind_RaiseException+0x4c>
 8000aba:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000abc:	4628      	mov	r0, r5
 8000abe:	f7ff fed5 	bl	800086c <get_eit_entry>
 8000ac2:	2800      	cmp	r0, #0
 8000ac4:	d0f2      	beq.n	8000aac <__gnu_Unwind_RaiseException+0x2c>
 8000ac6:	2009      	movs	r0, #9
 8000ac8:	b079      	add	sp, #484	; 0x1e4
 8000aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000acc:	4668      	mov	r0, sp
 8000ace:	f7ff ff1b 	bl	8000908 <restore_non_core_regs>
 8000ad2:	2c06      	cmp	r4, #6
 8000ad4:	d1f7      	bne.n	8000ac6 <__gnu_Unwind_RaiseException+0x46>
 8000ad6:	4639      	mov	r1, r7
 8000ad8:	4628      	mov	r0, r5
 8000ada:	f7ff ff4b 	bl	8000974 <unwind_phase2>
 8000ade:	bf00      	nop

08000ae0 <__gnu_Unwind_ForcedUnwind>:
 8000ae0:	b430      	push	{r4, r5}
 8000ae2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000ae4:	60c1      	str	r1, [r0, #12]
 8000ae6:	6182      	str	r2, [r0, #24]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	641d      	str	r5, [r3, #64]	; 0x40
 8000aec:	2200      	movs	r2, #0
 8000aee:	bc30      	pop	{r4, r5}
 8000af0:	e75e      	b.n	80009b0 <unwind_phase2_forced>
 8000af2:	bf00      	nop

08000af4 <__gnu_Unwind_Resume>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	68c6      	ldr	r6, [r0, #12]
 8000af8:	6943      	ldr	r3, [r0, #20]
 8000afa:	640b      	str	r3, [r1, #64]	; 0x40
 8000afc:	b9ae      	cbnz	r6, 8000b2a <__gnu_Unwind_Resume+0x36>
 8000afe:	6903      	ldr	r3, [r0, #16]
 8000b00:	460a      	mov	r2, r1
 8000b02:	4604      	mov	r4, r0
 8000b04:	460d      	mov	r5, r1
 8000b06:	4601      	mov	r1, r0
 8000b08:	2002      	movs	r0, #2
 8000b0a:	4798      	blx	r3
 8000b0c:	2807      	cmp	r0, #7
 8000b0e:	d005      	beq.n	8000b1c <__gnu_Unwind_Resume+0x28>
 8000b10:	2808      	cmp	r0, #8
 8000b12:	d10f      	bne.n	8000b34 <__gnu_Unwind_Resume+0x40>
 8000b14:	4629      	mov	r1, r5
 8000b16:	4620      	mov	r0, r4
 8000b18:	f7ff ff2c 	bl	8000974 <unwind_phase2>
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000b20:	f7ff ff26 	bl	8000970 <_Unwind_DebugHook>
 8000b24:	1d28      	adds	r0, r5, #4
 8000b26:	f000 fb31 	bl	800118c <__restore_core_regs>
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f7ff ff40 	bl	80009b0 <unwind_phase2_forced>
 8000b30:	f005 f95e 	bl	8005df0 <abort>
 8000b34:	f005 f95c 	bl	8005df0 <abort>

08000b38 <__gnu_Unwind_Resume_or_Rethrow>:
 8000b38:	68c2      	ldr	r2, [r0, #12]
 8000b3a:	b11a      	cbz	r2, 8000b44 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000b3c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000b3e:	640a      	str	r2, [r1, #64]	; 0x40
 8000b40:	2200      	movs	r2, #0
 8000b42:	e735      	b.n	80009b0 <unwind_phase2_forced>
 8000b44:	e79c      	b.n	8000a80 <__gnu_Unwind_RaiseException>
 8000b46:	bf00      	nop

08000b48 <_Unwind_Complete>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <_Unwind_DeleteException>:
 8000b4c:	6883      	ldr	r3, [r0, #8]
 8000b4e:	4601      	mov	r1, r0
 8000b50:	b10b      	cbz	r3, 8000b56 <_Unwind_DeleteException+0xa>
 8000b52:	2001      	movs	r0, #1
 8000b54:	4718      	bx	r3
 8000b56:	4770      	bx	lr

08000b58 <_Unwind_VRS_Get>:
 8000b58:	2901      	cmp	r1, #1
 8000b5a:	d012      	beq.n	8000b82 <_Unwind_VRS_Get+0x2a>
 8000b5c:	d809      	bhi.n	8000b72 <_Unwind_VRS_Get+0x1a>
 8000b5e:	b973      	cbnz	r3, 8000b7e <_Unwind_VRS_Get+0x26>
 8000b60:	2a0f      	cmp	r2, #15
 8000b62:	d80c      	bhi.n	8000b7e <_Unwind_VRS_Get+0x26>
 8000b64:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	6853      	ldr	r3, [r2, #4]
 8000b6c:	9a00      	ldr	r2, [sp, #0]
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4770      	bx	lr
 8000b72:	3903      	subs	r1, #3
 8000b74:	2901      	cmp	r1, #1
 8000b76:	bf94      	ite	ls
 8000b78:	2001      	movls	r0, #1
 8000b7a:	2002      	movhi	r0, #2
 8000b7c:	4770      	bx	lr
 8000b7e:	2002      	movs	r0, #2
 8000b80:	4770      	bx	lr
 8000b82:	4608      	mov	r0, r1
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <_Unwind_GetGR>:
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	ac03      	add	r4, sp, #12
 8000b90:	460a      	mov	r2, r1
 8000b92:	9400      	str	r4, [sp, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f7ff ffdf 	bl	8000b58 <_Unwind_VRS_Get>
 8000b9a:	9803      	ldr	r0, [sp, #12]
 8000b9c:	b004      	add	sp, #16
 8000b9e:	bd10      	pop	{r4, pc}

08000ba0 <_Unwind_VRS_Set>:
 8000ba0:	2901      	cmp	r1, #1
 8000ba2:	d012      	beq.n	8000bca <_Unwind_VRS_Set+0x2a>
 8000ba4:	d809      	bhi.n	8000bba <_Unwind_VRS_Set+0x1a>
 8000ba6:	b973      	cbnz	r3, 8000bc6 <_Unwind_VRS_Set+0x26>
 8000ba8:	2a0f      	cmp	r2, #15
 8000baa:	d80c      	bhi.n	8000bc6 <_Unwind_VRS_Set+0x26>
 8000bac:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000bb0:	9a00      	ldr	r2, [sp, #0]
 8000bb2:	6812      	ldr	r2, [r2, #0]
 8000bb4:	6042      	str	r2, [r0, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	3903      	subs	r1, #3
 8000bbc:	2901      	cmp	r1, #1
 8000bbe:	bf94      	ite	ls
 8000bc0:	2001      	movls	r0, #1
 8000bc2:	2002      	movhi	r0, #2
 8000bc4:	4770      	bx	lr
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	4770      	bx	lr
 8000bca:	4608      	mov	r0, r1
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <_Unwind_SetGR>:
 8000bd0:	b510      	push	{r4, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	ac03      	add	r4, sp, #12
 8000bd8:	9203      	str	r2, [sp, #12]
 8000bda:	9400      	str	r4, [sp, #0]
 8000bdc:	460a      	mov	r2, r1
 8000bde:	4619      	mov	r1, r3
 8000be0:	f7ff ffde 	bl	8000ba0 <_Unwind_VRS_Set>
 8000be4:	b004      	add	sp, #16
 8000be6:	bd10      	pop	{r4, pc}

08000be8 <__gnu_Unwind_Backtrace>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	1d15      	adds	r5, r2, #4
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	4606      	mov	r6, r0
 8000bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000bfa:	ac17      	add	r4, sp, #92	; 0x5c
 8000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c12:	4665      	mov	r5, ip
 8000c14:	9716      	str	r7, [sp, #88]	; 0x58
 8000c16:	e010      	b.n	8000c3a <__gnu_Unwind_Backtrace+0x52>
 8000c18:	f7ff ffda 	bl	8000bd0 <_Unwind_SetGR>
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	a816      	add	r0, sp, #88	; 0x58
 8000c20:	47b0      	blx	r6
 8000c22:	4603      	mov	r3, r0
 8000c24:	aa16      	add	r2, sp, #88	; 0x58
 8000c26:	4669      	mov	r1, sp
 8000c28:	2008      	movs	r0, #8
 8000c2a:	b983      	cbnz	r3, 8000c4e <__gnu_Unwind_Backtrace+0x66>
 8000c2c:	9b04      	ldr	r3, [sp, #16]
 8000c2e:	4798      	blx	r3
 8000c30:	2805      	cmp	r0, #5
 8000c32:	4604      	mov	r4, r0
 8000c34:	d00c      	beq.n	8000c50 <__gnu_Unwind_Backtrace+0x68>
 8000c36:	2809      	cmp	r0, #9
 8000c38:	d009      	beq.n	8000c4e <__gnu_Unwind_Backtrace+0x66>
 8000c3a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000c3c:	4668      	mov	r0, sp
 8000c3e:	f7ff fe15 	bl	800086c <get_eit_entry>
 8000c42:	4603      	mov	r3, r0
 8000c44:	466a      	mov	r2, sp
 8000c46:	210c      	movs	r1, #12
 8000c48:	a816      	add	r0, sp, #88	; 0x58
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0e4      	beq.n	8000c18 <__gnu_Unwind_Backtrace+0x30>
 8000c4e:	2409      	movs	r4, #9
 8000c50:	a816      	add	r0, sp, #88	; 0x58
 8000c52:	f7ff fe59 	bl	8000908 <restore_non_core_regs>
 8000c56:	4620      	mov	r0, r4
 8000c58:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5e:	bf00      	nop

08000c60 <__gnu_unwind_pr_common>:
 8000c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c64:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	460d      	mov	r5, r1
 8000c6a:	f854 1b04 	ldr.w	r1, [r4], #4
 8000c6e:	9406      	str	r4, [sp, #24]
 8000c70:	4617      	mov	r7, r2
 8000c72:	f000 0803 	and.w	r8, r0, #3
 8000c76:	461e      	mov	r6, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d079      	beq.n	8000d70 <__gnu_unwind_pr_common+0x110>
 8000c7c:	0c0b      	lsrs	r3, r1, #16
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	0409      	lsls	r1, r1, #16
 8000c82:	f88d 301d 	strb.w	r3, [sp, #29]
 8000c86:	2302      	movs	r3, #2
 8000c88:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000c8c:	9105      	str	r1, [sp, #20]
 8000c8e:	f88d 301c 	strb.w	r3, [sp, #28]
 8000c92:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000c94:	f1b8 0f02 	cmp.w	r8, #2
 8000c98:	bf08      	it	eq
 8000c9a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000c9c:	f013 0301 	ands.w	r3, r3, #1
 8000ca0:	d00c      	beq.n	8000cbc <__gnu_unwind_pr_common+0x5c>
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	a905      	add	r1, sp, #20
 8000ca6:	f000 fb73 	bl	8001390 <__gnu_unwind_execute>
 8000caa:	b918      	cbnz	r0, 8000cb4 <__gnu_unwind_pr_common+0x54>
 8000cac:	2008      	movs	r0, #8
 8000cae:	b009      	add	sp, #36	; 0x24
 8000cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cb4:	2009      	movs	r0, #9
 8000cb6:	b009      	add	sp, #36	; 0x24
 8000cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cbc:	f8d4 a000 	ldr.w	sl, [r4]
 8000cc0:	f1ba 0f00 	cmp.w	sl, #0
 8000cc4:	d0ed      	beq.n	8000ca2 <__gnu_unwind_pr_common+0x42>
 8000cc6:	9301      	str	r3, [sp, #4]
 8000cc8:	f000 0308 	and.w	r3, r0, #8
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	2e02      	cmp	r6, #2
 8000cd0:	d04a      	beq.n	8000d68 <__gnu_unwind_pr_common+0x108>
 8000cd2:	f8b4 a000 	ldrh.w	sl, [r4]
 8000cd6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000cda:	3404      	adds	r4, #4
 8000cdc:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000cde:	f029 0b01 	bic.w	fp, r9, #1
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	4493      	add	fp, r2
 8000ce8:	f7ff ff4e 	bl	8000b88 <_Unwind_GetGR>
 8000cec:	4583      	cmp	fp, r0
 8000cee:	d839      	bhi.n	8000d64 <__gnu_unwind_pr_common+0x104>
 8000cf0:	f02a 0201 	bic.w	r2, sl, #1
 8000cf4:	445a      	add	r2, fp
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	bf94      	ite	ls
 8000cfa:	2000      	movls	r0, #0
 8000cfc:	2001      	movhi	r0, #1
 8000cfe:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	f00a 0a01 	and.w	sl, sl, #1
 8000d0a:	ea43 030a 	orr.w	r3, r3, sl
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d049      	beq.n	8000da6 <__gnu_unwind_pr_common+0x146>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d032      	beq.n	8000d7c <__gnu_unwind_pr_common+0x11c>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1cc      	bne.n	8000cb4 <__gnu_unwind_pr_common+0x54>
 8000d1a:	f1b8 0f00 	cmp.w	r8, #0
 8000d1e:	d002      	beq.n	8000d26 <__gnu_unwind_pr_common+0xc6>
 8000d20:	2800      	cmp	r0, #0
 8000d22:	f040 80cd 	bne.w	8000ec0 <__gnu_unwind_pr_common+0x260>
 8000d26:	3404      	adds	r4, #4
 8000d28:	f8d4 a000 	ldr.w	sl, [r4]
 8000d2c:	f1ba 0f00 	cmp.w	sl, #0
 8000d30:	d1cd      	bne.n	8000cce <__gnu_unwind_pr_common+0x6e>
 8000d32:	a905      	add	r1, sp, #20
 8000d34:	4638      	mov	r0, r7
 8000d36:	f000 fb2b 	bl	8001390 <__gnu_unwind_execute>
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d1ba      	bne.n	8000cb4 <__gnu_unwind_pr_common+0x54>
 8000d3e:	9b01      	ldr	r3, [sp, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0b3      	beq.n	8000cac <__gnu_unwind_pr_common+0x4c>
 8000d44:	210f      	movs	r1, #15
 8000d46:	4638      	mov	r0, r7
 8000d48:	f7ff ff1e 	bl	8000b88 <_Unwind_GetGR>
 8000d4c:	210e      	movs	r1, #14
 8000d4e:	4602      	mov	r2, r0
 8000d50:	4638      	mov	r0, r7
 8000d52:	f7ff ff3d 	bl	8000bd0 <_Unwind_SetGR>
 8000d56:	4638      	mov	r0, r7
 8000d58:	4a6a      	ldr	r2, [pc, #424]	; (8000f04 <__gnu_unwind_pr_common+0x2a4>)
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	f7ff ff38 	bl	8000bd0 <_Unwind_SetGR>
 8000d60:	2007      	movs	r0, #7
 8000d62:	e7a8      	b.n	8000cb6 <__gnu_unwind_pr_common+0x56>
 8000d64:	2000      	movs	r0, #0
 8000d66:	e7ca      	b.n	8000cfe <__gnu_unwind_pr_common+0x9e>
 8000d68:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000d6c:	3408      	adds	r4, #8
 8000d6e:	e7b5      	b.n	8000cdc <__gnu_unwind_pr_common+0x7c>
 8000d70:	0209      	lsls	r1, r1, #8
 8000d72:	2303      	movs	r3, #3
 8000d74:	9105      	str	r1, [sp, #20]
 8000d76:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000d7a:	e78a      	b.n	8000c92 <__gnu_unwind_pr_common+0x32>
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000d82:	f1b8 0f00 	cmp.w	r8, #0
 8000d86:	d145      	bne.n	8000e14 <__gnu_unwind_pr_common+0x1b4>
 8000d88:	b128      	cbz	r0, 8000d96 <__gnu_unwind_pr_common+0x136>
 8000d8a:	9a02      	ldr	r2, [sp, #8]
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	d05c      	beq.n	8000e4a <__gnu_unwind_pr_common+0x1ea>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	d074      	beq.n	8000e80 <__gnu_unwind_pr_common+0x220>
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da00      	bge.n	8000d9c <__gnu_unwind_pr_common+0x13c>
 8000d9a:	3404      	adds	r4, #4
 8000d9c:	f10b 0b01 	add.w	fp, fp, #1
 8000da0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000da4:	e7c0      	b.n	8000d28 <__gnu_unwind_pr_common+0xc8>
 8000da6:	f1b8 0f00 	cmp.w	r8, #0
 8000daa:	d119      	bne.n	8000de0 <__gnu_unwind_pr_common+0x180>
 8000dac:	b1b0      	cbz	r0, 8000ddc <__gnu_unwind_pr_common+0x17c>
 8000dae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000db2:	1c99      	adds	r1, r3, #2
 8000db4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000db8:	f43f af7c 	beq.w	8000cb4 <__gnu_unwind_pr_common+0x54>
 8000dbc:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	9104      	str	r1, [sp, #16]
 8000dc4:	f000 8090 	beq.w	8000ee8 <__gnu_unwind_pr_common+0x288>
 8000dc8:	1d20      	adds	r0, r4, #4
 8000dca:	f7ff fdc9 	bl	8000960 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000dce:	ab04      	add	r3, sp, #16
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	f3af 8000 	nop.w
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	d15b      	bne.n	8000e94 <__gnu_unwind_pr_common+0x234>
 8000ddc:	3408      	adds	r4, #8
 8000dde:	e7a3      	b.n	8000d28 <__gnu_unwind_pr_common+0xc8>
 8000de0:	210d      	movs	r1, #13
 8000de2:	4638      	mov	r0, r7
 8000de4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000de8:	f7ff fece 	bl	8000b88 <_Unwind_GetGR>
 8000dec:	4581      	cmp	r9, r0
 8000dee:	d1f5      	bne.n	8000ddc <__gnu_unwind_pr_common+0x17c>
 8000df0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000df2:	429c      	cmp	r4, r3
 8000df4:	d1f2      	bne.n	8000ddc <__gnu_unwind_pr_common+0x17c>
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff fcec 	bl	80007d4 <selfrel_offset31>
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	4602      	mov	r2, r0
 8000e00:	4638      	mov	r0, r7
 8000e02:	f7ff fee5 	bl	8000bd0 <_Unwind_SetGR>
 8000e06:	4638      	mov	r0, r7
 8000e08:	462a      	mov	r2, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	f7ff fee0 	bl	8000bd0 <_Unwind_SetGR>
 8000e10:	2007      	movs	r0, #7
 8000e12:	e750      	b.n	8000cb6 <__gnu_unwind_pr_common+0x56>
 8000e14:	210d      	movs	r1, #13
 8000e16:	4638      	mov	r0, r7
 8000e18:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000e1c:	f7ff feb4 	bl	8000b88 <_Unwind_GetGR>
 8000e20:	4581      	cmp	r9, r0
 8000e22:	d001      	beq.n	8000e28 <__gnu_unwind_pr_common+0x1c8>
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	e7b6      	b.n	8000d96 <__gnu_unwind_pr_common+0x136>
 8000e28:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	d1fa      	bne.n	8000e24 <__gnu_unwind_pr_common+0x1c4>
 8000e2e:	2204      	movs	r2, #4
 8000e30:	2100      	movs	r1, #0
 8000e32:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 8000e36:	18a3      	adds	r3, r4, r2
 8000e38:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000e3c:	636b      	str	r3, [r5, #52]	; 0x34
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	428b      	cmp	r3, r1
 8000e42:	db59      	blt.n	8000ef8 <__gnu_unwind_pr_common+0x298>
 8000e44:	2301      	movs	r3, #1
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	e7a8      	b.n	8000d9c <__gnu_unwind_pr_common+0x13c>
 8000e4a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e52:	f104 0a04 	add.w	sl, r4, #4
 8000e56:	46b0      	mov	r8, r6
 8000e58:	4691      	mov	r9, r2
 8000e5a:	461e      	mov	r6, r3
 8000e5c:	e00d      	b.n	8000e7a <__gnu_unwind_pr_common+0x21a>
 8000e5e:	9604      	str	r6, [sp, #16]
 8000e60:	f7ff fd7e 	bl	8000960 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000e64:	ab04      	add	r3, sp, #16
 8000e66:	4601      	mov	r1, r0
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4628      	mov	r0, r5
 8000e6c:	f3af 8000 	nop.w
 8000e70:	f109 0901 	add.w	r9, r9, #1
 8000e74:	f10a 0a04 	add.w	sl, sl, #4
 8000e78:	b9e8      	cbnz	r0, 8000eb6 <__gnu_unwind_pr_common+0x256>
 8000e7a:	45d9      	cmp	r9, fp
 8000e7c:	4650      	mov	r0, sl
 8000e7e:	d1ee      	bne.n	8000e5e <__gnu_unwind_pr_common+0x1fe>
 8000e80:	4638      	mov	r0, r7
 8000e82:	210d      	movs	r1, #13
 8000e84:	f7ff fe80 	bl	8000b88 <_Unwind_GetGR>
 8000e88:	9b04      	ldr	r3, [sp, #16]
 8000e8a:	6228      	str	r0, [r5, #32]
 8000e8c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000e90:	2006      	movs	r0, #6
 8000e92:	e710      	b.n	8000cb6 <__gnu_unwind_pr_common+0x56>
 8000e94:	4681      	mov	r9, r0
 8000e96:	210d      	movs	r1, #13
 8000e98:	4638      	mov	r0, r7
 8000e9a:	f7ff fe75 	bl	8000b88 <_Unwind_GetGR>
 8000e9e:	f1b9 0f02 	cmp.w	r9, #2
 8000ea2:	6228      	str	r0, [r5, #32]
 8000ea4:	d125      	bne.n	8000ef2 <__gnu_unwind_pr_common+0x292>
 8000ea6:	462b      	mov	r3, r5
 8000ea8:	9a04      	ldr	r2, [sp, #16]
 8000eaa:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000eae:	626b      	str	r3, [r5, #36]	; 0x24
 8000eb0:	62ac      	str	r4, [r5, #40]	; 0x28
 8000eb2:	2006      	movs	r0, #6
 8000eb4:	e6ff      	b.n	8000cb6 <__gnu_unwind_pr_common+0x56>
 8000eb6:	4646      	mov	r6, r8
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000ebe:	e76a      	b.n	8000d96 <__gnu_unwind_pr_common+0x136>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f7ff fc87 	bl	80007d4 <selfrel_offset31>
 8000ec6:	3404      	adds	r4, #4
 8000ec8:	4602      	mov	r2, r0
 8000eca:	63ac      	str	r4, [r5, #56]	; 0x38
 8000ecc:	4628      	mov	r0, r5
 8000ece:	4614      	mov	r4, r2
 8000ed0:	f3af 8000 	nop.w
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	f43f aeed 	beq.w	8000cb4 <__gnu_unwind_pr_common+0x54>
 8000eda:	4638      	mov	r0, r7
 8000edc:	4622      	mov	r2, r4
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f7ff fe76 	bl	8000bd0 <_Unwind_SetGR>
 8000ee4:	2007      	movs	r0, #7
 8000ee6:	e6e6      	b.n	8000cb6 <__gnu_unwind_pr_common+0x56>
 8000ee8:	4638      	mov	r0, r7
 8000eea:	210d      	movs	r1, #13
 8000eec:	f7ff fe4c 	bl	8000b88 <_Unwind_GetGR>
 8000ef0:	6228      	str	r0, [r5, #32]
 8000ef2:	9b04      	ldr	r3, [sp, #16]
 8000ef4:	626b      	str	r3, [r5, #36]	; 0x24
 8000ef6:	e7db      	b.n	8000eb0 <__gnu_unwind_pr_common+0x250>
 8000ef8:	f10b 0001 	add.w	r0, fp, #1
 8000efc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000f00:	e77a      	b.n	8000df8 <__gnu_unwind_pr_common+0x198>
 8000f02:	bf00      	nop
 8000f04:	00000000 	.word	0x00000000

08000f08 <__aeabi_unwind_cpp_pr0>:
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e6a9      	b.n	8000c60 <__gnu_unwind_pr_common>

08000f0c <__aeabi_unwind_cpp_pr1>:
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e6a7      	b.n	8000c60 <__gnu_unwind_pr_common>

08000f10 <__aeabi_unwind_cpp_pr2>:
 8000f10:	2302      	movs	r3, #2
 8000f12:	e6a5      	b.n	8000c60 <__gnu_unwind_pr_common>

08000f14 <_Unwind_VRS_Pop>:
 8000f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f18:	4606      	mov	r6, r0
 8000f1a:	b0c3      	sub	sp, #268	; 0x10c
 8000f1c:	4615      	mov	r5, r2
 8000f1e:	461c      	mov	r4, r3
 8000f20:	2904      	cmp	r1, #4
 8000f22:	f200 80b9 	bhi.w	8001098 <_Unwind_VRS_Pop+0x184>
 8000f26:	e8df f001 	tbb	[pc, r1]
 8000f2a:	539a      	.short	0x539a
 8000f2c:	29b7      	.short	0x29b7
 8000f2e:	03          	.byte	0x03
 8000f2f:	00          	.byte	0x00
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	f040 80b1 	bne.w	8001098 <_Unwind_VRS_Pop+0x184>
 8000f36:	2a10      	cmp	r2, #16
 8000f38:	f200 80ae 	bhi.w	8001098 <_Unwind_VRS_Pop+0x184>
 8000f3c:	6803      	ldr	r3, [r0, #0]
 8000f3e:	06d8      	lsls	r0, r3, #27
 8000f40:	f100 80f3 	bmi.w	800112a <_Unwind_VRS_Pop+0x216>
 8000f44:	af20      	add	r7, sp, #128	; 0x80
 8000f46:	4638      	mov	r0, r7
 8000f48:	f000 f992 	bl	8001270 <__gnu_Unwind_Save_WMMXC>
 8000f4c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2401      	movs	r4, #1
 8000f52:	fa04 f203 	lsl.w	r2, r4, r3
 8000f56:	422a      	tst	r2, r5
 8000f58:	4601      	mov	r1, r0
 8000f5a:	d004      	beq.n	8000f66 <_Unwind_VRS_Pop+0x52>
 8000f5c:	f851 2b04 	ldr.w	r2, [r1], #4
 8000f60:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000f64:	4608      	mov	r0, r1
 8000f66:	3301      	adds	r3, #1
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d1f2      	bne.n	8000f52 <_Unwind_VRS_Pop+0x3e>
 8000f6c:	63b0      	str	r0, [r6, #56]	; 0x38
 8000f6e:	4638      	mov	r0, r7
 8000f70:	f000 f974 	bl	800125c <__gnu_Unwind_Restore_WMMXC>
 8000f74:	2000      	movs	r0, #0
 8000f76:	b043      	add	sp, #268	; 0x10c
 8000f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f7c:	2c03      	cmp	r4, #3
 8000f7e:	f040 808b 	bne.w	8001098 <_Unwind_VRS_Pop+0x184>
 8000f82:	b294      	uxth	r4, r2
 8000f84:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000f88:	2b10      	cmp	r3, #16
 8000f8a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000f8e:	f200 8083 	bhi.w	8001098 <_Unwind_VRS_Pop+0x184>
 8000f92:	6803      	ldr	r3, [r0, #0]
 8000f94:	071f      	lsls	r7, r3, #28
 8000f96:	f100 80d0 	bmi.w	800113a <_Unwind_VRS_Pop+0x226>
 8000f9a:	af20      	add	r7, sp, #128	; 0x80
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	f000 f93b 	bl	8001218 <__gnu_Unwind_Save_WMMXD>
 8000fa2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000fa6:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8000fa8:	b154      	cbz	r4, 8000fc0 <_Unwind_VRS_Pop+0xac>
 8000faa:	460b      	mov	r3, r1
 8000fac:	1ae8      	subs	r0, r5, r3
 8000fae:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000fb2:	00e4      	lsls	r4, r4, #3
 8000fb4:	581a      	ldr	r2, [r3, r0]
 8000fb6:	f843 2b04 	str.w	r2, [r3], #4
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	d1fa      	bne.n	8000fb4 <_Unwind_VRS_Pop+0xa0>
 8000fbe:	4425      	add	r5, r4
 8000fc0:	4638      	mov	r0, r7
 8000fc2:	63b5      	str	r5, [r6, #56]	; 0x38
 8000fc4:	f000 f906 	bl	80011d4 <__gnu_Unwind_Restore_WMMXD>
 8000fc8:	2000      	movs	r0, #0
 8000fca:	b043      	add	sp, #268	; 0x10c
 8000fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fd0:	2c01      	cmp	r4, #1
 8000fd2:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000fd6:	b295      	uxth	r5, r2
 8000fd8:	d05a      	beq.n	8001090 <_Unwind_VRS_Pop+0x17c>
 8000fda:	2c05      	cmp	r4, #5
 8000fdc:	d15c      	bne.n	8001098 <_Unwind_VRS_Pop+0x184>
 8000fde:	eb08 0905 	add.w	r9, r8, r5
 8000fe2:	f1b9 0f20 	cmp.w	r9, #32
 8000fe6:	d857      	bhi.n	8001098 <_Unwind_VRS_Pop+0x184>
 8000fe8:	f1b8 0f0f 	cmp.w	r8, #15
 8000fec:	d977      	bls.n	80010de <_Unwind_VRS_Pop+0x1ca>
 8000fee:	46a9      	mov	r9, r5
 8000ff0:	2d00      	cmp	r5, #0
 8000ff2:	f040 8088 	bne.w	8001106 <_Unwind_VRS_Pop+0x1f2>
 8000ff6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ff8:	b36d      	cbz	r5, 8001056 <_Unwind_VRS_Pop+0x142>
 8000ffa:	af20      	add	r7, sp, #128	; 0x80
 8000ffc:	f04f 0900 	mov.w	r9, #0
 8001000:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8001004:	3f04      	subs	r7, #4
 8001006:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800100a:	f853 1b04 	ldr.w	r1, [r3], #4
 800100e:	f847 1f04 	str.w	r1, [r7, #4]!
 8001012:	42ab      	cmp	r3, r5
 8001014:	d1f9      	bne.n	800100a <_Unwind_VRS_Pop+0xf6>
 8001016:	f1b9 0f00 	cmp.w	r9, #0
 800101a:	d00f      	beq.n	800103c <_Unwind_VRS_Pop+0x128>
 800101c:	466f      	mov	r7, sp
 800101e:	4641      	mov	r1, r8
 8001020:	2910      	cmp	r1, #16
 8001022:	bf38      	it	cc
 8001024:	2110      	movcc	r1, #16
 8001026:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800102a:	3984      	subs	r1, #132	; 0x84
 800102c:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8001030:	f853 0b04 	ldr.w	r0, [r3], #4
 8001034:	f841 0f04 	str.w	r0, [r1, #4]!
 8001038:	42ab      	cmp	r3, r5
 800103a:	d1f9      	bne.n	8001030 <_Unwind_VRS_Pop+0x11c>
 800103c:	2c01      	cmp	r4, #1
 800103e:	f000 8084 	beq.w	800114a <_Unwind_VRS_Pop+0x236>
 8001042:	f1b8 0f0f 	cmp.w	r8, #15
 8001046:	63b5      	str	r5, [r6, #56]	; 0x38
 8001048:	d945      	bls.n	80010d6 <_Unwind_VRS_Pop+0x1c2>
 800104a:	f1b9 0f00 	cmp.w	r9, #0
 800104e:	d002      	beq.n	8001056 <_Unwind_VRS_Pop+0x142>
 8001050:	4668      	mov	r0, sp
 8001052:	f000 f8b7 	bl	80011c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001056:	2000      	movs	r0, #0
 8001058:	b043      	add	sp, #268	; 0x10c
 800105a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800105e:	b9dc      	cbnz	r4, 8001098 <_Unwind_VRS_Pop+0x184>
 8001060:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8001062:	4623      	mov	r3, r4
 8001064:	2001      	movs	r0, #1
 8001066:	b294      	uxth	r4, r2
 8001068:	f106 0c04 	add.w	ip, r6, #4
 800106c:	fa00 f203 	lsl.w	r2, r0, r3
 8001070:	4222      	tst	r2, r4
 8001072:	4639      	mov	r1, r7
 8001074:	d004      	beq.n	8001080 <_Unwind_VRS_Pop+0x16c>
 8001076:	f851 2b04 	ldr.w	r2, [r1], #4
 800107a:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 800107e:	460f      	mov	r7, r1
 8001080:	3301      	adds	r3, #1
 8001082:	2b10      	cmp	r3, #16
 8001084:	d1f2      	bne.n	800106c <_Unwind_VRS_Pop+0x158>
 8001086:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 800108a:	d1e4      	bne.n	8001056 <_Unwind_VRS_Pop+0x142>
 800108c:	63b7      	str	r7, [r6, #56]	; 0x38
 800108e:	e004      	b.n	800109a <_Unwind_VRS_Pop+0x186>
 8001090:	eb08 0305 	add.w	r3, r8, r5
 8001094:	2b10      	cmp	r3, #16
 8001096:	d903      	bls.n	80010a0 <_Unwind_VRS_Pop+0x18c>
 8001098:	2002      	movs	r0, #2
 800109a:	b043      	add	sp, #268	; 0x10c
 800109c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010a0:	f1b8 0f0f 	cmp.w	r8, #15
 80010a4:	d8f8      	bhi.n	8001098 <_Unwind_VRS_Pop+0x184>
 80010a6:	6833      	ldr	r3, [r6, #0]
 80010a8:	07da      	lsls	r2, r3, #31
 80010aa:	d506      	bpl.n	80010ba <_Unwind_VRS_Pop+0x1a6>
 80010ac:	4630      	mov	r0, r6
 80010ae:	f023 0303 	bic.w	r3, r3, #3
 80010b2:	f840 3b48 	str.w	r3, [r0], #72
 80010b6:	f000 f879 	bl	80011ac <__gnu_Unwind_Save_VFP>
 80010ba:	af20      	add	r7, sp, #128	; 0x80
 80010bc:	4638      	mov	r0, r7
 80010be:	f000 f875 	bl	80011ac <__gnu_Unwind_Save_VFP>
 80010c2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80010c4:	2d00      	cmp	r5, #0
 80010c6:	d199      	bne.n	8000ffc <_Unwind_VRS_Pop+0xe8>
 80010c8:	461d      	mov	r5, r3
 80010ca:	3504      	adds	r5, #4
 80010cc:	63b5      	str	r5, [r6, #56]	; 0x38
 80010ce:	4638      	mov	r0, r7
 80010d0:	f000 f868 	bl	80011a4 <__gnu_Unwind_Restore_VFP>
 80010d4:	e7bf      	b.n	8001056 <_Unwind_VRS_Pop+0x142>
 80010d6:	a820      	add	r0, sp, #128	; 0x80
 80010d8:	f000 f86c 	bl	80011b4 <__gnu_Unwind_Restore_VFP_D>
 80010dc:	e7b5      	b.n	800104a <_Unwind_VRS_Pop+0x136>
 80010de:	f1b9 0f10 	cmp.w	r9, #16
 80010e2:	d940      	bls.n	8001166 <_Unwind_VRS_Pop+0x252>
 80010e4:	f1a9 0910 	sub.w	r9, r9, #16
 80010e8:	6833      	ldr	r3, [r6, #0]
 80010ea:	07d9      	lsls	r1, r3, #31
 80010ec:	d508      	bpl.n	8001100 <_Unwind_VRS_Pop+0x1ec>
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	4630      	mov	r0, r6
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	f840 3b48 	str.w	r3, [r0], #72
 80010fc:	f000 f85e 	bl	80011bc <__gnu_Unwind_Save_VFP_D>
 8001100:	f1b9 0f00 	cmp.w	r9, #0
 8001104:	d032      	beq.n	800116c <_Unwind_VRS_Pop+0x258>
 8001106:	6833      	ldr	r3, [r6, #0]
 8001108:	075a      	lsls	r2, r3, #29
 800110a:	d420      	bmi.n	800114e <_Unwind_VRS_Pop+0x23a>
 800110c:	f1b8 0f0f 	cmp.w	r8, #15
 8001110:	d925      	bls.n	800115e <_Unwind_VRS_Pop+0x24a>
 8001112:	466f      	mov	r7, sp
 8001114:	4638      	mov	r0, r7
 8001116:	f1c8 0510 	rsb	r5, r8, #16
 800111a:	f000 f857 	bl	80011cc <__gnu_Unwind_Save_VFP_D_16_to_31>
 800111e:	2d00      	cmp	r5, #0
 8001120:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001122:	f77f af7c 	ble.w	800101e <_Unwind_VRS_Pop+0x10a>
 8001126:	af20      	add	r7, sp, #128	; 0x80
 8001128:	e76a      	b.n	8001000 <_Unwind_VRS_Pop+0xec>
 800112a:	f023 0310 	bic.w	r3, r3, #16
 800112e:	6033      	str	r3, [r6, #0]
 8001130:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001134:	f000 f89c 	bl	8001270 <__gnu_Unwind_Save_WMMXC>
 8001138:	e704      	b.n	8000f44 <_Unwind_VRS_Pop+0x30>
 800113a:	f023 0308 	bic.w	r3, r3, #8
 800113e:	6003      	str	r3, [r0, #0]
 8001140:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001144:	f000 f868 	bl	8001218 <__gnu_Unwind_Save_WMMXD>
 8001148:	e727      	b.n	8000f9a <_Unwind_VRS_Pop+0x86>
 800114a:	af20      	add	r7, sp, #128	; 0x80
 800114c:	e7bd      	b.n	80010ca <_Unwind_VRS_Pop+0x1b6>
 800114e:	4630      	mov	r0, r6
 8001150:	f023 0304 	bic.w	r3, r3, #4
 8001154:	f840 3bd0 	str.w	r3, [r0], #208
 8001158:	f000 f838 	bl	80011cc <__gnu_Unwind_Save_VFP_D_16_to_31>
 800115c:	e7d6      	b.n	800110c <_Unwind_VRS_Pop+0x1f8>
 800115e:	a820      	add	r0, sp, #128	; 0x80
 8001160:	f000 f82c 	bl	80011bc <__gnu_Unwind_Save_VFP_D>
 8001164:	e7d5      	b.n	8001112 <_Unwind_VRS_Pop+0x1fe>
 8001166:	f04f 0900 	mov.w	r9, #0
 800116a:	e7bd      	b.n	80010e8 <_Unwind_VRS_Pop+0x1d4>
 800116c:	f1b8 0f0f 	cmp.w	r8, #15
 8001170:	f63f af41 	bhi.w	8000ff6 <_Unwind_VRS_Pop+0xe2>
 8001174:	af20      	add	r7, sp, #128	; 0x80
 8001176:	4638      	mov	r0, r7
 8001178:	f000 f820 	bl	80011bc <__gnu_Unwind_Save_VFP_D>
 800117c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800117e:	2d00      	cmp	r5, #0
 8001180:	f47f af3c 	bne.w	8000ffc <_Unwind_VRS_Pop+0xe8>
 8001184:	4638      	mov	r0, r7
 8001186:	f000 f815 	bl	80011b4 <__gnu_Unwind_Restore_VFP_D>
 800118a:	e764      	b.n	8001056 <_Unwind_VRS_Pop+0x142>

0800118c <__restore_core_regs>:
 800118c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001190:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001194:	469c      	mov	ip, r3
 8001196:	46a6      	mov	lr, r4
 8001198:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800119c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80011a0:	46e5      	mov	sp, ip
 80011a2:	bd00      	pop	{pc}

080011a4 <__gnu_Unwind_Restore_VFP>:
 80011a4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop

080011ac <__gnu_Unwind_Save_VFP>:
 80011ac:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop

080011b4 <__gnu_Unwind_Restore_VFP_D>:
 80011b4:	ec90 0b20 	vldmia	r0, {d0-d15}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop

080011bc <__gnu_Unwind_Save_VFP_D>:
 80011bc:	ec80 0b20 	vstmia	r0, {d0-d15}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80011c4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80011cc:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop

080011d4 <__gnu_Unwind_Restore_WMMXD>:
 80011d4:	ecf0 0102 	ldfe	f0, [r0], #8
 80011d8:	ecf0 1102 	ldfe	f1, [r0], #8
 80011dc:	ecf0 2102 	ldfe	f2, [r0], #8
 80011e0:	ecf0 3102 	ldfe	f3, [r0], #8
 80011e4:	ecf0 4102 	ldfe	f4, [r0], #8
 80011e8:	ecf0 5102 	ldfe	f5, [r0], #8
 80011ec:	ecf0 6102 	ldfe	f6, [r0], #8
 80011f0:	ecf0 7102 	ldfe	f7, [r0], #8
 80011f4:	ecf0 8102 	ldfp	f0, [r0], #8
 80011f8:	ecf0 9102 	ldfp	f1, [r0], #8
 80011fc:	ecf0 a102 	ldfp	f2, [r0], #8
 8001200:	ecf0 b102 	ldfp	f3, [r0], #8
 8001204:	ecf0 c102 	ldfp	f4, [r0], #8
 8001208:	ecf0 d102 	ldfp	f5, [r0], #8
 800120c:	ecf0 e102 	ldfp	f6, [r0], #8
 8001210:	ecf0 f102 	ldfp	f7, [r0], #8
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <__gnu_Unwind_Save_WMMXD>:
 8001218:	ece0 0102 	stfe	f0, [r0], #8
 800121c:	ece0 1102 	stfe	f1, [r0], #8
 8001220:	ece0 2102 	stfe	f2, [r0], #8
 8001224:	ece0 3102 	stfe	f3, [r0], #8
 8001228:	ece0 4102 	stfe	f4, [r0], #8
 800122c:	ece0 5102 	stfe	f5, [r0], #8
 8001230:	ece0 6102 	stfe	f6, [r0], #8
 8001234:	ece0 7102 	stfe	f7, [r0], #8
 8001238:	ece0 8102 	stfp	f0, [r0], #8
 800123c:	ece0 9102 	stfp	f1, [r0], #8
 8001240:	ece0 a102 	stfp	f2, [r0], #8
 8001244:	ece0 b102 	stfp	f3, [r0], #8
 8001248:	ece0 c102 	stfp	f4, [r0], #8
 800124c:	ece0 d102 	stfp	f5, [r0], #8
 8001250:	ece0 e102 	stfp	f6, [r0], #8
 8001254:	ece0 f102 	stfp	f7, [r0], #8
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop

0800125c <__gnu_Unwind_Restore_WMMXC>:
 800125c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001260:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001264:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001268:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <__gnu_Unwind_Save_WMMXC>:
 8001270:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001274:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001278:	fca0 a101 	stc2	1, cr10, [r0], #4
 800127c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop

08001284 <_Unwind_RaiseException>:
 8001284:	46ec      	mov	ip, sp
 8001286:	b500      	push	{lr}
 8001288:	e92d 5000 	stmdb	sp!, {ip, lr}
 800128c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001298:	a901      	add	r1, sp, #4
 800129a:	f7ff fbf1 	bl	8000a80 <__gnu_Unwind_RaiseException>
 800129e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80012a2:	b012      	add	sp, #72	; 0x48
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop

080012a8 <_Unwind_Resume>:
 80012a8:	46ec      	mov	ip, sp
 80012aa:	b500      	push	{lr}
 80012ac:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012b0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80012bc:	a901      	add	r1, sp, #4
 80012be:	f7ff fc19 	bl	8000af4 <__gnu_Unwind_Resume>
 80012c2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80012c6:	b012      	add	sp, #72	; 0x48
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <_Unwind_Resume_or_Rethrow>:
 80012cc:	46ec      	mov	ip, sp
 80012ce:	b500      	push	{lr}
 80012d0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012d4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80012e0:	a901      	add	r1, sp, #4
 80012e2:	f7ff fc29 	bl	8000b38 <__gnu_Unwind_Resume_or_Rethrow>
 80012e6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80012ea:	b012      	add	sp, #72	; 0x48
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <_Unwind_ForcedUnwind>:
 80012f0:	46ec      	mov	ip, sp
 80012f2:	b500      	push	{lr}
 80012f4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012f8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001304:	ab01      	add	r3, sp, #4
 8001306:	f7ff fbeb 	bl	8000ae0 <__gnu_Unwind_ForcedUnwind>
 800130a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800130e:	b012      	add	sp, #72	; 0x48
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <_Unwind_Backtrace>:
 8001314:	46ec      	mov	ip, sp
 8001316:	b500      	push	{lr}
 8001318:	e92d 5000 	stmdb	sp!, {ip, lr}
 800131c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001328:	aa01      	add	r2, sp, #4
 800132a:	f7ff fc5d 	bl	8000be8 <__gnu_Unwind_Backtrace>
 800132e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001332:	b012      	add	sp, #72	; 0x48
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <next_unwind_byte>:
 8001338:	7a02      	ldrb	r2, [r0, #8]
 800133a:	b97a      	cbnz	r2, 800135c <next_unwind_byte+0x24>
 800133c:	7a43      	ldrb	r3, [r0, #9]
 800133e:	b1a3      	cbz	r3, 800136a <next_unwind_byte+0x32>
 8001340:	6842      	ldr	r2, [r0, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	b410      	push	{r4}
 8001346:	7243      	strb	r3, [r0, #9]
 8001348:	6813      	ldr	r3, [r2, #0]
 800134a:	2103      	movs	r1, #3
 800134c:	1d14      	adds	r4, r2, #4
 800134e:	7201      	strb	r1, [r0, #8]
 8001350:	021a      	lsls	r2, r3, #8
 8001352:	6044      	str	r4, [r0, #4]
 8001354:	6002      	str	r2, [r0, #0]
 8001356:	bc10      	pop	{r4}
 8001358:	0e18      	lsrs	r0, r3, #24
 800135a:	4770      	bx	lr
 800135c:	6803      	ldr	r3, [r0, #0]
 800135e:	3a01      	subs	r2, #1
 8001360:	7202      	strb	r2, [r0, #8]
 8001362:	021a      	lsls	r2, r3, #8
 8001364:	6002      	str	r2, [r0, #0]
 8001366:	0e18      	lsrs	r0, r3, #24
 8001368:	4770      	bx	lr
 800136a:	20b0      	movs	r0, #176	; 0xb0
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <_Unwind_GetGR.constprop.0>:
 8001370:	b500      	push	{lr}
 8001372:	b085      	sub	sp, #20
 8001374:	aa03      	add	r2, sp, #12
 8001376:	2300      	movs	r3, #0
 8001378:	9200      	str	r2, [sp, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	220c      	movs	r2, #12
 800137e:	f7ff fbeb 	bl	8000b58 <_Unwind_VRS_Get>
 8001382:	9803      	ldr	r0, [sp, #12]
 8001384:	b005      	add	sp, #20
 8001386:	f85d fb04 	ldr.w	pc, [sp], #4
 800138a:	bf00      	nop

0800138c <unwind_UCB_from_context>:
 800138c:	e7f0      	b.n	8001370 <_Unwind_GetGR.constprop.0>
 800138e:	bf00      	nop

08001390 <__gnu_unwind_execute>:
 8001390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001394:	4605      	mov	r5, r0
 8001396:	b085      	sub	sp, #20
 8001398:	460e      	mov	r6, r1
 800139a:	f04f 0800 	mov.w	r8, #0
 800139e:	4630      	mov	r0, r6
 80013a0:	f7ff ffca 	bl	8001338 <next_unwind_byte>
 80013a4:	28b0      	cmp	r0, #176	; 0xb0
 80013a6:	4604      	mov	r4, r0
 80013a8:	f000 80b2 	beq.w	8001510 <__gnu_unwind_execute+0x180>
 80013ac:	0607      	lsls	r7, r0, #24
 80013ae:	d520      	bpl.n	80013f2 <__gnu_unwind_execute+0x62>
 80013b0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80013b4:	2b80      	cmp	r3, #128	; 0x80
 80013b6:	d04d      	beq.n	8001454 <__gnu_unwind_execute+0xc4>
 80013b8:	2b90      	cmp	r3, #144	; 0x90
 80013ba:	d036      	beq.n	800142a <__gnu_unwind_execute+0x9a>
 80013bc:	2ba0      	cmp	r3, #160	; 0xa0
 80013be:	d060      	beq.n	8001482 <__gnu_unwind_execute+0xf2>
 80013c0:	2bb0      	cmp	r3, #176	; 0xb0
 80013c2:	d074      	beq.n	80014ae <__gnu_unwind_execute+0x11e>
 80013c4:	2bc0      	cmp	r3, #192	; 0xc0
 80013c6:	f000 808b 	beq.w	80014e0 <__gnu_unwind_execute+0x150>
 80013ca:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80013ce:	2bd0      	cmp	r3, #208	; 0xd0
 80013d0:	d10b      	bne.n	80013ea <__gnu_unwind_execute+0x5a>
 80013d2:	f000 0207 	and.w	r2, r0, #7
 80013d6:	3201      	adds	r2, #1
 80013d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80013dc:	2305      	movs	r3, #5
 80013de:	2101      	movs	r1, #1
 80013e0:	4628      	mov	r0, r5
 80013e2:	f7ff fd97 	bl	8000f14 <_Unwind_VRS_Pop>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d0d9      	beq.n	800139e <__gnu_unwind_execute+0xe>
 80013ea:	2009      	movs	r0, #9
 80013ec:	b005      	add	sp, #20
 80013ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013f2:	f10d 090c 	add.w	r9, sp, #12
 80013f6:	2300      	movs	r3, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	0087      	lsls	r7, r0, #2
 80013fc:	f8cd 9000 	str.w	r9, [sp]
 8001400:	220d      	movs	r2, #13
 8001402:	4628      	mov	r0, r5
 8001404:	f7ff fba8 	bl	8000b58 <_Unwind_VRS_Get>
 8001408:	b2ff      	uxtb	r7, r7
 800140a:	9b03      	ldr	r3, [sp, #12]
 800140c:	f8cd 9000 	str.w	r9, [sp]
 8001410:	3704      	adds	r7, #4
 8001412:	0660      	lsls	r0, r4, #25
 8001414:	bf4c      	ite	mi
 8001416:	1bdf      	submi	r7, r3, r7
 8001418:	18ff      	addpl	r7, r7, r3
 800141a:	2300      	movs	r3, #0
 800141c:	4619      	mov	r1, r3
 800141e:	220d      	movs	r2, #13
 8001420:	4628      	mov	r0, r5
 8001422:	9703      	str	r7, [sp, #12]
 8001424:	f7ff fbbc 	bl	8000ba0 <_Unwind_VRS_Set>
 8001428:	e7b9      	b.n	800139e <__gnu_unwind_execute+0xe>
 800142a:	f000 030d 	and.w	r3, r0, #13
 800142e:	2b0d      	cmp	r3, #13
 8001430:	d0db      	beq.n	80013ea <__gnu_unwind_execute+0x5a>
 8001432:	af03      	add	r7, sp, #12
 8001434:	2300      	movs	r3, #0
 8001436:	f000 020f 	and.w	r2, r0, #15
 800143a:	4619      	mov	r1, r3
 800143c:	9700      	str	r7, [sp, #0]
 800143e:	4628      	mov	r0, r5
 8001440:	f7ff fb8a 	bl	8000b58 <_Unwind_VRS_Get>
 8001444:	2300      	movs	r3, #0
 8001446:	9700      	str	r7, [sp, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	220d      	movs	r2, #13
 800144c:	4628      	mov	r0, r5
 800144e:	f7ff fba7 	bl	8000ba0 <_Unwind_VRS_Set>
 8001452:	e7a4      	b.n	800139e <__gnu_unwind_execute+0xe>
 8001454:	4630      	mov	r0, r6
 8001456:	f7ff ff6f 	bl	8001338 <next_unwind_byte>
 800145a:	0224      	lsls	r4, r4, #8
 800145c:	4320      	orrs	r0, r4
 800145e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001462:	d0c2      	beq.n	80013ea <__gnu_unwind_execute+0x5a>
 8001464:	0104      	lsls	r4, r0, #4
 8001466:	2300      	movs	r3, #0
 8001468:	b2a2      	uxth	r2, r4
 800146a:	4619      	mov	r1, r3
 800146c:	4628      	mov	r0, r5
 800146e:	f7ff fd51 	bl	8000f14 <_Unwind_VRS_Pop>
 8001472:	2800      	cmp	r0, #0
 8001474:	d1b9      	bne.n	80013ea <__gnu_unwind_execute+0x5a>
 8001476:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800147a:	bf18      	it	ne
 800147c:	f04f 0801 	movne.w	r8, #1
 8001480:	e78d      	b.n	800139e <__gnu_unwind_execute+0xe>
 8001482:	43c2      	mvns	r2, r0
 8001484:	f002 0307 	and.w	r3, r2, #7
 8001488:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800148c:	411a      	asrs	r2, r3
 800148e:	0701      	lsls	r1, r0, #28
 8001490:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	bf48      	it	mi
 800149a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800149e:	4619      	mov	r1, r3
 80014a0:	4628      	mov	r0, r5
 80014a2:	f7ff fd37 	bl	8000f14 <_Unwind_VRS_Pop>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	f43f af79 	beq.w	800139e <__gnu_unwind_execute+0xe>
 80014ac:	e79d      	b.n	80013ea <__gnu_unwind_execute+0x5a>
 80014ae:	28b1      	cmp	r0, #177	; 0xb1
 80014b0:	d033      	beq.n	800151a <__gnu_unwind_execute+0x18a>
 80014b2:	28b2      	cmp	r0, #178	; 0xb2
 80014b4:	f000 808b 	beq.w	80015ce <__gnu_unwind_execute+0x23e>
 80014b8:	28b3      	cmp	r0, #179	; 0xb3
 80014ba:	d039      	beq.n	8001530 <__gnu_unwind_execute+0x1a0>
 80014bc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80014c0:	2bb4      	cmp	r3, #180	; 0xb4
 80014c2:	d092      	beq.n	80013ea <__gnu_unwind_execute+0x5a>
 80014c4:	f000 0207 	and.w	r2, r0, #7
 80014c8:	3201      	adds	r2, #1
 80014ca:	2301      	movs	r3, #1
 80014cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014d0:	4619      	mov	r1, r3
 80014d2:	4628      	mov	r0, r5
 80014d4:	f7ff fd1e 	bl	8000f14 <_Unwind_VRS_Pop>
 80014d8:	2800      	cmp	r0, #0
 80014da:	f43f af60 	beq.w	800139e <__gnu_unwind_execute+0xe>
 80014de:	e784      	b.n	80013ea <__gnu_unwind_execute+0x5a>
 80014e0:	28c6      	cmp	r0, #198	; 0xc6
 80014e2:	d042      	beq.n	800156a <__gnu_unwind_execute+0x1da>
 80014e4:	28c7      	cmp	r0, #199	; 0xc7
 80014e6:	d04c      	beq.n	8001582 <__gnu_unwind_execute+0x1f2>
 80014e8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80014ec:	2bc0      	cmp	r3, #192	; 0xc0
 80014ee:	d05b      	beq.n	80015a8 <__gnu_unwind_execute+0x218>
 80014f0:	28c8      	cmp	r0, #200	; 0xc8
 80014f2:	d060      	beq.n	80015b6 <__gnu_unwind_execute+0x226>
 80014f4:	28c9      	cmp	r0, #201	; 0xc9
 80014f6:	f47f af78 	bne.w	80013ea <__gnu_unwind_execute+0x5a>
 80014fa:	4630      	mov	r0, r6
 80014fc:	f7ff ff1c 	bl	8001338 <next_unwind_byte>
 8001500:	0302      	lsls	r2, r0, #12
 8001502:	f000 000f 	and.w	r0, r0, #15
 8001506:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800150a:	3001      	adds	r0, #1
 800150c:	4302      	orrs	r2, r0
 800150e:	e765      	b.n	80013dc <__gnu_unwind_execute+0x4c>
 8001510:	f1b8 0f00 	cmp.w	r8, #0
 8001514:	d018      	beq.n	8001548 <__gnu_unwind_execute+0x1b8>
 8001516:	2000      	movs	r0, #0
 8001518:	e768      	b.n	80013ec <__gnu_unwind_execute+0x5c>
 800151a:	4630      	mov	r0, r6
 800151c:	f7ff ff0c 	bl	8001338 <next_unwind_byte>
 8001520:	4602      	mov	r2, r0
 8001522:	2800      	cmp	r0, #0
 8001524:	f43f af61 	beq.w	80013ea <__gnu_unwind_execute+0x5a>
 8001528:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800152c:	d0d0      	beq.n	80014d0 <__gnu_unwind_execute+0x140>
 800152e:	e75c      	b.n	80013ea <__gnu_unwind_execute+0x5a>
 8001530:	4630      	mov	r0, r6
 8001532:	f7ff ff01 	bl	8001338 <next_unwind_byte>
 8001536:	0301      	lsls	r1, r0, #12
 8001538:	f000 000f 	and.w	r0, r0, #15
 800153c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001540:	1c42      	adds	r2, r0, #1
 8001542:	2301      	movs	r3, #1
 8001544:	430a      	orrs	r2, r1
 8001546:	e7c3      	b.n	80014d0 <__gnu_unwind_execute+0x140>
 8001548:	ac03      	add	r4, sp, #12
 800154a:	4643      	mov	r3, r8
 800154c:	220e      	movs	r2, #14
 800154e:	4641      	mov	r1, r8
 8001550:	9400      	str	r4, [sp, #0]
 8001552:	4628      	mov	r0, r5
 8001554:	f7ff fb00 	bl	8000b58 <_Unwind_VRS_Get>
 8001558:	9400      	str	r4, [sp, #0]
 800155a:	4628      	mov	r0, r5
 800155c:	4643      	mov	r3, r8
 800155e:	220f      	movs	r2, #15
 8001560:	4641      	mov	r1, r8
 8001562:	f7ff fb1d 	bl	8000ba0 <_Unwind_VRS_Set>
 8001566:	4640      	mov	r0, r8
 8001568:	e740      	b.n	80013ec <__gnu_unwind_execute+0x5c>
 800156a:	4630      	mov	r0, r6
 800156c:	f7ff fee4 	bl	8001338 <next_unwind_byte>
 8001570:	0301      	lsls	r1, r0, #12
 8001572:	f000 000f 	and.w	r0, r0, #15
 8001576:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800157a:	1c42      	adds	r2, r0, #1
 800157c:	2303      	movs	r3, #3
 800157e:	430a      	orrs	r2, r1
 8001580:	e7a6      	b.n	80014d0 <__gnu_unwind_execute+0x140>
 8001582:	4630      	mov	r0, r6
 8001584:	f7ff fed8 	bl	8001338 <next_unwind_byte>
 8001588:	4602      	mov	r2, r0
 800158a:	2800      	cmp	r0, #0
 800158c:	f43f af2d 	beq.w	80013ea <__gnu_unwind_execute+0x5a>
 8001590:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001594:	f47f af29 	bne.w	80013ea <__gnu_unwind_execute+0x5a>
 8001598:	2104      	movs	r1, #4
 800159a:	4628      	mov	r0, r5
 800159c:	f7ff fcba 	bl	8000f14 <_Unwind_VRS_Pop>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	f43f aefc 	beq.w	800139e <__gnu_unwind_execute+0xe>
 80015a6:	e720      	b.n	80013ea <__gnu_unwind_execute+0x5a>
 80015a8:	f000 020f 	and.w	r2, r0, #15
 80015ac:	3201      	adds	r2, #1
 80015ae:	2303      	movs	r3, #3
 80015b0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80015b4:	e78c      	b.n	80014d0 <__gnu_unwind_execute+0x140>
 80015b6:	4630      	mov	r0, r6
 80015b8:	f7ff febe 	bl	8001338 <next_unwind_byte>
 80015bc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80015c0:	f000 030f 	and.w	r3, r0, #15
 80015c4:	3210      	adds	r2, #16
 80015c6:	3301      	adds	r3, #1
 80015c8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80015cc:	e706      	b.n	80013dc <__gnu_unwind_execute+0x4c>
 80015ce:	2300      	movs	r3, #0
 80015d0:	f10d 090c 	add.w	r9, sp, #12
 80015d4:	220d      	movs	r2, #13
 80015d6:	4619      	mov	r1, r3
 80015d8:	f8cd 9000 	str.w	r9, [sp]
 80015dc:	4628      	mov	r0, r5
 80015de:	f7ff fabb 	bl	8000b58 <_Unwind_VRS_Get>
 80015e2:	4630      	mov	r0, r6
 80015e4:	f7ff fea8 	bl	8001338 <next_unwind_byte>
 80015e8:	0602      	lsls	r2, r0, #24
 80015ea:	f04f 0702 	mov.w	r7, #2
 80015ee:	d50c      	bpl.n	800160a <__gnu_unwind_execute+0x27a>
 80015f0:	9b03      	ldr	r3, [sp, #12]
 80015f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80015f6:	40b8      	lsls	r0, r7
 80015f8:	4403      	add	r3, r0
 80015fa:	4630      	mov	r0, r6
 80015fc:	9303      	str	r3, [sp, #12]
 80015fe:	f7ff fe9b 	bl	8001338 <next_unwind_byte>
 8001602:	0603      	lsls	r3, r0, #24
 8001604:	f107 0707 	add.w	r7, r7, #7
 8001608:	d4f2      	bmi.n	80015f0 <__gnu_unwind_execute+0x260>
 800160a:	9b03      	ldr	r3, [sp, #12]
 800160c:	f8cd 9000 	str.w	r9, [sp]
 8001610:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001614:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001618:	40bc      	lsls	r4, r7
 800161a:	2300      	movs	r3, #0
 800161c:	4414      	add	r4, r2
 800161e:	4619      	mov	r1, r3
 8001620:	220d      	movs	r2, #13
 8001622:	4628      	mov	r0, r5
 8001624:	9403      	str	r4, [sp, #12]
 8001626:	f7ff fabb 	bl	8000ba0 <_Unwind_VRS_Set>
 800162a:	e6b8      	b.n	800139e <__gnu_unwind_execute+0xe>

0800162c <__gnu_unwind_frame>:
 800162c:	b510      	push	{r4, lr}
 800162e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001630:	b084      	sub	sp, #16
 8001632:	6853      	ldr	r3, [r2, #4]
 8001634:	2403      	movs	r4, #3
 8001636:	f88d 400c 	strb.w	r4, [sp, #12]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	f102 0408 	add.w	r4, r2, #8
 8001640:	4608      	mov	r0, r1
 8001642:	79d2      	ldrb	r2, [r2, #7]
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	a901      	add	r1, sp, #4
 8001648:	9402      	str	r4, [sp, #8]
 800164a:	f88d 200d 	strb.w	r2, [sp, #13]
 800164e:	f7ff fe9f 	bl	8001390 <__gnu_unwind_execute>
 8001652:	b004      	add	sp, #16
 8001654:	bd10      	pop	{r4, pc}
 8001656:	bf00      	nop

08001658 <_Unwind_GetRegionStart>:
 8001658:	b508      	push	{r3, lr}
 800165a:	f7ff fe97 	bl	800138c <unwind_UCB_from_context>
 800165e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001660:	bd08      	pop	{r3, pc}
 8001662:	bf00      	nop

08001664 <_Unwind_GetLanguageSpecificData>:
 8001664:	b508      	push	{r3, lr}
 8001666:	f7ff fe91 	bl	800138c <unwind_UCB_from_context>
 800166a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800166c:	79c3      	ldrb	r3, [r0, #7]
 800166e:	3302      	adds	r3, #2
 8001670:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001674:	bd08      	pop	{r3, pc}
 8001676:	bf00      	nop

08001678 <__aeabi_idiv0>:
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint32_t reset_reason = RCC->CSR;
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <main+0x30>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001686:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001688:	f000 fbe6 	bl	8001e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168c:	f000 f810 	bl	80016b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001690:	f000 f98e 	bl	80019b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001694:	f000 f96c 	bl	8001970 <MX_DMA_Init>
  MX_TIM1_Init();
 8001698:	f000 f8a4 	bl	80017e4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800169c:	f000 f93e 	bl	800191c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80016a0:	f000 f86e 	bl	8001780 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 80016a4:	f004 f9a6 	bl	80059f4 <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <main+0x2c>
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	; 0x50
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	2230      	movs	r2, #48	; 0x30
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 fbe6 	bl	8005e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <SystemClock_Config+0xc8>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4a26      	ldr	r2, [pc, #152]	; (8001778 <SystemClock_Config+0xc8>)
 80016de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6413      	str	r3, [r2, #64]	; 0x40
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <SystemClock_Config+0xc8>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <SystemClock_Config+0xcc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a20      	ldr	r2, [pc, #128]	; (800177c <SystemClock_Config+0xcc>)
 80016fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <SystemClock_Config+0xcc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800170c:	2301      	movs	r3, #1
 800170e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001716:	2302      	movs	r3, #2
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001720:	230c      	movs	r3, #12
 8001722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001724:	2360      	movs	r3, #96	; 0x60
 8001726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001728:	2304      	movs	r3, #4
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800172c:	2304      	movs	r3, #4
 800172e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	4618      	mov	r0, r3
 8001736:	f001 fa67 	bl	8002c08 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001740:	f000 f9a6 	bl	8001a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001744:	230f      	movs	r3, #15
 8001746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001748:	2302      	movs	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2101      	movs	r1, #1
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fcc1 	bl	80030e8 <HAL_RCC_ClockConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800176c:	f000 f990 	bl	8001a90 <Error_Handler>
  }
}
 8001770:	bf00      	nop
 8001772:	3750      	adds	r7, #80	; 0x50
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000

08001780 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_SPI1_Init+0x5c>)
 8001786:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <MX_SPI1_Init+0x60>)
 8001788:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_SPI1_Init+0x5c>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_SPI1_Init+0x5c>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_SPI1_Init+0x5c>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_SPI1_Init+0x5c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_SPI1_Init+0x5c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_SPI1_Init+0x5c>)
 80017aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <MX_SPI1_Init+0x5c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_SPI1_Init+0x5c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <MX_SPI1_Init+0x5c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_SPI1_Init+0x5c>)
 80017c4:	220a      	movs	r2, #10
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <MX_SPI1_Init+0x5c>)
 80017ca:	f001 fe5d 	bl	8003488 <HAL_SPI_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80017d4:	f000 f95c 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200006a0 	.word	0x200006a0
 80017e0:	40013000 	.word	0x40013000

080017e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b096      	sub	sp, #88	; 0x58
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
 8001812:	615a      	str	r2, [r3, #20]
 8001814:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2220      	movs	r2, #32
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f004 fb37 	bl	8005e90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001822:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <MX_TIM1_Init+0x130>)
 8001824:	4a3c      	ldr	r2, [pc, #240]	; (8001918 <MX_TIM1_Init+0x134>)
 8001826:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001828:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <MX_TIM1_Init+0x130>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <MX_TIM1_Init+0x130>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8001834:	4b37      	ldr	r3, [pc, #220]	; (8001914 <MX_TIM1_Init+0x130>)
 8001836:	2201      	movs	r2, #1
 8001838:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183a:	4b36      	ldr	r3, [pc, #216]	; (8001914 <MX_TIM1_Init+0x130>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001840:	4b34      	ldr	r3, [pc, #208]	; (8001914 <MX_TIM1_Init+0x130>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001846:	4b33      	ldr	r3, [pc, #204]	; (8001914 <MX_TIM1_Init+0x130>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800184c:	4831      	ldr	r0, [pc, #196]	; (8001914 <MX_TIM1_Init+0x130>)
 800184e:	f001 fe7f 	bl	8003550 <HAL_TIM_Base_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001858:	f000 f91a 	bl	8001a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001860:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001862:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001866:	4619      	mov	r1, r3
 8001868:	482a      	ldr	r0, [pc, #168]	; (8001914 <MX_TIM1_Init+0x130>)
 800186a:	f001 ffe7 	bl	800383c <HAL_TIM_ConfigClockSource>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001874:	f000 f90c 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001878:	4826      	ldr	r0, [pc, #152]	; (8001914 <MX_TIM1_Init+0x130>)
 800187a:	f001 fee3 	bl	8003644 <HAL_TIM_PWM_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001884:	f000 f904 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001890:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001894:	4619      	mov	r1, r3
 8001896:	481f      	ldr	r0, [pc, #124]	; (8001914 <MX_TIM1_Init+0x130>)
 8001898:	f002 fb60 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80018a2:	f000 f8f5 	bl	8001a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2360      	movs	r3, #96	; 0x60
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b2:	2300      	movs	r3, #0
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c6:	2200      	movs	r2, #0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4812      	ldr	r0, [pc, #72]	; (8001914 <MX_TIM1_Init+0x130>)
 80018cc:	f001 fef0 	bl	80036b0 <HAL_TIM_PWM_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80018d6:	f000 f8db 	bl	8001a90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_TIM1_Init+0x130>)
 80018fe:	f002 fb9b 	bl	8004038 <HAL_TIMEx_ConfigBreakDeadTime>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001908:	f000 f8c2 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	3758      	adds	r7, #88	; 0x58
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000660 	.word	0x20000660
 8001918:	40010000 	.word	0x40010000

0800191c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <MX_USART1_UART_Init+0x50>)
 8001924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800192c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001954:	f002 fbc2 	bl	80040dc <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800195e:	f000 f897 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000620 	.word	0x20000620
 800196c:	40011000 	.word	0x40011000

08001970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_DMA_Init+0x3c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <MX_DMA_Init+0x3c>)
 8001980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_DMA_Init+0x3c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2039      	movs	r0, #57	; 0x39
 8001998:	f000 fbcf 	bl	800213a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800199c:	2039      	movs	r0, #57	; 0x39
 800199e:	f000 fbe8 	bl	8002172 <HAL_NVIC_EnableIRQ>

}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <MX_GPIO_Init+0xd4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a2d      	ldr	r2, [pc, #180]	; (8001a84 <MX_GPIO_Init+0xd4>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <MX_GPIO_Init+0xd4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <MX_GPIO_Init+0xd4>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <MX_GPIO_Init+0xd4>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <MX_GPIO_Init+0xd4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <MX_GPIO_Init+0xd4>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <MX_GPIO_Init+0xd4>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_GPIO_Init+0xd4>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CLK_Pin|LED_0_Pin|LED_1_Pin|DebugPin_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f640 0107 	movw	r1, #2055	; 0x807
 8001a20:	4819      	ldr	r0, [pc, #100]	; (8001a88 <MX_GPIO_Init+0xd8>)
 8001a22:	f001 f8d7 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 8001a26:	2200      	movs	r2, #0
 8001a28:	f245 71ff 	movw	r1, #22527	; 0x57ff
 8001a2c:	4817      	ldr	r0, [pc, #92]	; (8001a8c <MX_GPIO_Init+0xdc>)
 8001a2e:	f001 f8d1 	bl	8002bd4 <HAL_GPIO_WritePin>
                          |Matrix_CLK_Pin|Matrix_OE_Pin|Matrix_C_Pin|Matrix_B_Pin
                          |Matrix_A_Pin|Matrix_E_Pin|Matrix_B1_Pin|Matrix_G1_Pin
                          |Matrix_R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Matrix_LAT_GPIO_Port, Matrix_LAT_Pin, GPIO_PIN_SET);
 8001a32:	2201      	movs	r2, #1
 8001a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a38:	4814      	ldr	r0, [pc, #80]	; (8001a8c <MX_GPIO_Init+0xdc>)
 8001a3a:	f001 f8cb 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CLK_Pin LED_0_Pin LED_1_Pin DebugPin_Pin */
  GPIO_InitStruct.Pin = LED_CLK_Pin|LED_0_Pin|LED_1_Pin|DebugPin_Pin;
 8001a3e:	f640 0307 	movw	r3, #2055	; 0x807
 8001a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	4619      	mov	r1, r3
 8001a56:	480c      	ldr	r0, [pc, #48]	; (8001a88 <MX_GPIO_Init+0xd8>)
 8001a58:	f000 ff38 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B0_Pin Matrix_D_Pin
                           Matrix_CLK_Pin Matrix_LAT_Pin Matrix_OE_Pin Matrix_C_Pin
                           Matrix_B_Pin Matrix_A_Pin Matrix_E_Pin Matrix_B1_Pin
                           Matrix_G1_Pin Matrix_R1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 8001a5c:	f247 73ff 	movw	r3, #30719	; 0x77ff
 8001a60:	60fb      	str	r3, [r7, #12]
                          |Matrix_CLK_Pin|Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_C_Pin
                          |Matrix_B_Pin|Matrix_A_Pin|Matrix_E_Pin|Matrix_B1_Pin
                          |Matrix_G1_Pin|Matrix_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_GPIO_Init+0xdc>)
 8001a76:	f000 ff29 	bl	80028cc <HAL_GPIO_Init>

}
 8001a7a:	bf00      	nop
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_MspInit+0x4c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_SPI_MspInit+0x84>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12b      	bne.n	8001b6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b4a:	23e0      	movs	r3, #224	; 0xe0
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_SPI_MspInit+0x8c>)
 8001b66:	f000 feb1 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40013000 	.word	0x40013000
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000

08001b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <HAL_TIM_Base_MspInit+0x98>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d13d      	bne.n	8001c0e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_TIM_Base_MspInit+0x9c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a20      	ldr	r2, [pc, #128]	; (8001c1c <HAL_TIM_Base_MspInit+0x9c>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <HAL_TIM_Base_MspInit+0x9c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <HAL_TIM_Base_MspInit+0xa4>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001bb6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001bba:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001bbe:	2240      	movs	r2, #64	; 0x40
 8001bc0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bce:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bd6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bde:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001bf2:	480b      	ldr	r0, [pc, #44]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001bf4:	f000 fad8 	bl	80021a8 <HAL_DMA_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001bfe:	f7ff ff47 	bl	8001a90 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
 8001c08:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <HAL_TIM_Base_MspInit+0xa0>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	200005c0 	.word	0x200005c0
 8001c24:	40026428 	.word	0x40026428

08001c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_UART_MspInit+0x84>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d12c      	bne.n	8001ca4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c54:	f043 0310 	orr.w	r3, r3, #16
 8001c58:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c94:	2307      	movs	r3, #7
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <HAL_UART_MspInit+0x8c>)
 8001ca0:	f000 fe14 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40011000 	.word	0x40011000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler+0x4>

08001cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0c:	f000 f8f6 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <DMA2_Stream1_IRQHandler+0x10>)
 8001d1a:	f000 fb6d 	bl	80023f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200005c0 	.word	0x200005c0

08001d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
	return 1;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_kill>:

int _kill(int pid, int sig)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d42:	f004 f85d 	bl	8005e00 <__errno>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2216      	movs	r2, #22
 8001d4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_exit>:

void _exit (int status)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ffe7 	bl	8001d38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d6a:	e7fe      	b.n	8001d6a <_exit+0x12>

08001d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <_sbrk+0x5c>)
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <_sbrk+0x60>)
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <_sbrk+0x64>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <_sbrk+0x68>)
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d207      	bcs.n	8001dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d9c:	f004 f830 	bl	8005e00 <__errno>
 8001da0:	4603      	mov	r3, r0
 8001da2:	220c      	movs	r2, #12
 8001da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001daa:	e009      	b.n	8001dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <_sbrk+0x64>)
 8001dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20020000 	.word	0x20020000
 8001dcc:	00000400 	.word	0x00000400
 8001dd0:	20000190 	.word	0x20000190
 8001dd4:	20000710 	.word	0x20000710

08001dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <SystemInit+0x28>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <SystemInit+0x28>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SystemInit+0x28>)
 8001dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df2:	609a      	str	r2, [r3, #8]
#endif
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e0a:	e003      	b.n	8001e14 <LoopCopyDataInit>

08001e0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e12:	3104      	adds	r1, #4

08001e14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e14:	480b      	ldr	r0, [pc, #44]	; (8001e44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e1c:	d3f6      	bcc.n	8001e0c <CopyDataInit>
  ldr  r2, =_sbss
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e20:	e002      	b.n	8001e28 <LoopFillZerobss>

08001e22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e24:	f842 3b04 	str.w	r3, [r2], #4

08001e28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e2c:	d3f9      	bcc.n	8001e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e2e:	f7ff ffd3 	bl	8001dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e32:	f003 ffeb 	bl	8005e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e36:	f7ff fc21 	bl	800167c <main>
  bx  lr    
 8001e3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e40:	08006b08 	.word	0x08006b08
  ldr  r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e48:	20000174 	.word	0x20000174
  ldr  r2, =_sbss
 8001e4c:	20000174 	.word	0x20000174
  ldr  r3, = _ebss
 8001e50:	2000070c 	.word	0x2000070c

08001e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC_IRQHandler>
	...

08001e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <HAL_Init+0x40>)
 8001e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_Init+0x40>)
 8001e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_Init+0x40>)
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 f94f 	bl	8002124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f808 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8c:	f7ff fe08 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023c00 	.word	0x40023c00

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 f967 	bl	800218e <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ed8:	f000 f92f 	bl	800213a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	200006f8 	.word	0x200006f8

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	200006f8 	.word	0x200006f8

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <__NVIC_EnableIRQ+0x38>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100

08002024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db0a      	blt.n	800204e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <__NVIC_SetPriority+0x4c>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800204c:	e00a      	b.n	8002064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4908      	ldr	r1, [pc, #32]	; (8002074 <__NVIC_SetPriority+0x50>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3b04      	subs	r3, #4
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	440b      	add	r3, r1
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000e100 	.word	0xe000e100
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f1c3 0307 	rsb	r3, r3, #7
 8002092:	2b04      	cmp	r3, #4
 8002094:	bf28      	it	cs
 8002096:	2304      	movcs	r3, #4
 8002098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3304      	adds	r3, #4
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d902      	bls.n	80020a8 <NVIC_EncodePriority+0x30>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3b03      	subs	r3, #3
 80020a6:	e000      	b.n	80020aa <NVIC_EncodePriority+0x32>
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	4313      	orrs	r3, r2
         );
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f0:	d301      	bcc.n	80020f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00f      	b.n	8002116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <SysTick_Config+0x40>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fe:	210f      	movs	r1, #15
 8002100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002104:	f7ff ff8e 	bl	8002024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <SysTick_Config+0x40>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SysTick_Config+0x40>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff29 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800214c:	f7ff ff3e 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 8002150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7ff ff8e 	bl	8002078 <NVIC_EncodePriority>
 800215c:	4602      	mov	r2, r0
 800215e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff5d 	bl	8002024 <__NVIC_SetPriority>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff31 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffa2 	bl	80020e0 <SysTick_Config>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7ff feb6 	bl	8001f24 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e099      	b.n	80022f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e4:	e00f      	b.n	8002206 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021e6:	f7ff fe9d 	bl	8001f24 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d908      	bls.n	8002206 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2203      	movs	r2, #3
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e078      	b.n	80022f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1e8      	bne.n	80021e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4b38      	ldr	r3, [pc, #224]	; (8002300 <HAL_DMA_Init+0x158>)
 8002220:	4013      	ands	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002232:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	2b04      	cmp	r3, #4
 800225e:	d107      	bne.n	8002270 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	4313      	orrs	r3, r2
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f023 0307 	bic.w	r3, r3, #7
 8002286:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	2b04      	cmp	r3, #4
 8002298:	d117      	bne.n	80022ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00e      	beq.n	80022ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fa91 	bl	80027d4 <DMA_CheckFifoParam>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2240      	movs	r2, #64	; 0x40
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022c6:	2301      	movs	r3, #1
 80022c8:	e016      	b.n	80022f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fa48 	bl	8002768 <DMA_CalcBaseAndBitshift>
 80022d8:	4603      	mov	r3, r0
 80022da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	223f      	movs	r2, #63	; 0x3f
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	f010803f 	.word	0xf010803f

08002304 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_DMA_Start_IT+0x26>
 8002326:	2302      	movs	r3, #2
 8002328:	e040      	b.n	80023ac <HAL_DMA_Start_IT+0xa8>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d12f      	bne.n	800239e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f9da 	bl	800270c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	223f      	movs	r2, #63	; 0x3f
 800235e:	409a      	lsls	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0216 	orr.w	r2, r2, #22
 8002372:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0208 	orr.w	r2, r2, #8
 800238a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e005      	b.n	80023aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
 80023a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d004      	beq.n	80023d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00c      	b.n	80023ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2205      	movs	r2, #5
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0201 	bic.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002404:	4b92      	ldr	r3, [pc, #584]	; (8002650 <HAL_DMA_IRQHandler+0x258>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a92      	ldr	r2, [pc, #584]	; (8002654 <HAL_DMA_IRQHandler+0x25c>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0a9b      	lsrs	r3, r3, #10
 8002410:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2208      	movs	r2, #8
 8002424:	409a      	lsls	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01a      	beq.n	8002464 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0204 	bic.w	r2, r2, #4
 800244a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	2208      	movs	r2, #8
 8002452:	409a      	lsls	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	2201      	movs	r2, #1
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d012      	beq.n	800249a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	2201      	movs	r2, #1
 8002488:	409a      	lsls	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	f043 0202 	orr.w	r2, r3, #2
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	2204      	movs	r2, #4
 80024a0:	409a      	lsls	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	2204      	movs	r2, #4
 80024be:	409a      	lsls	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	f043 0204 	orr.w	r2, r3, #4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	2210      	movs	r2, #16
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d043      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d03c      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	2210      	movs	r2, #16
 80024f4:	409a      	lsls	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d018      	beq.n	800253a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d108      	bne.n	8002528 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d024      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	4798      	blx	r3
 8002526:	e01f      	b.n	8002568 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01b      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
 8002538:	e016      	b.n	8002568 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d107      	bne.n	8002558 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0208 	bic.w	r2, r2, #8
 8002556:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	2220      	movs	r2, #32
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 808e 	beq.w	8002696 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8086 	beq.w	8002696 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	2220      	movs	r2, #32
 8002590:	409a      	lsls	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d136      	bne.n	8002610 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0216 	bic.w	r2, r2, #22
 80025b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <HAL_DMA_IRQHandler+0x1da>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0208 	bic.w	r2, r2, #8
 80025e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	223f      	movs	r2, #63	; 0x3f
 80025e8:	409a      	lsls	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002602:	2b00      	cmp	r3, #0
 8002604:	d07d      	beq.n	8002702 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
        }
        return;
 800260e:	e078      	b.n	8002702 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01c      	beq.n	8002658 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d108      	bne.n	800263e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	2b00      	cmp	r3, #0
 8002632:	d030      	beq.n	8002696 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
 800263c:	e02b      	b.n	8002696 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d027      	beq.n	8002696 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	4798      	blx	r3
 800264e:	e022      	b.n	8002696 <HAL_DMA_IRQHandler+0x29e>
 8002650:	20000000 	.word	0x20000000
 8002654:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0210 	bic.w	r2, r2, #16
 8002674:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	2b00      	cmp	r3, #0
 800269c:	d032      	beq.n	8002704 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d022      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2205      	movs	r2, #5
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3301      	adds	r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d307      	bcc.n	80026de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f2      	bne.n	80026c2 <HAL_DMA_IRQHandler+0x2ca>
 80026dc:	e000      	b.n	80026e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	4798      	blx	r3
 8002700:	e000      	b.n	8002704 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002702:	bf00      	nop
    }
  }
}
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop

0800270c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002728:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b40      	cmp	r3, #64	; 0x40
 8002738:	d108      	bne.n	800274c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800274a:	e007      	b.n	800275c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	60da      	str	r2, [r3, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	3b10      	subs	r3, #16
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <DMA_CalcBaseAndBitshift+0x64>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	091b      	lsrs	r3, r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002782:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d909      	bls.n	80027aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	1d1a      	adds	r2, r3, #4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	659a      	str	r2, [r3, #88]	; 0x58
 80027a8:	e007      	b.n	80027ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027b2:	f023 0303 	bic.w	r3, r3, #3
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	aaaaaaab 	.word	0xaaaaaaab
 80027d0:	08006884 	.word	0x08006884

080027d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11f      	bne.n	800282e <DMA_CheckFifoParam+0x5a>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d856      	bhi.n	80028a2 <DMA_CheckFifoParam+0xce>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <DMA_CheckFifoParam+0x28>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	0800281f 	.word	0x0800281f
 8002804:	0800280d 	.word	0x0800280d
 8002808:	080028a3 	.word	0x080028a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d046      	beq.n	80028a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281c:	e043      	b.n	80028a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002826:	d140      	bne.n	80028aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282c:	e03d      	b.n	80028aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002836:	d121      	bne.n	800287c <DMA_CheckFifoParam+0xa8>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b03      	cmp	r3, #3
 800283c:	d837      	bhi.n	80028ae <DMA_CheckFifoParam+0xda>
 800283e:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <DMA_CheckFifoParam+0x70>)
 8002840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002844:	08002855 	.word	0x08002855
 8002848:	0800285b 	.word	0x0800285b
 800284c:	08002855 	.word	0x08002855
 8002850:	0800286d 	.word	0x0800286d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e030      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d025      	beq.n	80028b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800286a:	e022      	b.n	80028b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002874:	d11f      	bne.n	80028b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800287a:	e01c      	b.n	80028b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d903      	bls.n	800288a <DMA_CheckFifoParam+0xb6>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d003      	beq.n	8002890 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002888:	e018      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
      break;
 800288e:	e015      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00e      	beq.n	80028ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
      break;
 80028a0:	e00b      	b.n	80028ba <DMA_CheckFifoParam+0xe6>
      break;
 80028a2:	bf00      	nop
 80028a4:	e00a      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028a6:	bf00      	nop
 80028a8:	e008      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028aa:	bf00      	nop
 80028ac:	e006      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028ae:	bf00      	nop
 80028b0:	e004      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028b2:	bf00      	nop
 80028b4:	e002      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;   
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028ba:	bf00      	nop
    }
  } 
  
  return status; 
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e159      	b.n	8002b9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	429a      	cmp	r2, r3
 8002902:	f040 8148 	bne.w	8002b96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d00b      	beq.n	8002926 <HAL_GPIO_Init+0x5a>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800291a:	2b11      	cmp	r3, #17
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b12      	cmp	r3, #18
 8002924:	d130      	bne.n	8002988 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2203      	movs	r2, #3
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 0201 	and.w	r2, r3, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0xfc>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b12      	cmp	r3, #18
 80029c6:	d123      	bne.n	8002a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	08da      	lsrs	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3208      	adds	r2, #8
 80029d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	220f      	movs	r2, #15
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	69b9      	ldr	r1, [r7, #24]
 8002a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a2 	beq.w	8002b96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b57      	ldr	r3, [pc, #348]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a56      	ldr	r2, [pc, #344]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b54      	ldr	r3, [pc, #336]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6e:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <HAL_GPIO_Init+0x2ec>)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	220f      	movs	r2, #15
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a49      	ldr	r2, [pc, #292]	; (8002bbc <HAL_GPIO_Init+0x2f0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d019      	beq.n	8002ace <HAL_GPIO_Init+0x202>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a48      	ldr	r2, [pc, #288]	; (8002bc0 <HAL_GPIO_Init+0x2f4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_GPIO_Init+0x1fe>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a47      	ldr	r2, [pc, #284]	; (8002bc4 <HAL_GPIO_Init+0x2f8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_GPIO_Init+0x1fa>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a46      	ldr	r2, [pc, #280]	; (8002bc8 <HAL_GPIO_Init+0x2fc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <HAL_GPIO_Init+0x1f6>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a45      	ldr	r2, [pc, #276]	; (8002bcc <HAL_GPIO_Init+0x300>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_GPIO_Init+0x1f2>
 8002aba:	2304      	movs	r3, #4
 8002abc:	e008      	b.n	8002ad0 <HAL_GPIO_Init+0x204>
 8002abe:	2307      	movs	r3, #7
 8002ac0:	e006      	b.n	8002ad0 <HAL_GPIO_Init+0x204>
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e004      	b.n	8002ad0 <HAL_GPIO_Init+0x204>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e002      	b.n	8002ad0 <HAL_GPIO_Init+0x204>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_GPIO_Init+0x204>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f002 0203 	and.w	r2, r2, #3
 8002ad6:	0092      	lsls	r2, r2, #2
 8002ad8:	4093      	lsls	r3, r2
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ae0:	4935      	ldr	r1, [pc, #212]	; (8002bb8 <HAL_GPIO_Init+0x2ec>)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b12:	4a2f      	ldr	r2, [pc, #188]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b18:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b3c:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b42:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b66:	4a1a      	ldr	r2, [pc, #104]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b90:	4a0f      	ldr	r2, [pc, #60]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	2b0f      	cmp	r3, #15
 8002ba0:	f67f aea2 	bls.w	80028e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40013800 	.word	0x40013800
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	40020400 	.word	0x40020400
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	40020c00 	.word	0x40020c00
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40013c00 	.word	0x40013c00

08002bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
 8002be0:	4613      	mov	r3, r2
 8002be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be4:	787b      	ldrb	r3, [r7, #1]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bea:	887a      	ldrh	r2, [r7, #2]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bf0:	e003      	b.n	8002bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	041a      	lsls	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	619a      	str	r2, [r3, #24]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e25b      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d075      	beq.n	8002d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c26:	4ba3      	ldr	r3, [pc, #652]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d00c      	beq.n	8002c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c32:	4ba0      	ldr	r3, [pc, #640]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d112      	bne.n	8002c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3e:	4b9d      	ldr	r3, [pc, #628]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c4a:	d10b      	bne.n	8002c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	4b99      	ldr	r3, [pc, #612]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d05b      	beq.n	8002d10 <HAL_RCC_OscConfig+0x108>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d157      	bne.n	8002d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e236      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCC_OscConfig+0x74>
 8002c6e:	4b91      	ldr	r3, [pc, #580]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a90      	ldr	r2, [pc, #576]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e01d      	b.n	8002cb8 <HAL_RCC_OscConfig+0xb0>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x98>
 8002c86:	4b8b      	ldr	r3, [pc, #556]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a8a      	ldr	r2, [pc, #552]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a87      	ldr	r2, [pc, #540]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0xb0>
 8002ca0:	4b84      	ldr	r3, [pc, #528]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a83      	ldr	r2, [pc, #524]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b81      	ldr	r3, [pc, #516]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a80      	ldr	r2, [pc, #512]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7ff f930 	bl	8001f24 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7ff f92c 	bl	8001f24 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1fb      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xc0>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7ff f91c 	bl	8001f24 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7ff f918 	bl	8001f24 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1e7      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	4b6c      	ldr	r3, [pc, #432]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xe8>
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d1e:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2a:	4b62      	ldr	r3, [pc, #392]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d11c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d36:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d116      	bne.n	8002d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	4b5c      	ldr	r3, [pc, #368]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x152>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e1bb      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4952      	ldr	r1, [pc, #328]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	e03a      	b.n	8002de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d78:	4b4f      	ldr	r3, [pc, #316]	; (8002eb8 <HAL_RCC_OscConfig+0x2b0>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7ff f8d1 	bl	8001f24 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d86:	f7ff f8cd 	bl	8001f24 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e19c      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4940      	ldr	r1, [pc, #256]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e015      	b.n	8002de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <HAL_RCC_OscConfig+0x2b0>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7ff f8b0 	bl	8001f24 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7ff f8ac 	bl	8001f24 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e17b      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d030      	beq.n	8002e54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d016      	beq.n	8002e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfa:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <HAL_RCC_OscConfig+0x2b4>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7ff f890 	bl	8001f24 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e08:	f7ff f88c 	bl	8001f24 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e15b      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x200>
 8002e26:	e015      	b.n	8002e54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCC_OscConfig+0x2b4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2e:	f7ff f879 	bl	8001f24 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e36:	f7ff f875 	bl	8001f24 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e144      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80a0 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_OscConfig+0x2b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d121      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_RCC_OscConfig+0x2b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_RCC_OscConfig+0x2b8>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7ff f83b 	bl	8001f24 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	e011      	b.n	8002ed6 <HAL_RCC_OscConfig+0x2ce>
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	42470000 	.word	0x42470000
 8002ebc:	42470e80 	.word	0x42470e80
 8002ec0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec4:	f7ff f82e 	bl	8001f24 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e0fd      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	4b81      	ldr	r3, [pc, #516]	; (80030dc <HAL_RCC_OscConfig+0x4d4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x2f0>
 8002eea:	4b7d      	ldr	r3, [pc, #500]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a7c      	ldr	r2, [pc, #496]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef6:	e01c      	b.n	8002f32 <HAL_RCC_OscConfig+0x32a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x312>
 8002f00:	4b77      	ldr	r3, [pc, #476]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a76      	ldr	r2, [pc, #472]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0c:	4b74      	ldr	r3, [pc, #464]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4a73      	ldr	r2, [pc, #460]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0x32a>
 8002f1a:	4b71      	ldr	r3, [pc, #452]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a70      	ldr	r2, [pc, #448]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	4b6e      	ldr	r3, [pc, #440]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a6d      	ldr	r2, [pc, #436]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d015      	beq.n	8002f66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fff3 	bl	8001f24 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe ffef 	bl	8001f24 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0bc      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	4b61      	ldr	r3, [pc, #388]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ee      	beq.n	8002f42 <HAL_RCC_OscConfig+0x33a>
 8002f64:	e014      	b.n	8002f90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f66:	f7fe ffdd 	bl	8001f24 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe ffd9 	bl	8001f24 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e0a6      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	4b56      	ldr	r3, [pc, #344]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ee      	bne.n	8002f6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f96:	4b52      	ldr	r3, [pc, #328]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	4a51      	ldr	r2, [pc, #324]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8092 	beq.w	80030d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fac:	4b4c      	ldr	r3, [pc, #304]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d05c      	beq.n	8003072 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d141      	bne.n	8003044 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc0:	4b48      	ldr	r3, [pc, #288]	; (80030e4 <HAL_RCC_OscConfig+0x4dc>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe ffad 	bl	8001f24 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe ffa9 	bl	8001f24 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e078      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	019b      	lsls	r3, r3, #6
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	3b01      	subs	r3, #1
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	061b      	lsls	r3, r3, #24
 8003010:	4933      	ldr	r1, [pc, #204]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003016:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <HAL_RCC_OscConfig+0x4dc>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe ff82 	bl	8001f24 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe ff7e 	bl	8001f24 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e04d      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x41c>
 8003042:	e045      	b.n	80030d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x4dc>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe ff6b 	bl	8001f24 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003052:	f7fe ff67 	bl	8001f24 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e036      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003064:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x44a>
 8003070:	e02e      	b.n	80030d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e029      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_RCC_OscConfig+0x4d8>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	429a      	cmp	r2, r3
 8003090:	d11c      	bne.n	80030cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d115      	bne.n	80030cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030a6:	4013      	ands	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d10d      	bne.n	80030cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d106      	bne.n	80030cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40007000 	.word	0x40007000
 80030e0:	40023800 	.word	0x40023800
 80030e4:	42470060 	.word	0x42470060

080030e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0cc      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d90c      	bls.n	8003124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b65      	ldr	r3, [pc, #404]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0b8      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800313c:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a58      	ldr	r2, [pc, #352]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003154:	4b53      	ldr	r3, [pc, #332]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a52      	ldr	r2, [pc, #328]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800315e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003160:	4b50      	ldr	r3, [pc, #320]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	494d      	ldr	r1, [pc, #308]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d044      	beq.n	8003208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d119      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e06f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b6:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e067      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c6:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4934      	ldr	r1, [pc, #208]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d8:	f7fe fea4 	bl	8001f24 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fe fea0 	bl	8001f24 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e04f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 020c 	and.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	429a      	cmp	r2, r3
 8003206:	d1eb      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d20c      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e032      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4916      	ldr	r1, [pc, #88]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	490e      	ldr	r1, [pc, #56]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800326e:	f000 f821 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	490a      	ldr	r1, [pc, #40]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	5ccb      	ldrb	r3, [r1, r3]
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	4a09      	ldr	r2, [pc, #36]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1c8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe fe04 	bl	8001e9c <HAL_InitTick>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023c00 	.word	0x40023c00
 80032a4:	40023800 	.word	0x40023800
 80032a8:	0800686c 	.word	0x0800686c
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000004 	.word	0x20000004

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b5b0      	push	{r4, r5, r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032ba:	2100      	movs	r1, #0
 80032bc:	6079      	str	r1, [r7, #4]
 80032be:	2100      	movs	r1, #0
 80032c0:	60f9      	str	r1, [r7, #12]
 80032c2:	2100      	movs	r1, #0
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032c6:	2100      	movs	r1, #0
 80032c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ca:	4952      	ldr	r1, [pc, #328]	; (8003414 <HAL_RCC_GetSysClockFreq+0x160>)
 80032cc:	6889      	ldr	r1, [r1, #8]
 80032ce:	f001 010c 	and.w	r1, r1, #12
 80032d2:	2908      	cmp	r1, #8
 80032d4:	d00d      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80032d6:	2908      	cmp	r1, #8
 80032d8:	f200 8094 	bhi.w	8003404 <HAL_RCC_GetSysClockFreq+0x150>
 80032dc:	2900      	cmp	r1, #0
 80032de:	d002      	beq.n	80032e6 <HAL_RCC_GetSysClockFreq+0x32>
 80032e0:	2904      	cmp	r1, #4
 80032e2:	d003      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x38>
 80032e4:	e08e      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e6:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <HAL_RCC_GetSysClockFreq+0x164>)
 80032e8:	60bb      	str	r3, [r7, #8]
       break;
 80032ea:	e08e      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCC_GetSysClockFreq+0x168>)
 80032ee:	60bb      	str	r3, [r7, #8]
      break;
 80032f0:	e08b      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f2:	4948      	ldr	r1, [pc, #288]	; (8003414 <HAL_RCC_GetSysClockFreq+0x160>)
 80032f4:	6849      	ldr	r1, [r1, #4]
 80032f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80032fa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032fc:	4945      	ldr	r1, [pc, #276]	; (8003414 <HAL_RCC_GetSysClockFreq+0x160>)
 80032fe:	6849      	ldr	r1, [r1, #4]
 8003300:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003304:	2900      	cmp	r1, #0
 8003306:	d024      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003308:	4942      	ldr	r1, [pc, #264]	; (8003414 <HAL_RCC_GetSysClockFreq+0x160>)
 800330a:	6849      	ldr	r1, [r1, #4]
 800330c:	0989      	lsrs	r1, r1, #6
 800330e:	4608      	mov	r0, r1
 8003310:	f04f 0100 	mov.w	r1, #0
 8003314:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003318:	f04f 0500 	mov.w	r5, #0
 800331c:	ea00 0204 	and.w	r2, r0, r4
 8003320:	ea01 0305 	and.w	r3, r1, r5
 8003324:	493d      	ldr	r1, [pc, #244]	; (800341c <HAL_RCC_GetSysClockFreq+0x168>)
 8003326:	fb01 f003 	mul.w	r0, r1, r3
 800332a:	2100      	movs	r1, #0
 800332c:	fb01 f102 	mul.w	r1, r1, r2
 8003330:	1844      	adds	r4, r0, r1
 8003332:	493a      	ldr	r1, [pc, #232]	; (800341c <HAL_RCC_GetSysClockFreq+0x168>)
 8003334:	fba2 0101 	umull	r0, r1, r2, r1
 8003338:	1863      	adds	r3, r4, r1
 800333a:	4619      	mov	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	461a      	mov	r2, r3
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	f7fd f8cc 	bl	80004e0 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4613      	mov	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e04a      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b30      	ldr	r3, [pc, #192]	; (8003414 <HAL_RCC_GetSysClockFreq+0x160>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	461a      	mov	r2, r3
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003362:	f04f 0100 	mov.w	r1, #0
 8003366:	ea02 0400 	and.w	r4, r2, r0
 800336a:	ea03 0501 	and.w	r5, r3, r1
 800336e:	4620      	mov	r0, r4
 8003370:	4629      	mov	r1, r5
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	014b      	lsls	r3, r1, #5
 800337c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003380:	0142      	lsls	r2, r0, #5
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	1b00      	subs	r0, r0, r4
 8003388:	eb61 0105 	sbc.w	r1, r1, r5
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	018b      	lsls	r3, r1, #6
 8003396:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800339a:	0182      	lsls	r2, r0, #6
 800339c:	1a12      	subs	r2, r2, r0
 800339e:	eb63 0301 	sbc.w	r3, r3, r1
 80033a2:	f04f 0000 	mov.w	r0, #0
 80033a6:	f04f 0100 	mov.w	r1, #0
 80033aa:	00d9      	lsls	r1, r3, #3
 80033ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033b0:	00d0      	lsls	r0, r2, #3
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	1912      	adds	r2, r2, r4
 80033b8:	eb45 0303 	adc.w	r3, r5, r3
 80033bc:	f04f 0000 	mov.w	r0, #0
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	0299      	lsls	r1, r3, #10
 80033c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033ca:	0290      	lsls	r0, r2, #10
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	f7fd f880 	bl	80004e0 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_RCC_GetSysClockFreq+0x160>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	3301      	adds	r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	60bb      	str	r3, [r7, #8]
      break;
 8003402:	e002      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003404:	4b04      	ldr	r3, [pc, #16]	; (8003418 <HAL_RCC_GetSysClockFreq+0x164>)
 8003406:	60bb      	str	r3, [r7, #8]
      break;
 8003408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340a:	68bb      	ldr	r3, [r7, #8]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bdb0      	pop	{r4, r5, r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	00f42400 	.word	0x00f42400
 800341c:	017d7840 	.word	0x017d7840

08003420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <HAL_RCC_GetHCLKFreq+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000000 	.word	0x20000000

08003438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800343c:	f7ff fff0 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0a9b      	lsrs	r3, r3, #10
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	; (800345c <HAL_RCC_GetPCLK1Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	0800687c 	.word	0x0800687c

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003464:	f7ff ffdc 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0b5b      	lsrs	r3, r3, #13
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	0800687c 	.word	0x0800687c

08003488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e056      	b.n	8003548 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fe fb1b 	bl	8001af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	ea42 0103 	orr.w	r1, r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	f003 0104 	and.w	r1, r3, #4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003536:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e01d      	b.n	800359e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fe fb02 	bl	8001b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4610      	mov	r0, r2
 8003590:	f000 fa18 	bl	80039c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b06      	cmp	r3, #6
 80035ce:	d007      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10f      	bne.n	8003636 <HAL_TIM_Base_Stop_IT+0x48>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a1a      	ldr	r2, [r3, #32]
 800361c:	f240 4344 	movw	r3, #1092	; 0x444
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d107      	bne.n	8003636 <HAL_TIM_Base_Stop_IT+0x48>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e01d      	b.n	8003692 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f815 	bl	800369a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f000 f99e 	bl	80039c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e0b4      	b.n	8003834 <HAL_TIM_PWM_ConfigChannel+0x184>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	f200 809f 	bhi.w	8003820 <HAL_TIM_PWM_ConfigChannel+0x170>
 80036e2:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80036e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e8:	0800371d 	.word	0x0800371d
 80036ec:	08003821 	.word	0x08003821
 80036f0:	08003821 	.word	0x08003821
 80036f4:	08003821 	.word	0x08003821
 80036f8:	0800375d 	.word	0x0800375d
 80036fc:	08003821 	.word	0x08003821
 8003700:	08003821 	.word	0x08003821
 8003704:	08003821 	.word	0x08003821
 8003708:	0800379f 	.word	0x0800379f
 800370c:	08003821 	.word	0x08003821
 8003710:	08003821 	.word	0x08003821
 8003714:	08003821 	.word	0x08003821
 8003718:	080037df 	.word	0x080037df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f9ce 	bl	8003ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0204 	bic.w	r2, r2, #4
 8003746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6999      	ldr	r1, [r3, #24]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	619a      	str	r2, [r3, #24]
      break;
 800375a:	e062      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fa14 	bl	8003b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6999      	ldr	r1, [r3, #24]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	619a      	str	r2, [r3, #24]
      break;
 800379c:	e041      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fa5f 	bl	8003c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0208 	orr.w	r2, r2, #8
 80037b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0204 	bic.w	r2, r2, #4
 80037c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69d9      	ldr	r1, [r3, #28]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	61da      	str	r2, [r3, #28]
      break;
 80037dc:	e021      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 faa9 	bl	8003d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69d9      	ldr	r1, [r3, #28]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	61da      	str	r2, [r3, #28]
      break;
 800381e:	e000      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003820:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_TIM_ConfigClockSource+0x18>
 8003850:	2302      	movs	r3, #2
 8003852:	e0b3      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x180>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003872:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388c:	d03e      	beq.n	800390c <HAL_TIM_ConfigClockSource+0xd0>
 800388e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003892:	f200 8087 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x168>
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389a:	f000 8085 	beq.w	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a2:	d87f      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x168>
 80038a4:	2b70      	cmp	r3, #112	; 0x70
 80038a6:	d01a      	beq.n	80038de <HAL_TIM_ConfigClockSource+0xa2>
 80038a8:	2b70      	cmp	r3, #112	; 0x70
 80038aa:	d87b      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x168>
 80038ac:	2b60      	cmp	r3, #96	; 0x60
 80038ae:	d050      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x116>
 80038b0:	2b60      	cmp	r3, #96	; 0x60
 80038b2:	d877      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x168>
 80038b4:	2b50      	cmp	r3, #80	; 0x50
 80038b6:	d03c      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xf6>
 80038b8:	2b50      	cmp	r3, #80	; 0x50
 80038ba:	d873      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x168>
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d058      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x136>
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d86f      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x168>
 80038c4:	2b30      	cmp	r3, #48	; 0x30
 80038c6:	d064      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x156>
 80038c8:	2b30      	cmp	r3, #48	; 0x30
 80038ca:	d86b      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x168>
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d060      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x156>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d867      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x168>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d05c      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x156>
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d05a      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038dc:	e062      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6899      	ldr	r1, [r3, #8]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f000 faef 	bl	8003ed0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003900:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	609a      	str	r2, [r3, #8]
      break;
 800390a:	e04e      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f000 fad8 	bl	8003ed0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800392e:	609a      	str	r2, [r3, #8]
      break;
 8003930:	e03b      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	461a      	mov	r2, r3
 8003940:	f000 fa4c 	bl	8003ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2150      	movs	r1, #80	; 0x50
 800394a:	4618      	mov	r0, r3
 800394c:	f000 faa5 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 8003950:	e02b      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	461a      	mov	r2, r3
 8003960:	f000 fa6b 	bl	8003e3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2160      	movs	r1, #96	; 0x60
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fa95 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 8003970:	e01b      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	461a      	mov	r2, r3
 8003980:	f000 fa2c 	bl	8003ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2140      	movs	r1, #64	; 0x40
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fa85 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 8003990:	e00b      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f000 fa7c 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 80039a2:	e002      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80039a4:	bf00      	nop
 80039a6:	e000      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80039a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a34      	ldr	r2, [pc, #208]	; (8003aa8 <TIM_Base_SetConfig+0xe4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00f      	beq.n	80039fc <TIM_Base_SetConfig+0x38>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e2:	d00b      	beq.n	80039fc <TIM_Base_SetConfig+0x38>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a31      	ldr	r2, [pc, #196]	; (8003aac <TIM_Base_SetConfig+0xe8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <TIM_Base_SetConfig+0x38>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a30      	ldr	r2, [pc, #192]	; (8003ab0 <TIM_Base_SetConfig+0xec>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d003      	beq.n	80039fc <TIM_Base_SetConfig+0x38>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a2f      	ldr	r2, [pc, #188]	; (8003ab4 <TIM_Base_SetConfig+0xf0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d108      	bne.n	8003a0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a25      	ldr	r2, [pc, #148]	; (8003aa8 <TIM_Base_SetConfig+0xe4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01b      	beq.n	8003a4e <TIM_Base_SetConfig+0x8a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1c:	d017      	beq.n	8003a4e <TIM_Base_SetConfig+0x8a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a22      	ldr	r2, [pc, #136]	; (8003aac <TIM_Base_SetConfig+0xe8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <TIM_Base_SetConfig+0x8a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a21      	ldr	r2, [pc, #132]	; (8003ab0 <TIM_Base_SetConfig+0xec>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00f      	beq.n	8003a4e <TIM_Base_SetConfig+0x8a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a20      	ldr	r2, [pc, #128]	; (8003ab4 <TIM_Base_SetConfig+0xf0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00b      	beq.n	8003a4e <TIM_Base_SetConfig+0x8a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <TIM_Base_SetConfig+0xf4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <TIM_Base_SetConfig+0x8a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <TIM_Base_SetConfig+0xf8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d003      	beq.n	8003a4e <TIM_Base_SetConfig+0x8a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <TIM_Base_SetConfig+0xfc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d108      	bne.n	8003a60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a08      	ldr	r2, [pc, #32]	; (8003aa8 <TIM_Base_SetConfig+0xe4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d103      	bne.n	8003a94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	615a      	str	r2, [r3, #20]
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0201 	bic.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0303 	bic.w	r3, r3, #3
 8003afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f023 0302 	bic.w	r3, r3, #2
 8003b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	; (8003b8c <TIM_OC1_SetConfig+0xc8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10c      	bne.n	8003b3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0308 	bic.w	r3, r3, #8
 8003b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a13      	ldr	r2, [pc, #76]	; (8003b8c <TIM_OC1_SetConfig+0xc8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d111      	bne.n	8003b66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	621a      	str	r2, [r3, #32]
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40010000 	.word	0x40010000

08003b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f023 0210 	bic.w	r2, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0320 	bic.w	r3, r3, #32
 8003bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <TIM_OC2_SetConfig+0xd4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d10d      	bne.n	8003c0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <TIM_OC2_SetConfig+0xd4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d113      	bne.n	8003c3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40010000 	.word	0x40010000

08003c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0303 	bic.w	r3, r3, #3
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <TIM_OC3_SetConfig+0xd0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10d      	bne.n	8003ce2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <TIM_OC3_SetConfig+0xd0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d113      	bne.n	8003d12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	621a      	str	r2, [r3, #32]
}
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	40010000 	.word	0x40010000

08003d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a10      	ldr	r2, [pc, #64]	; (8003dd8 <TIM_OC4_SetConfig+0x9c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d109      	bne.n	8003db0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	019b      	lsls	r3, r3, #6
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000

08003ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f023 0201 	bic.w	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f023 030a 	bic.w	r3, r3, #10
 8003e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b087      	sub	sp, #28
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f023 0210 	bic.w	r2, r3, #16
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f043 0307 	orr.w	r3, r3, #7
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	609a      	str	r2, [r3, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	021a      	lsls	r2, r3, #8
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2201      	movs	r2, #1
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1a      	ldr	r2, [r3, #32]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e050      	b.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1c      	ldr	r2, [pc, #112]	; (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d018      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc0:	d013      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00e      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a16      	ldr	r2, [pc, #88]	; (800402c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d009      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a15      	ldr	r2, [pc, #84]	; (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d004      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a13      	ldr	r2, [pc, #76]	; (8004034 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10c      	bne.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800
 8004030:	40000c00 	.word	0x40000c00
 8004034:	40014000 	.word	0x40014000

08004038 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004050:	2302      	movs	r3, #2
 8004052:	e03d      	b.n	80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e03f      	b.n	800416e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd fd90 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	; 0x24
 800410c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800411e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f90b 	bl	800433c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b088      	sub	sp, #32
 800417a:	af02      	add	r7, sp, #8
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b20      	cmp	r3, #32
 8004194:	f040 8083 	bne.w	800429e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_UART_Transmit+0x2e>
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e07b      	b.n	80042a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Transmit+0x40>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e074      	b.n	80042a0 <HAL_UART_Transmit+0x12a>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2221      	movs	r2, #33	; 0x21
 80041c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80041cc:	f7fd feaa 	bl	8001f24 <HAL_GetTick>
 80041d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80041e6:	e042      	b.n	800426e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fe:	d122      	bne.n	8004246 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2200      	movs	r2, #0
 8004208:	2180      	movs	r1, #128	; 0x80
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f84c 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e042      	b.n	80042a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d103      	bne.n	800423e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3302      	adds	r3, #2
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	e017      	b.n	800426e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3301      	adds	r3, #1
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	e013      	b.n	800426e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2200      	movs	r2, #0
 800424e:	2180      	movs	r1, #128	; 0x80
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f829 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e01f      	b.n	80042a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	60ba      	str	r2, [r7, #8]
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1b7      	bne.n	80041e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2200      	movs	r2, #0
 8004280:	2140      	movs	r1, #64	; 0x40
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f810 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e006      	b.n	80042a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b8:	e02c      	b.n	8004314 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042c0:	d028      	beq.n	8004314 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042c8:	f7fd fe2c 	bl	8001f24 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d21d      	bcs.n	8004314 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e00f      	b.n	8004334 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4013      	ands	r3, r2
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	429a      	cmp	r2, r3
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	429a      	cmp	r2, r3
 8004330:	d0c3      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800433c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004340:	b0bd      	sub	sp, #244	; 0xf4
 8004342:	af00      	add	r7, sp, #0
 8004344:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004358:	68d9      	ldr	r1, [r3, #12]
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	ea40 0301 	orr.w	r3, r0, r1
 8004364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	431a      	orrs	r2, r3
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	431a      	orrs	r2, r3
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004394:	f021 010c 	bic.w	r1, r1, #12
 8004398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043a2:	430b      	orrs	r3, r1
 80043a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b6:	6999      	ldr	r1, [r3, #24]
 80043b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	ea40 0301 	orr.w	r3, r0, r1
 80043c2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ce:	f040 81a5 	bne.w	800471c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4bcd      	ldr	r3, [pc, #820]	; (8004710 <UART_SetConfig+0x3d4>)
 80043da:	429a      	cmp	r2, r3
 80043dc:	d006      	beq.n	80043ec <UART_SetConfig+0xb0>
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4bcb      	ldr	r3, [pc, #812]	; (8004714 <UART_SetConfig+0x3d8>)
 80043e6:	429a      	cmp	r2, r3
 80043e8:	f040 80cb 	bne.w	8004582 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7ff f838 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 80043f0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043f8:	461c      	mov	r4, r3
 80043fa:	f04f 0500 	mov.w	r5, #0
 80043fe:	4622      	mov	r2, r4
 8004400:	462b      	mov	r3, r5
 8004402:	1891      	adds	r1, r2, r2
 8004404:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004408:	415b      	adcs	r3, r3
 800440a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800440e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004412:	1912      	adds	r2, r2, r4
 8004414:	eb45 0303 	adc.w	r3, r5, r3
 8004418:	f04f 0000 	mov.w	r0, #0
 800441c:	f04f 0100 	mov.w	r1, #0
 8004420:	00d9      	lsls	r1, r3, #3
 8004422:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004426:	00d0      	lsls	r0, r2, #3
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	1911      	adds	r1, r2, r4
 800442e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004432:	416b      	adcs	r3, r5
 8004434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	461a      	mov	r2, r3
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	1891      	adds	r1, r2, r2
 8004446:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800444a:	415b      	adcs	r3, r3
 800444c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004450:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004454:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004458:	f7fc f842 	bl	80004e0 <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4bad      	ldr	r3, [pc, #692]	; (8004718 <UART_SetConfig+0x3dc>)
 8004462:	fba3 2302 	umull	r2, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	011e      	lsls	r6, r3, #4
 800446a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800446e:	461c      	mov	r4, r3
 8004470:	f04f 0500 	mov.w	r5, #0
 8004474:	4622      	mov	r2, r4
 8004476:	462b      	mov	r3, r5
 8004478:	1891      	adds	r1, r2, r2
 800447a:	67b9      	str	r1, [r7, #120]	; 0x78
 800447c:	415b      	adcs	r3, r3
 800447e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004480:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004484:	1912      	adds	r2, r2, r4
 8004486:	eb45 0303 	adc.w	r3, r5, r3
 800448a:	f04f 0000 	mov.w	r0, #0
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	00d9      	lsls	r1, r3, #3
 8004494:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004498:	00d0      	lsls	r0, r2, #3
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	1911      	adds	r1, r2, r4
 80044a0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80044a4:	416b      	adcs	r3, r5
 80044a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80044aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	461a      	mov	r2, r3
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	1891      	adds	r1, r2, r2
 80044b8:	6739      	str	r1, [r7, #112]	; 0x70
 80044ba:	415b      	adcs	r3, r3
 80044bc:	677b      	str	r3, [r7, #116]	; 0x74
 80044be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80044c2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80044c6:	f7fc f80b 	bl	80004e0 <__aeabi_uldivmod>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4b92      	ldr	r3, [pc, #584]	; (8004718 <UART_SetConfig+0x3dc>)
 80044d0:	fba3 1302 	umull	r1, r3, r3, r2
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	2164      	movs	r1, #100	; 0x64
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	3332      	adds	r3, #50	; 0x32
 80044e2:	4a8d      	ldr	r2, [pc, #564]	; (8004718 <UART_SetConfig+0x3dc>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044f0:	441e      	add	r6, r3
 80044f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044f6:	4618      	mov	r0, r3
 80044f8:	f04f 0100 	mov.w	r1, #0
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	1894      	adds	r4, r2, r2
 8004502:	66bc      	str	r4, [r7, #104]	; 0x68
 8004504:	415b      	adcs	r3, r3
 8004506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004508:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800450c:	1812      	adds	r2, r2, r0
 800450e:	eb41 0303 	adc.w	r3, r1, r3
 8004512:	f04f 0400 	mov.w	r4, #0
 8004516:	f04f 0500 	mov.w	r5, #0
 800451a:	00dd      	lsls	r5, r3, #3
 800451c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004520:	00d4      	lsls	r4, r2, #3
 8004522:	4622      	mov	r2, r4
 8004524:	462b      	mov	r3, r5
 8004526:	1814      	adds	r4, r2, r0
 8004528:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800452c:	414b      	adcs	r3, r1
 800452e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	461a      	mov	r2, r3
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	1891      	adds	r1, r2, r2
 8004540:	6639      	str	r1, [r7, #96]	; 0x60
 8004542:	415b      	adcs	r3, r3
 8004544:	667b      	str	r3, [r7, #100]	; 0x64
 8004546:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800454a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800454e:	f7fb ffc7 	bl	80004e0 <__aeabi_uldivmod>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4b70      	ldr	r3, [pc, #448]	; (8004718 <UART_SetConfig+0x3dc>)
 8004558:	fba3 1302 	umull	r1, r3, r3, r2
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	2164      	movs	r1, #100	; 0x64
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	3332      	adds	r3, #50	; 0x32
 800456a:	4a6b      	ldr	r2, [pc, #428]	; (8004718 <UART_SetConfig+0x3dc>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	f003 0207 	and.w	r2, r3, #7
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4432      	add	r2, r6
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	e26d      	b.n	8004a5e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004582:	f7fe ff59 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8004586:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800458a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800458e:	461c      	mov	r4, r3
 8004590:	f04f 0500 	mov.w	r5, #0
 8004594:	4622      	mov	r2, r4
 8004596:	462b      	mov	r3, r5
 8004598:	1891      	adds	r1, r2, r2
 800459a:	65b9      	str	r1, [r7, #88]	; 0x58
 800459c:	415b      	adcs	r3, r3
 800459e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045a4:	1912      	adds	r2, r2, r4
 80045a6:	eb45 0303 	adc.w	r3, r5, r3
 80045aa:	f04f 0000 	mov.w	r0, #0
 80045ae:	f04f 0100 	mov.w	r1, #0
 80045b2:	00d9      	lsls	r1, r3, #3
 80045b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045b8:	00d0      	lsls	r0, r2, #3
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	1911      	adds	r1, r2, r4
 80045c0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80045c4:	416b      	adcs	r3, r5
 80045c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	461a      	mov	r2, r3
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	1891      	adds	r1, r2, r2
 80045d8:	6539      	str	r1, [r7, #80]	; 0x50
 80045da:	415b      	adcs	r3, r3
 80045dc:	657b      	str	r3, [r7, #84]	; 0x54
 80045de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80045e6:	f7fb ff7b 	bl	80004e0 <__aeabi_uldivmod>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4b4a      	ldr	r3, [pc, #296]	; (8004718 <UART_SetConfig+0x3dc>)
 80045f0:	fba3 2302 	umull	r2, r3, r3, r2
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	011e      	lsls	r6, r3, #4
 80045f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045fc:	461c      	mov	r4, r3
 80045fe:	f04f 0500 	mov.w	r5, #0
 8004602:	4622      	mov	r2, r4
 8004604:	462b      	mov	r3, r5
 8004606:	1891      	adds	r1, r2, r2
 8004608:	64b9      	str	r1, [r7, #72]	; 0x48
 800460a:	415b      	adcs	r3, r3
 800460c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004612:	1912      	adds	r2, r2, r4
 8004614:	eb45 0303 	adc.w	r3, r5, r3
 8004618:	f04f 0000 	mov.w	r0, #0
 800461c:	f04f 0100 	mov.w	r1, #0
 8004620:	00d9      	lsls	r1, r3, #3
 8004622:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004626:	00d0      	lsls	r0, r2, #3
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	1911      	adds	r1, r2, r4
 800462e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004632:	416b      	adcs	r3, r5
 8004634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	461a      	mov	r2, r3
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	1891      	adds	r1, r2, r2
 8004646:	6439      	str	r1, [r7, #64]	; 0x40
 8004648:	415b      	adcs	r3, r3
 800464a:	647b      	str	r3, [r7, #68]	; 0x44
 800464c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004650:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004654:	f7fb ff44 	bl	80004e0 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <UART_SetConfig+0x3dc>)
 800465e:	fba3 1302 	umull	r1, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	2164      	movs	r1, #100	; 0x64
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	3332      	adds	r3, #50	; 0x32
 8004670:	4a29      	ldr	r2, [pc, #164]	; (8004718 <UART_SetConfig+0x3dc>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800467e:	441e      	add	r6, r3
 8004680:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004684:	4618      	mov	r0, r3
 8004686:	f04f 0100 	mov.w	r1, #0
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	1894      	adds	r4, r2, r2
 8004690:	63bc      	str	r4, [r7, #56]	; 0x38
 8004692:	415b      	adcs	r3, r3
 8004694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004696:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800469a:	1812      	adds	r2, r2, r0
 800469c:	eb41 0303 	adc.w	r3, r1, r3
 80046a0:	f04f 0400 	mov.w	r4, #0
 80046a4:	f04f 0500 	mov.w	r5, #0
 80046a8:	00dd      	lsls	r5, r3, #3
 80046aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046ae:	00d4      	lsls	r4, r2, #3
 80046b0:	4622      	mov	r2, r4
 80046b2:	462b      	mov	r3, r5
 80046b4:	1814      	adds	r4, r2, r0
 80046b6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80046ba:	414b      	adcs	r3, r1
 80046bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	461a      	mov	r2, r3
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	6339      	str	r1, [r7, #48]	; 0x30
 80046d0:	415b      	adcs	r3, r3
 80046d2:	637b      	str	r3, [r7, #52]	; 0x34
 80046d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046d8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046dc:	f7fb ff00 	bl	80004e0 <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <UART_SetConfig+0x3dc>)
 80046e6:	fba3 1302 	umull	r1, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2164      	movs	r1, #100	; 0x64
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	3332      	adds	r3, #50	; 0x32
 80046f8:	4a07      	ldr	r2, [pc, #28]	; (8004718 <UART_SetConfig+0x3dc>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	f003 0207 	and.w	r2, r3, #7
 8004704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4432      	add	r2, r6
 800470c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800470e:	e1a6      	b.n	8004a5e <UART_SetConfig+0x722>
 8004710:	40011000 	.word	0x40011000
 8004714:	40011400 	.word	0x40011400
 8004718:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4bd1      	ldr	r3, [pc, #836]	; (8004a68 <UART_SetConfig+0x72c>)
 8004724:	429a      	cmp	r2, r3
 8004726:	d006      	beq.n	8004736 <UART_SetConfig+0x3fa>
 8004728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4bcf      	ldr	r3, [pc, #828]	; (8004a6c <UART_SetConfig+0x730>)
 8004730:	429a      	cmp	r2, r3
 8004732:	f040 80ca 	bne.w	80048ca <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004736:	f7fe fe93 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 800473a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800473e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004742:	461c      	mov	r4, r3
 8004744:	f04f 0500 	mov.w	r5, #0
 8004748:	4622      	mov	r2, r4
 800474a:	462b      	mov	r3, r5
 800474c:	1891      	adds	r1, r2, r2
 800474e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004750:	415b      	adcs	r3, r3
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004754:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004758:	1912      	adds	r2, r2, r4
 800475a:	eb45 0303 	adc.w	r3, r5, r3
 800475e:	f04f 0000 	mov.w	r0, #0
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	00d9      	lsls	r1, r3, #3
 8004768:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800476c:	00d0      	lsls	r0, r2, #3
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	eb12 0a04 	adds.w	sl, r2, r4
 8004776:	eb43 0b05 	adc.w	fp, r3, r5
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4618      	mov	r0, r3
 8004782:	f04f 0100 	mov.w	r1, #0
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	008b      	lsls	r3, r1, #2
 8004790:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004794:	0082      	lsls	r2, r0, #2
 8004796:	4650      	mov	r0, sl
 8004798:	4659      	mov	r1, fp
 800479a:	f7fb fea1 	bl	80004e0 <__aeabi_uldivmod>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4bb3      	ldr	r3, [pc, #716]	; (8004a70 <UART_SetConfig+0x734>)
 80047a4:	fba3 2302 	umull	r2, r3, r3, r2
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	011e      	lsls	r6, r3, #4
 80047ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80047b0:	4618      	mov	r0, r3
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	1894      	adds	r4, r2, r2
 80047bc:	623c      	str	r4, [r7, #32]
 80047be:	415b      	adcs	r3, r3
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
 80047c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047c6:	1812      	adds	r2, r2, r0
 80047c8:	eb41 0303 	adc.w	r3, r1, r3
 80047cc:	f04f 0400 	mov.w	r4, #0
 80047d0:	f04f 0500 	mov.w	r5, #0
 80047d4:	00dd      	lsls	r5, r3, #3
 80047d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047da:	00d4      	lsls	r4, r2, #3
 80047dc:	4622      	mov	r2, r4
 80047de:	462b      	mov	r3, r5
 80047e0:	1814      	adds	r4, r2, r0
 80047e2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80047e6:	414b      	adcs	r3, r1
 80047e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f04f 0100 	mov.w	r1, #0
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	008b      	lsls	r3, r1, #2
 8004802:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004806:	0082      	lsls	r2, r0, #2
 8004808:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800480c:	f7fb fe68 	bl	80004e0 <__aeabi_uldivmod>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4b96      	ldr	r3, [pc, #600]	; (8004a70 <UART_SetConfig+0x734>)
 8004816:	fba3 1302 	umull	r1, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2164      	movs	r1, #100	; 0x64
 800481e:	fb01 f303 	mul.w	r3, r1, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	; 0x32
 8004828:	4a91      	ldr	r2, [pc, #580]	; (8004a70 <UART_SetConfig+0x734>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004834:	441e      	add	r6, r3
 8004836:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800483a:	4618      	mov	r0, r3
 800483c:	f04f 0100 	mov.w	r1, #0
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	1894      	adds	r4, r2, r2
 8004846:	61bc      	str	r4, [r7, #24]
 8004848:	415b      	adcs	r3, r3
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004850:	1812      	adds	r2, r2, r0
 8004852:	eb41 0303 	adc.w	r3, r1, r3
 8004856:	f04f 0400 	mov.w	r4, #0
 800485a:	f04f 0500 	mov.w	r5, #0
 800485e:	00dd      	lsls	r5, r3, #3
 8004860:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004864:	00d4      	lsls	r4, r2, #3
 8004866:	4622      	mov	r2, r4
 8004868:	462b      	mov	r3, r5
 800486a:	1814      	adds	r4, r2, r0
 800486c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004870:	414b      	adcs	r3, r1
 8004872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4618      	mov	r0, r3
 800487e:	f04f 0100 	mov.w	r1, #0
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	008b      	lsls	r3, r1, #2
 800488c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004890:	0082      	lsls	r2, r0, #2
 8004892:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004896:	f7fb fe23 	bl	80004e0 <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4b74      	ldr	r3, [pc, #464]	; (8004a70 <UART_SetConfig+0x734>)
 80048a0:	fba3 1302 	umull	r1, r3, r3, r2
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	2164      	movs	r1, #100	; 0x64
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	3332      	adds	r3, #50	; 0x32
 80048b2:	4a6f      	ldr	r2, [pc, #444]	; (8004a70 <UART_SetConfig+0x734>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	f003 020f 	and.w	r2, r3, #15
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4432      	add	r2, r6
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	e0c9      	b.n	8004a5e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ca:	f7fe fdb5 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 80048ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048d6:	461c      	mov	r4, r3
 80048d8:	f04f 0500 	mov.w	r5, #0
 80048dc:	4622      	mov	r2, r4
 80048de:	462b      	mov	r3, r5
 80048e0:	1891      	adds	r1, r2, r2
 80048e2:	6139      	str	r1, [r7, #16]
 80048e4:	415b      	adcs	r3, r3
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048ec:	1912      	adds	r2, r2, r4
 80048ee:	eb45 0303 	adc.w	r3, r5, r3
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	00d9      	lsls	r1, r3, #3
 80048fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004900:	00d0      	lsls	r0, r2, #3
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	eb12 0804 	adds.w	r8, r2, r4
 800490a:	eb43 0905 	adc.w	r9, r3, r5
 800490e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	4618      	mov	r0, r3
 8004916:	f04f 0100 	mov.w	r1, #0
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	008b      	lsls	r3, r1, #2
 8004924:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004928:	0082      	lsls	r2, r0, #2
 800492a:	4640      	mov	r0, r8
 800492c:	4649      	mov	r1, r9
 800492e:	f7fb fdd7 	bl	80004e0 <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4b4e      	ldr	r3, [pc, #312]	; (8004a70 <UART_SetConfig+0x734>)
 8004938:	fba3 2302 	umull	r2, r3, r3, r2
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	011e      	lsls	r6, r3, #4
 8004940:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004944:	4618      	mov	r0, r3
 8004946:	f04f 0100 	mov.w	r1, #0
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	1894      	adds	r4, r2, r2
 8004950:	60bc      	str	r4, [r7, #8]
 8004952:	415b      	adcs	r3, r3
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800495a:	1812      	adds	r2, r2, r0
 800495c:	eb41 0303 	adc.w	r3, r1, r3
 8004960:	f04f 0400 	mov.w	r4, #0
 8004964:	f04f 0500 	mov.w	r5, #0
 8004968:	00dd      	lsls	r5, r3, #3
 800496a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800496e:	00d4      	lsls	r4, r2, #3
 8004970:	4622      	mov	r2, r4
 8004972:	462b      	mov	r3, r5
 8004974:	1814      	adds	r4, r2, r0
 8004976:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800497a:	414b      	adcs	r3, r1
 800497c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4618      	mov	r0, r3
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	008b      	lsls	r3, r1, #2
 8004996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800499a:	0082      	lsls	r2, r0, #2
 800499c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049a0:	f7fb fd9e 	bl	80004e0 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <UART_SetConfig+0x734>)
 80049aa:	fba3 1302 	umull	r1, r3, r3, r2
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2164      	movs	r1, #100	; 0x64
 80049b2:	fb01 f303 	mul.w	r3, r1, r3
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	3332      	adds	r3, #50	; 0x32
 80049bc:	4a2c      	ldr	r2, [pc, #176]	; (8004a70 <UART_SetConfig+0x734>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c8:	441e      	add	r6, r3
 80049ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049ce:	4618      	mov	r0, r3
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	1894      	adds	r4, r2, r2
 80049da:	603c      	str	r4, [r7, #0]
 80049dc:	415b      	adcs	r3, r3
 80049de:	607b      	str	r3, [r7, #4]
 80049e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e4:	1812      	adds	r2, r2, r0
 80049e6:	eb41 0303 	adc.w	r3, r1, r3
 80049ea:	f04f 0400 	mov.w	r4, #0
 80049ee:	f04f 0500 	mov.w	r5, #0
 80049f2:	00dd      	lsls	r5, r3, #3
 80049f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049f8:	00d4      	lsls	r4, r2, #3
 80049fa:	4622      	mov	r2, r4
 80049fc:	462b      	mov	r3, r5
 80049fe:	1814      	adds	r4, r2, r0
 8004a00:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004a04:	414b      	adcs	r3, r1
 8004a06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f04f 0100 	mov.w	r1, #0
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	008b      	lsls	r3, r1, #2
 8004a20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a24:	0082      	lsls	r2, r0, #2
 8004a26:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004a2a:	f7fb fd59 	bl	80004e0 <__aeabi_uldivmod>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <UART_SetConfig+0x734>)
 8004a34:	fba3 1302 	umull	r1, r3, r3, r2
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	2164      	movs	r1, #100	; 0x64
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	3332      	adds	r3, #50	; 0x32
 8004a46:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <UART_SetConfig+0x734>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	f003 020f 	and.w	r2, r3, #15
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4432      	add	r2, r6
 8004a5a:	609a      	str	r2, [r3, #8]
}
 8004a5c:	e7ff      	b.n	8004a5e <UART_SetConfig+0x722>
 8004a5e:	bf00      	nop
 8004a60:	37f4      	adds	r7, #244	; 0xf4
 8004a62:	46bd      	mov	sp, r7
 8004a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a68:	40011000 	.word	0x40011000
 8004a6c:	40011400 	.word	0x40011400
 8004a70:	51eb851f 	.word	0x51eb851f

08004a74 <_ZN13DisplayDriverC1Ev>:
#ifndef INC_DISPLAYDRIVER_H_
#define INC_DISPLAYDRIVER_H_

#include <stdint.h>

class DisplayDriver {
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <_ZN13DisplayDriverC1Ev+0x1c>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	080068ac 	.word	0x080068ac

08004a94 <_ZN13LedSingleWireC1ENS_6FormatEht>:

#define LEAD_IN 4
#define LEAD_OUT 4


LedSingleWire::LedSingleWire(Format format, uint8_t strandCount,
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	4608      	mov	r0, r1
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	70fb      	strb	r3, [r7, #3]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	70bb      	strb	r3, [r7, #2]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	803b      	strh	r3, [r7, #0]
		uint16_t pixelCount) {
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ffdf 	bl	8004a74 <_ZN13DisplayDriverC1Ev>
 8004ab6:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <_ZN13LedSingleWireC1ENS_6FormatEht+0x70>)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	601a      	str	r2, [r3, #0]
	this->format = format;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	711a      	strb	r2, [r3, #4]
	this->strandCount = strandCount;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	78ba      	ldrb	r2, [r7, #2]
 8004ac6:	719a      	strb	r2, [r3, #6]

	switch (this->format) {
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	791b      	ldrb	r3, [r3, #4]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d803      	bhi.n	8004ad8 <_ZN13LedSingleWireC1ENS_6FormatEht+0x44>
	case RGBW:
	case GRBW:
		this->bytesPerPixel = 4;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	715a      	strb	r2, [r3, #5]
		break;
 8004ad6:	bf00      	nop
	}

	//Each time division will be ~ 0.3uS.  0 looks like 0.3us/0.9us.  1 looks like 0.6us/0.6us so
	//each bit requires 4 time divisions
	this->pixelCount = pixelCount;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	883a      	ldrh	r2, [r7, #0]
 8004adc:	811a      	strh	r2, [r3, #8]
	this->bufferLength = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixelCount) + LEAD_IN + LEAD_OUT;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	795b      	ldrb	r3, [r3, #5]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	883a      	ldrh	r2, [r7, #0]
 8004ae6:	fb12 f303 	smulbb	r3, r2, r3
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	015b      	lsls	r3, r3, #5
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3308      	adds	r3, #8
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	815a      	strh	r2, [r3, #10]
}
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	08006894 	.word	0x08006894

08004b08 <_ZN13LedSingleWire4OpenEv>:

void LedSingleWire::Open() {
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b089      	sub	sp, #36	; 0x24
 8004b0c:	af04      	add	r7, sp, #16
 8004b0e:	6078      	str	r0, [r7, #4]
	buffer = new uint16_t[this->bufferLength];
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	895b      	ldrh	r3, [r3, #10]
 8004b14:	4a36      	ldr	r2, [pc, #216]	; (8004bf0 <_ZN13LedSingleWire4OpenEv+0xe8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d801      	bhi.n	8004b1e <_ZN13LedSingleWire4OpenEv+0x16>
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	e001      	b.n	8004b22 <_ZN13LedSingleWire4OpenEv+0x1a>
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 f8ab 	bl	8005c7e <_Znaj>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	60da      	str	r2, [r3, #12]

	//Blanks the string

	for (uint16_t offset = 0; offset < bufferLength; offset++) {
 8004b30:	2300      	movs	r3, #0
 8004b32:	81fb      	strh	r3, [r7, #14]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	895b      	ldrh	r3, [r3, #10]
 8004b38:	89fa      	ldrh	r2, [r7, #14]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d219      	bcs.n	8004b72 <_ZN13LedSingleWire4OpenEv+0x6a>
		if(offset < LEAD_IN || offset > LEAD_OUT) {
 8004b3e:	89fb      	ldrh	r3, [r7, #14]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d902      	bls.n	8004b4a <_ZN13LedSingleWire4OpenEv+0x42>
 8004b44:	89fb      	ldrh	r3, [r7, #14]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d907      	bls.n	8004b5a <_ZN13LedSingleWire4OpenEv+0x52>
			buffer[offset] = 0x0000;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	89fb      	ldrh	r3, [r7, #14]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4413      	add	r3, r2
 8004b54:	2200      	movs	r2, #0
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	e007      	b.n	8004b6a <_ZN13LedSingleWire4OpenEv+0x62>
		} else {
			buffer[offset] = 0xFFFF;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	89fb      	ldrh	r3, [r7, #14]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b68:	801a      	strh	r2, [r3, #0]
	for (uint16_t offset = 0; offset < bufferLength; offset++) {
 8004b6a:	89fb      	ldrh	r3, [r7, #14]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	81fb      	strh	r3, [r7, #14]
 8004b70:	e7e0      	b.n	8004b34 <_ZN13LedSingleWire4OpenEv+0x2c>
		}
	}

	for (uint8_t strand = 0; strand < strandCount; strand++) {
 8004b72:	2300      	movs	r3, #0
 8004b74:	737b      	strb	r3, [r7, #13]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	799b      	ldrb	r3, [r3, #6]
 8004b7a:	7b7a      	ldrb	r2, [r7, #13]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d21e      	bcs.n	8004bbe <_ZN13LedSingleWire4OpenEv+0xb6>
		for (uint16_t pixel = 0; pixel < pixelCount; pixel++) {
 8004b80:	2300      	movs	r3, #0
 8004b82:	817b      	strh	r3, [r7, #10]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	891b      	ldrh	r3, [r3, #8]
 8004b88:	897a      	ldrh	r2, [r7, #10]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d213      	bcs.n	8004bb6 <_ZN13LedSingleWire4OpenEv+0xae>
			SetPixel( pixel, strand, 0, 0, 0, 0);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3308      	adds	r3, #8
 8004b94:	681c      	ldr	r4, [r3, #0]
 8004b96:	7b7b      	ldrb	r3, [r7, #13]
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	8979      	ldrh	r1, [r7, #10]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9302      	str	r3, [sp, #8]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	47a0      	blx	r4
		for (uint16_t pixel = 0; pixel < pixelCount; pixel++) {
 8004bae:	897b      	ldrh	r3, [r7, #10]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	817b      	strh	r3, [r7, #10]
 8004bb4:	e7e6      	b.n	8004b84 <_ZN13LedSingleWire4OpenEv+0x7c>
	for (uint8_t strand = 0; strand < strandCount; strand++) {
 8004bb6:	7b7b      	ldrb	r3, [r7, #13]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	737b      	strb	r3, [r7, #13]
 8004bbc:	e7db      	b.n	8004b76 <_ZN13LedSingleWire4OpenEv+0x6e>
		}
	}

	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <_ZN13LedSingleWire4OpenEv+0xec>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <_ZN13LedSingleWire4OpenEv+0xec>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bcc:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bce:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <_ZN13LedSingleWire4OpenEv+0xec>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff f99a 	bl	8003f10 <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start_IT(&htim1);
 8004bdc:	4805      	ldr	r0, [pc, #20]	; (8004bf4 <_ZN13LedSingleWire4OpenEv+0xec>)
 8004bde:	f7fe fce2 	bl	80035a6 <HAL_TIM_Base_Start_IT>

	StartNextDma();
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f8f2 	bl	8004dcc <_ZN13LedSingleWire12StartNextDmaEv>
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd90      	pop	{r4, r7, pc}
 8004bf0:	3ffffffc 	.word	0x3ffffffc
 8004bf4:	20000660 	.word	0x20000660

08004bf8 <_ZN13LedSingleWire5CloseEv>:

void LedSingleWire::Close() {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	delete buffer;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <_ZN13LedSingleWire5CloseEv+0x18>
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 f824 	bl	8005c58 <_ZdlPvj>
}
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <_ZN13LedSingleWire8SetPixelEtthhhh>:

void LedSingleWire::SetPixel(uint16_t pixel, uint16_t strand, uint8_t r,
		uint8_t g, uint8_t b, uint8_t w) {
 8004c18:	b480      	push	{r7}
 8004c1a:	b089      	sub	sp, #36	; 0x24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	4608      	mov	r0, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	817b      	strh	r3, [r7, #10]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	813b      	strh	r3, [r7, #8]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	71fb      	strb	r3, [r7, #7]
	uint16_t strandMask = 0x00;
 8004c32:	2300      	movs	r3, #0
 8004c34:	82bb      	strh	r3, [r7, #20]

	uint16_t offset = (SLOTS_PER_BIT * bytesPerPixel * 8 * pixel) + LEAD_IN;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	795b      	ldrb	r3, [r3, #5]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	897a      	ldrh	r2, [r7, #10]
 8004c3e:	fb12 f303 	smulbb	r3, r2, r3
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	015b      	lsls	r3, r3, #5
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3304      	adds	r3, #4
 8004c4a:	83fb      	strh	r3, [r7, #30]

	switch (strand) {
 8004c4c:	893b      	ldrh	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f040 80ab 	bne.w	8004daa <_ZN13LedSingleWire8SetPixelEtthhhh+0x192>
	case 0:
		strandMask = LED_0_Pin;
 8004c54:	2302      	movs	r3, #2
 8004c56:	82bb      	strh	r3, [r7, #20]
		break;
 8004c58:	bf00      	nop
	default:
		//Strand is not configured
		return;
	}

	uint32_t data = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]

	switch(format) {
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	791b      	ldrb	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <_ZN13LedSingleWire8SetPixelEtthhhh+0x54>
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d00f      	beq.n	8004c8a <_ZN13LedSingleWire8SetPixelEtthhhh+0x72>
 8004c6a:	e01d      	b.n	8004ca8 <_ZN13LedSingleWire8SetPixelEtthhhh+0x90>
	case RGBW:
		data = r << 24
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	061a      	lsls	r2, r3, #24
		| g << 16
 8004c70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	431a      	orrs	r2, r3
		| b << 8
 8004c78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	431a      	orrs	r2, r3
		| w ;
 8004c80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c84:	4313      	orrs	r3, r2
		data = r << 24
 8004c86:	61bb      	str	r3, [r7, #24]
		break;
 8004c88:	e00e      	b.n	8004ca8 <_ZN13LedSingleWire8SetPixelEtthhhh+0x90>
	case GRBW:
		data = g << 24
 8004c8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c8e:	061a      	lsls	r2, r3, #24
		| r << 16
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	431a      	orrs	r2, r3
		| b << 8
 8004c96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	431a      	orrs	r2, r3
		| w ;
 8004c9e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ca2:	4313      	orrs	r3, r2
		data = g << 24
 8004ca4:	61bb      	str	r3, [r7, #24]
		break;
 8004ca6:	bf00      	nop
	}

	for (int8_t bit = 31; bit >= 0; bit--) {
 8004ca8:	231f      	movs	r3, #31
 8004caa:	75fb      	strb	r3, [r7, #23]
 8004cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	db7b      	blt.n	8004dac <_ZN13LedSingleWire8SetPixelEtthhhh+0x194>
		buffer[offset] = buffer[offset] | strandMask;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	8bfb      	ldrh	r3, [r7, #30]
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	4413      	add	r3, r2
 8004cbe:	8819      	ldrh	r1, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	8bfb      	ldrh	r3, [r7, #30]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	8aba      	ldrh	r2, [r7, #20]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	b292      	uxth	r2, r2
 8004cd0:	801a      	strh	r2, [r3, #0]
		offset++;
 8004cd2:	8bfb      	ldrh	r3, [r7, #30]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	83fb      	strh	r3, [r7, #30]
		if (data & (0x01 << bit)) {
 8004cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d012      	beq.n	8004d12 <_ZN13LedSingleWire8SetPixelEtthhhh+0xfa>
			buffer[offset] = buffer[offset] | strandMask;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	8bfb      	ldrh	r3, [r7, #30]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	4413      	add	r3, r2
 8004cf6:	8819      	ldrh	r1, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	8bfb      	ldrh	r3, [r7, #30]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	4413      	add	r3, r2
 8004d02:	8aba      	ldrh	r2, [r7, #20]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	b292      	uxth	r2, r2
 8004d08:	801a      	strh	r2, [r3, #0]
			offset++;
 8004d0a:	8bfb      	ldrh	r3, [r7, #30]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	83fb      	strh	r3, [r7, #30]
 8004d10:	e016      	b.n	8004d40 <_ZN13LedSingleWire8SetPixelEtthhhh+0x128>
		} else {
			buffer[offset] = buffer[offset] & ~strandMask;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	8bfb      	ldrh	r3, [r7, #30]
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	4413      	add	r3, r2
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b21a      	sxth	r2, r3
 8004d20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d24:	43db      	mvns	r3, r3
 8004d26:	b21b      	sxth	r3, r3
 8004d28:	4013      	ands	r3, r2
 8004d2a:	b219      	sxth	r1, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	8bfb      	ldrh	r3, [r7, #30]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	4413      	add	r3, r2
 8004d36:	b28a      	uxth	r2, r1
 8004d38:	801a      	strh	r2, [r3, #0]
			offset++;
 8004d3a:	8bfb      	ldrh	r3, [r7, #30]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	83fb      	strh	r3, [r7, #30]
		}
		buffer[offset] = buffer[offset] & ~strandMask;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	8bfb      	ldrh	r3, [r7, #30]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4413      	add	r3, r2
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b21a      	sxth	r2, r3
 8004d4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	b21b      	sxth	r3, r3
 8004d56:	4013      	ands	r3, r2
 8004d58:	b219      	sxth	r1, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	8bfb      	ldrh	r3, [r7, #30]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4413      	add	r3, r2
 8004d64:	b28a      	uxth	r2, r1
 8004d66:	801a      	strh	r2, [r3, #0]
		offset++;
 8004d68:	8bfb      	ldrh	r3, [r7, #30]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	83fb      	strh	r3, [r7, #30]
		buffer[offset] = buffer[offset] & ~strandMask;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	8bfb      	ldrh	r3, [r7, #30]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b21a      	sxth	r2, r3
 8004d7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	b21b      	sxth	r3, r3
 8004d84:	4013      	ands	r3, r2
 8004d86:	b219      	sxth	r1, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	8bfb      	ldrh	r3, [r7, #30]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	b28a      	uxth	r2, r1
 8004d94:	801a      	strh	r2, [r3, #0]
		offset++;
 8004d96:	8bfb      	ldrh	r3, [r7, #30]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	83fb      	strh	r3, [r7, #30]
	for (int8_t bit = 31; bit >= 0; bit--) {
 8004d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	75fb      	strb	r3, [r7, #23]
 8004da8:	e780      	b.n	8004cac <_ZN13LedSingleWire8SetPixelEtthhhh+0x94>
		return;
 8004daa:	bf00      	nop
	}
}
 8004dac:	3724      	adds	r7, #36	; 0x24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <_ZN13LedSingleWire10SwapBufferEv>:

void LedSingleWire::SwapBuffer() {
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
	StartNextDma();
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f804 	bl	8004dcc <_ZN13LedSingleWire12StartNextDmaEv>
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <_ZN13LedSingleWire12StartNextDmaEv>:

void LedSingleWire::StartNextDma() {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	//Reset signal
	LED_CLK_GPIO_Port->ODR = 0x00;
 8004dd4:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <_ZN13LedSingleWire12StartNextDmaEv+0x40>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	615a      	str	r2, [r3, #20]
	HAL_Delay(80);
 8004dda:	2050      	movs	r0, #80	; 0x50
 8004ddc:	f7fd f8ae 	bl	8001f3c <HAL_Delay>

	//14 is 300nS
	htim1.Instance->ARR = 18;
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <_ZN13LedSingleWire12StartNextDmaEv+0x44>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2212      	movs	r2, #18
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->EGR = TIM_EGR_UG;
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <_ZN13LedSingleWire12StartNextDmaEv+0x44>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2201      	movs	r2, #1
 8004dee:	615a      	str	r2, [r3, #20]

	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) buffer,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4619      	mov	r1, r3
			(uint32_t) &(LED_CLK_GPIO_Port->ODR), bufferLength);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	895b      	ldrh	r3, [r3, #10]
	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) buffer,
 8004dfa:	4a06      	ldr	r2, [pc, #24]	; (8004e14 <_ZN13LedSingleWire12StartNextDmaEv+0x48>)
 8004dfc:	4806      	ldr	r0, [pc, #24]	; (8004e18 <_ZN13LedSingleWire12StartNextDmaEv+0x4c>)
 8004dfe:	f7fd fa81 	bl	8002304 <HAL_DMA_Start_IT>
}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40020000 	.word	0x40020000
 8004e10:	20000660 	.word	0x20000660
 8004e14:	40020014 	.word	0x40020014
 8004e18:	200005c0 	.word	0x200005c0

08004e1c <_Z12DMA_CompleteP19__DMA_HandleTypeDef>:
//		instance->handleNeeded = true;
//		instance->Handle();
//	}
//}

void DMA_Complete(DMA_HandleTypeDef *hdma) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
	instance->Handle();
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x1c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fb5f 	bl	80054ec <_ZN12MatrixDriver6HandleEv>
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000194 	.word	0x20000194

08004e3c <_Z9DMA_AbortP19__DMA_HandleTypeDef>:

void DMA_Abort(DMA_HandleTypeDef *hdma) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
	instance->Handle();
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <_Z9DMA_AbortP19__DMA_HandleTypeDef+0x1c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fb4f 	bl	80054ec <_ZN12MatrixDriver6HandleEv>
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000194 	.word	0x20000194

08004e5c <_Z9DMA_ErrorP19__DMA_HandleTypeDef>:

void DMA_Error(DMA_HandleTypeDef *hdma) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_LOGGING
	sprintf(buffer, "DE - %d %d\n", hdma_tim1_ch1.State,
			hdma_tim1_ch1.ErrorCode);
#endif

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
 8004e64:	4806      	ldr	r0, [pc, #24]	; (8004e80 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x24>)
 8004e66:	f7fb fae1 	bl	800042c <strlen>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	230a      	movs	r3, #10
 8004e70:	4903      	ldr	r1, [pc, #12]	; (8004e80 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x24>)
 8004e72:	4804      	ldr	r0, [pc, #16]	; (8004e84 <_Z9DMA_ErrorP19__DMA_HandleTypeDef+0x28>)
 8004e74:	f7ff f97f 	bl	8004176 <HAL_UART_Transmit>
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000198 	.word	0x20000198
 8004e84:	20000620 	.word	0x20000620

08004e88 <_ZN12MatrixDriver12BufferOffsetEtth>:
// -- Row - y % (height / 2) - Top and bottom half of the panel are in the same output cycle
// ---- Pixel - 0 and 1 data lines, select lines for previously sent row (to keep it displaying while new data is clocked in to the shift registers)
// ------ Offset - Set data
// ------ Offset + 1 - Clock data
// ---- OE & Latch
uint16_t MatrixDriver::BufferOffset(uint16_t x, uint16_t y, uint8_t plane) {
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	4608      	mov	r0, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	461a      	mov	r2, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	817b      	strh	r3, [r7, #10]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	813b      	strh	r3, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71fb      	strb	r3, [r7, #7]
	uint16_t rowEntry = y % (height / 2);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	88db      	ldrh	r3, [r3, #6]
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	893b      	ldrh	r3, [r7, #8]
 8004eac:	fbb3 f1f2 	udiv	r1, r3, r2
 8004eb0:	fb02 f201 	mul.w	r2, r2, r1
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	82fb      	strh	r3, [r7, #22]
	uint16_t rowOffset = rowEntry
			* ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	889b      	ldrh	r3, [r3, #4]
	uint16_t rowOffset = rowEntry
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8afa      	ldrh	r2, [r7, #22]
 8004ec2:	fb12 f303 	smulbb	r3, r2, r3
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	82bb      	strh	r3, [r7, #20]
	uint16_t offsetInRow = ((width - 1) - x) * CYCLES_PER_PIXEL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	889b      	ldrh	r3, [r3, #4]
 8004ed0:	1e5a      	subs	r2, r3, #1
 8004ed2:	897b      	ldrh	r3, [r7, #10]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	827b      	strh	r3, [r7, #18]

	return (plane * planeSize) + rowOffset + offsetInRow;
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	899b      	ldrh	r3, [r3, #12]
 8004ee4:	fb12 f303 	smulbb	r3, r2, r3
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	8abb      	ldrh	r3, [r7, #20]
 8004eec:	4413      	add	r3, r2
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	8a7b      	ldrh	r3, [r7, #18]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	b29b      	uxth	r3, r3
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
	...

08004f04 <_ZN12MatrixDriverC1EttNS_8ScanTypeE>:

#define MIN(a,b) (((a)<(b))?(a):(b))

MatrixDriver::MatrixDriver(uint16_t width, uint16_t height, ScanType scanType) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	4611      	mov	r1, r2
 8004f10:	461a      	mov	r2, r3
 8004f12:	4603      	mov	r3, r0
 8004f14:	817b      	strh	r3, [r7, #10]
 8004f16:	460b      	mov	r3, r1
 8004f18:	813b      	strh	r3, [r7, #8]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	71fb      	strb	r3, [r7, #7]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff fda7 	bl	8004a74 <_ZN13DisplayDriverC1Ev>
 8004f26:	4a1a      	ldr	r2, [pc, #104]	; (8004f90 <_ZN12MatrixDriverC1EttNS_8ScanTypeE+0x8c>)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	72da      	strb	r2, [r3, #11]
	this->width = width;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	897a      	ldrh	r2, [r7, #10]
 8004f36:	809a      	strh	r2, [r3, #4]
	this->height = height;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	893a      	ldrh	r2, [r7, #8]
 8004f3c:	80da      	strh	r2, [r3, #6]
	this->scanType = scanType;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	79fa      	ldrb	r2, [r7, #7]
 8004f42:	725a      	strb	r2, [r3, #9]
	this->planes = PLANES;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2204      	movs	r2, #4
 8004f48:	721a      	strb	r2, [r3, #8]

	this->planeSize = ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES)
 8004f4a:	897b      	ldrh	r3, [r7, #10]
 8004f4c:	3302      	adds	r3, #2
 8004f4e:	b29a      	uxth	r2, r3
			* (height / 2);
 8004f50:	893b      	ldrh	r3, [r7, #8]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	b29b      	uxth	r3, r3
	this->planeSize = ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES)
 8004f56:	fb12 f303 	smulbb	r3, r2, r3
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	819a      	strh	r2, [r3, #12]
	this->bufferSize = planeSize * planes;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	899a      	ldrh	r2, [r3, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	7a1b      	ldrb	r3, [r3, #8]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	fb12 f303 	smulbb	r3, r2, r3
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	81da      	strh	r2, [r3, #14]

	this->sendBufferA = true;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	729a      	strb	r2, [r3, #10]

	instance = this;
 8004f7e:	4a05      	ldr	r2, [pc, #20]	; (8004f94 <_ZN12MatrixDriverC1EttNS_8ScanTypeE+0x90>)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6013      	str	r3, [r2, #0]
}
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	080068c8 	.word	0x080068c8
 8004f94:	20000194 	.word	0x20000194

08004f98 <_ZN12MatrixDriver4OpenEv>:

void MatrixDriver::Open() {
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b08b      	sub	sp, #44	; 0x2c
 8004f9c:	af04      	add	r7, sp, #16
 8004f9e:	6078      	str	r0, [r7, #4]
	this->bufferA = new uint16_t[bufferSize];
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	89db      	ldrh	r3, [r3, #14]
 8004fa4:	4a8f      	ldr	r2, [pc, #572]	; (80051e4 <_ZN12MatrixDriver4OpenEv+0x24c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d801      	bhi.n	8004fae <_ZN12MatrixDriver4OpenEv+0x16>
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	e001      	b.n	8004fb2 <_ZN12MatrixDriver4OpenEv+0x1a>
 8004fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fe63 	bl	8005c7e <_Znaj>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	461a      	mov	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	611a      	str	r2, [r3, #16]
	this->bufferB = new uint16_t[bufferSize];
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	89db      	ldrh	r3, [r3, #14]
 8004fc4:	4a87      	ldr	r2, [pc, #540]	; (80051e4 <_ZN12MatrixDriver4OpenEv+0x24c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d801      	bhi.n	8004fce <_ZN12MatrixDriver4OpenEv+0x36>
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	e001      	b.n	8004fd2 <_ZN12MatrixDriver4OpenEv+0x3a>
 8004fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fe53 	bl	8005c7e <_Znaj>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	615a      	str	r2, [r3, #20]

	for (uint8_t y = 0; y < height / 2; y++) {
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	75fb      	strb	r3, [r7, #23]
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	88d2      	ldrh	r2, [r2, #6]
 8004fea:	0852      	lsrs	r2, r2, #1
 8004fec:	b292      	uxth	r2, r2
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	f280 80fa 	bge.w	80051e8 <_ZN12MatrixDriver4OpenEv+0x250>

		uint8_t previousRow = y == 0 ? (height / 2) - 1 : y - 1;
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d107      	bne.n	800500a <_ZN12MatrixDriver4OpenEv+0x72>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	88db      	ldrh	r3, [r3, #6]
 8004ffe:	085b      	lsrs	r3, r3, #1
 8005000:	b29b      	uxth	r3, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b2db      	uxtb	r3, r3
 8005008:	e002      	b.n	8005010 <_ZN12MatrixDriver4OpenEv+0x78>
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	3b01      	subs	r3, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	753b      	strb	r3, [r7, #20]

		uint16_t rowSelects =
		SET_IF(previousRow & 0x01,
 8005012:	7d3b      	ldrb	r3, [r7, #20]
 8005014:	015b      	lsls	r3, r3, #5
 8005016:	b21b      	sxth	r3, r3
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	b21a      	sxth	r2, r3
				Matrix_A_Pin) |SET_IF(previousRow & 0x02, Matrix_B_Pin)
 800501e:	7d3b      	ldrb	r3, [r7, #20]
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	b21b      	sxth	r3, r3
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	b21b      	sxth	r3, r3
 800502a:	4313      	orrs	r3, r2
 800502c:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x04, Matrix_C_Pin)
 800502e:	7d3b      	ldrb	r3, [r7, #20]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	b21b      	sxth	r3, r3
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	b21b      	sxth	r3, r3
 800503a:	4313      	orrs	r3, r2
 800503c:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x08, Matrix_D_Pin)
 800503e:	7d3b      	ldrb	r3, [r7, #20]
 8005040:	01db      	lsls	r3, r3, #7
 8005042:	b21b      	sxth	r3, r3
 8005044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005048:	b21b      	sxth	r3, r3
 800504a:	4313      	orrs	r3, r2
 800504c:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x10, Matrix_E_Pin);
 800504e:	7d3b      	ldrb	r3, [r7, #20]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	b21b      	sxth	r3, r3
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	b21b      	sxth	r3, r3
 800505a:	4313      	orrs	r3, r2
 800505c:	b21b      	sxth	r3, r3
		uint16_t rowSelects =
 800505e:	827b      	strh	r3, [r7, #18]

		for (uint8_t plane = 0; plane < planes; plane++) {
 8005060:	2300      	movs	r3, #0
 8005062:	75bb      	strb	r3, [r7, #22]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	7a1b      	ldrb	r3, [r3, #8]
 8005068:	7dba      	ldrb	r2, [r7, #22]
 800506a:	429a      	cmp	r2, r3
 800506c:	f080 80b5 	bcs.w	80051da <_ZN12MatrixDriver4OpenEv+0x242>
			for (uint8_t x = 0; x < width; x++) {
 8005070:	2300      	movs	r3, #0
 8005072:	757b      	strb	r3, [r7, #21]
 8005074:	7d7b      	ldrb	r3, [r7, #21]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	8892      	ldrh	r2, [r2, #4]
 800507a:	4293      	cmp	r3, r2
 800507c:	da31      	bge.n	80050e2 <_ZN12MatrixDriver4OpenEv+0x14a>

				uint16_t offset = BufferOffset(x, y, plane);
 800507e:	7d7b      	ldrb	r3, [r7, #21]
 8005080:	b299      	uxth	r1, r3
 8005082:	7dfb      	ldrb	r3, [r7, #23]
 8005084:	b29a      	uxth	r2, r3
 8005086:	7dbb      	ldrb	r3, [r7, #22]
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff fefd 	bl	8004e88 <_ZN12MatrixDriver12BufferOffsetEtth>
 800508e:	4603      	mov	r3, r0
 8005090:	823b      	strh	r3, [r7, #16]

				bufferA[offset] = rowSelects;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	8a3b      	ldrh	r3, [r7, #16]
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	4413      	add	r3, r2
 800509c:	8a7a      	ldrh	r2, [r7, #18]
 800509e:	801a      	strh	r2, [r3, #0]
				bufferB[offset] = rowSelects;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	8a3b      	ldrh	r3, [r7, #16]
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	8a7a      	ldrh	r2, [r7, #18]
 80050ac:	801a      	strh	r2, [r3, #0]
				bufferA[offset + 1] = rowSelects | Matrix_CLK_Pin;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	8a3b      	ldrh	r3, [r7, #16]
 80050b4:	3301      	adds	r3, #1
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	8a7a      	ldrh	r2, [r7, #18]
 80050bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050c0:	b292      	uxth	r2, r2
 80050c2:	801a      	strh	r2, [r3, #0]
				bufferB[offset + 1] = rowSelects | Matrix_CLK_Pin;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	8a3b      	ldrh	r3, [r7, #16]
 80050ca:	3301      	adds	r3, #1
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	8a7a      	ldrh	r2, [r7, #18]
 80050d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050d6:	b292      	uxth	r2, r2
 80050d8:	801a      	strh	r2, [r3, #0]
			for (uint8_t x = 0; x < width; x++) {
 80050da:	7d7b      	ldrb	r3, [r7, #21]
 80050dc:	3301      	adds	r3, #1
 80050de:	757b      	strb	r3, [r7, #21]
 80050e0:	e7c8      	b.n	8005074 <_ZN12MatrixDriver4OpenEv+0xdc>
			}

			//Setup the final bytes for the row, staring with the output after the last pixel on the current row & plane
			//Disable outputs
			uint16_t offset = BufferOffset(0, y,
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	7dbb      	ldrb	r3, [r7, #22]
 80050e8:	2100      	movs	r1, #0
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff fecc 	bl	8004e88 <_ZN12MatrixDriver12BufferOffsetEtth>
 80050f0:	4603      	mov	r3, r0
					plane) + CYCLES_PER_PIXEL;
 80050f2:	3302      	adds	r3, #2
 80050f4:	81fb      	strh	r3, [r7, #14]

			bufferA[offset] = bufferB[offset] = Matrix_OE_Pin | rowSelects;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695a      	ldr	r2, [r3, #20]
 80050fa:	89fb      	ldrh	r3, [r7, #14]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	4413      	add	r3, r2
 8005100:	8a7a      	ldrh	r2, [r7, #18]
 8005102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005106:	b292      	uxth	r2, r2
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6911      	ldr	r1, [r2, #16]
 800510e:	89fa      	ldrh	r2, [r7, #14]
 8005110:	0052      	lsls	r2, r2, #1
 8005112:	440a      	add	r2, r1
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	8013      	strh	r3, [r2, #0]
			offset++;
 8005118:	89fb      	ldrh	r3, [r7, #14]
 800511a:	3301      	adds	r3, #1
 800511c:	81fb      	strh	r3, [r7, #14]

			uint16_t currentRowSelects =
			SET_IF(y & 0x01, Matrix_A_Pin) |SET_IF(y & 0x02, Matrix_B_Pin)
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	015b      	lsls	r3, r3, #5
 8005122:	b21b      	sxth	r3, r3
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	b21a      	sxth	r2, r3
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	b21b      	sxth	r3, r3
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	b21b      	sxth	r3, r3
 8005136:	4313      	orrs	r3, r2
 8005138:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x04, Matrix_C_Pin)
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	b21b      	sxth	r3, r3
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	b21b      	sxth	r3, r3
 8005146:	4313      	orrs	r3, r2
 8005148:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x08, Matrix_D_Pin)
 800514a:	7dfb      	ldrb	r3, [r7, #23]
 800514c:	01db      	lsls	r3, r3, #7
 800514e:	b21b      	sxth	r3, r3
 8005150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005154:	b21b      	sxth	r3, r3
 8005156:	4313      	orrs	r3, r2
 8005158:	b21a      	sxth	r2, r3
			|SET_IF(y & 0x10, Matrix_E_Pin);
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	b21b      	sxth	r3, r3
 8005160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005164:	b21b      	sxth	r3, r3
 8005166:	4313      	orrs	r3, r2
 8005168:	b21b      	sxth	r3, r3
			uint16_t currentRowSelects =
 800516a:	81bb      	strh	r3, [r7, #12]

			//Latch data, select next row, outputs still off
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin | Matrix_OE_Pin
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695a      	ldr	r2, [r3, #20]
 8005170:	89fb      	ldrh	r3, [r7, #14]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
					| currentRowSelects;
 8005176:	89ba      	ldrh	r2, [r7, #12]
 8005178:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800517c:	b292      	uxth	r2, r2
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin | Matrix_OE_Pin
 800517e:	801a      	strh	r2, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6911      	ldr	r1, [r2, #16]
 8005184:	89fa      	ldrh	r2, [r7, #14]
 8005186:	0052      	lsls	r2, r2, #1
 8005188:	440a      	add	r2, r1
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	8013      	strh	r3, [r2, #0]

			offset++;
 800518e:	89fb      	ldrh	r3, [r7, #14]
 8005190:	3301      	adds	r3, #1
 8005192:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	89fb      	ldrh	r3, [r7, #14]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	89ba      	ldrh	r2, [r7, #12]
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6911      	ldr	r1, [r2, #16]
 80051a6:	89fa      	ldrh	r2, [r7, #14]
 80051a8:	0052      	lsls	r2, r2, #1
 80051aa:	440a      	add	r2, r1
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	8013      	strh	r3, [r2, #0]

			//Bonus cycle to settle.  Probably not necessary but 3 trailing cycles feels odd
			offset++;
 80051b0:	89fb      	ldrh	r3, [r7, #14]
 80051b2:	3301      	adds	r3, #1
 80051b4:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695a      	ldr	r2, [r3, #20]
 80051ba:	89fb      	ldrh	r3, [r7, #14]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	89ba      	ldrh	r2, [r7, #12]
 80051c2:	801a      	strh	r2, [r3, #0]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6911      	ldr	r1, [r2, #16]
 80051c8:	89fa      	ldrh	r2, [r7, #14]
 80051ca:	0052      	lsls	r2, r2, #1
 80051cc:	440a      	add	r2, r1
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	8013      	strh	r3, [r2, #0]
		for (uint8_t plane = 0; plane < planes; plane++) {
 80051d2:	7dbb      	ldrb	r3, [r7, #22]
 80051d4:	3301      	adds	r3, #1
 80051d6:	75bb      	strb	r3, [r7, #22]
 80051d8:	e744      	b.n	8005064 <_ZN12MatrixDriver4OpenEv+0xcc>
	for (uint8_t y = 0; y < height / 2; y++) {
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	3301      	adds	r3, #1
 80051de:	75fb      	strb	r3, [r7, #23]
 80051e0:	e700      	b.n	8004fe4 <_ZN12MatrixDriver4OpenEv+0x4c>
 80051e2:	bf00      	nop
 80051e4:	3ffffffc 	.word	0x3ffffffc
		}
	}

	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	889b      	ldrh	r3, [r3, #4]
 80051ec:	4618      	mov	r0, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	88db      	ldrh	r3, [r3, #6]
 80051f2:	461c      	mov	r4, r3
			bufferSize, planes, planeSize);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	89db      	ldrh	r3, [r3, #14]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 80051f8:	461a      	mov	r2, r3
			bufferSize, planes, planeSize);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 80051fe:	4619      	mov	r1, r3
			bufferSize, planes, planeSize);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	899b      	ldrh	r3, [r3, #12]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8005204:	9302      	str	r3, [sp, #8]
 8005206:	9101      	str	r1, [sp, #4]
 8005208:	9200      	str	r2, [sp, #0]
 800520a:	4623      	mov	r3, r4
 800520c:	4602      	mov	r2, r0
 800520e:	4919      	ldr	r1, [pc, #100]	; (8005274 <_ZN12MatrixDriver4OpenEv+0x2dc>)
 8005210:	4819      	ldr	r0, [pc, #100]	; (8005278 <_ZN12MatrixDriver4OpenEv+0x2e0>)
 8005212:	f000 ff43 	bl	800609c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
 8005216:	4818      	ldr	r0, [pc, #96]	; (8005278 <_ZN12MatrixDriver4OpenEv+0x2e0>)
 8005218:	f7fb f908 	bl	800042c <strlen>
 800521c:	4603      	mov	r3, r0
 800521e:	b29a      	uxth	r2, r3
 8005220:	230a      	movs	r3, #10
 8005222:	4915      	ldr	r1, [pc, #84]	; (8005278 <_ZN12MatrixDriver4OpenEv+0x2e0>)
 8005224:	4815      	ldr	r0, [pc, #84]	; (800527c <_ZN12MatrixDriver4OpenEv+0x2e4>)
 8005226:	f7fe ffa6 	bl	8004176 <HAL_UART_Transmit>

	hdma_tim1_ch1.XferAbortCallback = DMA_Abort;
 800522a:	4b15      	ldr	r3, [pc, #84]	; (8005280 <_ZN12MatrixDriver4OpenEv+0x2e8>)
 800522c:	4a15      	ldr	r2, [pc, #84]	; (8005284 <_ZN12MatrixDriver4OpenEv+0x2ec>)
 800522e:	651a      	str	r2, [r3, #80]	; 0x50
	hdma_tim1_ch1.XferCpltCallback = DMA_Complete;
 8005230:	4b13      	ldr	r3, [pc, #76]	; (8005280 <_ZN12MatrixDriver4OpenEv+0x2e8>)
 8005232:	4a15      	ldr	r2, [pc, #84]	; (8005288 <_ZN12MatrixDriver4OpenEv+0x2f0>)
 8005234:	63da      	str	r2, [r3, #60]	; 0x3c
	hdma_tim1_ch1.XferErrorCallback = DMA_Error;
 8005236:	4b12      	ldr	r3, [pc, #72]	; (8005280 <_ZN12MatrixDriver4OpenEv+0x2e8>)
 8005238:	4a14      	ldr	r2, [pc, #80]	; (800528c <_ZN12MatrixDriver4OpenEv+0x2f4>)
 800523a:	64da      	str	r2, [r3, #76]	; 0x4c

	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 800523c:	4b14      	ldr	r3, [pc, #80]	; (8005290 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524a:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800524c:	4b10      	ldr	r3, [pc, #64]	; (8005290 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2201      	movs	r2, #1
 8005252:	2100      	movs	r1, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe fe5b 	bl	8003f10 <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start_IT(&htim1);
 800525a:	480d      	ldr	r0, [pc, #52]	; (8005290 <_ZN12MatrixDriver4OpenEv+0x2f8>)
 800525c:	f7fe f9a3 	bl	80035a6 <HAL_TIM_Base_Start_IT>

	nextDmaOffset = 0;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	831a      	strh	r2, [r3, #24]

	StartNextDma();
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f95c 	bl	8005524 <_ZN12MatrixDriver12StartNextDmaEv>
}
 800526c:	bf00      	nop
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd90      	pop	{r4, r7, pc}
 8005274:	08006780 	.word	0x08006780
 8005278:	20000198 	.word	0x20000198
 800527c:	20000620 	.word	0x20000620
 8005280:	200005c0 	.word	0x200005c0
 8005284:	08004e3d 	.word	0x08004e3d
 8005288:	08004e1d 	.word	0x08004e1d
 800528c:	08004e5d 	.word	0x08004e5d
 8005290:	20000660 	.word	0x20000660

08005294 <_ZN12MatrixDriver5CloseEv>:

void MatrixDriver::Close() {
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	HAL_DMA_Abort_IT(&hdma_tim1_ch1);
 800529c:	480e      	ldr	r0, [pc, #56]	; (80052d8 <_ZN12MatrixDriver5CloseEv+0x44>)
 800529e:	f7fd f889 	bl	80023b4 <HAL_DMA_Abort_IT>

	HAL_TIM_Base_Stop_IT(&htim1);
 80052a2:	480e      	ldr	r0, [pc, #56]	; (80052dc <_ZN12MatrixDriver5CloseEv+0x48>)
 80052a4:	f7fe f9a3 	bl	80035ee <HAL_TIM_Base_Stop_IT>

	nextDmaOffset = 0;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	831a      	strh	r2, [r3, #24]

	delete this->bufferA;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <_ZN12MatrixDriver5CloseEv+0x2a>
 80052b6:	2102      	movs	r1, #2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fccd 	bl	8005c58 <_ZdlPvj>
	delete this->bufferB;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <_ZN12MatrixDriver5CloseEv+0x3a>
 80052c6:	2102      	movs	r1, #2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fcc5 	bl	8005c58 <_ZdlPvj>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	200005c0 	.word	0x200005c0
 80052dc:	20000660 	.word	0x20000660

080052e0 <_ZN12MatrixDriver9PlaneBitsEh>:
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
	value = gamma8[value];
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	4a18      	ldr	r2, [pc, #96]	; (8005350 <_ZN12MatrixDriver9PlaneBitsEh+0x70>)
 80052f0:	5cd3      	ldrb	r3, [r2, r3]
 80052f2:	70fb      	strb	r3, [r7, #3]

#if PLANES == 8
	return value;
#elif PLANES == 4
	uint8_t result = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	73fb      	strb	r3, [r7, #15]

	if(value > 128) {
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	2b80      	cmp	r3, #128	; 0x80
 80052fc:	d906      	bls.n	800530c <_ZN12MatrixDriver9PlaneBitsEh+0x2c>
		result |= 0x08;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	f043 0308 	orr.w	r3, r3, #8
 8005304:	73fb      	strb	r3, [r7, #15]
		value -=128;
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	3b80      	subs	r3, #128	; 0x80
 800530a:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 64) {
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	2b40      	cmp	r3, #64	; 0x40
 8005310:	d906      	bls.n	8005320 <_ZN12MatrixDriver9PlaneBitsEh+0x40>
		result |= 0x03;
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	f043 0303 	orr.w	r3, r3, #3
 8005318:	73fb      	strb	r3, [r7, #15]
		value -=128;
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	3b80      	subs	r3, #128	; 0x80
 800531e:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 32) {
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	2b20      	cmp	r3, #32
 8005324:	d906      	bls.n	8005334 <_ZN12MatrixDriver9PlaneBitsEh+0x54>
		result |= 0x02;
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	f043 0302 	orr.w	r3, r3, #2
 800532c:	73fb      	strb	r3, [r7, #15]
		value -=128;
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	3b80      	subs	r3, #128	; 0x80
 8005332:	70fb      	strb	r3, [r7, #3]
	}

	if(value > 8) {
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	2b08      	cmp	r3, #8
 8005338:	d903      	bls.n	8005342 <_ZN12MatrixDriver9PlaneBitsEh+0x62>
		result |= 0x01;
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8005342:	7bfb      	ldrb	r3, [r7, #15]

	return result;
#elif PLANES == 1
	return value > 0 ? 0x01 : 0x00;
#endif
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	2000000c 	.word	0x2000000c

08005354 <_ZN12MatrixDriver8SetPixelEtthhhh>:
//
//		}
//	}
}

void MatrixDriver::SetPixel(uint16_t x, uint16_t y, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b08c      	sub	sp, #48	; 0x30
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	4608      	mov	r0, r1
 800535e:	4611      	mov	r1, r2
 8005360:	461a      	mov	r2, r3
 8005362:	4603      	mov	r3, r0
 8005364:	817b      	strh	r3, [r7, #10]
 8005366:	460b      	mov	r3, r1
 8005368:	813b      	strh	r3, [r7, #8]
 800536a:	4613      	mov	r3, r2
 800536c:	71fb      	strb	r3, [r7, #7]
	uint16_t rBit, gBit, bBit;

//Set data into the buffer we aren't sending at the moment
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	7a9b      	ldrb	r3, [r3, #10]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <_ZN12MatrixDriver8SetPixelEtthhhh+0x28>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	e001      	b.n	8005380 <_ZN12MatrixDriver8SetPixelEtthhhh+0x2c>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	623b      	str	r3, [r7, #32]

	if (y < (height / 2)) {
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	88db      	ldrh	r3, [r3, #6]
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	b29b      	uxth	r3, r3
 800538a:	893a      	ldrh	r2, [r7, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	d206      	bcs.n	800539e <_ZN12MatrixDriver8SetPixelEtthhhh+0x4a>
		rBit = Matrix_R0_Pin;
 8005390:	2301      	movs	r3, #1
 8005392:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gBit = Matrix_G0_Pin;
 8005394:	2302      	movs	r3, #2
 8005396:	85bb      	strh	r3, [r7, #44]	; 0x2c
		bBit = Matrix_B0_Pin;
 8005398:	2304      	movs	r3, #4
 800539a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800539c:	e007      	b.n	80053ae <_ZN12MatrixDriver8SetPixelEtthhhh+0x5a>
	} else {
		rBit = Matrix_R1_Pin;
 800539e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gBit = Matrix_G1_Pin;
 80053a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
		bBit = Matrix_B1_Pin;
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint16_t pixelMask = rBit | gBit | bBit;
 80053ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80053b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80053b2:	4313      	orrs	r3, r2
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053b8:	4313      	orrs	r3, r2
 80053ba:	83fb      	strh	r3, [r7, #30]

	uint8_t rPlanes = PlaneBits(r);
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	4619      	mov	r1, r3
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff ff8d 	bl	80052e0 <_ZN12MatrixDriver9PlaneBitsEh>
 80053c6:	4603      	mov	r3, r0
 80053c8:	777b      	strb	r3, [r7, #29]
	uint8_t gPlanes = PlaneBits(g);
 80053ca:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80053ce:	4619      	mov	r1, r3
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff ff85 	bl	80052e0 <_ZN12MatrixDriver9PlaneBitsEh>
 80053d6:	4603      	mov	r3, r0
 80053d8:	773b      	strb	r3, [r7, #28]
	uint8_t bPlanes = PlaneBits(b);
 80053da:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80053de:	4619      	mov	r1, r3
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f7ff ff7d 	bl	80052e0 <_ZN12MatrixDriver9PlaneBitsEh>
 80053e6:	4603      	mov	r3, r0
 80053e8:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
			10);
#endif

	for (int plane = 0; plane < planes; plane++) {
 80053ea:	2300      	movs	r3, #0
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	7a1b      	ldrb	r3, [r3, #8]
 80053f2:	461a      	mov	r2, r3
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	4293      	cmp	r3, r2
 80053f8:	da63      	bge.n	80054c2 <_ZN12MatrixDriver8SetPixelEtthhhh+0x16e>
		uint16_t planePixelBits = ((rPlanes & (0x01 << plane)) ? rBit : 0)
 80053fa:	7f7a      	ldrb	r2, [r7, #29]
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	fa42 f303 	asr.w	r3, r2, r3
 8005402:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & (0x01 << plane)) ? gBit : 0)
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <_ZN12MatrixDriver8SetPixelEtthhhh+0xbc>
 800540a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800540e:	e000      	b.n	8005412 <_ZN12MatrixDriver8SetPixelEtthhhh+0xbe>
 8005410:	2200      	movs	r2, #0
 8005412:	7f39      	ldrb	r1, [r7, #28]
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	fa41 f303 	asr.w	r3, r1, r3
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <_ZN12MatrixDriver8SetPixelEtthhhh+0xd4>
 8005422:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005426:	e000      	b.n	800542a <_ZN12MatrixDriver8SetPixelEtthhhh+0xd6>
 8005428:	2300      	movs	r3, #0
 800542a:	4313      	orrs	r3, r2
 800542c:	b21a      	sxth	r2, r3
				| ((bPlanes & (0x01 << plane)) ? bBit : 0);
 800542e:	7ef9      	ldrb	r1, [r7, #27]
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	fa41 f303 	asr.w	r3, r1, r3
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <_ZN12MatrixDriver8SetPixelEtthhhh+0xf0>
 800543e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005442:	e000      	b.n	8005446 <_ZN12MatrixDriver8SetPixelEtthhhh+0xf2>
 8005444:	2300      	movs	r3, #0
 8005446:	4313      	orrs	r3, r2
 8005448:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = ((rPlanes & (0x01 << plane)) ? rBit : 0)
 800544a:	833b      	strh	r3, [r7, #24]

		uint16_t offset = BufferOffset(x, y, plane);
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	b2db      	uxtb	r3, r3
 8005450:	893a      	ldrh	r2, [r7, #8]
 8005452:	8979      	ldrh	r1, [r7, #10]
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f7ff fd17 	bl	8004e88 <_ZN12MatrixDriver12BufferOffsetEtth>
 800545a:	4603      	mov	r3, r0
 800545c:	82fb      	strh	r3, [r7, #22]

		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 800545e:	8afb      	ldrh	r3, [r7, #22]
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b21a      	sxth	r2, r3
 800546a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800546e:	43db      	mvns	r3, r3
 8005470:	b21b      	sxth	r3, r3
 8005472:	4013      	ands	r3, r2
 8005474:	b21a      	sxth	r2, r3
				| planePixelBits;
 8005476:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800547a:	4313      	orrs	r3, r2
 800547c:	b219      	sxth	r1, r3
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 800547e:	8afb      	ldrh	r3, [r7, #22]
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	6a3a      	ldr	r2, [r7, #32]
 8005484:	4413      	add	r3, r2
				| planePixelBits;
 8005486:	b28a      	uxth	r2, r1
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8005488:	801a      	strh	r2, [r3, #0]
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 800548a:	8afb      	ldrh	r3, [r7, #22]
 800548c:	3301      	adds	r3, #1
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	4413      	add	r3, r2
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b21a      	sxth	r2, r3
 8005498:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800549c:	43db      	mvns	r3, r3
 800549e:	b21b      	sxth	r3, r3
 80054a0:	4013      	ands	r3, r2
 80054a2:	b21a      	sxth	r2, r3
				| planePixelBits;
 80054a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	b219      	sxth	r1, r3
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 80054ac:	8afb      	ldrh	r3, [r7, #22]
 80054ae:	3301      	adds	r3, #1
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	6a3a      	ldr	r2, [r7, #32]
 80054b4:	4413      	add	r3, r2
				| planePixelBits;
 80054b6:	b28a      	uxth	r2, r1
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 80054b8:	801a      	strh	r2, [r3, #0]
	for (int plane = 0; plane < planes; plane++) {
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	3301      	adds	r3, #1
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	e795      	b.n	80053ee <_ZN12MatrixDriver8SetPixelEtthhhh+0x9a>
	}
}
 80054c2:	bf00      	nop
 80054c4:	3730      	adds	r7, #48	; 0x30
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	completeSwap = true;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	72da      	strb	r2, [r3, #11]

	HAL_DMA_Abort_IT(&hdma_tim1_ch1);
 80054da:	4803      	ldr	r0, [pc, #12]	; (80054e8 <_ZN12MatrixDriver10SwapBufferEv+0x1c>)
 80054dc:	f7fc ff6a 	bl	80023b4 <HAL_DMA_Abort_IT>
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	200005c0 	.word	0x200005c0

080054ec <_ZN12MatrixDriver6HandleEv>:

void MatrixDriver::Handle() {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	if (completeSwap) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	7adb      	ldrb	r3, [r3, #11]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00c      	beq.n	8005516 <_ZN12MatrixDriver6HandleEv+0x2a>
		completeSwap = false;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	72da      	strb	r2, [r3, #11]
		sendBufferA = !sendBufferA;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	7a9b      	ldrb	r3, [r3, #10]
 8005506:	f083 0301 	eor.w	r3, r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	729a      	strb	r2, [r3, #10]
		nextDmaOffset = 0;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	831a      	strh	r2, [r3, #24]
	}

	StartNextDma();
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f804 	bl	8005524 <_ZN12MatrixDriver12StartNextDmaEv>
}
 800551c:	bf00      	nop
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <_ZN12MatrixDriver12StartNextDmaEv>:
uint8_t const AAR_BY_PLANE[] = { 1, 2, 4, 8, 16, 32, 64 };
#elif PLANES == 4
uint8_t const AAR_BY_PLANE[] = { 1, 8, 16, 28 };
#endif

void MatrixDriver::StartNextDma() {
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	uint16_t plane = nextDmaOffset / planeSize;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8b1a      	ldrh	r2, [r3, #24]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	899b      	ldrh	r3, [r3, #12]
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	82fb      	strh	r3, [r7, #22]
	uint16_t *outputBuffer = (sendBufferA ? bufferA : bufferB);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	7a9b      	ldrb	r3, [r3, #10]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <_ZN12MatrixDriver12StartNextDmaEv+0x24>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	e001      	b.n	800554c <_ZN12MatrixDriver12StartNextDmaEv+0x28>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	613b      	str	r3, [r7, #16]
	uint16_t *ouputOffset = outputBuffer + (plane * planeSize);
 800554e:	8afb      	ldrh	r3, [r7, #22]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	8992      	ldrh	r2, [r2, #12]
 8005554:	fb02 f303 	mul.w	r3, r2, r3
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4413      	add	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]

	htim1.Instance->ARR = AAR_BY_PLANE[plane];
 8005560:	8afb      	ldrh	r3, [r7, #22]
 8005562:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <_ZN12MatrixDriver12StartNextDmaEv+0xa0>)
 8005564:	5cd2      	ldrb	r2, [r2, r3]
 8005566:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <_ZN12MatrixDriver12StartNextDmaEv+0xa4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->EGR = TIM_EGR_UG;
 800556c:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <_ZN12MatrixDriver12StartNextDmaEv+0xa4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2201      	movs	r2, #1
 8005572:	615a      	str	r2, [r3, #20]

		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
	}
#endif

	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) ouputOffset,
 8005574:	68f9      	ldr	r1, [r7, #12]
			(uint32_t) &(GPIOB->ODR), planeSize);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	899b      	ldrh	r3, [r3, #12]
	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) ouputOffset,
 800557a:	4a14      	ldr	r2, [pc, #80]	; (80055cc <_ZN12MatrixDriver12StartNextDmaEv+0xa8>)
 800557c:	4814      	ldr	r0, [pc, #80]	; (80055d0 <_ZN12MatrixDriver12StartNextDmaEv+0xac>)
 800557e:	f7fc fec1 	bl	8002304 <HAL_DMA_Start_IT>

	nextDmaOffset += planeSize;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8b1a      	ldrh	r2, [r3, #24]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	899b      	ldrh	r3, [r3, #12]
 800558a:	4413      	add	r3, r2
 800558c:	b29a      	uxth	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	831a      	strh	r2, [r3, #24]

	if (nextDmaOffset >= bufferSize) {
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8b1a      	ldrh	r2, [r3, #24]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	89db      	ldrh	r3, [r3, #14]
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <_ZN12MatrixDriver12StartNextDmaEv+0x80>
		nextDmaOffset = 0;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	831a      	strh	r2, [r3, #24]
	}

#ifdef DebugPin_GPIO_Port
	HAL_GPIO_WritePin(DebugPin_GPIO_Port, DebugPin_Pin,
			plane & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80055a4:	8afb      	ldrh	r3, [r7, #22]
 80055a6:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(DebugPin_GPIO_Port, DebugPin_Pin,
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055b4:	4807      	ldr	r0, [pc, #28]	; (80055d4 <_ZN12MatrixDriver12StartNextDmaEv+0xb0>)
 80055b6:	f7fd fb0d 	bl	8002bd4 <HAL_GPIO_WritePin>
#endif
}
 80055ba:	bf00      	nop
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	080068bc 	.word	0x080068bc
 80055c8:	20000660 	.word	0x20000660
 80055cc:	40020414 	.word	0x40020414
 80055d0:	200005c0 	.word	0x200005c0
 80055d4:	40020000 	.word	0x40020000

080055d8 <_ZN12PixelMapping5PixelC1Ett>:
#define INC_PIXELMAPPING_H_

class PixelMapping {
public:
	struct Pixel {
		Pixel(uint16_t x, uint16_t y) {
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	807b      	strh	r3, [r7, #2]
 80055e4:	4613      	mov	r3, r2
 80055e6:	803b      	strh	r3, [r7, #0]
			this->x = x;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	887a      	ldrh	r2, [r7, #2]
 80055ec:	801a      	strh	r2, [r3, #0]
			this->y = y;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	883a      	ldrh	r2, [r7, #0]
 80055f2:	805a      	strh	r2, [r3, #2]
		}
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <_ZN18SimplePixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:
	virtual Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) = 0;
};

class SimplePixelMapping : public PixelMapping {
public:
	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
		return input;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	2300      	movs	r3, #0
 8005612:	89ba      	ldrh	r2, [r7, #12]
 8005614:	f362 030f 	bfi	r3, r2, #0, #16
 8005618:	89fa      	ldrh	r2, [r7, #14]
 800561a:	f362 431f 	bfi	r3, r2, #16, #16
	}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <_ZN12PixelMappingC1Ev>:
class PixelMapping {
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	4a04      	ldr	r2, [pc, #16]	; (8005648 <_ZN12PixelMappingC1Ev+0x1c>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	08006904 	.word	0x08006904

0800564c <_ZN23LeftToRightPixelMappingC1Ehtt>:
};

class LeftToRightPixelMapping : public PixelMapping {
public:
	LeftToRightPixelMapping(uint8_t panelCount, uint16_t panelWidth, uint16_t panelHeight) {
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	461a      	mov	r2, r3
 800565a:	4603      	mov	r3, r0
 800565c:	72fb      	strb	r3, [r7, #11]
 800565e:	460b      	mov	r3, r1
 8005660:	813b      	strh	r3, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff ffdf 	bl	800562c <_ZN12PixelMappingC1Ev>
 800566e:	4a08      	ldr	r2, [pc, #32]	; (8005690 <_ZN23LeftToRightPixelMappingC1Ehtt+0x44>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	601a      	str	r2, [r3, #0]
		this->panelCount = panelCount;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	7afa      	ldrb	r2, [r7, #11]
 8005678:	711a      	strb	r2, [r3, #4]
		this->panelWidth = panelWidth;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	893a      	ldrh	r2, [r7, #8]
 800567e:	80da      	strh	r2, [r3, #6]
		this->panelHeight = panelHeight;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	811a      	strh	r2, [r3, #8]
	}
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	080068ec 	.word	0x080068ec

08005694 <_ZN23LeftToRightPixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:

	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
		//Panel counted from top-left
		uint16_t panel = input.y / panelHeight;
 800569e:	887a      	ldrh	r2, [r7, #2]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	891b      	ldrh	r3, [r3, #8]
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	82bb      	strh	r3, [r7, #20]
		uint16_t lineOnPanel = input.y % panelHeight;
 80056aa:	887b      	ldrh	r3, [r7, #2]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	8912      	ldrh	r2, [r2, #8]
 80056b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80056b4:	fb02 f201 	mul.w	r2, r2, r1
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	82fb      	strh	r3, [r7, #22]

		if(panel % 2 == 1) {
 80056bc:	8abb      	ldrh	r3, [r7, #20]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <_ZN23LeftToRightPixelMapping30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x3c>
			//Odd panels are vertically reversed
			lineOnPanel = panelHeight - lineOnPanel;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	891a      	ldrh	r2, [r3, #8]
 80056ca:	8afb      	ldrh	r3, [r7, #22]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	82fb      	strh	r3, [r7, #22]
		}

		uint16_t xOffset = (panelCount - 1) - panel * panelWidth;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	791b      	ldrb	r3, [r3, #4]
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	88db      	ldrh	r3, [r3, #6]
 80056da:	8ab9      	ldrh	r1, [r7, #20]
 80056dc:	fb11 f303 	smulbb	r3, r1, r3
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	827b      	strh	r3, [r7, #18]

		PixelMapping::Pixel output {
			.x= xOffset + input.x,
 80056ea:	883a      	ldrh	r2, [r7, #0]
			.y = lineOnPanel
		};
 80056ec:	8a7b      	ldrh	r3, [r7, #18]
 80056ee:	4413      	add	r3, r2
 80056f0:	b299      	uxth	r1, r3
 80056f2:	8afa      	ldrh	r2, [r7, #22]
 80056f4:	f107 0308 	add.w	r3, r7, #8
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff ff6d 	bl	80055d8 <_ZN12PixelMapping5PixelC1Ett>

		return output;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	2300      	movs	r3, #0
 8005704:	89ba      	ldrh	r2, [r7, #12]
 8005706:	f362 030f 	bfi	r3, r2, #0, #16
 800570a:	89fa      	ldrh	r2, [r7, #14]
 800570c:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <_ZN31SnakePixelMappingFedBottomRightC1Ehtt>:
	uint16_t panelHeight;
};

class SnakePixelMappingFedBottomRight : public PixelMapping {
public:
	SnakePixelMappingFedBottomRight(uint8_t panelCount, uint16_t panelWidth, uint16_t panelHeight) {
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	4608      	mov	r0, r1
 8005722:	4611      	mov	r1, r2
 8005724:	461a      	mov	r2, r3
 8005726:	4603      	mov	r3, r0
 8005728:	72fb      	strb	r3, [r7, #11]
 800572a:	460b      	mov	r3, r1
 800572c:	813b      	strh	r3, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	80fb      	strh	r3, [r7, #6]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff ff79 	bl	800562c <_ZN12PixelMappingC1Ev>
 800573a:	4a08      	ldr	r2, [pc, #32]	; (800575c <_ZN31SnakePixelMappingFedBottomRightC1Ehtt+0x44>)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]
		this->panelCount = panelCount;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	7afa      	ldrb	r2, [r7, #11]
 8005744:	711a      	strb	r2, [r3, #4]
		this->panelWidth = panelWidth;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	893a      	ldrh	r2, [r7, #8]
 800574a:	80da      	strh	r2, [r3, #6]
		this->panelHeight = panelHeight;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	88fa      	ldrh	r2, [r7, #6]
 8005750:	811a      	strh	r2, [r3, #8]
	}
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	080068e0 	.word	0x080068e0

08005760 <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE>:

	Pixel	mapVirtualPixelToPhysicalPixel(Pixel input) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
		//Panel counted from top-left
		uint16_t panel = input.y / panelHeight;
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	891b      	ldrh	r3, [r3, #8]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	827b      	strh	r3, [r7, #18]
		uint16_t lineOnPanel = input.y % panelHeight;
 8005776:	887b      	ldrh	r3, [r7, #2]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	8912      	ldrh	r2, [r2, #8]
 800577c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005780:	fb02 f201 	mul.w	r2, r2, r1
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	82fb      	strh	r3, [r7, #22]

		uint16_t xOffset = ((panelCount - 1) - panel) * panelWidth;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	791b      	ldrb	r3, [r3, #4]
 800578c:	1e5a      	subs	r2, r3, #1
 800578e:	8a7b      	ldrh	r3, [r7, #18]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	88db      	ldrh	r3, [r3, #6]
 8005798:	fb12 f303 	smulbb	r3, r2, r3
 800579c:	823b      	strh	r3, [r7, #16]
		uint16_t x;

		if(((panelCount - 1) - panel) % 2 == 1) {
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	791b      	ldrb	r3, [r3, #4]
 80057a2:	1e5a      	subs	r2, r3, #1
 80057a4:	8a7b      	ldrh	r3, [r7, #18]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	bfb8      	it	lt
 80057b0:	425b      	neglt	r3, r3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10b      	bne.n	80057ce <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x6e>
			//Even panels (from feedpoint) are vertically reversed
			lineOnPanel = (panelHeight - 1) - lineOnPanel;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	891a      	ldrh	r2, [r3, #8]
 80057ba:	8afb      	ldrh	r3, [r7, #22]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	82fb      	strh	r3, [r7, #22]
			x = xOffset + input.x;
 80057c4:	883a      	ldrh	r2, [r7, #0]
 80057c6:	8a3b      	ldrh	r3, [r7, #16]
 80057c8:	4413      	add	r3, r2
 80057ca:	82bb      	strh	r3, [r7, #20]
 80057cc:	e009      	b.n	80057e2 <_ZN31SnakePixelMappingFedBottomRight30mapVirtualPixelToPhysicalPixelEN12PixelMapping5PixelE+0x82>
		} else {
			x= xOffset + ((panelWidth -1) - input.x);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	88da      	ldrh	r2, [r3, #6]
 80057d2:	883b      	ldrh	r3, [r7, #0]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	8a3b      	ldrh	r3, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	82bb      	strh	r3, [r7, #20]
		}

		Pixel output {
			.x= x,
			.y = lineOnPanel
		};
 80057e2:	8afa      	ldrh	r2, [r7, #22]
 80057e4:	8ab9      	ldrh	r1, [r7, #20]
 80057e6:	f107 0308 	add.w	r3, r7, #8
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fef4 	bl	80055d8 <_ZN12PixelMapping5PixelC1Ett>

		return output;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	2300      	movs	r3, #0
 80057f6:	89ba      	ldrh	r2, [r7, #12]
 80057f8:	f362 030f 	bfi	r3, r2, #0, #16
 80057fc:	89fa      	ldrh	r2, [r7, #14]
 80057fe:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <_ZN13ConfigurationC1Ev>:
 */

#ifndef INC_CONFIGURATION_H_
#define INC_CONFIGURATION_H_

struct Configuration {
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	729a      	strb	r2, [r3, #10]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	72da      	strb	r2, [r3, #11]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <_Z17readConfigurationv>:
DisplayDriver *display = NULL;

Configuration configuration;
PixelMapping *pixelMapping = NULL;

void readConfiguration() {
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
	configuration.useMatrix = false;
 8005830:	4b17      	ldr	r3, [pc, #92]	; (8005890 <_Z17readConfigurationv+0x64>)
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]
	configuration.useStrands = true;
 8005836:	4b16      	ldr	r3, [pc, #88]	; (8005890 <_Z17readConfigurationv+0x64>)
 8005838:	2201      	movs	r2, #1
 800583a:	709a      	strb	r2, [r3, #2]

	if (configuration.useMatrix) {
 800583c:	4b14      	ldr	r3, [pc, #80]	; (8005890 <_Z17readConfigurationv+0x64>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00c      	beq.n	800585e <_Z17readConfigurationv+0x32>
		configuration.matrixFormat = MatrixDriver::SCAN_16;
 8005844:	4b12      	ldr	r3, [pc, #72]	; (8005890 <_Z17readConfigurationv+0x64>)
 8005846:	2200      	movs	r2, #0
 8005848:	705a      	strb	r2, [r3, #1]
		configuration.elementWidth = PANEL_WIDTH;
 800584a:	4b11      	ldr	r3, [pc, #68]	; (8005890 <_Z17readConfigurationv+0x64>)
 800584c:	2240      	movs	r2, #64	; 0x40
 800584e:	80da      	strh	r2, [r3, #6]
		configuration.elementHeight = PANEL_HEIGHT;
 8005850:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <_Z17readConfigurationv+0x64>)
 8005852:	2220      	movs	r2, #32
 8005854:	811a      	strh	r2, [r3, #8]
		configuration.elementCount = 2;
 8005856:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <_Z17readConfigurationv+0x64>)
 8005858:	2202      	movs	r2, #2
 800585a:	809a      	strh	r2, [r3, #4]
 800585c:	e010      	b.n	8005880 <_Z17readConfigurationv+0x54>
	} else if (configuration.useStrands) {
 800585e:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <_Z17readConfigurationv+0x64>)
 8005860:	789b      	ldrb	r3, [r3, #2]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00c      	beq.n	8005880 <_Z17readConfigurationv+0x54>
		configuration.strandFormat = LedSingleWire::GRBW;
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <_Z17readConfigurationv+0x64>)
 8005868:	2201      	movs	r2, #1
 800586a:	70da      	strb	r2, [r3, #3]
		configuration.elementWidth = 300;
 800586c:	4b08      	ldr	r3, [pc, #32]	; (8005890 <_Z17readConfigurationv+0x64>)
 800586e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005872:	80da      	strh	r2, [r3, #6]
		configuration.elementHeight = 1;
 8005874:	4b06      	ldr	r3, [pc, #24]	; (8005890 <_Z17readConfigurationv+0x64>)
 8005876:	2201      	movs	r2, #1
 8005878:	811a      	strh	r2, [r3, #8]
		configuration.elementCount = 1;
 800587a:	4b05      	ldr	r3, [pc, #20]	; (8005890 <_Z17readConfigurationv+0x64>)
 800587c:	2201      	movs	r2, #1
 800587e:	809a      	strh	r2, [r3, #4]
	}

	configuration.pixelConfiguration =
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <_Z17readConfigurationv+0x64>)
 8005882:	2202      	movs	r2, #2
 8005884:	729a      	strb	r2, [r3, #10]
			Configuration::PixelConfiguration::SnakeStartBottomRight;
}
 8005886:	bf00      	nop
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	200005a0 	.word	0x200005a0

08005894 <_ZN18SimplePixelMappingC1Ev>:
class SimplePixelMapping : public PixelMapping {
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff fec4 	bl	800562c <_ZN12PixelMappingC1Ev>
 80058a4:	4a03      	ldr	r2, [pc, #12]	; (80058b4 <_ZN18SimplePixelMappingC1Ev+0x20>)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	080068f8 	.word	0x080068f8

080058b8 <_Z9configurev>:

void configure() {
 80058b8:	b598      	push	{r3, r4, r7, lr}
 80058ba:	af00      	add	r7, sp, #0
	if (configuration.useMatrix) {
 80058bc:	4b34      	ldr	r3, [pc, #208]	; (8005990 <_Z9configurev+0xd8>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d015      	beq.n	80058f0 <_Z9configurev+0x38>
		display = new MatrixDriver(
				configuration.elementWidth * configuration.elementCount,
				configuration.elementHeight,
				(MatrixDriver::ScanType) configuration.matrixFormat);
 80058c4:	201c      	movs	r0, #28
 80058c6:	f000 f9c9 	bl	8005c5c <_Znwj>
 80058ca:	4603      	mov	r3, r0
 80058cc:	461c      	mov	r4, r3
				configuration.elementWidth * configuration.elementCount,
 80058ce:	4b30      	ldr	r3, [pc, #192]	; (8005990 <_Z9configurev+0xd8>)
 80058d0:	88da      	ldrh	r2, [r3, #6]
 80058d2:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <_Z9configurev+0xd8>)
 80058d4:	889b      	ldrh	r3, [r3, #4]
				(MatrixDriver::ScanType) configuration.matrixFormat);
 80058d6:	fb12 f303 	smulbb	r3, r2, r3
 80058da:	b299      	uxth	r1, r3
 80058dc:	4b2c      	ldr	r3, [pc, #176]	; (8005990 <_Z9configurev+0xd8>)
 80058de:	891a      	ldrh	r2, [r3, #8]
 80058e0:	4b2b      	ldr	r3, [pc, #172]	; (8005990 <_Z9configurev+0xd8>)
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	4620      	mov	r0, r4
 80058e6:	f7ff fb0d 	bl	8004f04 <_ZN12MatrixDriverC1EttNS_8ScanTypeE>
		display = new MatrixDriver(
 80058ea:	4b2a      	ldr	r3, [pc, #168]	; (8005994 <_Z9configurev+0xdc>)
 80058ec:	601c      	str	r4, [r3, #0]
 80058ee:	e014      	b.n	800591a <_Z9configurev+0x62>
	} else if (configuration.useStrands) {
 80058f0:	4b27      	ldr	r3, [pc, #156]	; (8005990 <_Z9configurev+0xd8>)
 80058f2:	789b      	ldrb	r3, [r3, #2]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d010      	beq.n	800591a <_Z9configurev+0x62>

		display = new LedSingleWire(
				(LedSingleWire::Format) configuration.strandFormat,
				configuration.elementCount, configuration.elementWidth);
 80058f8:	2010      	movs	r0, #16
 80058fa:	f000 f9af 	bl	8005c5c <_Znwj>
 80058fe:	4603      	mov	r3, r0
 8005900:	461c      	mov	r4, r3
				(LedSingleWire::Format) configuration.strandFormat,
 8005902:	4b23      	ldr	r3, [pc, #140]	; (8005990 <_Z9configurev+0xd8>)
 8005904:	78d9      	ldrb	r1, [r3, #3]
				configuration.elementCount, configuration.elementWidth);
 8005906:	4b22      	ldr	r3, [pc, #136]	; (8005990 <_Z9configurev+0xd8>)
 8005908:	889b      	ldrh	r3, [r3, #4]
 800590a:	b2da      	uxtb	r2, r3
 800590c:	4b20      	ldr	r3, [pc, #128]	; (8005990 <_Z9configurev+0xd8>)
 800590e:	88db      	ldrh	r3, [r3, #6]
 8005910:	4620      	mov	r0, r4
 8005912:	f7ff f8bf 	bl	8004a94 <_ZN13LedSingleWireC1ENS_6FormatEht>
		display = new LedSingleWire(
 8005916:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <_Z9configurev+0xdc>)
 8005918:	601c      	str	r4, [r3, #0]
	}

	switch (configuration.pixelConfiguration) {
 800591a:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <_Z9configurev+0xd8>)
 800591c:	7a9b      	ldrb	r3, [r3, #10]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d002      	beq.n	8005928 <_Z9configurev+0x70>
 8005922:	2b02      	cmp	r3, #2
 8005924:	d012      	beq.n	800594c <_Z9configurev+0x94>
 8005926:	e023      	b.n	8005970 <_Z9configurev+0xb8>
	case Configuration::PixelConfiguration::LeftToRight:
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
				configuration.elementWidth, configuration.elementHeight);
 8005928:	200c      	movs	r0, #12
 800592a:	f000 f997 	bl	8005c5c <_Znwj>
 800592e:	4603      	mov	r3, r0
 8005930:	461c      	mov	r4, r3
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
 8005932:	4b17      	ldr	r3, [pc, #92]	; (8005990 <_Z9configurev+0xd8>)
 8005934:	889b      	ldrh	r3, [r3, #4]
				configuration.elementWidth, configuration.elementHeight);
 8005936:	b2d9      	uxtb	r1, r3
 8005938:	4b15      	ldr	r3, [pc, #84]	; (8005990 <_Z9configurev+0xd8>)
 800593a:	88da      	ldrh	r2, [r3, #6]
 800593c:	4b14      	ldr	r3, [pc, #80]	; (8005990 <_Z9configurev+0xd8>)
 800593e:	891b      	ldrh	r3, [r3, #8]
 8005940:	4620      	mov	r0, r4
 8005942:	f7ff fe83 	bl	800564c <_ZN23LeftToRightPixelMappingC1Ehtt>
		pixelMapping = new LeftToRightPixelMapping(configuration.elementCount,
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <_Z9configurev+0xe0>)
 8005948:	601c      	str	r4, [r3, #0]
		break;
 800594a:	e01e      	b.n	800598a <_Z9configurev+0xd2>
	case Configuration::PixelConfiguration::SnakeStartBottomRight:
		pixelMapping = new SnakePixelMappingFedBottomRight(
				configuration.elementCount, configuration.elementWidth,
				configuration.elementHeight);
 800594c:	200c      	movs	r0, #12
 800594e:	f000 f985 	bl	8005c5c <_Znwj>
 8005952:	4603      	mov	r3, r0
 8005954:	461c      	mov	r4, r3
				configuration.elementCount, configuration.elementWidth,
 8005956:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <_Z9configurev+0xd8>)
 8005958:	889b      	ldrh	r3, [r3, #4]
				configuration.elementHeight);
 800595a:	b2d9      	uxtb	r1, r3
 800595c:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <_Z9configurev+0xd8>)
 800595e:	88da      	ldrh	r2, [r3, #6]
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <_Z9configurev+0xd8>)
 8005962:	891b      	ldrh	r3, [r3, #8]
 8005964:	4620      	mov	r0, r4
 8005966:	f7ff fed7 	bl	8005718 <_ZN31SnakePixelMappingFedBottomRightC1Ehtt>
		pixelMapping = new SnakePixelMappingFedBottomRight(
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <_Z9configurev+0xe0>)
 800596c:	601c      	str	r4, [r3, #0]
		break;
 800596e:	e00c      	b.n	800598a <_Z9configurev+0xd2>
	default:
		pixelMapping = new SimplePixelMapping();
 8005970:	2004      	movs	r0, #4
 8005972:	f000 f973 	bl	8005c5c <_Znwj>
 8005976:	4603      	mov	r3, r0
 8005978:	461c      	mov	r4, r3
 800597a:	2300      	movs	r3, #0
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	4620      	mov	r0, r4
 8005980:	f7ff ff88 	bl	8005894 <_ZN18SimplePixelMappingC1Ev>
 8005984:	4b04      	ldr	r3, [pc, #16]	; (8005998 <_Z9configurev+0xe0>)
 8005986:	601c      	str	r4, [r3, #0]
		break;
 8005988:	bf00      	nop
	}
}
 800598a:	bf00      	nop
 800598c:	bd98      	pop	{r3, r4, r7, pc}
 800598e:	bf00      	nop
 8005990:	200005a0 	.word	0x200005a0
 8005994:	2000059c 	.word	0x2000059c
 8005998:	200005ac 	.word	0x200005ac

0800599c <_Z4openv>:

void open() {
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
	if (display != NULL) {
 80059a0:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <_Z4openv+0x28>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <_Z4openv+0x1c>
		display->Open();
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <_Z4openv+0x28>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <_Z4openv+0x28>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4610      	mov	r0, r2
 80059b6:	4798      	blx	r3
	}

	configuration.status = Configuration::Status::Ready;
 80059b8:	4b03      	ldr	r3, [pc, #12]	; (80059c8 <_Z4openv+0x2c>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	72da      	strb	r2, [r3, #11]
}
 80059be:	bf00      	nop
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	2000059c 	.word	0x2000059c
 80059c8:	200005a0 	.word	0x200005a0

080059cc <_Z6commitv>:

		display->SetPixel(physicalPixel.x, physicalPixel.y, r, g, b, w);
	}
}

void commit() {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
	if (display != NULL) {
 80059d0:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <_Z6commitv+0x24>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <_Z6commitv+0x1e>
		display->SwapBuffer();
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <_Z6commitv+0x24>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <_Z6commitv+0x24>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4610      	mov	r0, r2
 80059e8:	4798      	blx	r3
	}
}
 80059ea:	bf00      	nop
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	2000059c 	.word	0x2000059c

080059f4 <cpp_main>:
//4 - Debugging
#define DRAW 5

CommandProcessor commandProcessor;

extern "C" int cpp_main(void) {
 80059f4:	b5b0      	push	{r4, r5, r7, lr}
 80059f6:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 80059fa:	af00      	add	r7, sp, #0
	__HAL_DBGMCU_FREEZE_IWDG();
 80059fc:	4b39      	ldr	r3, [pc, #228]	; (8005ae4 <cpp_main+0xf0>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	4a38      	ldr	r2, [pc, #224]	; (8005ae4 <cpp_main+0xf0>)
 8005a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a06:	6093      	str	r3, [r2, #8]

	readConfiguration();
 8005a08:	f7ff ff10 	bl	800582c <_Z17readConfigurationv>

	configure();
 8005a0c:	f7ff ff54 	bl	80058b8 <_Z9configurev>

	open();
 8005a10:	f7ff ffc4 	bl	800599c <_Z4openv>

	uint16_t color_shift = 1;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e

	uint32_t start = HAL_GetTick();
 8005a1a:	f7fc fa83 	bl	8001f24 <HAL_GetTick>
 8005a1e:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428

	uint16_t pos = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
			PixelMapping::Pixel(configuration.getWidth() - 1,
					configuration.getHeight() - 1), 255, 255, 255, 0);

	draw(PixelMapping::Pixel(32, 9), 255, 255, 255, 0);
#elif DRAW == 5
	Request input;
 8005a28:	f107 0318 	add.w	r3, r7, #24
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fa fbd7 	bl	80001e0 <_ZN7RequestC1Ev>

	input.type = RequestType::SetPixelData;
 8005a32:	f107 0318 	add.w	r3, r7, #24
 8005a36:	2201      	movs	r2, #1
 8005a38:	711a      	strb	r2, [r3, #4]
	uint8_t source[] = { 0x00, 0x01, 0x00, 0x00,
 8005a3a:	1d3b      	adds	r3, r7, #4
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <cpp_main+0xf4>)
 8005a3e:	461c      	mov	r4, r3
 8005a40:	4615      	mov	r5, r2
 8005a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a46:	682b      	ldr	r3, [r5, #0]
 8005a48:	6023      	str	r3, [r4, #0]
			0xFF, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0x00,
			0x00, 0x00, 0x00, 0xFF,
			 };
	input.bodyLength = 20;
 8005a4a:	f107 0318 	add.w	r3, r7, #24
 8005a4e:	2214      	movs	r2, #20
 8005a50:	80da      	strh	r2, [r3, #6]

	memcpy(input.body, source, input.bodyLength);
 8005a52:	f107 0318 	add.w	r3, r7, #24
 8005a56:	88db      	ldrh	r3, [r3, #6]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	1d39      	adds	r1, r7, #4
 8005a5c:	f107 0318 	add.w	r3, r7, #24
 8005a60:	3308      	adds	r3, #8
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fa06 	bl	8005e74 <memcpy>

	commandProcessor.ProcessRequest(&input, display);
 8005a68:	4b20      	ldr	r3, [pc, #128]	; (8005aec <cpp_main+0xf8>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	f107 0318 	add.w	r3, r7, #24
 8005a70:	4619      	mov	r1, r3
 8005a72:	481f      	ldr	r0, [pc, #124]	; (8005af0 <cpp_main+0xfc>)
 8005a74:	f7fa fc6e 	bl	8000354 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriver>

	input.type = RequestType::Commit;
 8005a78:	f107 0318 	add.w	r3, r7, #24
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	711a      	strb	r2, [r3, #4]
	input.bodyLength = 0;
 8005a80:	f107 0318 	add.w	r3, r7, #24
 8005a84:	2200      	movs	r2, #0
 8005a86:	80da      	strh	r2, [r3, #6]

	commandProcessor.ProcessRequest(&input, display);
 8005a88:	4b18      	ldr	r3, [pc, #96]	; (8005aec <cpp_main+0xf8>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f107 0318 	add.w	r3, r7, #24
 8005a90:	4619      	mov	r1, r3
 8005a92:	4817      	ldr	r0, [pc, #92]	; (8005af0 <cpp_main+0xfc>)
 8005a94:	f7fa fc5e 	bl	8000354 <_ZN16CommandProcessor14ProcessRequestEP7RequestP13DisplayDriver>
#endif

	lastUpdate = HAL_GetTick();
 8005a98:	f7fc fa44 	bl	8001f24 <HAL_GetTick>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	4a15      	ldr	r2, [pc, #84]	; (8005af4 <cpp_main+0x100>)
 8005aa0:	6013      	str	r3, [r2, #0]

	color_shift++;
 8005aa2:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e

	uint32_t duration = HAL_GetTick() - start;
 8005aac:	f7fc fa3a 	bl	8001f24 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

	sprintf(buffer, "Setup Duration: %lu\n", duration);
 8005abc:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8005ac0:	490d      	ldr	r1, [pc, #52]	; (8005af8 <cpp_main+0x104>)
 8005ac2:	480e      	ldr	r0, [pc, #56]	; (8005afc <cpp_main+0x108>)
 8005ac4:	f000 faea 	bl	800609c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 500);
 8005ac8:	480c      	ldr	r0, [pc, #48]	; (8005afc <cpp_main+0x108>)
 8005aca:	f7fa fcaf 	bl	800042c <strlen>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005ad6:	4909      	ldr	r1, [pc, #36]	; (8005afc <cpp_main+0x108>)
 8005ad8:	4809      	ldr	r0, [pc, #36]	; (8005b00 <cpp_main+0x10c>)
 8005ada:	f7fe fb4c 	bl	8004176 <HAL_UART_Transmit>

	commit();
 8005ade:	f7ff ff75 	bl	80059cc <_Z6commitv>

	while (1) {
 8005ae2:	e7fe      	b.n	8005ae2 <cpp_main+0xee>
 8005ae4:	e0042000 	.word	0xe0042000
 8005ae8:	08006808 	.word	0x08006808
 8005aec:	2000059c 	.word	0x2000059c
 8005af0:	200005b0 	.word	0x200005b0
 8005af4:	20000598 	.word	0x20000598
 8005af8:	080067f0 	.word	0x080067f0
 8005afc:	20000198 	.word	0x20000198
 8005b00:	20000620 	.word	0x20000620

08005b04 <_Z41__static_initialization_and_destruction_0ii>:
//
//					matrix.SetPixel(col, row, r, g, b);
//				}
//			}
	}
}
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10a      	bne.n	8005b2a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d105      	bne.n	8005b2a <_Z41__static_initialization_and_destruction_0ii+0x26>
Configuration configuration;
 8005b1e:	480a      	ldr	r0, [pc, #40]	; (8005b48 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005b20:	f7ff fe73 	bl	800580a <_ZN13ConfigurationC1Ev>
CommandProcessor commandProcessor;
 8005b24:	4809      	ldr	r0, [pc, #36]	; (8005b4c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005b26:	f7fa fbe5 	bl	80002f4 <_ZN16CommandProcessorC1Ev>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d107      	bne.n	8005b40 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d102      	bne.n	8005b40 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8005b3a:	4804      	ldr	r0, [pc, #16]	; (8005b4c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005b3c:	f7fa fbea 	bl	8000314 <_ZN16CommandProcessorD1Ev>
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	200005a0 	.word	0x200005a0
 8005b4c:	200005b0 	.word	0x200005b0

08005b50 <_GLOBAL__sub_I_buffer>:
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b58:	2001      	movs	r0, #1
 8005b5a:	f7ff ffd3 	bl	8005b04 <_Z41__static_initialization_and_destruction_0ii>
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <_GLOBAL__sub_D_buffer>:
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f7ff ffcb 	bl	8005b04 <_Z41__static_initialization_and_destruction_0ii>
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8005b70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005b72:	2400      	movs	r4, #0
 8005b74:	2310      	movs	r3, #16
 8005b76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b7a:	6803      	ldr	r3, [r0, #0]
 8005b7c:	9400      	str	r4, [sp, #0]
 8005b7e:	699e      	ldr	r6, [r3, #24]
 8005b80:	f88d 4004 	strb.w	r4, [sp, #4]
 8005b84:	4615      	mov	r5, r2
 8005b86:	466b      	mov	r3, sp
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	47b0      	blx	r6
 8005b8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005b90:	f003 0306 	and.w	r3, r3, #6
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	bf03      	ittte	eq
 8005b98:	9b00      	ldreq	r3, [sp, #0]
 8005b9a:	602b      	streq	r3, [r5, #0]
 8005b9c:	2001      	moveq	r0, #1
 8005b9e:	4620      	movne	r0, r4
 8005ba0:	b004      	add	sp, #16
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}

08005ba4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8005ba4:	9800      	ldr	r0, [sp, #0]
 8005ba6:	4290      	cmp	r0, r2
 8005ba8:	bf14      	ite	ne
 8005baa:	2001      	movne	r0, #1
 8005bac:	2006      	moveq	r0, #6
 8005bae:	4770      	bx	lr

08005bb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	4b03      	ldr	r3, [pc, #12]	; (8005bc0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8005bb4:	6003      	str	r3, [r0, #0]
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	f000 f8e5 	bl	8005d86 <_ZNSt9type_infoD1Ev>
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	bd10      	pop	{r4, pc}
 8005bc0:	08006940 	.word	0x08006940

08005bc4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	f7ff fff2 	bl	8005bb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005bcc:	4620      	mov	r0, r4
 8005bce:	2108      	movs	r1, #8
 8005bd0:	f000 f842 	bl	8005c58 <_ZdlPvj>
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bdc:	461f      	mov	r7, r3
 8005bde:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8005be2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005be6:	4598      	cmp	r8, r3
 8005be8:	4606      	mov	r6, r0
 8005bea:	4615      	mov	r5, r2
 8005bec:	d107      	bne.n	8005bfe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005bee:	9907      	ldr	r1, [sp, #28]
 8005bf0:	f000 f8cc 	bl	8005d8c <_ZNKSt9type_infoeqERKS_>
 8005bf4:	b118      	cbz	r0, 8005bfe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005bf6:	7165      	strb	r5, [r4, #5]
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bfe:	4639      	mov	r1, r7
 8005c00:	4630      	mov	r0, r6
 8005c02:	f000 f8c3 	bl	8005d8c <_ZNKSt9type_infoeqERKS_>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d0f6      	beq.n	8005bf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f8c4 8000 	str.w	r8, [r4]
 8005c10:	7125      	strb	r5, [r4, #4]
 8005c12:	71a3      	strb	r3, [r4, #6]
 8005c14:	e7f0      	b.n	8005bf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08005c16 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8005c16:	b538      	push	{r3, r4, r5, lr}
 8005c18:	4615      	mov	r5, r2
 8005c1a:	461c      	mov	r4, r3
 8005c1c:	f000 f8b6 	bl	8005d8c <_ZNKSt9type_infoeqERKS_>
 8005c20:	b120      	cbz	r0, 8005c2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8005c22:	2308      	movs	r3, #8
 8005c24:	60e3      	str	r3, [r4, #12]
 8005c26:	2306      	movs	r3, #6
 8005c28:	6025      	str	r5, [r4, #0]
 8005c2a:	7123      	strb	r3, [r4, #4]
 8005c2c:	bd38      	pop	{r3, r4, r5, pc}

08005c2e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8005c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c30:	4605      	mov	r5, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	9201      	str	r2, [sp, #4]
 8005c36:	461e      	mov	r6, r3
 8005c38:	f000 f8a8 	bl	8005d8c <_ZNKSt9type_infoeqERKS_>
 8005c3c:	b950      	cbnz	r0, 8005c54 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005c3e:	2e03      	cmp	r6, #3
 8005c40:	d808      	bhi.n	8005c54 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	9a01      	ldr	r2, [sp, #4]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	b002      	add	sp, #8
 8005c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c52:	4718      	bx	r3
 8005c54:	b002      	add	sp, #8
 8005c56:	bd70      	pop	{r4, r5, r6, pc}

08005c58 <_ZdlPvj>:
 8005c58:	f000 b8ae 	b.w	8005db8 <_ZdlPv>

08005c5c <_Znwj>:
 8005c5c:	2801      	cmp	r0, #1
 8005c5e:	bf38      	it	cc
 8005c60:	2001      	movcc	r0, #1
 8005c62:	b510      	push	{r4, lr}
 8005c64:	4604      	mov	r4, r0
 8005c66:	4620      	mov	r0, r4
 8005c68:	f000 f8f4 	bl	8005e54 <malloc>
 8005c6c:	b930      	cbnz	r0, 8005c7c <_Znwj+0x20>
 8005c6e:	f000 f8b7 	bl	8005de0 <_ZSt15get_new_handlerv>
 8005c72:	b908      	cbnz	r0, 8005c78 <_Znwj+0x1c>
 8005c74:	f000 f8bc 	bl	8005df0 <abort>
 8005c78:	4780      	blx	r0
 8005c7a:	e7f4      	b.n	8005c66 <_Znwj+0xa>
 8005c7c:	bd10      	pop	{r4, pc}

08005c7e <_Znaj>:
 8005c7e:	f7ff bfed 	b.w	8005c5c <_Znwj>

08005c82 <__cxa_pure_virtual>:
 8005c82:	b508      	push	{r3, lr}
 8005c84:	f000 f8a6 	bl	8005dd4 <_ZSt9terminatev>

08005c88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005c8c:	6003      	str	r3, [r0, #0]
 8005c8e:	4604      	mov	r4, r0
 8005c90:	f7ff ff8e 	bl	8005bb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005c94:	4620      	mov	r0, r4
 8005c96:	bd10      	pop	{r4, pc}
 8005c98:	080069a0 	.word	0x080069a0

08005c9c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	f7ff fff2 	bl	8005c88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	210c      	movs	r1, #12
 8005ca8:	f7ff ffd6 	bl	8005c58 <_ZdlPvj>
 8005cac:	4620      	mov	r0, r4
 8005cae:	bd10      	pop	{r4, pc}

08005cb0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cb2:	9f08      	ldr	r7, [sp, #32]
 8005cb4:	4297      	cmp	r7, r2
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	460e      	mov	r6, r1
 8005cba:	4614      	mov	r4, r2
 8005cbc:	d00a      	beq.n	8005cd4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8005cbe:	68a8      	ldr	r0, [r5, #8]
 8005cc0:	6802      	ldr	r2, [r0, #0]
 8005cc2:	9708      	str	r7, [sp, #32]
 8005cc4:	6a15      	ldr	r5, [r2, #32]
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4622      	mov	r2, r4
 8005cca:	46ac      	mov	ip, r5
 8005ccc:	b003      	add	sp, #12
 8005cce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005cd2:	4760      	bx	ip
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	f000 f858 	bl	8005d8c <_ZNKSt9type_infoeqERKS_>
 8005cdc:	9b01      	ldr	r3, [sp, #4]
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d0ed      	beq.n	8005cbe <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8005ce2:	2006      	movs	r0, #6
 8005ce4:	b003      	add	sp, #12
 8005ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ce8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005ce8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	460d      	mov	r5, r1
 8005cee:	4619      	mov	r1, r3
 8005cf0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8005cf4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8005cf8:	4681      	mov	r9, r0
 8005cfa:	4617      	mov	r7, r2
 8005cfc:	4698      	mov	r8, r3
 8005cfe:	f000 f845 	bl	8005d8c <_ZNKSt9type_infoeqERKS_>
 8005d02:	b190      	cbz	r0, 8005d2a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8005d04:	2d00      	cmp	r5, #0
 8005d06:	6034      	str	r4, [r6, #0]
 8005d08:	7137      	strb	r7, [r6, #4]
 8005d0a:	db09      	blt.n	8005d20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8005d0c:	1961      	adds	r1, r4, r5
 8005d0e:	458a      	cmp	sl, r1
 8005d10:	bf0c      	ite	eq
 8005d12:	2106      	moveq	r1, #6
 8005d14:	2101      	movne	r1, #1
 8005d16:	71b1      	strb	r1, [r6, #6]
 8005d18:	2000      	movs	r0, #0
 8005d1a:	b001      	add	sp, #4
 8005d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d20:	3502      	adds	r5, #2
 8005d22:	d1f9      	bne.n	8005d18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005d24:	2301      	movs	r3, #1
 8005d26:	71b3      	strb	r3, [r6, #6]
 8005d28:	e7f6      	b.n	8005d18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005d2a:	4554      	cmp	r4, sl
 8005d2c:	d106      	bne.n	8005d3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005d2e:	4659      	mov	r1, fp
 8005d30:	4648      	mov	r0, r9
 8005d32:	f000 f82b 	bl	8005d8c <_ZNKSt9type_infoeqERKS_>
 8005d36:	b108      	cbz	r0, 8005d3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005d38:	7177      	strb	r7, [r6, #5]
 8005d3a:	e7ed      	b.n	8005d18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005d3c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8005d40:	6803      	ldr	r3, [r0, #0]
 8005d42:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8005d46:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8005d4a:	69dc      	ldr	r4, [r3, #28]
 8005d4c:	463a      	mov	r2, r7
 8005d4e:	4643      	mov	r3, r8
 8005d50:	4629      	mov	r1, r5
 8005d52:	46a4      	mov	ip, r4
 8005d54:	b001      	add	sp, #4
 8005d56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	4760      	bx	ip

08005d5c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d60:	4607      	mov	r7, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	4615      	mov	r5, r2
 8005d66:	461e      	mov	r6, r3
 8005d68:	f7ff ff55 	bl	8005c16 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005d6c:	b948      	cbnz	r0, 8005d82 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005d6e:	68b8      	ldr	r0, [r7, #8]
 8005d70:	6803      	ldr	r3, [r0, #0]
 8005d72:	699f      	ldr	r7, [r3, #24]
 8005d74:	462a      	mov	r2, r5
 8005d76:	4633      	mov	r3, r6
 8005d78:	4621      	mov	r1, r4
 8005d7a:	46bc      	mov	ip, r7
 8005d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d80:	4760      	bx	ip
 8005d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d86 <_ZNSt9type_infoD1Ev>:
 8005d86:	4770      	bx	lr

08005d88 <_ZNKSt9type_info14__is_pointer_pEv>:
 8005d88:	2000      	movs	r0, #0
 8005d8a:	4770      	bx	lr

08005d8c <_ZNKSt9type_infoeqERKS_>:
 8005d8c:	4281      	cmp	r1, r0
 8005d8e:	b508      	push	{r3, lr}
 8005d90:	d00e      	beq.n	8005db0 <_ZNKSt9type_infoeqERKS_+0x24>
 8005d92:	6840      	ldr	r0, [r0, #4]
 8005d94:	7803      	ldrb	r3, [r0, #0]
 8005d96:	2b2a      	cmp	r3, #42	; 0x2a
 8005d98:	d00c      	beq.n	8005db4 <_ZNKSt9type_infoeqERKS_+0x28>
 8005d9a:	6849      	ldr	r1, [r1, #4]
 8005d9c:	780b      	ldrb	r3, [r1, #0]
 8005d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005da0:	bf08      	it	eq
 8005da2:	3101      	addeq	r1, #1
 8005da4:	f7fa fb38 	bl	8000418 <strcmp>
 8005da8:	fab0 f080 	clz	r0, r0
 8005dac:	0940      	lsrs	r0, r0, #5
 8005dae:	bd08      	pop	{r3, pc}
 8005db0:	2001      	movs	r0, #1
 8005db2:	e7fc      	b.n	8005dae <_ZNKSt9type_infoeqERKS_+0x22>
 8005db4:	2000      	movs	r0, #0
 8005db6:	e7fa      	b.n	8005dae <_ZNKSt9type_infoeqERKS_+0x22>

08005db8 <_ZdlPv>:
 8005db8:	f000 b854 	b.w	8005e64 <free>

08005dbc <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005dbc:	b508      	push	{r3, lr}
 8005dbe:	4780      	blx	r0
 8005dc0:	f000 f816 	bl	8005df0 <abort>

08005dc4 <_ZSt13get_terminatev>:
 8005dc4:	4b02      	ldr	r3, [pc, #8]	; (8005dd0 <_ZSt13get_terminatev+0xc>)
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	f3bf 8f5b 	dmb	ish
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	2000010c 	.word	0x2000010c

08005dd4 <_ZSt9terminatev>:
 8005dd4:	b508      	push	{r3, lr}
 8005dd6:	f7ff fff5 	bl	8005dc4 <_ZSt13get_terminatev>
 8005dda:	f7ff ffef 	bl	8005dbc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08005de0 <_ZSt15get_new_handlerv>:
 8005de0:	4b02      	ldr	r3, [pc, #8]	; (8005dec <_ZSt15get_new_handlerv+0xc>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	f3bf 8f5b 	dmb	ish
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	200005b4 	.word	0x200005b4

08005df0 <abort>:
 8005df0:	b508      	push	{r3, lr}
 8005df2:	2006      	movs	r0, #6
 8005df4:	f000 f936 	bl	8006064 <raise>
 8005df8:	2001      	movs	r0, #1
 8005dfa:	f7fb ffad 	bl	8001d58 <_exit>
	...

08005e00 <__errno>:
 8005e00:	4b01      	ldr	r3, [pc, #4]	; (8005e08 <__errno+0x8>)
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20000110 	.word	0x20000110

08005e0c <__libc_init_array>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	4d0d      	ldr	r5, [pc, #52]	; (8005e44 <__libc_init_array+0x38>)
 8005e10:	4c0d      	ldr	r4, [pc, #52]	; (8005e48 <__libc_init_array+0x3c>)
 8005e12:	1b64      	subs	r4, r4, r5
 8005e14:	10a4      	asrs	r4, r4, #2
 8005e16:	2600      	movs	r6, #0
 8005e18:	42a6      	cmp	r6, r4
 8005e1a:	d109      	bne.n	8005e30 <__libc_init_array+0x24>
 8005e1c:	4d0b      	ldr	r5, [pc, #44]	; (8005e4c <__libc_init_array+0x40>)
 8005e1e:	4c0c      	ldr	r4, [pc, #48]	; (8005e50 <__libc_init_array+0x44>)
 8005e20:	f000 fca2 	bl	8006768 <_init>
 8005e24:	1b64      	subs	r4, r4, r5
 8005e26:	10a4      	asrs	r4, r4, #2
 8005e28:	2600      	movs	r6, #0
 8005e2a:	42a6      	cmp	r6, r4
 8005e2c:	d105      	bne.n	8005e3a <__libc_init_array+0x2e>
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e34:	4798      	blx	r3
 8005e36:	3601      	adds	r6, #1
 8005e38:	e7ee      	b.n	8005e18 <__libc_init_array+0xc>
 8005e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3e:	4798      	blx	r3
 8005e40:	3601      	adds	r6, #1
 8005e42:	e7f2      	b.n	8005e2a <__libc_init_array+0x1e>
 8005e44:	08006af8 	.word	0x08006af8
 8005e48:	08006af8 	.word	0x08006af8
 8005e4c:	08006af8 	.word	0x08006af8
 8005e50:	08006b00 	.word	0x08006b00

08005e54 <malloc>:
 8005e54:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <malloc+0xc>)
 8005e56:	4601      	mov	r1, r0
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	f000 b871 	b.w	8005f40 <_malloc_r>
 8005e5e:	bf00      	nop
 8005e60:	20000110 	.word	0x20000110

08005e64 <free>:
 8005e64:	4b02      	ldr	r3, [pc, #8]	; (8005e70 <free+0xc>)
 8005e66:	4601      	mov	r1, r0
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	f000 b819 	b.w	8005ea0 <_free_r>
 8005e6e:	bf00      	nop
 8005e70:	20000110 	.word	0x20000110

08005e74 <memcpy>:
 8005e74:	440a      	add	r2, r1
 8005e76:	4291      	cmp	r1, r2
 8005e78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005e7c:	d100      	bne.n	8005e80 <memcpy+0xc>
 8005e7e:	4770      	bx	lr
 8005e80:	b510      	push	{r4, lr}
 8005e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e8a:	4291      	cmp	r1, r2
 8005e8c:	d1f9      	bne.n	8005e82 <memcpy+0xe>
 8005e8e:	bd10      	pop	{r4, pc}

08005e90 <memset>:
 8005e90:	4402      	add	r2, r0
 8005e92:	4603      	mov	r3, r0
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d100      	bne.n	8005e9a <memset+0xa>
 8005e98:	4770      	bx	lr
 8005e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9e:	e7f9      	b.n	8005e94 <memset+0x4>

08005ea0 <_free_r>:
 8005ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ea2:	2900      	cmp	r1, #0
 8005ea4:	d048      	beq.n	8005f38 <_free_r+0x98>
 8005ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eaa:	9001      	str	r0, [sp, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f1a1 0404 	sub.w	r4, r1, #4
 8005eb2:	bfb8      	it	lt
 8005eb4:	18e4      	addlt	r4, r4, r3
 8005eb6:	f000 f911 	bl	80060dc <__malloc_lock>
 8005eba:	4a20      	ldr	r2, [pc, #128]	; (8005f3c <_free_r+0x9c>)
 8005ebc:	9801      	ldr	r0, [sp, #4]
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	4615      	mov	r5, r2
 8005ec2:	b933      	cbnz	r3, 8005ed2 <_free_r+0x32>
 8005ec4:	6063      	str	r3, [r4, #4]
 8005ec6:	6014      	str	r4, [r2, #0]
 8005ec8:	b003      	add	sp, #12
 8005eca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ece:	f000 b90b 	b.w	80060e8 <__malloc_unlock>
 8005ed2:	42a3      	cmp	r3, r4
 8005ed4:	d90b      	bls.n	8005eee <_free_r+0x4e>
 8005ed6:	6821      	ldr	r1, [r4, #0]
 8005ed8:	1862      	adds	r2, r4, r1
 8005eda:	4293      	cmp	r3, r2
 8005edc:	bf04      	itt	eq
 8005ede:	681a      	ldreq	r2, [r3, #0]
 8005ee0:	685b      	ldreq	r3, [r3, #4]
 8005ee2:	6063      	str	r3, [r4, #4]
 8005ee4:	bf04      	itt	eq
 8005ee6:	1852      	addeq	r2, r2, r1
 8005ee8:	6022      	streq	r2, [r4, #0]
 8005eea:	602c      	str	r4, [r5, #0]
 8005eec:	e7ec      	b.n	8005ec8 <_free_r+0x28>
 8005eee:	461a      	mov	r2, r3
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b10b      	cbz	r3, 8005ef8 <_free_r+0x58>
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	d9fa      	bls.n	8005eee <_free_r+0x4e>
 8005ef8:	6811      	ldr	r1, [r2, #0]
 8005efa:	1855      	adds	r5, r2, r1
 8005efc:	42a5      	cmp	r5, r4
 8005efe:	d10b      	bne.n	8005f18 <_free_r+0x78>
 8005f00:	6824      	ldr	r4, [r4, #0]
 8005f02:	4421      	add	r1, r4
 8005f04:	1854      	adds	r4, r2, r1
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	6011      	str	r1, [r2, #0]
 8005f0a:	d1dd      	bne.n	8005ec8 <_free_r+0x28>
 8005f0c:	681c      	ldr	r4, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	6053      	str	r3, [r2, #4]
 8005f12:	4421      	add	r1, r4
 8005f14:	6011      	str	r1, [r2, #0]
 8005f16:	e7d7      	b.n	8005ec8 <_free_r+0x28>
 8005f18:	d902      	bls.n	8005f20 <_free_r+0x80>
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	6003      	str	r3, [r0, #0]
 8005f1e:	e7d3      	b.n	8005ec8 <_free_r+0x28>
 8005f20:	6825      	ldr	r5, [r4, #0]
 8005f22:	1961      	adds	r1, r4, r5
 8005f24:	428b      	cmp	r3, r1
 8005f26:	bf04      	itt	eq
 8005f28:	6819      	ldreq	r1, [r3, #0]
 8005f2a:	685b      	ldreq	r3, [r3, #4]
 8005f2c:	6063      	str	r3, [r4, #4]
 8005f2e:	bf04      	itt	eq
 8005f30:	1949      	addeq	r1, r1, r5
 8005f32:	6021      	streq	r1, [r4, #0]
 8005f34:	6054      	str	r4, [r2, #4]
 8005f36:	e7c7      	b.n	8005ec8 <_free_r+0x28>
 8005f38:	b003      	add	sp, #12
 8005f3a:	bd30      	pop	{r4, r5, pc}
 8005f3c:	200005b8 	.word	0x200005b8

08005f40 <_malloc_r>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	1ccd      	adds	r5, r1, #3
 8005f44:	f025 0503 	bic.w	r5, r5, #3
 8005f48:	3508      	adds	r5, #8
 8005f4a:	2d0c      	cmp	r5, #12
 8005f4c:	bf38      	it	cc
 8005f4e:	250c      	movcc	r5, #12
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	4606      	mov	r6, r0
 8005f54:	db01      	blt.n	8005f5a <_malloc_r+0x1a>
 8005f56:	42a9      	cmp	r1, r5
 8005f58:	d903      	bls.n	8005f62 <_malloc_r+0x22>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	2000      	movs	r0, #0
 8005f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f62:	f000 f8bb 	bl	80060dc <__malloc_lock>
 8005f66:	4921      	ldr	r1, [pc, #132]	; (8005fec <_malloc_r+0xac>)
 8005f68:	680a      	ldr	r2, [r1, #0]
 8005f6a:	4614      	mov	r4, r2
 8005f6c:	b99c      	cbnz	r4, 8005f96 <_malloc_r+0x56>
 8005f6e:	4f20      	ldr	r7, [pc, #128]	; (8005ff0 <_malloc_r+0xb0>)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	b923      	cbnz	r3, 8005f7e <_malloc_r+0x3e>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4630      	mov	r0, r6
 8005f78:	f000 f83c 	bl	8005ff4 <_sbrk_r>
 8005f7c:	6038      	str	r0, [r7, #0]
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4630      	mov	r0, r6
 8005f82:	f000 f837 	bl	8005ff4 <_sbrk_r>
 8005f86:	1c43      	adds	r3, r0, #1
 8005f88:	d123      	bne.n	8005fd2 <_malloc_r+0x92>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	6033      	str	r3, [r6, #0]
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f000 f8aa 	bl	80060e8 <__malloc_unlock>
 8005f94:	e7e3      	b.n	8005f5e <_malloc_r+0x1e>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	1b5b      	subs	r3, r3, r5
 8005f9a:	d417      	bmi.n	8005fcc <_malloc_r+0x8c>
 8005f9c:	2b0b      	cmp	r3, #11
 8005f9e:	d903      	bls.n	8005fa8 <_malloc_r+0x68>
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	441c      	add	r4, r3
 8005fa4:	6025      	str	r5, [r4, #0]
 8005fa6:	e004      	b.n	8005fb2 <_malloc_r+0x72>
 8005fa8:	6863      	ldr	r3, [r4, #4]
 8005faa:	42a2      	cmp	r2, r4
 8005fac:	bf0c      	ite	eq
 8005fae:	600b      	streq	r3, [r1, #0]
 8005fb0:	6053      	strne	r3, [r2, #4]
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f000 f898 	bl	80060e8 <__malloc_unlock>
 8005fb8:	f104 000b 	add.w	r0, r4, #11
 8005fbc:	1d23      	adds	r3, r4, #4
 8005fbe:	f020 0007 	bic.w	r0, r0, #7
 8005fc2:	1ac2      	subs	r2, r0, r3
 8005fc4:	d0cc      	beq.n	8005f60 <_malloc_r+0x20>
 8005fc6:	1a1b      	subs	r3, r3, r0
 8005fc8:	50a3      	str	r3, [r4, r2]
 8005fca:	e7c9      	b.n	8005f60 <_malloc_r+0x20>
 8005fcc:	4622      	mov	r2, r4
 8005fce:	6864      	ldr	r4, [r4, #4]
 8005fd0:	e7cc      	b.n	8005f6c <_malloc_r+0x2c>
 8005fd2:	1cc4      	adds	r4, r0, #3
 8005fd4:	f024 0403 	bic.w	r4, r4, #3
 8005fd8:	42a0      	cmp	r0, r4
 8005fda:	d0e3      	beq.n	8005fa4 <_malloc_r+0x64>
 8005fdc:	1a21      	subs	r1, r4, r0
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f000 f808 	bl	8005ff4 <_sbrk_r>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d1dd      	bne.n	8005fa4 <_malloc_r+0x64>
 8005fe8:	e7cf      	b.n	8005f8a <_malloc_r+0x4a>
 8005fea:	bf00      	nop
 8005fec:	200005b8 	.word	0x200005b8
 8005ff0:	200005bc 	.word	0x200005bc

08005ff4 <_sbrk_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	4d06      	ldr	r5, [pc, #24]	; (8006010 <_sbrk_r+0x1c>)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	602b      	str	r3, [r5, #0]
 8006000:	f7fb feb4 	bl	8001d6c <_sbrk>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_sbrk_r+0x1a>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_sbrk_r+0x1a>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	200006fc 	.word	0x200006fc

08006014 <_raise_r>:
 8006014:	291f      	cmp	r1, #31
 8006016:	b538      	push	{r3, r4, r5, lr}
 8006018:	4604      	mov	r4, r0
 800601a:	460d      	mov	r5, r1
 800601c:	d904      	bls.n	8006028 <_raise_r+0x14>
 800601e:	2316      	movs	r3, #22
 8006020:	6003      	str	r3, [r0, #0]
 8006022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800602a:	b112      	cbz	r2, 8006032 <_raise_r+0x1e>
 800602c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006030:	b94b      	cbnz	r3, 8006046 <_raise_r+0x32>
 8006032:	4620      	mov	r0, r4
 8006034:	f000 f830 	bl	8006098 <_getpid_r>
 8006038:	462a      	mov	r2, r5
 800603a:	4601      	mov	r1, r0
 800603c:	4620      	mov	r0, r4
 800603e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006042:	f000 b817 	b.w	8006074 <_kill_r>
 8006046:	2b01      	cmp	r3, #1
 8006048:	d00a      	beq.n	8006060 <_raise_r+0x4c>
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	d103      	bne.n	8006056 <_raise_r+0x42>
 800604e:	2316      	movs	r3, #22
 8006050:	6003      	str	r3, [r0, #0]
 8006052:	2001      	movs	r0, #1
 8006054:	e7e7      	b.n	8006026 <_raise_r+0x12>
 8006056:	2400      	movs	r4, #0
 8006058:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800605c:	4628      	mov	r0, r5
 800605e:	4798      	blx	r3
 8006060:	2000      	movs	r0, #0
 8006062:	e7e0      	b.n	8006026 <_raise_r+0x12>

08006064 <raise>:
 8006064:	4b02      	ldr	r3, [pc, #8]	; (8006070 <raise+0xc>)
 8006066:	4601      	mov	r1, r0
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	f7ff bfd3 	b.w	8006014 <_raise_r>
 800606e:	bf00      	nop
 8006070:	20000110 	.word	0x20000110

08006074 <_kill_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4d07      	ldr	r5, [pc, #28]	; (8006094 <_kill_r+0x20>)
 8006078:	2300      	movs	r3, #0
 800607a:	4604      	mov	r4, r0
 800607c:	4608      	mov	r0, r1
 800607e:	4611      	mov	r1, r2
 8006080:	602b      	str	r3, [r5, #0]
 8006082:	f7fb fe59 	bl	8001d38 <_kill>
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	d102      	bne.n	8006090 <_kill_r+0x1c>
 800608a:	682b      	ldr	r3, [r5, #0]
 800608c:	b103      	cbz	r3, 8006090 <_kill_r+0x1c>
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	bd38      	pop	{r3, r4, r5, pc}
 8006092:	bf00      	nop
 8006094:	200006fc 	.word	0x200006fc

08006098 <_getpid_r>:
 8006098:	f7fb be46 	b.w	8001d28 <_getpid>

0800609c <siprintf>:
 800609c:	b40e      	push	{r1, r2, r3}
 800609e:	b500      	push	{lr}
 80060a0:	b09c      	sub	sp, #112	; 0x70
 80060a2:	ab1d      	add	r3, sp, #116	; 0x74
 80060a4:	9002      	str	r0, [sp, #8]
 80060a6:	9006      	str	r0, [sp, #24]
 80060a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060ac:	4809      	ldr	r0, [pc, #36]	; (80060d4 <siprintf+0x38>)
 80060ae:	9107      	str	r1, [sp, #28]
 80060b0:	9104      	str	r1, [sp, #16]
 80060b2:	4909      	ldr	r1, [pc, #36]	; (80060d8 <siprintf+0x3c>)
 80060b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060b8:	9105      	str	r1, [sp, #20]
 80060ba:	6800      	ldr	r0, [r0, #0]
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	a902      	add	r1, sp, #8
 80060c0:	f000 f874 	bl	80061ac <_svfiprintf_r>
 80060c4:	9b02      	ldr	r3, [sp, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	b01c      	add	sp, #112	; 0x70
 80060cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80060d0:	b003      	add	sp, #12
 80060d2:	4770      	bx	lr
 80060d4:	20000110 	.word	0x20000110
 80060d8:	ffff0208 	.word	0xffff0208

080060dc <__malloc_lock>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__malloc_lock+0x8>)
 80060de:	f000 baf9 	b.w	80066d4 <__retarget_lock_acquire_recursive>
 80060e2:	bf00      	nop
 80060e4:	20000704 	.word	0x20000704

080060e8 <__malloc_unlock>:
 80060e8:	4801      	ldr	r0, [pc, #4]	; (80060f0 <__malloc_unlock+0x8>)
 80060ea:	f000 baf4 	b.w	80066d6 <__retarget_lock_release_recursive>
 80060ee:	bf00      	nop
 80060f0:	20000704 	.word	0x20000704

080060f4 <__ssputs_r>:
 80060f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f8:	688e      	ldr	r6, [r1, #8]
 80060fa:	429e      	cmp	r6, r3
 80060fc:	4682      	mov	sl, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	4690      	mov	r8, r2
 8006102:	461f      	mov	r7, r3
 8006104:	d838      	bhi.n	8006178 <__ssputs_r+0x84>
 8006106:	898a      	ldrh	r2, [r1, #12]
 8006108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800610c:	d032      	beq.n	8006174 <__ssputs_r+0x80>
 800610e:	6825      	ldr	r5, [r4, #0]
 8006110:	6909      	ldr	r1, [r1, #16]
 8006112:	eba5 0901 	sub.w	r9, r5, r1
 8006116:	6965      	ldr	r5, [r4, #20]
 8006118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800611c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006120:	3301      	adds	r3, #1
 8006122:	444b      	add	r3, r9
 8006124:	106d      	asrs	r5, r5, #1
 8006126:	429d      	cmp	r5, r3
 8006128:	bf38      	it	cc
 800612a:	461d      	movcc	r5, r3
 800612c:	0553      	lsls	r3, r2, #21
 800612e:	d531      	bpl.n	8006194 <__ssputs_r+0xa0>
 8006130:	4629      	mov	r1, r5
 8006132:	f7ff ff05 	bl	8005f40 <_malloc_r>
 8006136:	4606      	mov	r6, r0
 8006138:	b950      	cbnz	r0, 8006150 <__ssputs_r+0x5c>
 800613a:	230c      	movs	r3, #12
 800613c:	f8ca 3000 	str.w	r3, [sl]
 8006140:	89a3      	ldrh	r3, [r4, #12]
 8006142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006146:	81a3      	strh	r3, [r4, #12]
 8006148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006150:	6921      	ldr	r1, [r4, #16]
 8006152:	464a      	mov	r2, r9
 8006154:	f7ff fe8e 	bl	8005e74 <memcpy>
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800615e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006162:	81a3      	strh	r3, [r4, #12]
 8006164:	6126      	str	r6, [r4, #16]
 8006166:	6165      	str	r5, [r4, #20]
 8006168:	444e      	add	r6, r9
 800616a:	eba5 0509 	sub.w	r5, r5, r9
 800616e:	6026      	str	r6, [r4, #0]
 8006170:	60a5      	str	r5, [r4, #8]
 8006172:	463e      	mov	r6, r7
 8006174:	42be      	cmp	r6, r7
 8006176:	d900      	bls.n	800617a <__ssputs_r+0x86>
 8006178:	463e      	mov	r6, r7
 800617a:	4632      	mov	r2, r6
 800617c:	6820      	ldr	r0, [r4, #0]
 800617e:	4641      	mov	r1, r8
 8006180:	f000 faaa 	bl	80066d8 <memmove>
 8006184:	68a3      	ldr	r3, [r4, #8]
 8006186:	6822      	ldr	r2, [r4, #0]
 8006188:	1b9b      	subs	r3, r3, r6
 800618a:	4432      	add	r2, r6
 800618c:	60a3      	str	r3, [r4, #8]
 800618e:	6022      	str	r2, [r4, #0]
 8006190:	2000      	movs	r0, #0
 8006192:	e7db      	b.n	800614c <__ssputs_r+0x58>
 8006194:	462a      	mov	r2, r5
 8006196:	f000 fab9 	bl	800670c <_realloc_r>
 800619a:	4606      	mov	r6, r0
 800619c:	2800      	cmp	r0, #0
 800619e:	d1e1      	bne.n	8006164 <__ssputs_r+0x70>
 80061a0:	6921      	ldr	r1, [r4, #16]
 80061a2:	4650      	mov	r0, sl
 80061a4:	f7ff fe7c 	bl	8005ea0 <_free_r>
 80061a8:	e7c7      	b.n	800613a <__ssputs_r+0x46>
	...

080061ac <_svfiprintf_r>:
 80061ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b0:	4698      	mov	r8, r3
 80061b2:	898b      	ldrh	r3, [r1, #12]
 80061b4:	061b      	lsls	r3, r3, #24
 80061b6:	b09d      	sub	sp, #116	; 0x74
 80061b8:	4607      	mov	r7, r0
 80061ba:	460d      	mov	r5, r1
 80061bc:	4614      	mov	r4, r2
 80061be:	d50e      	bpl.n	80061de <_svfiprintf_r+0x32>
 80061c0:	690b      	ldr	r3, [r1, #16]
 80061c2:	b963      	cbnz	r3, 80061de <_svfiprintf_r+0x32>
 80061c4:	2140      	movs	r1, #64	; 0x40
 80061c6:	f7ff febb 	bl	8005f40 <_malloc_r>
 80061ca:	6028      	str	r0, [r5, #0]
 80061cc:	6128      	str	r0, [r5, #16]
 80061ce:	b920      	cbnz	r0, 80061da <_svfiprintf_r+0x2e>
 80061d0:	230c      	movs	r3, #12
 80061d2:	603b      	str	r3, [r7, #0]
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061d8:	e0d1      	b.n	800637e <_svfiprintf_r+0x1d2>
 80061da:	2340      	movs	r3, #64	; 0x40
 80061dc:	616b      	str	r3, [r5, #20]
 80061de:	2300      	movs	r3, #0
 80061e0:	9309      	str	r3, [sp, #36]	; 0x24
 80061e2:	2320      	movs	r3, #32
 80061e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ec:	2330      	movs	r3, #48	; 0x30
 80061ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006398 <_svfiprintf_r+0x1ec>
 80061f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061f6:	f04f 0901 	mov.w	r9, #1
 80061fa:	4623      	mov	r3, r4
 80061fc:	469a      	mov	sl, r3
 80061fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006202:	b10a      	cbz	r2, 8006208 <_svfiprintf_r+0x5c>
 8006204:	2a25      	cmp	r2, #37	; 0x25
 8006206:	d1f9      	bne.n	80061fc <_svfiprintf_r+0x50>
 8006208:	ebba 0b04 	subs.w	fp, sl, r4
 800620c:	d00b      	beq.n	8006226 <_svfiprintf_r+0x7a>
 800620e:	465b      	mov	r3, fp
 8006210:	4622      	mov	r2, r4
 8006212:	4629      	mov	r1, r5
 8006214:	4638      	mov	r0, r7
 8006216:	f7ff ff6d 	bl	80060f4 <__ssputs_r>
 800621a:	3001      	adds	r0, #1
 800621c:	f000 80aa 	beq.w	8006374 <_svfiprintf_r+0x1c8>
 8006220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006222:	445a      	add	r2, fp
 8006224:	9209      	str	r2, [sp, #36]	; 0x24
 8006226:	f89a 3000 	ldrb.w	r3, [sl]
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 80a2 	beq.w	8006374 <_svfiprintf_r+0x1c8>
 8006230:	2300      	movs	r3, #0
 8006232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800623a:	f10a 0a01 	add.w	sl, sl, #1
 800623e:	9304      	str	r3, [sp, #16]
 8006240:	9307      	str	r3, [sp, #28]
 8006242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006246:	931a      	str	r3, [sp, #104]	; 0x68
 8006248:	4654      	mov	r4, sl
 800624a:	2205      	movs	r2, #5
 800624c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006250:	4851      	ldr	r0, [pc, #324]	; (8006398 <_svfiprintf_r+0x1ec>)
 8006252:	f7fa f8f5 	bl	8000440 <memchr>
 8006256:	9a04      	ldr	r2, [sp, #16]
 8006258:	b9d8      	cbnz	r0, 8006292 <_svfiprintf_r+0xe6>
 800625a:	06d0      	lsls	r0, r2, #27
 800625c:	bf44      	itt	mi
 800625e:	2320      	movmi	r3, #32
 8006260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006264:	0711      	lsls	r1, r2, #28
 8006266:	bf44      	itt	mi
 8006268:	232b      	movmi	r3, #43	; 0x2b
 800626a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800626e:	f89a 3000 	ldrb.w	r3, [sl]
 8006272:	2b2a      	cmp	r3, #42	; 0x2a
 8006274:	d015      	beq.n	80062a2 <_svfiprintf_r+0xf6>
 8006276:	9a07      	ldr	r2, [sp, #28]
 8006278:	4654      	mov	r4, sl
 800627a:	2000      	movs	r0, #0
 800627c:	f04f 0c0a 	mov.w	ip, #10
 8006280:	4621      	mov	r1, r4
 8006282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006286:	3b30      	subs	r3, #48	; 0x30
 8006288:	2b09      	cmp	r3, #9
 800628a:	d94e      	bls.n	800632a <_svfiprintf_r+0x17e>
 800628c:	b1b0      	cbz	r0, 80062bc <_svfiprintf_r+0x110>
 800628e:	9207      	str	r2, [sp, #28]
 8006290:	e014      	b.n	80062bc <_svfiprintf_r+0x110>
 8006292:	eba0 0308 	sub.w	r3, r0, r8
 8006296:	fa09 f303 	lsl.w	r3, r9, r3
 800629a:	4313      	orrs	r3, r2
 800629c:	9304      	str	r3, [sp, #16]
 800629e:	46a2      	mov	sl, r4
 80062a0:	e7d2      	b.n	8006248 <_svfiprintf_r+0x9c>
 80062a2:	9b03      	ldr	r3, [sp, #12]
 80062a4:	1d19      	adds	r1, r3, #4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	9103      	str	r1, [sp, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bfbb      	ittet	lt
 80062ae:	425b      	neglt	r3, r3
 80062b0:	f042 0202 	orrlt.w	r2, r2, #2
 80062b4:	9307      	strge	r3, [sp, #28]
 80062b6:	9307      	strlt	r3, [sp, #28]
 80062b8:	bfb8      	it	lt
 80062ba:	9204      	strlt	r2, [sp, #16]
 80062bc:	7823      	ldrb	r3, [r4, #0]
 80062be:	2b2e      	cmp	r3, #46	; 0x2e
 80062c0:	d10c      	bne.n	80062dc <_svfiprintf_r+0x130>
 80062c2:	7863      	ldrb	r3, [r4, #1]
 80062c4:	2b2a      	cmp	r3, #42	; 0x2a
 80062c6:	d135      	bne.n	8006334 <_svfiprintf_r+0x188>
 80062c8:	9b03      	ldr	r3, [sp, #12]
 80062ca:	1d1a      	adds	r2, r3, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	9203      	str	r2, [sp, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bfb8      	it	lt
 80062d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80062d8:	3402      	adds	r4, #2
 80062da:	9305      	str	r3, [sp, #20]
 80062dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063a8 <_svfiprintf_r+0x1fc>
 80062e0:	7821      	ldrb	r1, [r4, #0]
 80062e2:	2203      	movs	r2, #3
 80062e4:	4650      	mov	r0, sl
 80062e6:	f7fa f8ab 	bl	8000440 <memchr>
 80062ea:	b140      	cbz	r0, 80062fe <_svfiprintf_r+0x152>
 80062ec:	2340      	movs	r3, #64	; 0x40
 80062ee:	eba0 000a 	sub.w	r0, r0, sl
 80062f2:	fa03 f000 	lsl.w	r0, r3, r0
 80062f6:	9b04      	ldr	r3, [sp, #16]
 80062f8:	4303      	orrs	r3, r0
 80062fa:	3401      	adds	r4, #1
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006302:	4826      	ldr	r0, [pc, #152]	; (800639c <_svfiprintf_r+0x1f0>)
 8006304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006308:	2206      	movs	r2, #6
 800630a:	f7fa f899 	bl	8000440 <memchr>
 800630e:	2800      	cmp	r0, #0
 8006310:	d038      	beq.n	8006384 <_svfiprintf_r+0x1d8>
 8006312:	4b23      	ldr	r3, [pc, #140]	; (80063a0 <_svfiprintf_r+0x1f4>)
 8006314:	bb1b      	cbnz	r3, 800635e <_svfiprintf_r+0x1b2>
 8006316:	9b03      	ldr	r3, [sp, #12]
 8006318:	3307      	adds	r3, #7
 800631a:	f023 0307 	bic.w	r3, r3, #7
 800631e:	3308      	adds	r3, #8
 8006320:	9303      	str	r3, [sp, #12]
 8006322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006324:	4433      	add	r3, r6
 8006326:	9309      	str	r3, [sp, #36]	; 0x24
 8006328:	e767      	b.n	80061fa <_svfiprintf_r+0x4e>
 800632a:	fb0c 3202 	mla	r2, ip, r2, r3
 800632e:	460c      	mov	r4, r1
 8006330:	2001      	movs	r0, #1
 8006332:	e7a5      	b.n	8006280 <_svfiprintf_r+0xd4>
 8006334:	2300      	movs	r3, #0
 8006336:	3401      	adds	r4, #1
 8006338:	9305      	str	r3, [sp, #20]
 800633a:	4619      	mov	r1, r3
 800633c:	f04f 0c0a 	mov.w	ip, #10
 8006340:	4620      	mov	r0, r4
 8006342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006346:	3a30      	subs	r2, #48	; 0x30
 8006348:	2a09      	cmp	r2, #9
 800634a:	d903      	bls.n	8006354 <_svfiprintf_r+0x1a8>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0c5      	beq.n	80062dc <_svfiprintf_r+0x130>
 8006350:	9105      	str	r1, [sp, #20]
 8006352:	e7c3      	b.n	80062dc <_svfiprintf_r+0x130>
 8006354:	fb0c 2101 	mla	r1, ip, r1, r2
 8006358:	4604      	mov	r4, r0
 800635a:	2301      	movs	r3, #1
 800635c:	e7f0      	b.n	8006340 <_svfiprintf_r+0x194>
 800635e:	ab03      	add	r3, sp, #12
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	462a      	mov	r2, r5
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <_svfiprintf_r+0x1f8>)
 8006366:	a904      	add	r1, sp, #16
 8006368:	4638      	mov	r0, r7
 800636a:	f3af 8000 	nop.w
 800636e:	1c42      	adds	r2, r0, #1
 8006370:	4606      	mov	r6, r0
 8006372:	d1d6      	bne.n	8006322 <_svfiprintf_r+0x176>
 8006374:	89ab      	ldrh	r3, [r5, #12]
 8006376:	065b      	lsls	r3, r3, #25
 8006378:	f53f af2c 	bmi.w	80061d4 <_svfiprintf_r+0x28>
 800637c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800637e:	b01d      	add	sp, #116	; 0x74
 8006380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006384:	ab03      	add	r3, sp, #12
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	462a      	mov	r2, r5
 800638a:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <_svfiprintf_r+0x1f8>)
 800638c:	a904      	add	r1, sp, #16
 800638e:	4638      	mov	r0, r7
 8006390:	f000 f87a 	bl	8006488 <_printf_i>
 8006394:	e7eb      	b.n	800636e <_svfiprintf_r+0x1c2>
 8006396:	bf00      	nop
 8006398:	080069d9 	.word	0x080069d9
 800639c:	080069e3 	.word	0x080069e3
 80063a0:	00000000 	.word	0x00000000
 80063a4:	080060f5 	.word	0x080060f5
 80063a8:	080069df 	.word	0x080069df

080063ac <_printf_common>:
 80063ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	4616      	mov	r6, r2
 80063b2:	4699      	mov	r9, r3
 80063b4:	688a      	ldr	r2, [r1, #8]
 80063b6:	690b      	ldr	r3, [r1, #16]
 80063b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063bc:	4293      	cmp	r3, r2
 80063be:	bfb8      	it	lt
 80063c0:	4613      	movlt	r3, r2
 80063c2:	6033      	str	r3, [r6, #0]
 80063c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063c8:	4607      	mov	r7, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	b10a      	cbz	r2, 80063d2 <_printf_common+0x26>
 80063ce:	3301      	adds	r3, #1
 80063d0:	6033      	str	r3, [r6, #0]
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	0699      	lsls	r1, r3, #26
 80063d6:	bf42      	ittt	mi
 80063d8:	6833      	ldrmi	r3, [r6, #0]
 80063da:	3302      	addmi	r3, #2
 80063dc:	6033      	strmi	r3, [r6, #0]
 80063de:	6825      	ldr	r5, [r4, #0]
 80063e0:	f015 0506 	ands.w	r5, r5, #6
 80063e4:	d106      	bne.n	80063f4 <_printf_common+0x48>
 80063e6:	f104 0a19 	add.w	sl, r4, #25
 80063ea:	68e3      	ldr	r3, [r4, #12]
 80063ec:	6832      	ldr	r2, [r6, #0]
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	42ab      	cmp	r3, r5
 80063f2:	dc26      	bgt.n	8006442 <_printf_common+0x96>
 80063f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063f8:	1e13      	subs	r3, r2, #0
 80063fa:	6822      	ldr	r2, [r4, #0]
 80063fc:	bf18      	it	ne
 80063fe:	2301      	movne	r3, #1
 8006400:	0692      	lsls	r2, r2, #26
 8006402:	d42b      	bmi.n	800645c <_printf_common+0xb0>
 8006404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006408:	4649      	mov	r1, r9
 800640a:	4638      	mov	r0, r7
 800640c:	47c0      	blx	r8
 800640e:	3001      	adds	r0, #1
 8006410:	d01e      	beq.n	8006450 <_printf_common+0xa4>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	68e5      	ldr	r5, [r4, #12]
 8006416:	6832      	ldr	r2, [r6, #0]
 8006418:	f003 0306 	and.w	r3, r3, #6
 800641c:	2b04      	cmp	r3, #4
 800641e:	bf08      	it	eq
 8006420:	1aad      	subeq	r5, r5, r2
 8006422:	68a3      	ldr	r3, [r4, #8]
 8006424:	6922      	ldr	r2, [r4, #16]
 8006426:	bf0c      	ite	eq
 8006428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800642c:	2500      	movne	r5, #0
 800642e:	4293      	cmp	r3, r2
 8006430:	bfc4      	itt	gt
 8006432:	1a9b      	subgt	r3, r3, r2
 8006434:	18ed      	addgt	r5, r5, r3
 8006436:	2600      	movs	r6, #0
 8006438:	341a      	adds	r4, #26
 800643a:	42b5      	cmp	r5, r6
 800643c:	d11a      	bne.n	8006474 <_printf_common+0xc8>
 800643e:	2000      	movs	r0, #0
 8006440:	e008      	b.n	8006454 <_printf_common+0xa8>
 8006442:	2301      	movs	r3, #1
 8006444:	4652      	mov	r2, sl
 8006446:	4649      	mov	r1, r9
 8006448:	4638      	mov	r0, r7
 800644a:	47c0      	blx	r8
 800644c:	3001      	adds	r0, #1
 800644e:	d103      	bne.n	8006458 <_printf_common+0xac>
 8006450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	3501      	adds	r5, #1
 800645a:	e7c6      	b.n	80063ea <_printf_common+0x3e>
 800645c:	18e1      	adds	r1, r4, r3
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	2030      	movs	r0, #48	; 0x30
 8006462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006466:	4422      	add	r2, r4
 8006468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800646c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006470:	3302      	adds	r3, #2
 8006472:	e7c7      	b.n	8006404 <_printf_common+0x58>
 8006474:	2301      	movs	r3, #1
 8006476:	4622      	mov	r2, r4
 8006478:	4649      	mov	r1, r9
 800647a:	4638      	mov	r0, r7
 800647c:	47c0      	blx	r8
 800647e:	3001      	adds	r0, #1
 8006480:	d0e6      	beq.n	8006450 <_printf_common+0xa4>
 8006482:	3601      	adds	r6, #1
 8006484:	e7d9      	b.n	800643a <_printf_common+0x8e>
	...

08006488 <_printf_i>:
 8006488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	460c      	mov	r4, r1
 800648e:	4691      	mov	r9, r2
 8006490:	7e27      	ldrb	r7, [r4, #24]
 8006492:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006494:	2f78      	cmp	r7, #120	; 0x78
 8006496:	4680      	mov	r8, r0
 8006498:	469a      	mov	sl, r3
 800649a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800649e:	d807      	bhi.n	80064b0 <_printf_i+0x28>
 80064a0:	2f62      	cmp	r7, #98	; 0x62
 80064a2:	d80a      	bhi.n	80064ba <_printf_i+0x32>
 80064a4:	2f00      	cmp	r7, #0
 80064a6:	f000 80d8 	beq.w	800665a <_printf_i+0x1d2>
 80064aa:	2f58      	cmp	r7, #88	; 0x58
 80064ac:	f000 80a3 	beq.w	80065f6 <_printf_i+0x16e>
 80064b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064b8:	e03a      	b.n	8006530 <_printf_i+0xa8>
 80064ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064be:	2b15      	cmp	r3, #21
 80064c0:	d8f6      	bhi.n	80064b0 <_printf_i+0x28>
 80064c2:	a001      	add	r0, pc, #4	; (adr r0, 80064c8 <_printf_i+0x40>)
 80064c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80064c8:	08006521 	.word	0x08006521
 80064cc:	08006535 	.word	0x08006535
 80064d0:	080064b1 	.word	0x080064b1
 80064d4:	080064b1 	.word	0x080064b1
 80064d8:	080064b1 	.word	0x080064b1
 80064dc:	080064b1 	.word	0x080064b1
 80064e0:	08006535 	.word	0x08006535
 80064e4:	080064b1 	.word	0x080064b1
 80064e8:	080064b1 	.word	0x080064b1
 80064ec:	080064b1 	.word	0x080064b1
 80064f0:	080064b1 	.word	0x080064b1
 80064f4:	08006641 	.word	0x08006641
 80064f8:	08006565 	.word	0x08006565
 80064fc:	08006623 	.word	0x08006623
 8006500:	080064b1 	.word	0x080064b1
 8006504:	080064b1 	.word	0x080064b1
 8006508:	08006663 	.word	0x08006663
 800650c:	080064b1 	.word	0x080064b1
 8006510:	08006565 	.word	0x08006565
 8006514:	080064b1 	.word	0x080064b1
 8006518:	080064b1 	.word	0x080064b1
 800651c:	0800662b 	.word	0x0800662b
 8006520:	680b      	ldr	r3, [r1, #0]
 8006522:	1d1a      	adds	r2, r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	600a      	str	r2, [r1, #0]
 8006528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800652c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006530:	2301      	movs	r3, #1
 8006532:	e0a3      	b.n	800667c <_printf_i+0x1f4>
 8006534:	6825      	ldr	r5, [r4, #0]
 8006536:	6808      	ldr	r0, [r1, #0]
 8006538:	062e      	lsls	r6, r5, #24
 800653a:	f100 0304 	add.w	r3, r0, #4
 800653e:	d50a      	bpl.n	8006556 <_printf_i+0xce>
 8006540:	6805      	ldr	r5, [r0, #0]
 8006542:	600b      	str	r3, [r1, #0]
 8006544:	2d00      	cmp	r5, #0
 8006546:	da03      	bge.n	8006550 <_printf_i+0xc8>
 8006548:	232d      	movs	r3, #45	; 0x2d
 800654a:	426d      	negs	r5, r5
 800654c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006550:	485e      	ldr	r0, [pc, #376]	; (80066cc <_printf_i+0x244>)
 8006552:	230a      	movs	r3, #10
 8006554:	e019      	b.n	800658a <_printf_i+0x102>
 8006556:	f015 0f40 	tst.w	r5, #64	; 0x40
 800655a:	6805      	ldr	r5, [r0, #0]
 800655c:	600b      	str	r3, [r1, #0]
 800655e:	bf18      	it	ne
 8006560:	b22d      	sxthne	r5, r5
 8006562:	e7ef      	b.n	8006544 <_printf_i+0xbc>
 8006564:	680b      	ldr	r3, [r1, #0]
 8006566:	6825      	ldr	r5, [r4, #0]
 8006568:	1d18      	adds	r0, r3, #4
 800656a:	6008      	str	r0, [r1, #0]
 800656c:	0628      	lsls	r0, r5, #24
 800656e:	d501      	bpl.n	8006574 <_printf_i+0xec>
 8006570:	681d      	ldr	r5, [r3, #0]
 8006572:	e002      	b.n	800657a <_printf_i+0xf2>
 8006574:	0669      	lsls	r1, r5, #25
 8006576:	d5fb      	bpl.n	8006570 <_printf_i+0xe8>
 8006578:	881d      	ldrh	r5, [r3, #0]
 800657a:	4854      	ldr	r0, [pc, #336]	; (80066cc <_printf_i+0x244>)
 800657c:	2f6f      	cmp	r7, #111	; 0x6f
 800657e:	bf0c      	ite	eq
 8006580:	2308      	moveq	r3, #8
 8006582:	230a      	movne	r3, #10
 8006584:	2100      	movs	r1, #0
 8006586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800658a:	6866      	ldr	r6, [r4, #4]
 800658c:	60a6      	str	r6, [r4, #8]
 800658e:	2e00      	cmp	r6, #0
 8006590:	bfa2      	ittt	ge
 8006592:	6821      	ldrge	r1, [r4, #0]
 8006594:	f021 0104 	bicge.w	r1, r1, #4
 8006598:	6021      	strge	r1, [r4, #0]
 800659a:	b90d      	cbnz	r5, 80065a0 <_printf_i+0x118>
 800659c:	2e00      	cmp	r6, #0
 800659e:	d04d      	beq.n	800663c <_printf_i+0x1b4>
 80065a0:	4616      	mov	r6, r2
 80065a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80065a6:	fb03 5711 	mls	r7, r3, r1, r5
 80065aa:	5dc7      	ldrb	r7, [r0, r7]
 80065ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065b0:	462f      	mov	r7, r5
 80065b2:	42bb      	cmp	r3, r7
 80065b4:	460d      	mov	r5, r1
 80065b6:	d9f4      	bls.n	80065a2 <_printf_i+0x11a>
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d10b      	bne.n	80065d4 <_printf_i+0x14c>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	07df      	lsls	r7, r3, #31
 80065c0:	d508      	bpl.n	80065d4 <_printf_i+0x14c>
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	6861      	ldr	r1, [r4, #4]
 80065c6:	4299      	cmp	r1, r3
 80065c8:	bfde      	ittt	le
 80065ca:	2330      	movle	r3, #48	; 0x30
 80065cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065d0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80065d4:	1b92      	subs	r2, r2, r6
 80065d6:	6122      	str	r2, [r4, #16]
 80065d8:	f8cd a000 	str.w	sl, [sp]
 80065dc:	464b      	mov	r3, r9
 80065de:	aa03      	add	r2, sp, #12
 80065e0:	4621      	mov	r1, r4
 80065e2:	4640      	mov	r0, r8
 80065e4:	f7ff fee2 	bl	80063ac <_printf_common>
 80065e8:	3001      	adds	r0, #1
 80065ea:	d14c      	bne.n	8006686 <_printf_i+0x1fe>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065f0:	b004      	add	sp, #16
 80065f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f6:	4835      	ldr	r0, [pc, #212]	; (80066cc <_printf_i+0x244>)
 80065f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	680e      	ldr	r6, [r1, #0]
 8006600:	061f      	lsls	r7, r3, #24
 8006602:	f856 5b04 	ldr.w	r5, [r6], #4
 8006606:	600e      	str	r6, [r1, #0]
 8006608:	d514      	bpl.n	8006634 <_printf_i+0x1ac>
 800660a:	07d9      	lsls	r1, r3, #31
 800660c:	bf44      	itt	mi
 800660e:	f043 0320 	orrmi.w	r3, r3, #32
 8006612:	6023      	strmi	r3, [r4, #0]
 8006614:	b91d      	cbnz	r5, 800661e <_printf_i+0x196>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	f023 0320 	bic.w	r3, r3, #32
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	2310      	movs	r3, #16
 8006620:	e7b0      	b.n	8006584 <_printf_i+0xfc>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	f043 0320 	orr.w	r3, r3, #32
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	2378      	movs	r3, #120	; 0x78
 800662c:	4828      	ldr	r0, [pc, #160]	; (80066d0 <_printf_i+0x248>)
 800662e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006632:	e7e3      	b.n	80065fc <_printf_i+0x174>
 8006634:	065e      	lsls	r6, r3, #25
 8006636:	bf48      	it	mi
 8006638:	b2ad      	uxthmi	r5, r5
 800663a:	e7e6      	b.n	800660a <_printf_i+0x182>
 800663c:	4616      	mov	r6, r2
 800663e:	e7bb      	b.n	80065b8 <_printf_i+0x130>
 8006640:	680b      	ldr	r3, [r1, #0]
 8006642:	6826      	ldr	r6, [r4, #0]
 8006644:	6960      	ldr	r0, [r4, #20]
 8006646:	1d1d      	adds	r5, r3, #4
 8006648:	600d      	str	r5, [r1, #0]
 800664a:	0635      	lsls	r5, r6, #24
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	d501      	bpl.n	8006654 <_printf_i+0x1cc>
 8006650:	6018      	str	r0, [r3, #0]
 8006652:	e002      	b.n	800665a <_printf_i+0x1d2>
 8006654:	0671      	lsls	r1, r6, #25
 8006656:	d5fb      	bpl.n	8006650 <_printf_i+0x1c8>
 8006658:	8018      	strh	r0, [r3, #0]
 800665a:	2300      	movs	r3, #0
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	4616      	mov	r6, r2
 8006660:	e7ba      	b.n	80065d8 <_printf_i+0x150>
 8006662:	680b      	ldr	r3, [r1, #0]
 8006664:	1d1a      	adds	r2, r3, #4
 8006666:	600a      	str	r2, [r1, #0]
 8006668:	681e      	ldr	r6, [r3, #0]
 800666a:	6862      	ldr	r2, [r4, #4]
 800666c:	2100      	movs	r1, #0
 800666e:	4630      	mov	r0, r6
 8006670:	f7f9 fee6 	bl	8000440 <memchr>
 8006674:	b108      	cbz	r0, 800667a <_printf_i+0x1f2>
 8006676:	1b80      	subs	r0, r0, r6
 8006678:	6060      	str	r0, [r4, #4]
 800667a:	6863      	ldr	r3, [r4, #4]
 800667c:	6123      	str	r3, [r4, #16]
 800667e:	2300      	movs	r3, #0
 8006680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006684:	e7a8      	b.n	80065d8 <_printf_i+0x150>
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	4632      	mov	r2, r6
 800668a:	4649      	mov	r1, r9
 800668c:	4640      	mov	r0, r8
 800668e:	47d0      	blx	sl
 8006690:	3001      	adds	r0, #1
 8006692:	d0ab      	beq.n	80065ec <_printf_i+0x164>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	079b      	lsls	r3, r3, #30
 8006698:	d413      	bmi.n	80066c2 <_printf_i+0x23a>
 800669a:	68e0      	ldr	r0, [r4, #12]
 800669c:	9b03      	ldr	r3, [sp, #12]
 800669e:	4298      	cmp	r0, r3
 80066a0:	bfb8      	it	lt
 80066a2:	4618      	movlt	r0, r3
 80066a4:	e7a4      	b.n	80065f0 <_printf_i+0x168>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4632      	mov	r2, r6
 80066aa:	4649      	mov	r1, r9
 80066ac:	4640      	mov	r0, r8
 80066ae:	47d0      	blx	sl
 80066b0:	3001      	adds	r0, #1
 80066b2:	d09b      	beq.n	80065ec <_printf_i+0x164>
 80066b4:	3501      	adds	r5, #1
 80066b6:	68e3      	ldr	r3, [r4, #12]
 80066b8:	9903      	ldr	r1, [sp, #12]
 80066ba:	1a5b      	subs	r3, r3, r1
 80066bc:	42ab      	cmp	r3, r5
 80066be:	dcf2      	bgt.n	80066a6 <_printf_i+0x21e>
 80066c0:	e7eb      	b.n	800669a <_printf_i+0x212>
 80066c2:	2500      	movs	r5, #0
 80066c4:	f104 0619 	add.w	r6, r4, #25
 80066c8:	e7f5      	b.n	80066b6 <_printf_i+0x22e>
 80066ca:	bf00      	nop
 80066cc:	080069ea 	.word	0x080069ea
 80066d0:	080069fb 	.word	0x080069fb

080066d4 <__retarget_lock_acquire_recursive>:
 80066d4:	4770      	bx	lr

080066d6 <__retarget_lock_release_recursive>:
 80066d6:	4770      	bx	lr

080066d8 <memmove>:
 80066d8:	4288      	cmp	r0, r1
 80066da:	b510      	push	{r4, lr}
 80066dc:	eb01 0402 	add.w	r4, r1, r2
 80066e0:	d902      	bls.n	80066e8 <memmove+0x10>
 80066e2:	4284      	cmp	r4, r0
 80066e4:	4623      	mov	r3, r4
 80066e6:	d807      	bhi.n	80066f8 <memmove+0x20>
 80066e8:	1e43      	subs	r3, r0, #1
 80066ea:	42a1      	cmp	r1, r4
 80066ec:	d008      	beq.n	8006700 <memmove+0x28>
 80066ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066f6:	e7f8      	b.n	80066ea <memmove+0x12>
 80066f8:	4402      	add	r2, r0
 80066fa:	4601      	mov	r1, r0
 80066fc:	428a      	cmp	r2, r1
 80066fe:	d100      	bne.n	8006702 <memmove+0x2a>
 8006700:	bd10      	pop	{r4, pc}
 8006702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800670a:	e7f7      	b.n	80066fc <memmove+0x24>

0800670c <_realloc_r>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	4607      	mov	r7, r0
 8006710:	4614      	mov	r4, r2
 8006712:	460e      	mov	r6, r1
 8006714:	b921      	cbnz	r1, 8006720 <_realloc_r+0x14>
 8006716:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800671a:	4611      	mov	r1, r2
 800671c:	f7ff bc10 	b.w	8005f40 <_malloc_r>
 8006720:	b922      	cbnz	r2, 800672c <_realloc_r+0x20>
 8006722:	f7ff fbbd 	bl	8005ea0 <_free_r>
 8006726:	4625      	mov	r5, r4
 8006728:	4628      	mov	r0, r5
 800672a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800672c:	f000 f814 	bl	8006758 <_malloc_usable_size_r>
 8006730:	42a0      	cmp	r0, r4
 8006732:	d20f      	bcs.n	8006754 <_realloc_r+0x48>
 8006734:	4621      	mov	r1, r4
 8006736:	4638      	mov	r0, r7
 8006738:	f7ff fc02 	bl	8005f40 <_malloc_r>
 800673c:	4605      	mov	r5, r0
 800673e:	2800      	cmp	r0, #0
 8006740:	d0f2      	beq.n	8006728 <_realloc_r+0x1c>
 8006742:	4631      	mov	r1, r6
 8006744:	4622      	mov	r2, r4
 8006746:	f7ff fb95 	bl	8005e74 <memcpy>
 800674a:	4631      	mov	r1, r6
 800674c:	4638      	mov	r0, r7
 800674e:	f7ff fba7 	bl	8005ea0 <_free_r>
 8006752:	e7e9      	b.n	8006728 <_realloc_r+0x1c>
 8006754:	4635      	mov	r5, r6
 8006756:	e7e7      	b.n	8006728 <_realloc_r+0x1c>

08006758 <_malloc_usable_size_r>:
 8006758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800675c:	1f18      	subs	r0, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	bfbc      	itt	lt
 8006762:	580b      	ldrlt	r3, [r1, r0]
 8006764:	18c0      	addlt	r0, r0, r3
 8006766:	4770      	bx	lr

08006768 <_init>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr

08006774 <_fini>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	bf00      	nop
 8006778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677a:	bc08      	pop	{r3}
 800677c:	469e      	mov	lr, r3
 800677e:	4770      	bx	lr
