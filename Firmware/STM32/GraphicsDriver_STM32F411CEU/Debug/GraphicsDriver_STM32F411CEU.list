
GraphicsDriver_STM32F411CEU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb8  08004eb8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ec0  08004ec0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000070  08004f3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08004f3c  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001089a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025ce  00000000  00000000  0003093a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  00032f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  00033e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019f36  00000000  00000000  00034c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb99  00000000  00000000  0004eb36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090eb3  00000000  00000000  0005a6cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb582  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b8  00000000  00000000  000eb600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004dbc 	.word	0x08004dbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004dbc 	.word	0x08004dbc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fbea 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f810 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f9aa 	bl	80008f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a0:	f000 f988 	bl	80008b4 <MX_DMA_Init>
  MX_TIM1_Init();
 80005a4:	f000 f8c0 	bl	8000728 <MX_TIM1_Init>
  MX_IWDG_Init();
 80005a8:	f000 f872 	bl	8000690 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 80005ac:	f000 f958 	bl	8000860 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005b0:	f000 f888 	bl	80006c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  cpp_main();
 80005b4:	f003 fe42 	bl	800423c <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x28>
	...

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 ffa4 	bl	8004518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000618:	2309      	movs	r3, #9
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000630:	230c      	movs	r3, #12
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000634:	2360      	movs	r3, #96	; 0x60
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000638:	2304      	movs	r3, #4
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fa89 	bl	8001b5c <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000650:	f000 f9a8 	bl	80009a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fce3 	bl	800203c <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800067c:	f000 f992 	bl	80009a4 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_IWDG_Init+0x2c>)
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <MX_IWDG_Init+0x30>)
 8000698:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_IWDG_Init+0x2c>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_IWDG_Init+0x2c>)
 80006a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006a6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_IWDG_Init+0x2c>)
 80006aa:	f001 fa0e 	bl	8001aca <HAL_IWDG_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80006b4:	f000 f976 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000051c 	.word	0x2000051c
 80006c0:	40003000 	.word	0x40003000

080006c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_SPI1_Init+0x5c>)
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <MX_SPI1_Init+0x60>)
 80006cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x5c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x5c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x5c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x5c>)
 80006ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x5c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x5c>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x5c>)
 800070e:	f001 fe61 	bl	80023d4 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000718:	f000 f944 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200005a8 	.word	0x200005a8
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b096      	sub	sp, #88	; 0x58
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2220      	movs	r2, #32
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f003 fed9 	bl	8004518 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000766:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <MX_TIM1_Init+0x130>)
 8000768:	4a3c      	ldr	r2, [pc, #240]	; (800085c <MX_TIM1_Init+0x134>)
 800076a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800076c:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <MX_TIM1_Init+0x130>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b39      	ldr	r3, [pc, #228]	; (8000858 <MX_TIM1_Init+0x130>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8000778:	4b37      	ldr	r3, [pc, #220]	; (8000858 <MX_TIM1_Init+0x130>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077e:	4b36      	ldr	r3, [pc, #216]	; (8000858 <MX_TIM1_Init+0x130>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000784:	4b34      	ldr	r3, [pc, #208]	; (8000858 <MX_TIM1_Init+0x130>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <MX_TIM1_Init+0x130>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000790:	4831      	ldr	r0, [pc, #196]	; (8000858 <MX_TIM1_Init+0x130>)
 8000792:	f001 fe83 	bl	800249c <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800079c:	f000 f902 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007aa:	4619      	mov	r1, r3
 80007ac:	482a      	ldr	r0, [pc, #168]	; (8000858 <MX_TIM1_Init+0x130>)
 80007ae:	f001 ffbf 	bl	8002730 <HAL_TIM_ConfigClockSource>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80007b8:	f000 f8f4 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007bc:	4826      	ldr	r0, [pc, #152]	; (8000858 <MX_TIM1_Init+0x130>)
 80007be:	f001 febc 	bl	800253a <HAL_TIM_PWM_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80007c8:	f000 f8ec 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007cc:	2300      	movs	r3, #0
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d8:	4619      	mov	r1, r3
 80007da:	481f      	ldr	r0, [pc, #124]	; (8000858 <MX_TIM1_Init+0x130>)
 80007dc:	f002 fb2c 	bl	8002e38 <HAL_TIMEx_MasterConfigSynchronization>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80007e6:	f000 f8dd 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ea:	2360      	movs	r3, #96	; 0x60
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007f6:	2300      	movs	r3, #0
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	2200      	movs	r2, #0
 800080c:	4619      	mov	r1, r3
 800080e:	4812      	ldr	r0, [pc, #72]	; (8000858 <MX_TIM1_Init+0x130>)
 8000810:	f001 fec8 	bl	80025a4 <HAL_TIM_PWM_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800081a:	f000 f8c3 	bl	80009a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000836:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_TIM1_Init+0x130>)
 8000842:	f002 fb67 	bl	8002f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800084c:	f000 f8aa 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	3758      	adds	r7, #88	; 0x58
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000568 	.word	0x20000568
 800085c:	40010000 	.word	0x40010000

08000860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_USART1_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000898:	f002 fb8e 	bl	8002fb8 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f87f 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000528 	.word	0x20000528
 80008b0:	40011000 	.word	0x40011000

080008b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_DMA_Init+0x3c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <MX_DMA_Init+0x3c>)
 80008c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_DMA_Init+0x3c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2039      	movs	r0, #57	; 0x39
 80008dc:	f000 fb93 	bl	8001006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008e0:	2039      	movs	r0, #57	; 0x39
 80008e2:	f000 fbac 	bl	800103e <HAL_NVIC_EnableIRQ>

}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_GPIO_Init+0xa8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a22      	ldr	r2, [pc, #136]	; (800099c <MX_GPIO_Init+0xa8>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <MX_GPIO_Init+0xa8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_GPIO_Init+0xa8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <MX_GPIO_Init+0xa8>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_GPIO_Init+0xa8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_GPIO_Init+0xa8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a14      	ldr	r2, [pc, #80]	; (800099c <MX_GPIO_Init+0xa8>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_GPIO_Init+0xa8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 800095e:	2200      	movs	r2, #0
 8000960:	f245 71ff 	movw	r1, #22527	; 0x57ff
 8000964:	480e      	ldr	r0, [pc, #56]	; (80009a0 <MX_GPIO_Init+0xac>)
 8000966:	f001 f897 	bl	8001a98 <HAL_GPIO_WritePin>
                          |Matrix_CLK_Pin|Matrix_OE_Pin|Matrix_C_Pin|Matrix_B_Pin
                          |Matrix_A_Pin|Matrix_E_Pin|Matrix_B1_Pin|Matrix_G1_Pin
                          |Matrix_R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Matrix_LAT_GPIO_Port, Matrix_LAT_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_GPIO_Init+0xac>)
 8000972:	f001 f891 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Matrix_R0_Pin Matrix_G0_Pin Matrix_B0_Pin Matrix_D_Pin
                           Matrix_CLK_Pin Matrix_LAT_Pin Matrix_OE_Pin Matrix_C_Pin
                           Matrix_B_Pin Matrix_A_Pin Matrix_E_Pin Matrix_B1_Pin
                           Matrix_G1_Pin Matrix_R1_Pin */
  GPIO_InitStruct.Pin = Matrix_R0_Pin|Matrix_G0_Pin|Matrix_B0_Pin|Matrix_D_Pin
 8000976:	f247 73ff 	movw	r3, #30719	; 0x77ff
 800097a:	60fb      	str	r3, [r7, #12]
                          |Matrix_CLK_Pin|Matrix_LAT_Pin|Matrix_OE_Pin|Matrix_C_Pin
                          |Matrix_B_Pin|Matrix_A_Pin|Matrix_E_Pin|Matrix_B1_Pin
                          |Matrix_G1_Pin|Matrix_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000984:	2302      	movs	r3, #2
 8000986:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4619      	mov	r1, r3
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_GPIO_Init+0xac>)
 8000990:	f000 ff00 	bl	8001794 <HAL_GPIO_Init>

}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <HAL_SPI_MspInit+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12b      	bne.n	8000a7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a5e:	23e0      	movs	r3, #224	; 0xe0
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_SPI_MspInit+0x8c>)
 8000a7a:	f000 fe8b 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40013000 	.word	0x40013000
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <HAL_TIM_Base_MspInit+0x98>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d13e      	bne.n	8000b24 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <HAL_TIM_Base_MspInit+0x9c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <HAL_TIM_Base_MspInit+0x9c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <HAL_TIM_Base_MspInit+0x9c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000ac4:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <HAL_TIM_Base_MspInit+0xa4>)
 8000ac6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000aca:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000ace:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000ad2:	2240      	movs	r2, #64	; 0x40
 8000ad4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aea:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000afa:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000b0a:	f000 fab3 	bl	8001074 <HAL_DMA_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000b14:	f7ff ff46 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <HAL_TIM_Base_MspInit+0xa0>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40010000 	.word	0x40010000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	200004bc 	.word	0x200004bc
 8000b38:	40026428 	.word	0x40026428

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12c      	bne.n	8000bb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000bb4:	f000 fdee 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f8f6 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <DMA2_Stream1_IRQHandler+0x10>)
 8000c2e:	f000 fb49 	bl	80012c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200004bc 	.word	0x200004bc

08000c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	return 1;
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_kill>:

int _kill(int pid, int sig)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c56:	f003 fc2d 	bl	80044b4 <__errno>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	2316      	movs	r3, #22
 8000c5e:	6013      	str	r3, [r2, #0]
	return -1;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_exit>:

void _exit (int status)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ffe7 	bl	8000c4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c7e:	e7fe      	b.n	8000c7e <_exit+0x12>

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f003 fc00 	bl	80044b4 <__errno>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20020000 	.word	0x20020000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	2000008c 	.word	0x2000008c
 8000ce8:	20000608 	.word	0x20000608

08000cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <SystemInit+0x28>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <SystemInit+0x28>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SystemInit+0x28>)
 8000d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d06:	609a      	str	r2, [r3, #8]
#endif
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d1e:	e003      	b.n	8000d28 <LoopCopyDataInit>

08000d20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d26:	3104      	adds	r1, #4

08000d28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d28:	480b      	ldr	r0, [pc, #44]	; (8000d58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d30:	d3f6      	bcc.n	8000d20 <CopyDataInit>
  ldr  r2, =_sbss
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d34:	e002      	b.n	8000d3c <LoopFillZerobss>

08000d36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d38:	f842 3b04 	str.w	r3, [r2], #4

08000d3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d40:	d3f9      	bcc.n	8000d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d42:	f7ff ffd3 	bl	8000cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f003 fbbb 	bl	80044c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fc21 	bl	8000590 <main>
  bx  lr    
 8000d4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d54:	08004ecc 	.word	0x08004ecc
  ldr  r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d5c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000d60:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000d64:	20000608 	.word	0x20000608

08000d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_Init+0x40>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_Init+0x40>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x40>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f92b 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fe08 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f943 	bl	800105a <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dec:	f000 f90b 	bl	8001006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000600 	.word	0x20000600

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000600 	.word	0x20000600

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff3e 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff31 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa2 	bl	8000fac <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff feda 	bl	8000e38 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e099      	b.n	80011c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2202      	movs	r2, #2
 800109c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b0:	e00f      	b.n	80010d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010b2:	f7ff fec1 	bl	8000e38 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d908      	bls.n	80010d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2220      	movs	r2, #32
 80010c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e078      	b.n	80011c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1e8      	bne.n	80010b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <HAL_DMA_Init+0x158>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4313      	orrs	r3, r2
 8001122:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	2b04      	cmp	r3, #4
 800112a:	d107      	bne.n	800113c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4313      	orrs	r3, r2
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4313      	orrs	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f023 0307 	bic.w	r3, r3, #7
 8001152:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	4313      	orrs	r3, r2
 800115c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	2b04      	cmp	r3, #4
 8001164:	d117      	bne.n	8001196 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4313      	orrs	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00e      	beq.n	8001196 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fa91 	bl	80016a0 <DMA_CheckFifoParam>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2240      	movs	r2, #64	; 0x40
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001192:	2301      	movs	r3, #1
 8001194:	e016      	b.n	80011c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 fa48 	bl	8001634 <DMA_CalcBaseAndBitshift>
 80011a4:	4603      	mov	r3, r0
 80011a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ac:	223f      	movs	r2, #63	; 0x3f
 80011ae:	409a      	lsls	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	f010803f 	.word	0xf010803f

080011d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d101      	bne.n	80011f6 <HAL_DMA_Start_IT+0x26>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e040      	b.n	8001278 <HAL_DMA_Start_IT+0xa8>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d12f      	bne.n	800126a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2202      	movs	r2, #2
 800120e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 f9da 	bl	80015d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001228:	223f      	movs	r2, #63	; 0x3f
 800122a:	409a      	lsls	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0216 	orr.w	r2, r2, #22
 800123e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0208 	orr.w	r2, r2, #8
 8001256:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e005      	b.n	8001276 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001272:	2302      	movs	r3, #2
 8001274:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001276:	7dfb      	ldrb	r3, [r7, #23]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d004      	beq.n	800129e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00c      	b.n	80012b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0201 	bic.w	r2, r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012d0:	4b92      	ldr	r3, [pc, #584]	; (800151c <HAL_DMA_IRQHandler+0x258>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a92      	ldr	r2, [pc, #584]	; (8001520 <HAL_DMA_IRQHandler+0x25c>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0a9b      	lsrs	r3, r3, #10
 80012dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ee:	2208      	movs	r2, #8
 80012f0:	409a      	lsls	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d01a      	beq.n	8001330 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0204 	bic.w	r2, r2, #4
 8001316:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131c:	2208      	movs	r2, #8
 800131e:	409a      	lsls	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	f043 0201 	orr.w	r2, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2201      	movs	r2, #1
 8001336:	409a      	lsls	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d012      	beq.n	8001366 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001352:	2201      	movs	r2, #1
 8001354:	409a      	lsls	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135e:	f043 0202 	orr.w	r2, r3, #2
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136a:	2204      	movs	r2, #4
 800136c:	409a      	lsls	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4013      	ands	r3, r2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d012      	beq.n	800139c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00b      	beq.n	800139c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001388:	2204      	movs	r2, #4
 800138a:	409a      	lsls	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001394:	f043 0204 	orr.w	r2, r3, #4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a0:	2210      	movs	r2, #16
 80013a2:	409a      	lsls	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d043      	beq.n	8001434 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d03c      	beq.n	8001434 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013be:	2210      	movs	r2, #16
 80013c0:	409a      	lsls	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d018      	beq.n	8001406 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d108      	bne.n	80013f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d024      	beq.n	8001434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
 80013f2:	e01f      	b.n	8001434 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01b      	beq.n	8001434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	4798      	blx	r3
 8001404:	e016      	b.n	8001434 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d107      	bne.n	8001424 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0208 	bic.w	r2, r2, #8
 8001422:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001438:	2220      	movs	r2, #32
 800143a:	409a      	lsls	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 808e 	beq.w	8001562 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 8086 	beq.w	8001562 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145a:	2220      	movs	r2, #32
 800145c:	409a      	lsls	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b05      	cmp	r3, #5
 800146c:	d136      	bne.n	80014dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0216 	bic.w	r2, r2, #22
 800147c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800148c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <HAL_DMA_IRQHandler+0x1da>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0208 	bic.w	r2, r2, #8
 80014ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b2:	223f      	movs	r2, #63	; 0x3f
 80014b4:	409a      	lsls	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d07d      	beq.n	80015ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	4798      	blx	r3
        }
        return;
 80014da:	e078      	b.n	80015ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d01c      	beq.n	8001524 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d108      	bne.n	800150a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d030      	beq.n	8001562 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	4798      	blx	r3
 8001508:	e02b      	b.n	8001562 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150e:	2b00      	cmp	r3, #0
 8001510:	d027      	beq.n	8001562 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	4798      	blx	r3
 800151a:	e022      	b.n	8001562 <HAL_DMA_IRQHandler+0x29e>
 800151c:	20000000 	.word	0x20000000
 8001520:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0210 	bic.w	r2, r2, #16
 8001540:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	2b00      	cmp	r3, #0
 8001568:	d032      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d022      	beq.n	80015bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2205      	movs	r2, #5
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3301      	adds	r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	429a      	cmp	r2, r3
 8001598:	d307      	bcc.n	80015aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f2      	bne.n	800158e <HAL_DMA_IRQHandler+0x2ca>
 80015a8:	e000      	b.n	80015ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
 80015cc:	e000      	b.n	80015d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80015ce:	bf00      	nop
    }
  }
}
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop

080015d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b40      	cmp	r3, #64	; 0x40
 8001604:	d108      	bne.n	8001618 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001616:	e007      	b.n	8001628 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	60da      	str	r2, [r3, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3b10      	subs	r3, #16
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <DMA_CalcBaseAndBitshift+0x64>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800164e:	4a13      	ldr	r2, [pc, #76]	; (800169c <DMA_CalcBaseAndBitshift+0x68>)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d909      	bls.n	8001676 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800166a:	f023 0303 	bic.w	r3, r3, #3
 800166e:	1d1a      	adds	r2, r3, #4
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	659a      	str	r2, [r3, #88]	; 0x58
 8001674:	e007      	b.n	8001686 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	aaaaaaab 	.word	0xaaaaaaab
 800169c:	08004e74 	.word	0x08004e74

080016a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11f      	bne.n	80016fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d855      	bhi.n	800176c <DMA_CheckFifoParam+0xcc>
 80016c0:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <DMA_CheckFifoParam+0x28>)
 80016c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c6:	bf00      	nop
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016eb 	.word	0x080016eb
 80016d0:	080016d9 	.word	0x080016d9
 80016d4:	0800176d 	.word	0x0800176d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d045      	beq.n	8001770 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e8:	e042      	b.n	8001770 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016f2:	d13f      	bne.n	8001774 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f8:	e03c      	b.n	8001774 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001702:	d121      	bne.n	8001748 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d836      	bhi.n	8001778 <DMA_CheckFifoParam+0xd8>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <DMA_CheckFifoParam+0x70>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001721 	.word	0x08001721
 8001714:	08001727 	.word	0x08001727
 8001718:	08001721 	.word	0x08001721
 800171c:	08001739 	.word	0x08001739
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
      break;
 8001724:	e02f      	b.n	8001786 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d024      	beq.n	800177c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001736:	e021      	b.n	800177c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001740:	d11e      	bne.n	8001780 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001746:	e01b      	b.n	8001780 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d902      	bls.n	8001754 <DMA_CheckFifoParam+0xb4>
 800174e:	2b03      	cmp	r3, #3
 8001750:	d003      	beq.n	800175a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001752:	e018      	b.n	8001786 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
      break;
 8001758:	e015      	b.n	8001786 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00e      	beq.n	8001784 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
      break;
 800176a:	e00b      	b.n	8001784 <DMA_CheckFifoParam+0xe4>
      break;
 800176c:	bf00      	nop
 800176e:	e00a      	b.n	8001786 <DMA_CheckFifoParam+0xe6>
      break;
 8001770:	bf00      	nop
 8001772:	e008      	b.n	8001786 <DMA_CheckFifoParam+0xe6>
      break;
 8001774:	bf00      	nop
 8001776:	e006      	b.n	8001786 <DMA_CheckFifoParam+0xe6>
      break;
 8001778:	bf00      	nop
 800177a:	e004      	b.n	8001786 <DMA_CheckFifoParam+0xe6>
      break;
 800177c:	bf00      	nop
 800177e:	e002      	b.n	8001786 <DMA_CheckFifoParam+0xe6>
      break;   
 8001780:	bf00      	nop
 8001782:	e000      	b.n	8001786 <DMA_CheckFifoParam+0xe6>
      break;
 8001784:	bf00      	nop
    }
  } 
  
  return status; 
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e159      	b.n	8001a64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f040 8148 	bne.w	8001a5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d00b      	beq.n	80017ee <HAL_GPIO_Init+0x5a>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d007      	beq.n	80017ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e2:	2b11      	cmp	r3, #17
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d130      	bne.n	8001850 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 0201 	and.w	r2, r3, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0xfc>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b12      	cmp	r3, #18
 800188e:	d123      	bne.n	80018d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	08da      	lsrs	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	69b9      	ldr	r1, [r7, #24]
 80018d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80a2 	beq.w	8001a5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <HAL_GPIO_Init+0x2e4>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a55      	ldr	r2, [pc, #340]	; (8001a78 <HAL_GPIO_Init+0x2e4>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_GPIO_Init+0x2e4>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001936:	4a51      	ldr	r2, [pc, #324]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a48      	ldr	r2, [pc, #288]	; (8001a80 <HAL_GPIO_Init+0x2ec>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d019      	beq.n	8001996 <HAL_GPIO_Init+0x202>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a47      	ldr	r2, [pc, #284]	; (8001a84 <HAL_GPIO_Init+0x2f0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0x1fe>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a46      	ldr	r2, [pc, #280]	; (8001a88 <HAL_GPIO_Init+0x2f4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00d      	beq.n	800198e <HAL_GPIO_Init+0x1fa>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a45      	ldr	r2, [pc, #276]	; (8001a8c <HAL_GPIO_Init+0x2f8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d007      	beq.n	800198a <HAL_GPIO_Init+0x1f6>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a44      	ldr	r2, [pc, #272]	; (8001a90 <HAL_GPIO_Init+0x2fc>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_GPIO_Init+0x1f2>
 8001982:	2304      	movs	r3, #4
 8001984:	e008      	b.n	8001998 <HAL_GPIO_Init+0x204>
 8001986:	2307      	movs	r3, #7
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x204>
 800198a:	2303      	movs	r3, #3
 800198c:	e004      	b.n	8001998 <HAL_GPIO_Init+0x204>
 800198e:	2302      	movs	r3, #2
 8001990:	e002      	b.n	8001998 <HAL_GPIO_Init+0x204>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x204>
 8001996:	2300      	movs	r3, #0
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	f002 0203 	and.w	r2, r2, #3
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4093      	lsls	r3, r2
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a8:	4934      	ldr	r1, [pc, #208]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b6:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <HAL_GPIO_Init+0x300>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019da:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <HAL_GPIO_Init+0x300>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019e0:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <HAL_GPIO_Init+0x300>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a04:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <HAL_GPIO_Init+0x300>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_GPIO_Init+0x300>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a2e:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_GPIO_Init+0x300>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_GPIO_Init+0x300>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_GPIO_Init+0x300>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3301      	adds	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b0f      	cmp	r3, #15
 8001a68:	f67f aea2 	bls.w	80017b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3724      	adds	r7, #36	; 0x24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40013800 	.word	0x40013800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40020400 	.word	0x40020400
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020c00 	.word	0x40020c00
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40013c00 	.word	0x40013c00

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	619a      	str	r2, [r3, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e02b      	b.n	8001b34 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001ae4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f245 5255 	movw	r2, #21845	; 0x5555
 8001aee:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6852      	ldr	r2, [r2, #4]
 8001af8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6892      	ldr	r2, [r2, #8]
 8001b02:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001b04:	f7ff f998 	bl	8000e38 <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001b0a:	e008      	b.n	8001b1e <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001b0c:	f7ff f994 	bl	8000e38 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b30      	cmp	r3, #48	; 0x30
 8001b18:	d901      	bls.n	8001b1e <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e00a      	b.n	8001b34 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f1      	bne.n	8001b0c <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001b30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001b4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e25b      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d075      	beq.n	8001c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b7a:	4ba3      	ldr	r3, [pc, #652]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d00c      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b86:	4ba0      	ldr	r3, [pc, #640]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d112      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b92:	4b9d      	ldr	r3, [pc, #628]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b9e:	d10b      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	4b99      	ldr	r3, [pc, #612]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d05b      	beq.n	8001c64 <HAL_RCC_OscConfig+0x108>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d157      	bne.n	8001c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e236      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc0:	d106      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x74>
 8001bc2:	4b91      	ldr	r3, [pc, #580]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a90      	ldr	r2, [pc, #576]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e01d      	b.n	8001c0c <HAL_RCC_OscConfig+0xb0>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x98>
 8001bda:	4b8b      	ldr	r3, [pc, #556]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a8a      	ldr	r2, [pc, #552]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a87      	ldr	r2, [pc, #540]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0xb0>
 8001bf4:	4b84      	ldr	r3, [pc, #528]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a83      	ldr	r2, [pc, #524]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b81      	ldr	r3, [pc, #516]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a80      	ldr	r2, [pc, #512]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff f910 	bl	8000e38 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff f90c 	bl	8000e38 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e1fb      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0xc0>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f8fc 	bl	8000e38 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff f8f8 	bl	8000e38 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1e7      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	4b6c      	ldr	r3, [pc, #432]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0xe8>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d063      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c72:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7e:	4b62      	ldr	r3, [pc, #392]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d11c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b5f      	ldr	r3, [pc, #380]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d116      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	4b5c      	ldr	r3, [pc, #368]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_RCC_OscConfig+0x152>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e1bb      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	4b56      	ldr	r3, [pc, #344]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4952      	ldr	r1, [pc, #328]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	e03a      	b.n	8001d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b4f      	ldr	r3, [pc, #316]	; (8001e0c <HAL_RCC_OscConfig+0x2b0>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f8b1 	bl	8000e38 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cda:	f7ff f8ad 	bl	8000e38 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e19c      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4940      	ldr	r1, [pc, #256]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	e015      	b.n	8001d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0e:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <HAL_RCC_OscConfig+0x2b0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f890 	bl	8000e38 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f88c 	bl	8000e38 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e17b      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d030      	beq.n	8001da8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d016      	beq.n	8001d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_RCC_OscConfig+0x2b4>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff f870 	bl	8000e38 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f86c 	bl	8000e38 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e15b      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x200>
 8001d7a:	e015      	b.n	8001da8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RCC_OscConfig+0x2b4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff f859 	bl	8000e38 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8a:	f7ff f855 	bl	8000e38 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e144      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80a0 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_OscConfig+0x2b8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d121      	bne.n	8001e36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_RCC_OscConfig+0x2b8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <HAL_RCC_OscConfig+0x2b8>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff f81b 	bl	8000e38 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	e011      	b.n	8001e2a <HAL_RCC_OscConfig+0x2ce>
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	42470000 	.word	0x42470000
 8001e10:	42470e80 	.word	0x42470e80
 8001e14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e18:	f7ff f80e 	bl	8000e38 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e0fd      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2a:	4b81      	ldr	r3, [pc, #516]	; (8002030 <HAL_RCC_OscConfig+0x4d4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
 8001e3e:	4b7d      	ldr	r3, [pc, #500]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	4a7c      	ldr	r2, [pc, #496]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4a:	e01c      	b.n	8001e86 <HAL_RCC_OscConfig+0x32a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d10c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x312>
 8001e54:	4b77      	ldr	r3, [pc, #476]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a76      	ldr	r2, [pc, #472]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e60:	4b74      	ldr	r3, [pc, #464]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	4a73      	ldr	r2, [pc, #460]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6c:	e00b      	b.n	8001e86 <HAL_RCC_OscConfig+0x32a>
 8001e6e:	4b71      	ldr	r3, [pc, #452]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a70      	ldr	r2, [pc, #448]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7a:	4b6e      	ldr	r3, [pc, #440]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a6d      	ldr	r2, [pc, #436]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d015      	beq.n	8001eba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7fe ffd3 	bl	8000e38 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7fe ffcf 	bl	8000e38 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0bc      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	4b61      	ldr	r3, [pc, #388]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ee      	beq.n	8001e96 <HAL_RCC_OscConfig+0x33a>
 8001eb8:	e014      	b.n	8001ee4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eba:	f7fe ffbd 	bl	8000e38 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7fe ffb9 	bl	8000e38 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0a6      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	4b56      	ldr	r3, [pc, #344]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ee      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d105      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eea:	4b52      	ldr	r3, [pc, #328]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a51      	ldr	r2, [pc, #324]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8092 	beq.w	8002024 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f00:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d05c      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d141      	bne.n	8001f98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4b48      	ldr	r3, [pc, #288]	; (8002038 <HAL_RCC_OscConfig+0x4dc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7fe ff8d 	bl	8000e38 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f22:	f7fe ff89 	bl	8000e38 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e078      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f34:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	019b      	lsls	r3, r3, #6
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	085b      	lsrs	r3, r3, #1
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	041b      	lsls	r3, r3, #16
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	061b      	lsls	r3, r3, #24
 8001f64:	4933      	ldr	r1, [pc, #204]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6a:	4b33      	ldr	r3, [pc, #204]	; (8002038 <HAL_RCC_OscConfig+0x4dc>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7fe ff62 	bl	8000e38 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe ff5e 	bl	8000e38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e04d      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x41c>
 8001f96:	e045      	b.n	8002024 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_RCC_OscConfig+0x4dc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7fe ff4b 	bl	8000e38 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7fe ff47 	bl	8000e38 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e036      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x44a>
 8001fc4:	e02e      	b.n	8002024 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e029      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_RCC_OscConfig+0x4d8>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d115      	bne.n	8002020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002000:	4293      	cmp	r3, r2
 8002002:	d10d      	bne.n	8002020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d106      	bne.n	8002020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40007000 	.word	0x40007000
 8002034:	40023800 	.word	0x40023800
 8002038:	42470060 	.word	0x42470060

0800203c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0cc      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d90c      	bls.n	8002078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b65      	ldr	r3, [pc, #404]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0b8      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800209a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b4:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	494d      	ldr	r1, [pc, #308]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d044      	beq.n	800215c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d119      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e07f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4b3f      	ldr	r3, [pc, #252]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e06f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e067      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211a:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 0203 	bic.w	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4934      	ldr	r1, [pc, #208]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800212c:	f7fe fe84 	bl	8000e38 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	e00a      	b.n	800214a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002134:	f7fe fe80 	bl	8000e38 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e04f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 020c 	and.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d1eb      	bne.n	8002134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d20c      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e032      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4916      	ldr	r1, [pc, #88]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	490e      	ldr	r1, [pc, #56]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021c2:	f000 f821 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021c6:	4601      	mov	r1, r0
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	fa21 f303 	lsr.w	r3, r1, r3
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fde4 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023c00 	.word	0x40023c00
 80021f8:	40023800 	.word	0x40023800
 80021fc:	08004e5c 	.word	0x08004e5c
 8002200:	20000000 	.word	0x20000000
 8002204:	20000004 	.word	0x20000004

08002208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	2300      	movs	r3, #0
 8002218:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800221e:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_GetSysClockFreq+0x158>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d007      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x32>
 800222a:	2b08      	cmp	r3, #8
 800222c:	d008      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x38>
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 808d 	bne.w	800234e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b4b      	ldr	r3, [pc, #300]	; (8002364 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002236:	60bb      	str	r3, [r7, #8]
       break;
 8002238:	e08c      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223a:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <HAL_RCC_GetSysClockFreq+0x160>)
 800223c:	60bb      	str	r3, [r7, #8]
      break;
 800223e:	e089      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002240:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_GetSysClockFreq+0x158>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002248:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224a:	4b45      	ldr	r3, [pc, #276]	; (8002360 <HAL_RCC_GetSysClockFreq+0x158>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d023      	beq.n	800229e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002256:	4b42      	ldr	r3, [pc, #264]	; (8002360 <HAL_RCC_GetSysClockFreq+0x158>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	099b      	lsrs	r3, r3, #6
 800225c:	f04f 0400 	mov.w	r4, #0
 8002260:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	ea03 0501 	and.w	r5, r3, r1
 800226c:	ea04 0602 	and.w	r6, r4, r2
 8002270:	4a3d      	ldr	r2, [pc, #244]	; (8002368 <HAL_RCC_GetSysClockFreq+0x160>)
 8002272:	fb02 f106 	mul.w	r1, r2, r6
 8002276:	2200      	movs	r2, #0
 8002278:	fb02 f205 	mul.w	r2, r2, r5
 800227c:	440a      	add	r2, r1
 800227e:	493a      	ldr	r1, [pc, #232]	; (8002368 <HAL_RCC_GetSysClockFreq+0x160>)
 8002280:	fba5 0101 	umull	r0, r1, r5, r1
 8002284:	1853      	adds	r3, r2, r1
 8002286:	4619      	mov	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f04f 0400 	mov.w	r4, #0
 800228e:	461a      	mov	r2, r3
 8002290:	4623      	mov	r3, r4
 8002292:	f7fd fffd 	bl	8000290 <__aeabi_uldivmod>
 8002296:	4603      	mov	r3, r0
 8002298:	460c      	mov	r4, r1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e049      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229e:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_RCC_GetSysClockFreq+0x158>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	099b      	lsrs	r3, r3, #6
 80022a4:	f04f 0400 	mov.w	r4, #0
 80022a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	ea03 0501 	and.w	r5, r3, r1
 80022b4:	ea04 0602 	and.w	r6, r4, r2
 80022b8:	4629      	mov	r1, r5
 80022ba:	4632      	mov	r2, r6
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	f04f 0400 	mov.w	r4, #0
 80022c4:	0154      	lsls	r4, r2, #5
 80022c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022ca:	014b      	lsls	r3, r1, #5
 80022cc:	4619      	mov	r1, r3
 80022ce:	4622      	mov	r2, r4
 80022d0:	1b49      	subs	r1, r1, r5
 80022d2:	eb62 0206 	sbc.w	r2, r2, r6
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	f04f 0400 	mov.w	r4, #0
 80022de:	0194      	lsls	r4, r2, #6
 80022e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022e4:	018b      	lsls	r3, r1, #6
 80022e6:	1a5b      	subs	r3, r3, r1
 80022e8:	eb64 0402 	sbc.w	r4, r4, r2
 80022ec:	f04f 0100 	mov.w	r1, #0
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	00e2      	lsls	r2, r4, #3
 80022f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022fa:	00d9      	lsls	r1, r3, #3
 80022fc:	460b      	mov	r3, r1
 80022fe:	4614      	mov	r4, r2
 8002300:	195b      	adds	r3, r3, r5
 8002302:	eb44 0406 	adc.w	r4, r4, r6
 8002306:	f04f 0100 	mov.w	r1, #0
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	02a2      	lsls	r2, r4, #10
 8002310:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002314:	0299      	lsls	r1, r3, #10
 8002316:	460b      	mov	r3, r1
 8002318:	4614      	mov	r4, r2
 800231a:	4618      	mov	r0, r3
 800231c:	4621      	mov	r1, r4
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f04f 0400 	mov.w	r4, #0
 8002324:	461a      	mov	r2, r3
 8002326:	4623      	mov	r3, r4
 8002328:	f7fd ffb2 	bl	8000290 <__aeabi_uldivmod>
 800232c:	4603      	mov	r3, r0
 800232e:	460c      	mov	r4, r1
 8002330:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_GetSysClockFreq+0x158>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	0c1b      	lsrs	r3, r3, #16
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	3301      	adds	r3, #1
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	fbb2 f3f3 	udiv	r3, r2, r3
 800234a:	60bb      	str	r3, [r7, #8]
      break;
 800234c:	e002      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002350:	60bb      	str	r3, [r7, #8]
      break;
 8002352:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002354:	68bb      	ldr	r3, [r7, #8]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	00f42400 	.word	0x00f42400
 8002368:	017d7840 	.word	0x017d7840

0800236c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_RCC_GetHCLKFreq+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000000 	.word	0x20000000

08002384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002388:	f7ff fff0 	bl	800236c <HAL_RCC_GetHCLKFreq>
 800238c:	4601      	mov	r1, r0
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	0a9b      	lsrs	r3, r3, #10
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	08004e6c 	.word	0x08004e6c

080023ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023b0:	f7ff ffdc 	bl	800236c <HAL_RCC_GetHCLKFreq>
 80023b4:	4601      	mov	r1, r0
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	0b5b      	lsrs	r3, r3, #13
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4a03      	ldr	r2, [pc, #12]	; (80023d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	08004e6c 	.word	0x08004e6c

080023d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e056      	b.n	8002494 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d106      	bne.n	8002406 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7fe faff 	bl	8000a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2202      	movs	r2, #2
 800240a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	ea42 0103 	orr.w	r1, r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	0c1b      	lsrs	r3, r3, #16
 8002464:	f003 0104 	and.w	r1, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002482:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e01d      	b.n	80024ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe fae6 	bl	8000a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f000 f9e0 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b06      	cmp	r3, #6
 800251a:	d007      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e01d      	b.n	8002588 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d106      	bne.n	8002566 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f815 	bl	8002590 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2202      	movs	r2, #2
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	4619      	mov	r1, r3
 8002578:	4610      	mov	r0, r2
 800257a:	f000 f991 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0b4      	b.n	8002728 <HAL_TIM_PWM_ConfigChannel+0x184>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b0c      	cmp	r3, #12
 80025d2:	f200 809f 	bhi.w	8002714 <HAL_TIM_PWM_ConfigChannel+0x170>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	08002611 	.word	0x08002611
 80025e0:	08002715 	.word	0x08002715
 80025e4:	08002715 	.word	0x08002715
 80025e8:	08002715 	.word	0x08002715
 80025ec:	08002651 	.word	0x08002651
 80025f0:	08002715 	.word	0x08002715
 80025f4:	08002715 	.word	0x08002715
 80025f8:	08002715 	.word	0x08002715
 80025fc:	08002693 	.word	0x08002693
 8002600:	08002715 	.word	0x08002715
 8002604:	08002715 	.word	0x08002715
 8002608:	08002715 	.word	0x08002715
 800260c:	080026d3 	.word	0x080026d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f9c2 	bl	80029a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0208 	orr.w	r2, r2, #8
 800262a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0204 	bic.w	r2, r2, #4
 800263a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6999      	ldr	r1, [r3, #24]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	619a      	str	r2, [r3, #24]
      break;
 800264e:	e062      	b.n	8002716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fa08 	bl	8002a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800266a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6999      	ldr	r1, [r3, #24]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	021a      	lsls	r2, r3, #8
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	619a      	str	r2, [r3, #24]
      break;
 8002690:	e041      	b.n	8002716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fa53 	bl	8002b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0208 	orr.w	r2, r2, #8
 80026ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0204 	bic.w	r2, r2, #4
 80026bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69d9      	ldr	r1, [r3, #28]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	61da      	str	r2, [r3, #28]
      break;
 80026d0:	e021      	b.n	8002716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fa9d 	bl	8002c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69d9      	ldr	r1, [r3, #28]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	61da      	str	r2, [r3, #28]
      break;
 8002712:	e000      	b.n	8002716 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002714:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_TIM_ConfigClockSource+0x18>
 8002744:	2302      	movs	r3, #2
 8002746:	e0a6      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x166>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800276e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d067      	beq.n	8002850 <HAL_TIM_ConfigClockSource+0x120>
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d80b      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x6c>
 8002784:	2b10      	cmp	r3, #16
 8002786:	d073      	beq.n	8002870 <HAL_TIM_ConfigClockSource+0x140>
 8002788:	2b10      	cmp	r3, #16
 800278a:	d802      	bhi.n	8002792 <HAL_TIM_ConfigClockSource+0x62>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d06f      	beq.n	8002870 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002790:	e078      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002792:	2b20      	cmp	r3, #32
 8002794:	d06c      	beq.n	8002870 <HAL_TIM_ConfigClockSource+0x140>
 8002796:	2b30      	cmp	r3, #48	; 0x30
 8002798:	d06a      	beq.n	8002870 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800279a:	e073      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800279c:	2b70      	cmp	r3, #112	; 0x70
 800279e:	d00d      	beq.n	80027bc <HAL_TIM_ConfigClockSource+0x8c>
 80027a0:	2b70      	cmp	r3, #112	; 0x70
 80027a2:	d804      	bhi.n	80027ae <HAL_TIM_ConfigClockSource+0x7e>
 80027a4:	2b50      	cmp	r3, #80	; 0x50
 80027a6:	d033      	beq.n	8002810 <HAL_TIM_ConfigClockSource+0xe0>
 80027a8:	2b60      	cmp	r3, #96	; 0x60
 80027aa:	d041      	beq.n	8002830 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80027ac:	e06a      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b2:	d066      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x152>
 80027b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b8:	d017      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80027ba:	e063      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f000 faee 	bl	8002dac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	609a      	str	r2, [r3, #8]
      break;
 80027e8:	e04c      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f000 fad7 	bl	8002dac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800280c:	609a      	str	r2, [r3, #8]
      break;
 800280e:	e039      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	461a      	mov	r2, r3
 800281e:	f000 fa4b 	bl	8002cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2150      	movs	r1, #80	; 0x50
 8002828:	4618      	mov	r0, r3
 800282a:	f000 faa4 	bl	8002d76 <TIM_ITRx_SetConfig>
      break;
 800282e:	e029      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	461a      	mov	r2, r3
 800283e:	f000 fa6a 	bl	8002d16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2160      	movs	r1, #96	; 0x60
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fa94 	bl	8002d76 <TIM_ITRx_SetConfig>
      break;
 800284e:	e019      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	461a      	mov	r2, r3
 800285e:	f000 fa2b 	bl	8002cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2140      	movs	r1, #64	; 0x40
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fa84 	bl	8002d76 <TIM_ITRx_SetConfig>
      break;
 800286e:	e009      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 fa7b 	bl	8002d76 <TIM_ITRx_SetConfig>
      break;
 8002880:	e000      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a34      	ldr	r2, [pc, #208]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00f      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d00b      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a31      	ldr	r2, [pc, #196]	; (8002988 <TIM_Base_SetConfig+0xe8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a30      	ldr	r2, [pc, #192]	; (800298c <TIM_Base_SetConfig+0xec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a2f      	ldr	r2, [pc, #188]	; (8002990 <TIM_Base_SetConfig+0xf0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d108      	bne.n	80028ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a25      	ldr	r2, [pc, #148]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01b      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d017      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a22      	ldr	r2, [pc, #136]	; (8002988 <TIM_Base_SetConfig+0xe8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a21      	ldr	r2, [pc, #132]	; (800298c <TIM_Base_SetConfig+0xec>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00f      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a20      	ldr	r2, [pc, #128]	; (8002990 <TIM_Base_SetConfig+0xf0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <TIM_Base_SetConfig+0xf4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <TIM_Base_SetConfig+0xf8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <TIM_Base_SetConfig+0xfc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d108      	bne.n	800293c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a08      	ldr	r2, [pc, #32]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d103      	bne.n	8002970 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	615a      	str	r2, [r3, #20]
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40010000 	.word	0x40010000
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800
 8002990:	40000c00 	.word	0x40000c00
 8002994:	40014000 	.word	0x40014000
 8002998:	40014400 	.word	0x40014400
 800299c:	40014800 	.word	0x40014800

080029a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	f023 0201 	bic.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f023 0302 	bic.w	r3, r3, #2
 80029e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <TIM_OC1_SetConfig+0xc8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d10c      	bne.n	8002a16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0308 	bic.w	r3, r3, #8
 8002a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f023 0304 	bic.w	r3, r3, #4
 8002a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <TIM_OC1_SetConfig+0xc8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d111      	bne.n	8002a42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	621a      	str	r2, [r3, #32]
}
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40010000 	.word	0x40010000

08002a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f023 0210 	bic.w	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0320 	bic.w	r3, r3, #32
 8002ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <TIM_OC2_SetConfig+0xd4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10d      	bne.n	8002ae8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a15      	ldr	r2, [pc, #84]	; (8002b40 <TIM_OC2_SetConfig+0xd4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d113      	bne.n	8002b18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	621a      	str	r2, [r3, #32]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000

08002b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <TIM_OC3_SetConfig+0xd0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10d      	bne.n	8002bbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <TIM_OC3_SetConfig+0xd0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d113      	bne.n	8002bee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	621a      	str	r2, [r3, #32]
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40010000 	.word	0x40010000

08002c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	031b      	lsls	r3, r3, #12
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <TIM_OC4_SetConfig+0x9c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d109      	bne.n	8002c8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	621a      	str	r2, [r3, #32]
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40010000 	.word	0x40010000

08002cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f023 0201 	bic.w	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f023 030a 	bic.w	r3, r3, #10
 8002cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b087      	sub	sp, #28
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f023 0210 	bic.w	r2, r3, #16
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	031b      	lsls	r3, r3, #12
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f043 0307 	orr.w	r3, r3, #7
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	021a      	lsls	r2, r3, #8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	609a      	str	r2, [r3, #8]
}
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	2201      	movs	r2, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a1a      	ldr	r2, [r3, #32]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	401a      	ands	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a1a      	ldr	r2, [r3, #32]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	431a      	orrs	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e050      	b.n	8002ef2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d018      	beq.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d013      	beq.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800
 8002f0c:	40000c00 	.word	0x40000c00
 8002f10:	40014000 	.word	0x40014000

08002f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e03d      	b.n	8002fac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e03f      	b.n	800304a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fdac 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f90b 	bl	8003218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b088      	sub	sp, #32
 8003056:	af02      	add	r7, sp, #8
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b20      	cmp	r3, #32
 8003070:	f040 8083 	bne.w	800317a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_UART_Transmit+0x2e>
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e07b      	b.n	800317c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_UART_Transmit+0x40>
 800308e:	2302      	movs	r3, #2
 8003090:	e074      	b.n	800317c <HAL_UART_Transmit+0x12a>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2221      	movs	r2, #33	; 0x21
 80030a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80030a8:	f7fd fec6 	bl	8000e38 <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	88fa      	ldrh	r2, [r7, #6]
 80030b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80030c2:	e042      	b.n	800314a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030da:	d122      	bne.n	8003122 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2200      	movs	r2, #0
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f84c 	bl	8003184 <UART_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e042      	b.n	800317c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003108:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3302      	adds	r3, #2
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	e017      	b.n	800314a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	3301      	adds	r3, #1
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	e013      	b.n	800314a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2200      	movs	r2, #0
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f829 	bl	8003184 <UART_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e01f      	b.n	800317c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	60ba      	str	r2, [r7, #8]
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1b7      	bne.n	80030c4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2200      	movs	r2, #0
 800315c:	2140      	movs	r1, #64	; 0x40
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f810 	bl	8003184 <UART_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e006      	b.n	800317c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
  }
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003194:	e02c      	b.n	80031f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800319c:	d028      	beq.n	80031f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80031a4:	f7fd fe48 	bl	8000e38 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d21d      	bcs.n	80031f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e00f      	b.n	8003210 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	429a      	cmp	r2, r3
 800320c:	d0c3      	beq.n	8003196 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800325a:	f023 030c 	bic.w	r3, r3, #12
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	68f9      	ldr	r1, [r7, #12]
 8003264:	430b      	orrs	r3, r1
 8003266:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003286:	f040 818b 	bne.w	80035a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4ac1      	ldr	r2, [pc, #772]	; (8003594 <UART_SetConfig+0x37c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d005      	beq.n	80032a0 <UART_SetConfig+0x88>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4abf      	ldr	r2, [pc, #764]	; (8003598 <UART_SetConfig+0x380>)
 800329a:	4293      	cmp	r3, r2
 800329c:	f040 80bd 	bne.w	800341a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032a0:	f7ff f884 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 80032a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	461d      	mov	r5, r3
 80032aa:	f04f 0600 	mov.w	r6, #0
 80032ae:	46a8      	mov	r8, r5
 80032b0:	46b1      	mov	r9, r6
 80032b2:	eb18 0308 	adds.w	r3, r8, r8
 80032b6:	eb49 0409 	adc.w	r4, r9, r9
 80032ba:	4698      	mov	r8, r3
 80032bc:	46a1      	mov	r9, r4
 80032be:	eb18 0805 	adds.w	r8, r8, r5
 80032c2:	eb49 0906 	adc.w	r9, r9, r6
 80032c6:	f04f 0100 	mov.w	r1, #0
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032da:	4688      	mov	r8, r1
 80032dc:	4691      	mov	r9, r2
 80032de:	eb18 0005 	adds.w	r0, r8, r5
 80032e2:	eb49 0106 	adc.w	r1, r9, r6
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	461d      	mov	r5, r3
 80032ec:	f04f 0600 	mov.w	r6, #0
 80032f0:	196b      	adds	r3, r5, r5
 80032f2:	eb46 0406 	adc.w	r4, r6, r6
 80032f6:	461a      	mov	r2, r3
 80032f8:	4623      	mov	r3, r4
 80032fa:	f7fc ffc9 	bl	8000290 <__aeabi_uldivmod>
 80032fe:	4603      	mov	r3, r0
 8003300:	460c      	mov	r4, r1
 8003302:	461a      	mov	r2, r3
 8003304:	4ba5      	ldr	r3, [pc, #660]	; (800359c <UART_SetConfig+0x384>)
 8003306:	fba3 2302 	umull	r2, r3, r3, r2
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	461d      	mov	r5, r3
 8003314:	f04f 0600 	mov.w	r6, #0
 8003318:	46a9      	mov	r9, r5
 800331a:	46b2      	mov	sl, r6
 800331c:	eb19 0309 	adds.w	r3, r9, r9
 8003320:	eb4a 040a 	adc.w	r4, sl, sl
 8003324:	4699      	mov	r9, r3
 8003326:	46a2      	mov	sl, r4
 8003328:	eb19 0905 	adds.w	r9, r9, r5
 800332c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003330:	f04f 0100 	mov.w	r1, #0
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800333c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003344:	4689      	mov	r9, r1
 8003346:	4692      	mov	sl, r2
 8003348:	eb19 0005 	adds.w	r0, r9, r5
 800334c:	eb4a 0106 	adc.w	r1, sl, r6
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	461d      	mov	r5, r3
 8003356:	f04f 0600 	mov.w	r6, #0
 800335a:	196b      	adds	r3, r5, r5
 800335c:	eb46 0406 	adc.w	r4, r6, r6
 8003360:	461a      	mov	r2, r3
 8003362:	4623      	mov	r3, r4
 8003364:	f7fc ff94 	bl	8000290 <__aeabi_uldivmod>
 8003368:	4603      	mov	r3, r0
 800336a:	460c      	mov	r4, r1
 800336c:	461a      	mov	r2, r3
 800336e:	4b8b      	ldr	r3, [pc, #556]	; (800359c <UART_SetConfig+0x384>)
 8003370:	fba3 1302 	umull	r1, r3, r3, r2
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	2164      	movs	r1, #100	; 0x64
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	3332      	adds	r3, #50	; 0x32
 8003382:	4a86      	ldr	r2, [pc, #536]	; (800359c <UART_SetConfig+0x384>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003390:	4498      	add	r8, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	461d      	mov	r5, r3
 8003396:	f04f 0600 	mov.w	r6, #0
 800339a:	46a9      	mov	r9, r5
 800339c:	46b2      	mov	sl, r6
 800339e:	eb19 0309 	adds.w	r3, r9, r9
 80033a2:	eb4a 040a 	adc.w	r4, sl, sl
 80033a6:	4699      	mov	r9, r3
 80033a8:	46a2      	mov	sl, r4
 80033aa:	eb19 0905 	adds.w	r9, r9, r5
 80033ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80033b2:	f04f 0100 	mov.w	r1, #0
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033c6:	4689      	mov	r9, r1
 80033c8:	4692      	mov	sl, r2
 80033ca:	eb19 0005 	adds.w	r0, r9, r5
 80033ce:	eb4a 0106 	adc.w	r1, sl, r6
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	461d      	mov	r5, r3
 80033d8:	f04f 0600 	mov.w	r6, #0
 80033dc:	196b      	adds	r3, r5, r5
 80033de:	eb46 0406 	adc.w	r4, r6, r6
 80033e2:	461a      	mov	r2, r3
 80033e4:	4623      	mov	r3, r4
 80033e6:	f7fc ff53 	bl	8000290 <__aeabi_uldivmod>
 80033ea:	4603      	mov	r3, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b6a      	ldr	r3, [pc, #424]	; (800359c <UART_SetConfig+0x384>)
 80033f2:	fba3 1302 	umull	r1, r3, r3, r2
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2164      	movs	r1, #100	; 0x64
 80033fa:	fb01 f303 	mul.w	r3, r1, r3
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	3332      	adds	r3, #50	; 0x32
 8003404:	4a65      	ldr	r2, [pc, #404]	; (800359c <UART_SetConfig+0x384>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	f003 0207 	and.w	r2, r3, #7
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4442      	add	r2, r8
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	e26f      	b.n	80038fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800341a:	f7fe ffb3 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 800341e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	461d      	mov	r5, r3
 8003424:	f04f 0600 	mov.w	r6, #0
 8003428:	46a8      	mov	r8, r5
 800342a:	46b1      	mov	r9, r6
 800342c:	eb18 0308 	adds.w	r3, r8, r8
 8003430:	eb49 0409 	adc.w	r4, r9, r9
 8003434:	4698      	mov	r8, r3
 8003436:	46a1      	mov	r9, r4
 8003438:	eb18 0805 	adds.w	r8, r8, r5
 800343c:	eb49 0906 	adc.w	r9, r9, r6
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800344c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003450:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003454:	4688      	mov	r8, r1
 8003456:	4691      	mov	r9, r2
 8003458:	eb18 0005 	adds.w	r0, r8, r5
 800345c:	eb49 0106 	adc.w	r1, r9, r6
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	461d      	mov	r5, r3
 8003466:	f04f 0600 	mov.w	r6, #0
 800346a:	196b      	adds	r3, r5, r5
 800346c:	eb46 0406 	adc.w	r4, r6, r6
 8003470:	461a      	mov	r2, r3
 8003472:	4623      	mov	r3, r4
 8003474:	f7fc ff0c 	bl	8000290 <__aeabi_uldivmod>
 8003478:	4603      	mov	r3, r0
 800347a:	460c      	mov	r4, r1
 800347c:	461a      	mov	r2, r3
 800347e:	4b47      	ldr	r3, [pc, #284]	; (800359c <UART_SetConfig+0x384>)
 8003480:	fba3 2302 	umull	r2, r3, r3, r2
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	461d      	mov	r5, r3
 800348e:	f04f 0600 	mov.w	r6, #0
 8003492:	46a9      	mov	r9, r5
 8003494:	46b2      	mov	sl, r6
 8003496:	eb19 0309 	adds.w	r3, r9, r9
 800349a:	eb4a 040a 	adc.w	r4, sl, sl
 800349e:	4699      	mov	r9, r3
 80034a0:	46a2      	mov	sl, r4
 80034a2:	eb19 0905 	adds.w	r9, r9, r5
 80034a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80034aa:	f04f 0100 	mov.w	r1, #0
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034be:	4689      	mov	r9, r1
 80034c0:	4692      	mov	sl, r2
 80034c2:	eb19 0005 	adds.w	r0, r9, r5
 80034c6:	eb4a 0106 	adc.w	r1, sl, r6
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	461d      	mov	r5, r3
 80034d0:	f04f 0600 	mov.w	r6, #0
 80034d4:	196b      	adds	r3, r5, r5
 80034d6:	eb46 0406 	adc.w	r4, r6, r6
 80034da:	461a      	mov	r2, r3
 80034dc:	4623      	mov	r3, r4
 80034de:	f7fc fed7 	bl	8000290 <__aeabi_uldivmod>
 80034e2:	4603      	mov	r3, r0
 80034e4:	460c      	mov	r4, r1
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b2c      	ldr	r3, [pc, #176]	; (800359c <UART_SetConfig+0x384>)
 80034ea:	fba3 1302 	umull	r1, r3, r3, r2
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2164      	movs	r1, #100	; 0x64
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	3332      	adds	r3, #50	; 0x32
 80034fc:	4a27      	ldr	r2, [pc, #156]	; (800359c <UART_SetConfig+0x384>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800350a:	4498      	add	r8, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	461d      	mov	r5, r3
 8003510:	f04f 0600 	mov.w	r6, #0
 8003514:	46a9      	mov	r9, r5
 8003516:	46b2      	mov	sl, r6
 8003518:	eb19 0309 	adds.w	r3, r9, r9
 800351c:	eb4a 040a 	adc.w	r4, sl, sl
 8003520:	4699      	mov	r9, r3
 8003522:	46a2      	mov	sl, r4
 8003524:	eb19 0905 	adds.w	r9, r9, r5
 8003528:	eb4a 0a06 	adc.w	sl, sl, r6
 800352c:	f04f 0100 	mov.w	r1, #0
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003538:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800353c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003540:	4689      	mov	r9, r1
 8003542:	4692      	mov	sl, r2
 8003544:	eb19 0005 	adds.w	r0, r9, r5
 8003548:	eb4a 0106 	adc.w	r1, sl, r6
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	461d      	mov	r5, r3
 8003552:	f04f 0600 	mov.w	r6, #0
 8003556:	196b      	adds	r3, r5, r5
 8003558:	eb46 0406 	adc.w	r4, r6, r6
 800355c:	461a      	mov	r2, r3
 800355e:	4623      	mov	r3, r4
 8003560:	f7fc fe96 	bl	8000290 <__aeabi_uldivmod>
 8003564:	4603      	mov	r3, r0
 8003566:	460c      	mov	r4, r1
 8003568:	461a      	mov	r2, r3
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <UART_SetConfig+0x384>)
 800356c:	fba3 1302 	umull	r1, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	2164      	movs	r1, #100	; 0x64
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	3332      	adds	r3, #50	; 0x32
 800357e:	4a07      	ldr	r2, [pc, #28]	; (800359c <UART_SetConfig+0x384>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	f003 0207 	and.w	r2, r3, #7
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4442      	add	r2, r8
 8003590:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003592:	e1b2      	b.n	80038fa <UART_SetConfig+0x6e2>
 8003594:	40011000 	.word	0x40011000
 8003598:	40011400 	.word	0x40011400
 800359c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4ad7      	ldr	r2, [pc, #860]	; (8003904 <UART_SetConfig+0x6ec>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d005      	beq.n	80035b6 <UART_SetConfig+0x39e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4ad6      	ldr	r2, [pc, #856]	; (8003908 <UART_SetConfig+0x6f0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	f040 80d1 	bne.w	8003758 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80035b6:	f7fe fef9 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 80035ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	469a      	mov	sl, r3
 80035c0:	f04f 0b00 	mov.w	fp, #0
 80035c4:	46d0      	mov	r8, sl
 80035c6:	46d9      	mov	r9, fp
 80035c8:	eb18 0308 	adds.w	r3, r8, r8
 80035cc:	eb49 0409 	adc.w	r4, r9, r9
 80035d0:	4698      	mov	r8, r3
 80035d2:	46a1      	mov	r9, r4
 80035d4:	eb18 080a 	adds.w	r8, r8, sl
 80035d8:	eb49 090b 	adc.w	r9, r9, fp
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035f0:	4688      	mov	r8, r1
 80035f2:	4691      	mov	r9, r2
 80035f4:	eb1a 0508 	adds.w	r5, sl, r8
 80035f8:	eb4b 0609 	adc.w	r6, fp, r9
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4619      	mov	r1, r3
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	f04f 0400 	mov.w	r4, #0
 800360e:	0094      	lsls	r4, r2, #2
 8003610:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003614:	008b      	lsls	r3, r1, #2
 8003616:	461a      	mov	r2, r3
 8003618:	4623      	mov	r3, r4
 800361a:	4628      	mov	r0, r5
 800361c:	4631      	mov	r1, r6
 800361e:	f7fc fe37 	bl	8000290 <__aeabi_uldivmod>
 8003622:	4603      	mov	r3, r0
 8003624:	460c      	mov	r4, r1
 8003626:	461a      	mov	r2, r3
 8003628:	4bb8      	ldr	r3, [pc, #736]	; (800390c <UART_SetConfig+0x6f4>)
 800362a:	fba3 2302 	umull	r2, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	469b      	mov	fp, r3
 8003638:	f04f 0c00 	mov.w	ip, #0
 800363c:	46d9      	mov	r9, fp
 800363e:	46e2      	mov	sl, ip
 8003640:	eb19 0309 	adds.w	r3, r9, r9
 8003644:	eb4a 040a 	adc.w	r4, sl, sl
 8003648:	4699      	mov	r9, r3
 800364a:	46a2      	mov	sl, r4
 800364c:	eb19 090b 	adds.w	r9, r9, fp
 8003650:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003654:	f04f 0100 	mov.w	r1, #0
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003660:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003664:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003668:	4689      	mov	r9, r1
 800366a:	4692      	mov	sl, r2
 800366c:	eb1b 0509 	adds.w	r5, fp, r9
 8003670:	eb4c 060a 	adc.w	r6, ip, sl
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4619      	mov	r1, r3
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	f04f 0400 	mov.w	r4, #0
 8003686:	0094      	lsls	r4, r2, #2
 8003688:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800368c:	008b      	lsls	r3, r1, #2
 800368e:	461a      	mov	r2, r3
 8003690:	4623      	mov	r3, r4
 8003692:	4628      	mov	r0, r5
 8003694:	4631      	mov	r1, r6
 8003696:	f7fc fdfb 	bl	8000290 <__aeabi_uldivmod>
 800369a:	4603      	mov	r3, r0
 800369c:	460c      	mov	r4, r1
 800369e:	461a      	mov	r2, r3
 80036a0:	4b9a      	ldr	r3, [pc, #616]	; (800390c <UART_SetConfig+0x6f4>)
 80036a2:	fba3 1302 	umull	r1, r3, r3, r2
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2164      	movs	r1, #100	; 0x64
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	3332      	adds	r3, #50	; 0x32
 80036b4:	4a95      	ldr	r2, [pc, #596]	; (800390c <UART_SetConfig+0x6f4>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c0:	4498      	add	r8, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	469b      	mov	fp, r3
 80036c6:	f04f 0c00 	mov.w	ip, #0
 80036ca:	46d9      	mov	r9, fp
 80036cc:	46e2      	mov	sl, ip
 80036ce:	eb19 0309 	adds.w	r3, r9, r9
 80036d2:	eb4a 040a 	adc.w	r4, sl, sl
 80036d6:	4699      	mov	r9, r3
 80036d8:	46a2      	mov	sl, r4
 80036da:	eb19 090b 	adds.w	r9, r9, fp
 80036de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036e2:	f04f 0100 	mov.w	r1, #0
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036f6:	4689      	mov	r9, r1
 80036f8:	4692      	mov	sl, r2
 80036fa:	eb1b 0509 	adds.w	r5, fp, r9
 80036fe:	eb4c 060a 	adc.w	r6, ip, sl
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4619      	mov	r1, r3
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	f04f 0400 	mov.w	r4, #0
 8003714:	0094      	lsls	r4, r2, #2
 8003716:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800371a:	008b      	lsls	r3, r1, #2
 800371c:	461a      	mov	r2, r3
 800371e:	4623      	mov	r3, r4
 8003720:	4628      	mov	r0, r5
 8003722:	4631      	mov	r1, r6
 8003724:	f7fc fdb4 	bl	8000290 <__aeabi_uldivmod>
 8003728:	4603      	mov	r3, r0
 800372a:	460c      	mov	r4, r1
 800372c:	461a      	mov	r2, r3
 800372e:	4b77      	ldr	r3, [pc, #476]	; (800390c <UART_SetConfig+0x6f4>)
 8003730:	fba3 1302 	umull	r1, r3, r3, r2
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	2164      	movs	r1, #100	; 0x64
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	3332      	adds	r3, #50	; 0x32
 8003742:	4a72      	ldr	r2, [pc, #456]	; (800390c <UART_SetConfig+0x6f4>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	f003 020f 	and.w	r2, r3, #15
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4442      	add	r2, r8
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	e0d0      	b.n	80038fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003758:	f7fe fe14 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 800375c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	469a      	mov	sl, r3
 8003762:	f04f 0b00 	mov.w	fp, #0
 8003766:	46d0      	mov	r8, sl
 8003768:	46d9      	mov	r9, fp
 800376a:	eb18 0308 	adds.w	r3, r8, r8
 800376e:	eb49 0409 	adc.w	r4, r9, r9
 8003772:	4698      	mov	r8, r3
 8003774:	46a1      	mov	r9, r4
 8003776:	eb18 080a 	adds.w	r8, r8, sl
 800377a:	eb49 090b 	adc.w	r9, r9, fp
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800378a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800378e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003792:	4688      	mov	r8, r1
 8003794:	4691      	mov	r9, r2
 8003796:	eb1a 0508 	adds.w	r5, sl, r8
 800379a:	eb4b 0609 	adc.w	r6, fp, r9
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4619      	mov	r1, r3
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	f04f 0400 	mov.w	r4, #0
 80037b0:	0094      	lsls	r4, r2, #2
 80037b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037b6:	008b      	lsls	r3, r1, #2
 80037b8:	461a      	mov	r2, r3
 80037ba:	4623      	mov	r3, r4
 80037bc:	4628      	mov	r0, r5
 80037be:	4631      	mov	r1, r6
 80037c0:	f7fc fd66 	bl	8000290 <__aeabi_uldivmod>
 80037c4:	4603      	mov	r3, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b50      	ldr	r3, [pc, #320]	; (800390c <UART_SetConfig+0x6f4>)
 80037cc:	fba3 2302 	umull	r2, r3, r3, r2
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	469b      	mov	fp, r3
 80037da:	f04f 0c00 	mov.w	ip, #0
 80037de:	46d9      	mov	r9, fp
 80037e0:	46e2      	mov	sl, ip
 80037e2:	eb19 0309 	adds.w	r3, r9, r9
 80037e6:	eb4a 040a 	adc.w	r4, sl, sl
 80037ea:	4699      	mov	r9, r3
 80037ec:	46a2      	mov	sl, r4
 80037ee:	eb19 090b 	adds.w	r9, r9, fp
 80037f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003802:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003806:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800380a:	4689      	mov	r9, r1
 800380c:	4692      	mov	sl, r2
 800380e:	eb1b 0509 	adds.w	r5, fp, r9
 8003812:	eb4c 060a 	adc.w	r6, ip, sl
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4619      	mov	r1, r3
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	f04f 0400 	mov.w	r4, #0
 8003828:	0094      	lsls	r4, r2, #2
 800382a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800382e:	008b      	lsls	r3, r1, #2
 8003830:	461a      	mov	r2, r3
 8003832:	4623      	mov	r3, r4
 8003834:	4628      	mov	r0, r5
 8003836:	4631      	mov	r1, r6
 8003838:	f7fc fd2a 	bl	8000290 <__aeabi_uldivmod>
 800383c:	4603      	mov	r3, r0
 800383e:	460c      	mov	r4, r1
 8003840:	461a      	mov	r2, r3
 8003842:	4b32      	ldr	r3, [pc, #200]	; (800390c <UART_SetConfig+0x6f4>)
 8003844:	fba3 1302 	umull	r1, r3, r3, r2
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	2164      	movs	r1, #100	; 0x64
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	3332      	adds	r3, #50	; 0x32
 8003856:	4a2d      	ldr	r2, [pc, #180]	; (800390c <UART_SetConfig+0x6f4>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003862:	4498      	add	r8, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	469b      	mov	fp, r3
 8003868:	f04f 0c00 	mov.w	ip, #0
 800386c:	46d9      	mov	r9, fp
 800386e:	46e2      	mov	sl, ip
 8003870:	eb19 0309 	adds.w	r3, r9, r9
 8003874:	eb4a 040a 	adc.w	r4, sl, sl
 8003878:	4699      	mov	r9, r3
 800387a:	46a2      	mov	sl, r4
 800387c:	eb19 090b 	adds.w	r9, r9, fp
 8003880:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003890:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003894:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003898:	4689      	mov	r9, r1
 800389a:	4692      	mov	sl, r2
 800389c:	eb1b 0509 	adds.w	r5, fp, r9
 80038a0:	eb4c 060a 	adc.w	r6, ip, sl
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4619      	mov	r1, r3
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	f04f 0400 	mov.w	r4, #0
 80038b6:	0094      	lsls	r4, r2, #2
 80038b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038bc:	008b      	lsls	r3, r1, #2
 80038be:	461a      	mov	r2, r3
 80038c0:	4623      	mov	r3, r4
 80038c2:	4628      	mov	r0, r5
 80038c4:	4631      	mov	r1, r6
 80038c6:	f7fc fce3 	bl	8000290 <__aeabi_uldivmod>
 80038ca:	4603      	mov	r3, r0
 80038cc:	460c      	mov	r4, r1
 80038ce:	461a      	mov	r2, r3
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <UART_SetConfig+0x6f4>)
 80038d2:	fba3 1302 	umull	r1, r3, r3, r2
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2164      	movs	r1, #100	; 0x64
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	3332      	adds	r3, #50	; 0x32
 80038e4:	4a09      	ldr	r2, [pc, #36]	; (800390c <UART_SetConfig+0x6f4>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	f003 020f 	and.w	r2, r3, #15
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4442      	add	r2, r8
 80038f6:	609a      	str	r2, [r3, #8]
}
 80038f8:	e7ff      	b.n	80038fa <UART_SetConfig+0x6e2>
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003904:	40011000 	.word	0x40011000
 8003908:	40011400 	.word	0x40011400
 800390c:	51eb851f 	.word	0x51eb851f

08003910 <_Z12DMA_CompleteP19__DMA_HandleTypeDef>:
//		instance->handleNeeded = true;
//		instance->Handle();
//	}
//}

void DMA_Complete(DMA_HandleTypeDef *hdma) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	instance->Handle();
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <_Z12DMA_CompleteP19__DMA_HandleTypeDef+0x1c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fc31 	bl	8004184 <_ZN12MatrixDriver6HandleEv>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000090 	.word	0x20000090

08003930 <_Z9DMA_AbortP19__DMA_HandleTypeDef>:

void DMA_Abort(DMA_HandleTypeDef *hdma) {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	instance->Handle();
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <_Z9DMA_AbortP19__DMA_HandleTypeDef+0x1c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fc21 	bl	8004184 <_ZN12MatrixDriver6HandleEv>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000090 	.word	0x20000090

08003950 <_ZN12MatrixDriver12BufferOffsetEhhh>:

uint16_t MatrixDriver::BufferOffset(uint8_t x, uint8_t y, uint8_t plane) {
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	461a      	mov	r2, r3
 800395e:	4603      	mov	r3, r0
 8003960:	70fb      	strb	r3, [r7, #3]
 8003962:	460b      	mov	r3, r1
 8003964:	70bb      	strb	r3, [r7, #2]
 8003966:	4613      	mov	r3, r2
 8003968:	707b      	strb	r3, [r7, #1]
	return (plane * planeSize)
 800396a:	787b      	ldrb	r3, [r7, #1]
 800396c:	b29a      	uxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	88db      	ldrh	r3, [r3, #6]
 8003972:	fb12 f303 	smulbb	r3, r2, r3
 8003976:	b299      	uxth	r1, r3
			+ ((y % (height / 2)) * ((width * CYCLES_PER_PIXEL) + ROW_END_CYCLES))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	785b      	ldrb	r3, [r3, #1]
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	b2da      	uxtb	r2, r3
 8003980:	78bb      	ldrb	r3, [r7, #2]
 8003982:	fbb3 f0f2 	udiv	r0, r3, r2
 8003986:	fb02 f200 	mul.w	r2, r2, r0
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	b2db      	uxtb	r3, r3
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	3302      	adds	r3, #2
 8003996:	b29b      	uxth	r3, r3
 8003998:	fb12 f303 	smulbb	r3, r2, r3
 800399c:	b29b      	uxth	r3, r3
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	440b      	add	r3, r1
 80039a4:	b29a      	uxth	r2, r3
			+ (x * CYCLES_PER_PIXEL);
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	b29b      	uxth	r3, r3
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE>:

#define MIN(a,b) (((a)<(b))?(a):(b))

MatrixDriver::MatrixDriver(uint8_t width, uint8_t height, ScanType scanType) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	4608      	mov	r0, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	4603      	mov	r3, r0
 80039d0:	70fb      	strb	r3, [r7, #3]
 80039d2:	460b      	mov	r3, r1
 80039d4:	70bb      	strb	r3, [r7, #2]
 80039d6:	4613      	mov	r3, r2
 80039d8:	707b      	strb	r3, [r7, #1]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	715a      	strb	r2, [r3, #5]
	this->width = width;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	701a      	strb	r2, [r3, #0]
	this->height = height;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	78ba      	ldrb	r2, [r7, #2]
 80039ea:	705a      	strb	r2, [r3, #1]
	this->scanType = scanType;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	787a      	ldrb	r2, [r7, #1]
 80039f0:	70da      	strb	r2, [r3, #3]
	this->planes = 4;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2204      	movs	r2, #4
 80039f6:	709a      	strb	r2, [r3, #2]

	this->planeSize = ((width * CYCLES_PER_PIXEL) * (height / 2))
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	78bb      	ldrb	r3, [r7, #2]
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	fb12 f303 	smulbb	r3, r2, r3
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	80da      	strh	r2, [r3, #6]
			+ ROW_END_CYCLES;
	this->bufferSize = planeSize * planes;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	88da      	ldrh	r2, [r3, #6]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	789b      	ldrb	r3, [r3, #2]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	fb12 f303 	smulbb	r3, r2, r3
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	811a      	strh	r2, [r3, #8]

	this->sendBufferA = true;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	711a      	strb	r2, [r3, #4]
	this->bufferA = new uint16_t[bufferSize];
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	891b      	ldrh	r3, [r3, #8]
 8003a34:	4a8f      	ldr	r2, [pc, #572]	; (8003c74 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x2b4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d801      	bhi.n	8003a3e <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x7e>
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	e001      	b.n	8003a42 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x82>
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fd12 	bl	800446c <_Znaj>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	60da      	str	r2, [r3, #12]
	this->bufferB = new uint16_t[bufferSize];
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	891b      	ldrh	r3, [r3, #8]
 8003a54:	4a87      	ldr	r2, [pc, #540]	; (8003c74 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x2b4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d801      	bhi.n	8003a5e <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x9e>
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	e001      	b.n	8003a62 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xa2>
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fd02 	bl	800446c <_Znaj>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	611a      	str	r2, [r3, #16]

	for (uint8_t y = 0; y < height / 2; y++) {
 8003a70:	2300      	movs	r3, #0
 8003a72:	75fb      	strb	r3, [r7, #23]
 8003a74:	78bb      	ldrb	r3, [r7, #2]
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	7dfa      	ldrb	r2, [r7, #23]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	f080 80f0 	bcs.w	8003c62 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x2a2>

		uint8_t previousRow = y == 0 ? (height / 2) - 1 : y - 1;
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xd4>
 8003a88:	78bb      	ldrb	r3, [r7, #2]
 8003a8a:	085b      	lsrs	r3, r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e002      	b.n	8003a9a <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xda>
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	753b      	strb	r3, [r7, #20]

		uint16_t rowSelects =
				SET_IF(previousRow & 0x01,Matrix_A_Pin)
 8003a9c:	7d3b      	ldrb	r3, [r7, #20]
 8003a9e:	015b      	lsls	r3, r3, #5
 8003aa0:	b21b      	sxth	r3, r3
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x02, Matrix_B_Pin)
 8003aa8:	7d3b      	ldrb	r3, [r7, #20]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	b21b      	sxth	r3, r3
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	b21b      	sxth	r3, r3
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x04, Matrix_C_Pin)
 8003ab8:	7d3b      	ldrb	r3, [r7, #20]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	b21b      	sxth	r3, r3
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	b21b      	sxth	r3, r3
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x08, Matrix_D_Pin)
 8003ac8:	7d3b      	ldrb	r3, [r7, #20]
 8003aca:	01db      	lsls	r3, r3, #7
 8003acc:	b21b      	sxth	r3, r3
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	b21a      	sxth	r2, r3
				|SET_IF(previousRow & 0x10, Matrix_E_Pin);
 8003ad8:	7d3b      	ldrb	r3, [r7, #20]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	b21b      	sxth	r3, r3
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	b21b      	sxth	r3, r3
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	b21b      	sxth	r3, r3
		uint16_t rowSelects =
 8003ae8:	827b      	strh	r3, [r7, #18]

		for (uint8_t plane = 0; plane < planes; plane++) {
 8003aea:	2300      	movs	r3, #0
 8003aec:	75bb      	strb	r3, [r7, #22]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	789b      	ldrb	r3, [r3, #2]
 8003af2:	7dba      	ldrb	r2, [r7, #22]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	f080 80b0 	bcs.w	8003c5a <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x29a>
			for (uint8_t x = 0; x < width; x++) {
 8003afa:	2300      	movs	r3, #0
 8003afc:	757b      	strb	r3, [r7, #21]
 8003afe:	7d7a      	ldrb	r2, [r7, #21]
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d22c      	bcs.n	8003b60 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x1a0>

				uint16_t offset = BufferOffset(x, y, plane);
 8003b06:	7dbb      	ldrb	r3, [r7, #22]
 8003b08:	7dfa      	ldrb	r2, [r7, #23]
 8003b0a:	7d79      	ldrb	r1, [r7, #21]
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff1f 	bl	8003950 <_ZN12MatrixDriver12BufferOffsetEhhh>
 8003b12:	4603      	mov	r3, r0
 8003b14:	823b      	strh	r3, [r7, #16]

				bufferA[offset] = bufferB[offset] = rowSelects;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	8a3b      	ldrh	r3, [r7, #16]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	4413      	add	r3, r2
 8003b20:	8a7a      	ldrh	r2, [r7, #18]
 8003b22:	801a      	strh	r2, [r3, #0]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68d1      	ldr	r1, [r2, #12]
 8003b28:	8a3a      	ldrh	r2, [r7, #16]
 8003b2a:	0052      	lsls	r2, r2, #1
 8003b2c:	440a      	add	r2, r1
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	8013      	strh	r3, [r2, #0]
				bufferA[offset + 1] = bufferB[offset + 1] = rowSelects
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	8a3b      	ldrh	r3, [r7, #16]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4413      	add	r3, r2
						| Matrix_CLK_Pin;
 8003b3e:	8a7a      	ldrh	r2, [r7, #18]
 8003b40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b44:	b292      	uxth	r2, r2
				bufferA[offset + 1] = bufferB[offset + 1] = rowSelects
 8003b46:	801a      	strh	r2, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	68d1      	ldr	r1, [r2, #12]
 8003b4c:	8a3a      	ldrh	r2, [r7, #16]
 8003b4e:	3201      	adds	r2, #1
 8003b50:	0052      	lsls	r2, r2, #1
 8003b52:	440a      	add	r2, r1
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	8013      	strh	r3, [r2, #0]
			for (uint8_t x = 0; x < width; x++) {
 8003b58:	7d7b      	ldrb	r3, [r7, #21]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	757b      	strb	r3, [r7, #21]
 8003b5e:	e7ce      	b.n	8003afe <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x13e>
			}

			//Setup the final bytes for the row, staring with the output after the last pixel on the current row & plane
			//Disable outputs
			uint16_t offset = BufferOffset(width - 1, y,
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b2d9      	uxtb	r1, r3
 8003b66:	7dbb      	ldrb	r3, [r7, #22]
 8003b68:	7dfa      	ldrb	r2, [r7, #23]
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff fef0 	bl	8003950 <_ZN12MatrixDriver12BufferOffsetEhhh>
 8003b70:	4603      	mov	r3, r0
					plane) + CYCLES_PER_PIXEL;
 8003b72:	3302      	adds	r3, #2
 8003b74:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = Matrix_OE_Pin
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	89fb      	ldrh	r3, [r7, #14]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
					| rowSelects;
 8003b80:	8a7a      	ldrh	r2, [r7, #18]
 8003b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b86:	b292      	uxth	r2, r2
			bufferA[offset] = bufferB[offset] = Matrix_OE_Pin
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68d1      	ldr	r1, [r2, #12]
 8003b8e:	89fa      	ldrh	r2, [r7, #14]
 8003b90:	0052      	lsls	r2, r2, #1
 8003b92:	440a      	add	r2, r1
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	8013      	strh	r3, [r2, #0]
			offset++;
 8003b98:	89fb      	ldrh	r3, [r7, #14]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	81fb      	strh	r3, [r7, #14]

			uint16_t currentRowSelects =
					SET_IF(y & 0x01,Matrix_A_Pin)
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	015b      	lsls	r3, r3, #5
 8003ba2:	b21b      	sxth	r3, r3
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	b21a      	sxth	r2, r3
					|SET_IF(y & 0x02, Matrix_B_Pin)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	b21b      	sxth	r3, r3
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	b21b      	sxth	r3, r3
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	b21a      	sxth	r2, r3
					|SET_IF(y & 0x04, Matrix_C_Pin)
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	b21b      	sxth	r3, r3
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	b21b      	sxth	r3, r3
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	b21a      	sxth	r2, r3
					|SET_IF(y & 0x08, Matrix_D_Pin)
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	01db      	lsls	r3, r3, #7
 8003bce:	b21b      	sxth	r3, r3
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd4:	b21b      	sxth	r3, r3
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	b21a      	sxth	r2, r3
					|SET_IF(y & 0x10, Matrix_E_Pin);
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	b21b      	sxth	r3, r3
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	b21b      	sxth	r3, r3
 8003be6:	4313      	orrs	r3, r2
 8003be8:	b21b      	sxth	r3, r3
			uint16_t currentRowSelects =
 8003bea:	81bb      	strh	r3, [r7, #12]

			//Latch data, select next row, outputs still off
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	89fb      	ldrh	r3, [r7, #14]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
					| Matrix_OE_Pin | currentRowSelects;
 8003bf6:	89ba      	ldrh	r2, [r7, #12]
 8003bf8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003bfc:	b292      	uxth	r2, r2
			bufferA[offset] = bufferB[offset] = Matrix_LAT_Pin
 8003bfe:	801a      	strh	r2, [r3, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68d1      	ldr	r1, [r2, #12]
 8003c04:	89fa      	ldrh	r2, [r7, #14]
 8003c06:	0052      	lsls	r2, r2, #1
 8003c08:	440a      	add	r2, r1
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	8013      	strh	r3, [r2, #0]

			offset++;
 8003c0e:	89fb      	ldrh	r3, [r7, #14]
 8003c10:	3301      	adds	r3, #1
 8003c12:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	89ba      	ldrh	r2, [r7, #12]
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68d1      	ldr	r1, [r2, #12]
 8003c26:	89fa      	ldrh	r2, [r7, #14]
 8003c28:	0052      	lsls	r2, r2, #1
 8003c2a:	440a      	add	r2, r1
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	8013      	strh	r3, [r2, #0]

			//Bonus cycle to settle.  Probably not necessary but 3 trailing cycles feels odd
			offset++;
 8003c30:	89fb      	ldrh	r3, [r7, #14]
 8003c32:	3301      	adds	r3, #1
 8003c34:	81fb      	strh	r3, [r7, #14]
			bufferA[offset] = bufferB[offset] = currentRowSelects;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	89fb      	ldrh	r3, [r7, #14]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4413      	add	r3, r2
 8003c40:	89ba      	ldrh	r2, [r7, #12]
 8003c42:	801a      	strh	r2, [r3, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68d1      	ldr	r1, [r2, #12]
 8003c48:	89fa      	ldrh	r2, [r7, #14]
 8003c4a:	0052      	lsls	r2, r2, #1
 8003c4c:	440a      	add	r2, r1
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	8013      	strh	r3, [r2, #0]
		for (uint8_t plane = 0; plane < planes; plane++) {
 8003c52:	7dbb      	ldrb	r3, [r7, #22]
 8003c54:	3301      	adds	r3, #1
 8003c56:	75bb      	strb	r3, [r7, #22]
 8003c58:	e749      	b.n	8003aee <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x12e>
	for (uint8_t y = 0; y < height / 2; y++) {
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	75fb      	strb	r3, [r7, #23]
 8003c60:	e708      	b.n	8003a74 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0xb4>
		}
	}

	instance = this;
 8003c62:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE+0x2b8>)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6013      	str	r3, [r2, #0]
}
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	3ffffffc 	.word	0x3ffffffc
 8003c78:	20000090 	.word	0x20000090

08003c7c <_ZN12MatrixDriver4openEv>:

void MatrixDriver::open() {
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af04      	add	r7, sp, #16
 8003c82:	6078      	str	r0, [r7, #4]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	461c      	mov	r4, r3
			bufferSize, planes, planeSize);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	891b      	ldrh	r3, [r3, #8]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8003c94:	461a      	mov	r2, r3
			bufferSize, planes, planeSize);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	789b      	ldrb	r3, [r3, #2]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8003c9a:	4619      	mov	r1, r3
			bufferSize, planes, planeSize);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	88db      	ldrh	r3, [r3, #6]
	sprintf(buffer, "CFG: %ux%u Buffers: %u Planes: %u@%u \n", width, height,
 8003ca0:	9302      	str	r3, [sp, #8]
 8003ca2:	9101      	str	r1, [sp, #4]
 8003ca4:	9200      	str	r2, [sp, #0]
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	4602      	mov	r2, r0
 8003caa:	491a      	ldr	r1, [pc, #104]	; (8003d14 <_ZN12MatrixDriver4openEv+0x98>)
 8003cac:	481a      	ldr	r0, [pc, #104]	; (8003d18 <_ZN12MatrixDriver4openEv+0x9c>)
 8003cae:	f000 fd37 	bl	8004720 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
 8003cb2:	4819      	ldr	r0, [pc, #100]	; (8003d18 <_ZN12MatrixDriver4openEv+0x9c>)
 8003cb4:	f7fc fa94 	bl	80001e0 <strlen>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	230a      	movs	r3, #10
 8003cbe:	4916      	ldr	r1, [pc, #88]	; (8003d18 <_ZN12MatrixDriver4openEv+0x9c>)
 8003cc0:	4816      	ldr	r0, [pc, #88]	; (8003d1c <_ZN12MatrixDriver4openEv+0xa0>)
 8003cc2:	f7ff f9c6 	bl	8003052 <HAL_UART_Transmit>

	hdma_tim1_ch1.XferAbortCallback = DMA_Abort;
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <_ZN12MatrixDriver4openEv+0xa4>)
 8003cc8:	4a16      	ldr	r2, [pc, #88]	; (8003d24 <_ZN12MatrixDriver4openEv+0xa8>)
 8003cca:	651a      	str	r2, [r3, #80]	; 0x50
	hdma_tim1_ch1.XferCpltCallback = DMA_Complete;
 8003ccc:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <_ZN12MatrixDriver4openEv+0xa4>)
 8003cce:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <_ZN12MatrixDriver4openEv+0xac>)
 8003cd0:	63da      	str	r2, [r3, #60]	; 0x3c

	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <_ZN12MatrixDriver4openEv+0xb0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <_ZN12MatrixDriver4openEv+0xb0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce0:	60da      	str	r2, [r3, #12]

	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <_ZN12MatrixDriver4openEv+0xb0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff f87e 	bl	8002dec <TIM_CCxChannelCmd>

	HAL_TIM_Base_Start_IT(&htim1);
 8003cf0:	480e      	ldr	r0, [pc, #56]	; (8003d2c <_ZN12MatrixDriver4openEv+0xb0>)
 8003cf2:	f7fe fbfe 	bl	80024f2 <HAL_TIM_Base_Start_IT>

	nextDmaOffset = 0;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	829a      	strh	r2, [r3, #20]

	StartNextDma();
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fa59 	bl	80041b4 <_ZN12MatrixDriver12StartNextDmaEv>

	__HAL_IWDG_START(&hiwdg);
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <_ZN12MatrixDriver4openEv+0xb4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003d0a:	601a      	str	r2, [r3, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd90      	pop	{r4, r7, pc}
 8003d14:	08004dd4 	.word	0x08004dd4
 8003d18:	200000ac 	.word	0x200000ac
 8003d1c:	20000528 	.word	0x20000528
 8003d20:	200004bc 	.word	0x200004bc
 8003d24:	08003931 	.word	0x08003931
 8003d28:	08003911 	.word	0x08003911
 8003d2c:	20000568 	.word	0x20000568
 8003d30:	2000051c 	.word	0x2000051c

08003d34 <_ZN12MatrixDriver9PlaneBitsEh>:
	HAL_TIM_Base_Stop_IT(&htim1);

	nextDmaOffset = 0;
}

uint8_t MatrixDriver::PlaneBits(uint8_t value) {
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0x00;
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]

	if (value > 127) {
 8003d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	da06      	bge.n	8003d5a <_ZN12MatrixDriver9PlaneBitsEh+0x26>
		result |= 0x08;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	f043 0308 	orr.w	r3, r3, #8
 8003d52:	73fb      	strb	r3, [r7, #15]
		value -= 127;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	3b7f      	subs	r3, #127	; 0x7f
 8003d58:	70fb      	strb	r3, [r7, #3]
	}

	if (value > 64) {
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d906      	bls.n	8003d6e <_ZN12MatrixDriver9PlaneBitsEh+0x3a>
		result |= 0x04;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	73fb      	strb	r3, [r7, #15]
		value -= 32;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	3b20      	subs	r3, #32
 8003d6c:	70fb      	strb	r3, [r7, #3]
	}

	if (value > 32) {
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d906      	bls.n	8003d82 <_ZN12MatrixDriver9PlaneBitsEh+0x4e>
		result |= 0x02;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	73fb      	strb	r3, [r7, #15]
		value -= 8;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	3b08      	subs	r3, #8
 8003d80:	70fb      	strb	r3, [r7, #3]
	}

	if (value > 16) {
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d906      	bls.n	8003d96 <_ZN12MatrixDriver9PlaneBitsEh+0x62>
		result |= 0x01;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
		value -= 16;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	3b10      	subs	r3, #16
 8003d94:	70fb      	strb	r3, [r7, #3]
	}

	return result;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <_ZN12MatrixDriver4DumpEv>:

void MatrixDriver::Dump() {
 8003da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da8:	b09c      	sub	sp, #112	; 0x70
 8003daa:	af0e      	add	r7, sp, #56	; 0x38
 8003dac:	61f8      	str	r0, [r7, #28]
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	791b      	ldrb	r3, [r3, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <_ZN12MatrixDriver4DumpEv+0x18>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	e001      	b.n	8003dc0 <_ZN12MatrixDriver4DumpEv+0x1c>
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	633b      	str	r3, [r7, #48]	; 0x30

	for (uint16_t offset = 0; offset < bufferSize; offset++) {
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	891b      	ldrh	r3, [r3, #8]
 8003dca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	f080 80fa 	bcs.w	8003fc6 <_ZN12MatrixDriver4DumpEv+0x222>
		uint16_t val = outputBuffer[offset];
 8003dd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd8:	4413      	add	r3, r2
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (val & Matrix_LAT_Pin || val & Matrix_OE_Pin) {
 8003dde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <_ZN12MatrixDriver4DumpEv+0x50>
 8003de8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80e5 	beq.w	8003fbe <_ZN12MatrixDriver4DumpEv+0x21a>
			uint8_t r0, g0, b0, r1, g1, b1, a, b, c, d, lat, oe, clk;

			r0 = (val & Matrix_R0_Pin) > 0;
 8003df4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bfcc      	ite	gt
 8003dfe:	2301      	movgt	r3, #1
 8003e00:	2300      	movle	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			g0 = (val & Matrix_G0_Pin) > 0;
 8003e08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bfcc      	ite	gt
 8003e12:	2301      	movgt	r3, #1
 8003e14:	2300      	movle	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			b0 = (val & Matrix_B0_Pin) > 0;
 8003e1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bfcc      	ite	gt
 8003e26:	2301      	movgt	r3, #1
 8003e28:	2300      	movle	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			r1 = (val & Matrix_R1_Pin) > 0;
 8003e30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bfcc      	ite	gt
 8003e3a:	2301      	movgt	r3, #1
 8003e3c:	2300      	movle	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			g1 = (val & Matrix_G0_Pin) > 0;
 8003e44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bfcc      	ite	gt
 8003e4e:	2301      	movgt	r3, #1
 8003e50:	2300      	movle	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			b1 = (val & Matrix_B0_Pin) > 0;
 8003e58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bfcc      	ite	gt
 8003e62:	2301      	movgt	r3, #1
 8003e64:	2300      	movle	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			a = (val & Matrix_A_Pin) > 0;
 8003e6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bfcc      	ite	gt
 8003e76:	2301      	movgt	r3, #1
 8003e78:	2300      	movle	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			b = (val & Matrix_B_Pin) > 0;
 8003e80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bfcc      	ite	gt
 8003e8a:	2301      	movgt	r3, #1
 8003e8c:	2300      	movle	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			c = (val & Matrix_C_Pin) > 0;
 8003e94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bfcc      	ite	gt
 8003e9e:	2301      	movgt	r3, #1
 8003ea0:	2300      	movle	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			d = (val & Matrix_D_Pin) > 0;
 8003ea8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bfcc      	ite	gt
 8003eb2:	2301      	movgt	r3, #1
 8003eb4:	2300      	movle	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			lat = (val & Matrix_LAT_Pin) > 0;
 8003ebc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bfcc      	ite	gt
 8003ec6:	2301      	movgt	r3, #1
 8003ec8:	2300      	movle	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			oe = (val & Matrix_OE_Pin) > 0;
 8003ed0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bfcc      	ite	gt
 8003eda:	2301      	movgt	r3, #1
 8003edc:	2300      	movle	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			clk = (val & Matrix_CLK_Pin) > 0;
 8003ee4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bfcc      	ite	gt
 8003eee:	2301      	movgt	r3, #1
 8003ef0:	2300      	movle	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			uint8_t rowVal = a | b << 1 | c << 2 | d << 3;
 8003ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	b25a      	sxtb	r2, r3
 8003f00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f04:	4313      	orrs	r3, r2
 8003f06:	b25a      	sxtb	r2, r3
 8003f08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	b25b      	sxtb	r3, r3
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b25a      	sxtb	r2, r3
 8003f14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	b25b      	sxtb	r3, r3
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	b25b      	sxtb	r3, r3
 8003f20:	f887 3020 	strb.w	r3, [r7, #32]

			sprintf(buffer,
 8003f24:	f8b7 c036 	ldrh.w	ip, [r7, #54]	; 0x36
 8003f28:	f8b7 e02e 	ldrh.w	lr, [r7, #46]	; 0x2e
 8003f2c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003f30:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 8003f34:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 8003f38:	f897 502a 	ldrb.w	r5, [r7, #42]	; 0x2a
 8003f3c:	f897 6029 	ldrb.w	r6, [r7, #41]	; 0x29
 8003f40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f4a:	617a      	str	r2, [r7, #20]
 8003f4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003f56:	60fa      	str	r2, [r7, #12]
 8003f58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	f897 8023 	ldrb.w	r8, [r7, #35]	; 0x23
 8003f68:	4643      	mov	r3, r8
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8003f70:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003f74:	930d      	str	r3, [sp, #52]	; 0x34
 8003f76:	920c      	str	r2, [sp, #48]	; 0x30
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	920a      	str	r2, [sp, #40]	; 0x28
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	9309      	str	r3, [sp, #36]	; 0x24
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	9208      	str	r2, [sp, #32]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	9307      	str	r3, [sp, #28]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	9206      	str	r2, [sp, #24]
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	9305      	str	r3, [sp, #20]
 8003f94:	9604      	str	r6, [sp, #16]
 8003f96:	9503      	str	r5, [sp, #12]
 8003f98:	9402      	str	r4, [sp, #8]
 8003f9a:	9001      	str	r0, [sp, #4]
 8003f9c:	9100      	str	r1, [sp, #0]
 8003f9e:	4673      	mov	r3, lr
 8003fa0:	4662      	mov	r2, ip
 8003fa2:	490b      	ldr	r1, [pc, #44]	; (8003fd0 <_ZN12MatrixDriver4DumpEv+0x22c>)
 8003fa4:	480b      	ldr	r0, [pc, #44]	; (8003fd4 <_ZN12MatrixDriver4DumpEv+0x230>)
 8003fa6:	f000 fbbb 	bl	8004720 <siprintf>
					"%04u : %02x - %x %x %x - %x %x %x @ %x %x %x %x - %d - %u - %u - %u\n",
					offset, val, r0, g0, b0, r1, g1, b1, a, b, c, d,
					rowVal, lat, oe, clk);

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 10);
 8003faa:	480a      	ldr	r0, [pc, #40]	; (8003fd4 <_ZN12MatrixDriver4DumpEv+0x230>)
 8003fac:	f7fc f918 	bl	80001e0 <strlen>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	230a      	movs	r3, #10
 8003fb6:	4907      	ldr	r1, [pc, #28]	; (8003fd4 <_ZN12MatrixDriver4DumpEv+0x230>)
 8003fb8:	4807      	ldr	r0, [pc, #28]	; (8003fd8 <_ZN12MatrixDriver4DumpEv+0x234>)
 8003fba:	f7ff f84a 	bl	8003052 <HAL_UART_Transmit>
	for (uint16_t offset = 0; offset < bufferSize; offset++) {
 8003fbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003fc4:	e6ff      	b.n	8003dc6 <_ZN12MatrixDriver4DumpEv+0x22>
//				}
//			}
//
//		}
//	}
}
 8003fc6:	bf00      	nop
 8003fc8:	3738      	adds	r7, #56	; 0x38
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd0:	08004dfc 	.word	0x08004dfc
 8003fd4:	200000ac 	.word	0x200000ac
 8003fd8:	20000528 	.word	0x20000528

08003fdc <_ZN12MatrixDriver8SetPixelEhhhhh>:

void MatrixDriver::SetPixel(uint8_t x, uint8_t y, uint8_t r, uint8_t g,
		uint8_t b) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	4608      	mov	r0, r1
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	70fb      	strb	r3, [r7, #3]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	70bb      	strb	r3, [r7, #2]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	707b      	strb	r3, [r7, #1]
	uint16_t rBit, gBit, bBit;

//Set data into the buffer we aren't sending at the moment
	uint16_t *outputBuffer = sendBufferA ? bufferB : bufferA;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	791b      	ldrb	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <_ZN12MatrixDriver8SetPixelEhhhhh+0x28>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	e001      	b.n	8004008 <_ZN12MatrixDriver8SetPixelEhhhhh+0x2c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	61bb      	str	r3, [r7, #24]

	if (y < (height / 2)) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	785b      	ldrb	r3, [r3, #1]
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	b2db      	uxtb	r3, r3
 8004012:	78ba      	ldrb	r2, [r7, #2]
 8004014:	429a      	cmp	r2, r3
 8004016:	d206      	bcs.n	8004026 <_ZN12MatrixDriver8SetPixelEhhhhh+0x4a>
		rBit = Matrix_R0_Pin;
 8004018:	2301      	movs	r3, #1
 800401a:	84fb      	strh	r3, [r7, #38]	; 0x26
		gBit = Matrix_G0_Pin;
 800401c:	2302      	movs	r3, #2
 800401e:	84bb      	strh	r3, [r7, #36]	; 0x24
		bBit = Matrix_B0_Pin;
 8004020:	2304      	movs	r3, #4
 8004022:	847b      	strh	r3, [r7, #34]	; 0x22
 8004024:	e007      	b.n	8004036 <_ZN12MatrixDriver8SetPixelEhhhhh+0x5a>
	} else {
		rBit = Matrix_R1_Pin;
 8004026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800402a:	84fb      	strh	r3, [r7, #38]	; 0x26
		gBit = Matrix_G1_Pin;
 800402c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004030:	84bb      	strh	r3, [r7, #36]	; 0x24
		bBit = Matrix_B1_Pin;
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	uint16_t pixelMask = rBit | gBit | bBit;
 8004036:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800403a:	4313      	orrs	r3, r2
 800403c:	b29a      	uxth	r2, r3
 800403e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004040:	4313      	orrs	r3, r2
 8004042:	82fb      	strh	r3, [r7, #22]

	uint8_t rPlanes = PlaneBits(r);
 8004044:	787b      	ldrb	r3, [r7, #1]
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff fe73 	bl	8003d34 <_ZN12MatrixDriver9PlaneBitsEh>
 800404e:	4603      	mov	r3, r0
 8004050:	757b      	strb	r3, [r7, #21]
	uint8_t gPlanes = PlaneBits(g);
 8004052:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004056:	4619      	mov	r1, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fe6b 	bl	8003d34 <_ZN12MatrixDriver9PlaneBitsEh>
 800405e:	4603      	mov	r3, r0
 8004060:	753b      	strb	r3, [r7, #20]
	uint8_t bPlanes = PlaneBits(b);
 8004062:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff fe63 	bl	8003d34 <_ZN12MatrixDriver9PlaneBitsEh>
 800406e:	4603      	mov	r3, r0
 8004070:	74fb      	strb	r3, [r7, #19]

	for (int plane = 0; plane < planes; plane++) {
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	789b      	ldrb	r3, [r3, #2]
 800407a:	461a      	mov	r2, r3
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	4293      	cmp	r3, r2
 8004080:	da63      	bge.n	800414a <_ZN12MatrixDriver8SetPixelEhhhhh+0x16e>
		uint16_t planePixelBits = (
				(rPlanes & (0x01 << plane)) ? rBit : 0)
 8004082:	7d7a      	ldrb	r2, [r7, #21]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	fa42 f303 	asr.w	r3, r2, r3
 800408a:	f003 0301 	and.w	r3, r3, #1
				| ((gPlanes & (0x01 << plane)) ? gBit : 0)
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <_ZN12MatrixDriver8SetPixelEhhhhh+0xbc>
 8004092:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004096:	e000      	b.n	800409a <_ZN12MatrixDriver8SetPixelEhhhhh+0xbe>
 8004098:	2200      	movs	r2, #0
 800409a:	7d39      	ldrb	r1, [r7, #20]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	fa41 f303 	asr.w	r3, r1, r3
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <_ZN12MatrixDriver8SetPixelEhhhhh+0xd4>
 80040aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80040ae:	e000      	b.n	80040b2 <_ZN12MatrixDriver8SetPixelEhhhhh+0xd6>
 80040b0:	2300      	movs	r3, #0
 80040b2:	4313      	orrs	r3, r2
 80040b4:	b21a      	sxth	r2, r3
				| ((bPlanes & (0x01 << plane)) ? bBit : 0);
 80040b6:	7cf9      	ldrb	r1, [r7, #19]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	fa41 f303 	asr.w	r3, r1, r3
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <_ZN12MatrixDriver8SetPixelEhhhhh+0xf0>
 80040c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80040ca:	e000      	b.n	80040ce <_ZN12MatrixDriver8SetPixelEhhhhh+0xf2>
 80040cc:	2300      	movs	r3, #0
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b21b      	sxth	r3, r3
		uint16_t planePixelBits = (
 80040d2:	823b      	strh	r3, [r7, #16]
//				x, y, rPlanes, gPlanes, bPlanes, planePixelBits, pixelMask);

//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
//				10);

		uint16_t offset = BufferOffset(x, y, plane);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	78ba      	ldrb	r2, [r7, #2]
 80040da:	78f9      	ldrb	r1, [r7, #3]
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fc37 	bl	8003950 <_ZN12MatrixDriver12BufferOffsetEhhh>
 80040e2:	4603      	mov	r3, r0
 80040e4:	81fb      	strh	r3, [r7, #14]

		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 80040e6:	89fb      	ldrh	r3, [r7, #14]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4413      	add	r3, r2
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b21a      	sxth	r2, r3
 80040f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	4013      	ands	r3, r2
 80040fc:	b21a      	sxth	r2, r3
				| planePixelBits;
 80040fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	b219      	sxth	r1, r3
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8004106:	89fb      	ldrh	r3, [r7, #14]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4413      	add	r3, r2
				| planePixelBits;
 800410e:	b28a      	uxth	r2, r1
		outputBuffer[offset] = (outputBuffer[offset] & ~pixelMask)
 8004110:	801a      	strh	r2, [r3, #0]
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8004112:	89fb      	ldrh	r3, [r7, #14]
 8004114:	3301      	adds	r3, #1
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4413      	add	r3, r2
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b21a      	sxth	r2, r3
 8004120:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004124:	43db      	mvns	r3, r3
 8004126:	b21b      	sxth	r3, r3
 8004128:	4013      	ands	r3, r2
 800412a:	b21a      	sxth	r2, r3
				| planePixelBits;
 800412c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	b219      	sxth	r1, r3
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8004134:	89fb      	ldrh	r3, [r7, #14]
 8004136:	3301      	adds	r3, #1
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4413      	add	r3, r2
				| planePixelBits;
 800413e:	b28a      	uxth	r2, r1
		outputBuffer[offset + 1] = (outputBuffer[offset + 1] & ~pixelMask)
 8004140:	801a      	strh	r2, [r3, #0]
	for (int plane = 0; plane < planes; plane++) {
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3301      	adds	r3, #1
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	e795      	b.n	8004076 <_ZN12MatrixDriver8SetPixelEhhhhh+0x9a>
	}
}
 800414a:	bf00      	nop
 800414c:	3728      	adds	r7, #40	; 0x28
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <_ZN12MatrixDriver10SwapBufferEv>:

void MatrixDriver::SwapBuffer() {
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	sendBufferA = !sendBufferA;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	791b      	ldrb	r3, [r3, #4]
 8004160:	f083 0301 	eor.w	r3, r3, #1
 8004164:	b2da      	uxtb	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	711a      	strb	r2, [r3, #4]

	completeSwap = true;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	715a      	strb	r2, [r3, #5]

	HAL_DMA_Abort_IT(&hdma_tim1_ch1);
 8004170:	4803      	ldr	r0, [pc, #12]	; (8004180 <_ZN12MatrixDriver10SwapBufferEv+0x2c>)
 8004172:	f7fd f885 	bl	8001280 <HAL_DMA_Abort_IT>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	200004bc 	.word	0x200004bc

08004184 <_ZN12MatrixDriver6HandleEv>:

void MatrixDriver::Handle() {
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 800418c:	4808      	ldr	r0, [pc, #32]	; (80041b0 <_ZN12MatrixDriver6HandleEv+0x2c>)
 800418e:	f7fd fcd5 	bl	8001b3c <HAL_IWDG_Refresh>

	if (completeSwap) {
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	795b      	ldrb	r3, [r3, #5]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <_ZN12MatrixDriver6HandleEv+0x1c>
		completeSwap = false;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	715a      	strb	r2, [r3, #5]
	}

	StartNextDma();
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f807 	bl	80041b4 <_ZN12MatrixDriver12StartNextDmaEv>
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000051c 	.word	0x2000051c

080041b4 <_ZN12MatrixDriver12StartNextDmaEv>:

uint8_t const AAR_BY_PLANE[] = { 1, 2, 4, 8, 16, 32, 64 };

void MatrixDriver::StartNextDma() {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	uint16_t plane = nextDmaOffset / planeSize;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8a9a      	ldrh	r2, [r3, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	88db      	ldrh	r3, [r3, #6]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	81fb      	strh	r3, [r7, #14]
	uint16_t *outputBuffer = (sendBufferA ? bufferA : bufferB);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	791b      	ldrb	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <_ZN12MatrixDriver12StartNextDmaEv+0x24>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	e001      	b.n	80041dc <_ZN12MatrixDriver12StartNextDmaEv+0x28>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	60bb      	str	r3, [r7, #8]

	htim1.Instance->ARR = AAR_BY_PLANE[plane];
 80041de:	89fb      	ldrh	r3, [r7, #14]
 80041e0:	4a12      	ldr	r2, [pc, #72]	; (800422c <_ZN12MatrixDriver12StartNextDmaEv+0x78>)
 80041e2:	5cd2      	ldrb	r2, [r2, r3]
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <_ZN12MatrixDriver12StartNextDmaEv+0x7c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->EGR = TIM_EGR_UG;
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <_ZN12MatrixDriver12StartNextDmaEv+0x7c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2201      	movs	r2, #1
 80041f0:	615a      	str	r2, [r3, #20]

	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) outputBuffer,
 80041f2:	68b9      	ldr	r1, [r7, #8]
			(uint32_t) &(GPIOB->ODR), planeSize);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	88db      	ldrh	r3, [r3, #6]
	HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t) outputBuffer,
 80041f8:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <_ZN12MatrixDriver12StartNextDmaEv+0x80>)
 80041fa:	480f      	ldr	r0, [pc, #60]	; (8004238 <_ZN12MatrixDriver12StartNextDmaEv+0x84>)
 80041fc:	f7fc ffe8 	bl	80011d0 <HAL_DMA_Start_IT>

	nextDmaOffset += planeSize;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8a9a      	ldrh	r2, [r3, #20]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	88db      	ldrh	r3, [r3, #6]
 8004208:	4413      	add	r3, r2
 800420a:	b29a      	uxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	829a      	strh	r2, [r3, #20]

	if (nextDmaOffset > bufferSize) {
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8a9a      	ldrh	r2, [r3, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	891b      	ldrh	r3, [r3, #8]
 8004218:	429a      	cmp	r2, r3
 800421a:	d902      	bls.n	8004222 <_ZN12MatrixDriver12StartNextDmaEv+0x6e>
		nextDmaOffset = 0;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	829a      	strh	r2, [r3, #20]
	}
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	08004e7c 	.word	0x08004e7c
 8004230:	20000568 	.word	0x20000568
 8004234:	40020414 	.word	0x40020414
 8004238:	200004bc 	.word	0x200004bc

0800423c <cpp_main>:
//2 - advancing pixel
//3 - image
//4 - Debugging
#define DRAW 1

extern "C" int cpp_main(void) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af02      	add	r7, sp, #8
	__HAL_DBGMCU_FREEZE_IWDG();
 8004242:	4b73      	ldr	r3, [pc, #460]	; (8004410 <cpp_main+0x1d4>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4a72      	ldr	r2, [pc, #456]	; (8004410 <cpp_main+0x1d4>)
 8004248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800424c:	6093      	str	r3, [r2, #8]

	uint32_t start = HAL_GetTick();
 800424e:	f7fc fdf3 	bl	8000e38 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

	uint16_t color_shift = 1;
 8004254:	2301      	movs	r3, #1
 8004256:	83fb      	strh	r3, [r7, #30]

	uint16_t pos = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	81fb      	strh	r3, [r7, #14]

#if DRAW == 1
	for (uint16_t col = 0; col < PANEL_WIDTH; col++) {
 800425c:	2300      	movs	r3, #0
 800425e:	83bb      	strh	r3, [r7, #28]
 8004260:	8bbb      	ldrh	r3, [r7, #28]
 8004262:	2b3f      	cmp	r3, #63	; 0x3f
 8004264:	d855      	bhi.n	8004312 <cpp_main+0xd6>
		for (uint16_t row = 0; row < PANEL_HEIGHT; row++) {
 8004266:	2300      	movs	r3, #0
 8004268:	837b      	strh	r3, [r7, #26]
 800426a:	8b7b      	ldrh	r3, [r7, #26]
 800426c:	2b1f      	cmp	r3, #31
 800426e:	d84c      	bhi.n	800430a <cpp_main+0xce>

			uint8_t r, g, b;

			r = ((row + col + color_shift) % 4) == 0 ? 255 / col : 0;
 8004270:	8b7a      	ldrh	r2, [r7, #26]
 8004272:	8bbb      	ldrh	r3, [r7, #28]
 8004274:	441a      	add	r2, r3
 8004276:	8bfb      	ldrh	r3, [r7, #30]
 8004278:	4413      	add	r3, r2
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d105      	bne.n	800428e <cpp_main+0x52>
 8004282:	8bbb      	ldrh	r3, [r7, #28]
 8004284:	22ff      	movs	r2, #255	; 0xff
 8004286:	fb92 f3f3 	sdiv	r3, r2, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	e000      	b.n	8004290 <cpp_main+0x54>
 800428e:	2300      	movs	r3, #0
 8004290:	737b      	strb	r3, [r7, #13]
			g = ((row + col + color_shift) % 4) == 1 ? 255 / row : 0;
 8004292:	8b7a      	ldrh	r2, [r7, #26]
 8004294:	8bbb      	ldrh	r3, [r7, #28]
 8004296:	441a      	add	r2, r3
 8004298:	8bfb      	ldrh	r3, [r7, #30]
 800429a:	4413      	add	r3, r2
 800429c:	425a      	negs	r2, r3
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	f002 0203 	and.w	r2, r2, #3
 80042a6:	bf58      	it	pl
 80042a8:	4253      	negpl	r3, r2
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <cpp_main+0x7e>
 80042ae:	8b7b      	ldrh	r3, [r7, #26]
 80042b0:	22ff      	movs	r2, #255	; 0xff
 80042b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	e000      	b.n	80042bc <cpp_main+0x80>
 80042ba:	2300      	movs	r3, #0
 80042bc:	733b      	strb	r3, [r7, #12]
			b = ((row + col + color_shift) % 4) == 2 ? 4 * col : 0;
 80042be:	8b7a      	ldrh	r2, [r7, #26]
 80042c0:	8bbb      	ldrh	r3, [r7, #28]
 80042c2:	441a      	add	r2, r3
 80042c4:	8bfb      	ldrh	r3, [r7, #30]
 80042c6:	4413      	add	r3, r2
 80042c8:	425a      	negs	r2, r3
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	f002 0203 	and.w	r2, r2, #3
 80042d2:	bf58      	it	pl
 80042d4:	4253      	negpl	r3, r2
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d104      	bne.n	80042e4 <cpp_main+0xa8>
 80042da:	8bbb      	ldrh	r3, [r7, #28]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	e000      	b.n	80042e6 <cpp_main+0xaa>
 80042e4:	2300      	movs	r3, #0
 80042e6:	72fb      	strb	r3, [r7, #11]

			matrix.SetPixel(row, col, r, g, b);
 80042e8:	8b7b      	ldrh	r3, [r7, #26]
 80042ea:	b2d9      	uxtb	r1, r3
 80042ec:	8bbb      	ldrh	r3, [r7, #28]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	7b78      	ldrb	r0, [r7, #13]
 80042f2:	7afb      	ldrb	r3, [r7, #11]
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	7b3b      	ldrb	r3, [r7, #12]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	4603      	mov	r3, r0
 80042fc:	4845      	ldr	r0, [pc, #276]	; (8004414 <cpp_main+0x1d8>)
 80042fe:	f7ff fe6d 	bl	8003fdc <_ZN12MatrixDriver8SetPixelEhhhhh>
		for (uint16_t row = 0; row < PANEL_HEIGHT; row++) {
 8004302:	8b7b      	ldrh	r3, [r7, #26]
 8004304:	3301      	adds	r3, #1
 8004306:	837b      	strh	r3, [r7, #26]
 8004308:	e7af      	b.n	800426a <cpp_main+0x2e>
	for (uint16_t col = 0; col < PANEL_WIDTH; col++) {
 800430a:	8bbb      	ldrh	r3, [r7, #28]
 800430c:	3301      	adds	r3, #1
 800430e:	83bb      	strh	r3, [r7, #28]
 8004310:	e7a6      	b.n	8004260 <cpp_main+0x24>
			matrix.SetPixel(col, row, r, g, b);
		}
	}
#endif

	lastUpdate = HAL_GetTick();
 8004312:	f7fc fd91 	bl	8000e38 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <cpp_main+0x1dc>)
 800431a:	601a      	str	r2, [r3, #0]

	color_shift++;
 800431c:	8bfb      	ldrh	r3, [r7, #30]
 800431e:	3301      	adds	r3, #1
 8004320:	83fb      	strh	r3, [r7, #30]

	matrix.Dump();
 8004322:	483c      	ldr	r0, [pc, #240]	; (8004414 <cpp_main+0x1d8>)
 8004324:	f7ff fd3e 	bl	8003da4 <_ZN12MatrixDriver4DumpEv>

	matrix.SwapBuffer();
 8004328:	483a      	ldr	r0, [pc, #232]	; (8004414 <cpp_main+0x1d8>)
 800432a:	f7ff ff13 	bl	8004154 <_ZN12MatrixDriver10SwapBufferEv>

	uint32_t duration = HAL_GetTick() - start;
 800432e:	f7fc fd83 	bl	8000e38 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	607b      	str	r3, [r7, #4]

	sprintf(buffer, "Setup Duration: %lu\n", duration);
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4937      	ldr	r1, [pc, #220]	; (800441c <cpp_main+0x1e0>)
 800433e:	4838      	ldr	r0, [pc, #224]	; (8004420 <cpp_main+0x1e4>)
 8004340:	f000 f9ee 	bl	8004720 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 500);
 8004344:	4836      	ldr	r0, [pc, #216]	; (8004420 <cpp_main+0x1e4>)
 8004346:	f7fb ff4b 	bl	80001e0 <strlen>
 800434a:	4603      	mov	r3, r0
 800434c:	b29a      	uxth	r2, r3
 800434e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004352:	4933      	ldr	r1, [pc, #204]	; (8004420 <cpp_main+0x1e4>)
 8004354:	4833      	ldr	r0, [pc, #204]	; (8004424 <cpp_main+0x1e8>)
 8004356:	f7fe fe7c 	bl	8003052 <HAL_UART_Transmit>

	matrix.open();
 800435a:	482e      	ldr	r0, [pc, #184]	; (8004414 <cpp_main+0x1d8>)
 800435c:	f7ff fc8e 	bl	8003c7c <_ZN12MatrixDriver4openEv>
	while (1) {

//		HAL_Delay(5);

#if DRAW == 1
		for (uint16_t col = 0; col < PANEL_WIDTH; col++) {
 8004360:	2300      	movs	r3, #0
 8004362:	833b      	strh	r3, [r7, #24]
 8004364:	8b3b      	ldrh	r3, [r7, #24]
 8004366:	2b3f      	cmp	r3, #63	; 0x3f
 8004368:	d84a      	bhi.n	8004400 <cpp_main+0x1c4>
			for (uint16_t row = 0; row < PANEL_HEIGHT; row++) {
 800436a:	2300      	movs	r3, #0
 800436c:	82fb      	strh	r3, [r7, #22]
 800436e:	8afb      	ldrh	r3, [r7, #22]
 8004370:	2b1f      	cmp	r3, #31
 8004372:	d841      	bhi.n	80043f8 <cpp_main+0x1bc>

				uint8_t r, g, b;

				r = ((row + col + color_shift) % 4) == 0 ? 255 : 0;
 8004374:	8afa      	ldrh	r2, [r7, #22]
 8004376:	8b3b      	ldrh	r3, [r7, #24]
 8004378:	441a      	add	r2, r3
 800437a:	8bfb      	ldrh	r3, [r7, #30]
 800437c:	4413      	add	r3, r2
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <cpp_main+0x14e>
 8004386:	23ff      	movs	r3, #255	; 0xff
 8004388:	e000      	b.n	800438c <cpp_main+0x150>
 800438a:	2300      	movs	r3, #0
 800438c:	70fb      	strb	r3, [r7, #3]
				g = ((row + col + color_shift) % 4) == 1 ? 255 : 0;
 800438e:	8afa      	ldrh	r2, [r7, #22]
 8004390:	8b3b      	ldrh	r3, [r7, #24]
 8004392:	441a      	add	r2, r3
 8004394:	8bfb      	ldrh	r3, [r7, #30]
 8004396:	4413      	add	r3, r2
 8004398:	425a      	negs	r2, r3
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	f002 0203 	and.w	r2, r2, #3
 80043a2:	bf58      	it	pl
 80043a4:	4253      	negpl	r3, r2
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <cpp_main+0x172>
 80043aa:	23ff      	movs	r3, #255	; 0xff
 80043ac:	e000      	b.n	80043b0 <cpp_main+0x174>
 80043ae:	2300      	movs	r3, #0
 80043b0:	70bb      	strb	r3, [r7, #2]
				b = ((row + col + color_shift) % 4) == 2 ? 255 : 0;
 80043b2:	8afa      	ldrh	r2, [r7, #22]
 80043b4:	8b3b      	ldrh	r3, [r7, #24]
 80043b6:	441a      	add	r2, r3
 80043b8:	8bfb      	ldrh	r3, [r7, #30]
 80043ba:	4413      	add	r3, r2
 80043bc:	425a      	negs	r2, r3
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	f002 0203 	and.w	r2, r2, #3
 80043c6:	bf58      	it	pl
 80043c8:	4253      	negpl	r3, r2
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d101      	bne.n	80043d2 <cpp_main+0x196>
 80043ce:	23ff      	movs	r3, #255	; 0xff
 80043d0:	e000      	b.n	80043d4 <cpp_main+0x198>
 80043d2:	2300      	movs	r3, #0
 80043d4:	707b      	strb	r3, [r7, #1]

				matrix.SetPixel(col, row, r, g, b);
 80043d6:	8b3b      	ldrh	r3, [r7, #24]
 80043d8:	b2d9      	uxtb	r1, r3
 80043da:	8afb      	ldrh	r3, [r7, #22]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	78f8      	ldrb	r0, [r7, #3]
 80043e0:	787b      	ldrb	r3, [r7, #1]
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	78bb      	ldrb	r3, [r7, #2]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	4603      	mov	r3, r0
 80043ea:	480a      	ldr	r0, [pc, #40]	; (8004414 <cpp_main+0x1d8>)
 80043ec:	f7ff fdf6 	bl	8003fdc <_ZN12MatrixDriver8SetPixelEhhhhh>
			for (uint16_t row = 0; row < PANEL_HEIGHT; row++) {
 80043f0:	8afb      	ldrh	r3, [r7, #22]
 80043f2:	3301      	adds	r3, #1
 80043f4:	82fb      	strh	r3, [r7, #22]
 80043f6:	e7ba      	b.n	800436e <cpp_main+0x132>
		for (uint16_t col = 0; col < PANEL_WIDTH; col++) {
 80043f8:	8b3b      	ldrh	r3, [r7, #24]
 80043fa:	3301      	adds	r3, #1
 80043fc:	833b      	strh	r3, [r7, #24]
 80043fe:	e7b1      	b.n	8004364 <cpp_main+0x128>
			}
		}
		color_shift++;
 8004400:	8bfb      	ldrh	r3, [r7, #30]
 8004402:	3301      	adds	r3, #1
 8004404:	83fb      	strh	r3, [r7, #30]

		matrix.SwapBuffer();
 8004406:	4803      	ldr	r0, [pc, #12]	; (8004414 <cpp_main+0x1d8>)
 8004408:	f7ff fea4 	bl	8004154 <_ZN12MatrixDriver10SwapBufferEv>
//					b = ((row + col + color_shift) % 4) == 2 ? 255 : 0;
//
//					matrix.SetPixel(col, row, r, g, b);
//				}
//			}
	}
 800440c:	e7a8      	b.n	8004360 <cpp_main+0x124>
 800440e:	bf00      	nop
 8004410:	e0042000 	.word	0xe0042000
 8004414:	20000094 	.word	0x20000094
 8004418:	200004ac 	.word	0x200004ac
 800441c:	08004e44 	.word	0x08004e44
 8004420:	200000ac 	.word	0x200000ac
 8004424:	20000528 	.word	0x20000528

08004428 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d10a      	bne.n	800444e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800443e:	4293      	cmp	r3, r2
 8004440:	d105      	bne.n	800444e <_Z41__static_initialization_and_destruction_0ii+0x26>
MatrixDriver matrix(PANEL_WIDTH, PANEL_HEIGHT, MatrixDriver::ScanType::SCAN_16);
 8004442:	2300      	movs	r3, #0
 8004444:	2220      	movs	r2, #32
 8004446:	2140      	movs	r1, #64	; 0x40
 8004448:	4803      	ldr	r0, [pc, #12]	; (8004458 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800444a:	f7ff fab9 	bl	80039c0 <_ZN12MatrixDriverC1EhhNS_8ScanTypeE>
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000094 	.word	0x20000094

0800445c <_GLOBAL__sub_I_matrix>:
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
 8004460:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004464:	2001      	movs	r0, #1
 8004466:	f7ff ffdf 	bl	8004428 <_Z41__static_initialization_and_destruction_0ii>
 800446a:	bd80      	pop	{r7, pc}

0800446c <_Znaj>:
 800446c:	f000 b800 	b.w	8004470 <_Znwj>

08004470 <_Znwj>:
 8004470:	b510      	push	{r4, lr}
 8004472:	2800      	cmp	r0, #0
 8004474:	bf14      	ite	ne
 8004476:	4604      	movne	r4, r0
 8004478:	2401      	moveq	r4, #1
 800447a:	4620      	mov	r0, r4
 800447c:	f000 f844 	bl	8004508 <malloc>
 8004480:	b930      	cbnz	r0, 8004490 <_Znwj+0x20>
 8004482:	f000 f807 	bl	8004494 <_ZSt15get_new_handlerv>
 8004486:	b908      	cbnz	r0, 800448c <_Znwj+0x1c>
 8004488:	f000 f80c 	bl	80044a4 <abort>
 800448c:	4780      	blx	r0
 800448e:	e7f4      	b.n	800447a <_Znwj+0xa>
 8004490:	bd10      	pop	{r4, pc}
	...

08004494 <_ZSt15get_new_handlerv>:
 8004494:	4b02      	ldr	r3, [pc, #8]	; (80044a0 <_ZSt15get_new_handlerv+0xc>)
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	f3bf 8f5b 	dmb	ish
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	200004b0 	.word	0x200004b0

080044a4 <abort>:
 80044a4:	b508      	push	{r3, lr}
 80044a6:	2006      	movs	r0, #6
 80044a8:	f000 f91e 	bl	80046e8 <raise>
 80044ac:	2001      	movs	r0, #1
 80044ae:	f7fc fbdd 	bl	8000c6c <_exit>
	...

080044b4 <__errno>:
 80044b4:	4b01      	ldr	r3, [pc, #4]	; (80044bc <__errno+0x8>)
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	2000000c 	.word	0x2000000c

080044c0 <__libc_init_array>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4e0d      	ldr	r6, [pc, #52]	; (80044f8 <__libc_init_array+0x38>)
 80044c4:	4c0d      	ldr	r4, [pc, #52]	; (80044fc <__libc_init_array+0x3c>)
 80044c6:	1ba4      	subs	r4, r4, r6
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	2500      	movs	r5, #0
 80044cc:	42a5      	cmp	r5, r4
 80044ce:	d109      	bne.n	80044e4 <__libc_init_array+0x24>
 80044d0:	4e0b      	ldr	r6, [pc, #44]	; (8004500 <__libc_init_array+0x40>)
 80044d2:	4c0c      	ldr	r4, [pc, #48]	; (8004504 <__libc_init_array+0x44>)
 80044d4:	f000 fc72 	bl	8004dbc <_init>
 80044d8:	1ba4      	subs	r4, r4, r6
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	2500      	movs	r5, #0
 80044de:	42a5      	cmp	r5, r4
 80044e0:	d105      	bne.n	80044ee <__libc_init_array+0x2e>
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044e8:	4798      	blx	r3
 80044ea:	3501      	adds	r5, #1
 80044ec:	e7ee      	b.n	80044cc <__libc_init_array+0xc>
 80044ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044f2:	4798      	blx	r3
 80044f4:	3501      	adds	r5, #1
 80044f6:	e7f2      	b.n	80044de <__libc_init_array+0x1e>
 80044f8:	08004ec0 	.word	0x08004ec0
 80044fc:	08004ec0 	.word	0x08004ec0
 8004500:	08004ec0 	.word	0x08004ec0
 8004504:	08004ec8 	.word	0x08004ec8

08004508 <malloc>:
 8004508:	4b02      	ldr	r3, [pc, #8]	; (8004514 <malloc+0xc>)
 800450a:	4601      	mov	r1, r0
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	f000 b859 	b.w	80045c4 <_malloc_r>
 8004512:	bf00      	nop
 8004514:	2000000c 	.word	0x2000000c

08004518 <memset>:
 8004518:	4402      	add	r2, r0
 800451a:	4603      	mov	r3, r0
 800451c:	4293      	cmp	r3, r2
 800451e:	d100      	bne.n	8004522 <memset+0xa>
 8004520:	4770      	bx	lr
 8004522:	f803 1b01 	strb.w	r1, [r3], #1
 8004526:	e7f9      	b.n	800451c <memset+0x4>

08004528 <_free_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4605      	mov	r5, r0
 800452c:	2900      	cmp	r1, #0
 800452e:	d045      	beq.n	80045bc <_free_r+0x94>
 8004530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004534:	1f0c      	subs	r4, r1, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	bfb8      	it	lt
 800453a:	18e4      	addlt	r4, r4, r3
 800453c:	f000 f910 	bl	8004760 <__malloc_lock>
 8004540:	4a1f      	ldr	r2, [pc, #124]	; (80045c0 <_free_r+0x98>)
 8004542:	6813      	ldr	r3, [r2, #0]
 8004544:	4610      	mov	r0, r2
 8004546:	b933      	cbnz	r3, 8004556 <_free_r+0x2e>
 8004548:	6063      	str	r3, [r4, #4]
 800454a:	6014      	str	r4, [r2, #0]
 800454c:	4628      	mov	r0, r5
 800454e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004552:	f000 b906 	b.w	8004762 <__malloc_unlock>
 8004556:	42a3      	cmp	r3, r4
 8004558:	d90c      	bls.n	8004574 <_free_r+0x4c>
 800455a:	6821      	ldr	r1, [r4, #0]
 800455c:	1862      	adds	r2, r4, r1
 800455e:	4293      	cmp	r3, r2
 8004560:	bf04      	itt	eq
 8004562:	681a      	ldreq	r2, [r3, #0]
 8004564:	685b      	ldreq	r3, [r3, #4]
 8004566:	6063      	str	r3, [r4, #4]
 8004568:	bf04      	itt	eq
 800456a:	1852      	addeq	r2, r2, r1
 800456c:	6022      	streq	r2, [r4, #0]
 800456e:	6004      	str	r4, [r0, #0]
 8004570:	e7ec      	b.n	800454c <_free_r+0x24>
 8004572:	4613      	mov	r3, r2
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	b10a      	cbz	r2, 800457c <_free_r+0x54>
 8004578:	42a2      	cmp	r2, r4
 800457a:	d9fa      	bls.n	8004572 <_free_r+0x4a>
 800457c:	6819      	ldr	r1, [r3, #0]
 800457e:	1858      	adds	r0, r3, r1
 8004580:	42a0      	cmp	r0, r4
 8004582:	d10b      	bne.n	800459c <_free_r+0x74>
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	4401      	add	r1, r0
 8004588:	1858      	adds	r0, r3, r1
 800458a:	4282      	cmp	r2, r0
 800458c:	6019      	str	r1, [r3, #0]
 800458e:	d1dd      	bne.n	800454c <_free_r+0x24>
 8004590:	6810      	ldr	r0, [r2, #0]
 8004592:	6852      	ldr	r2, [r2, #4]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	4401      	add	r1, r0
 8004598:	6019      	str	r1, [r3, #0]
 800459a:	e7d7      	b.n	800454c <_free_r+0x24>
 800459c:	d902      	bls.n	80045a4 <_free_r+0x7c>
 800459e:	230c      	movs	r3, #12
 80045a0:	602b      	str	r3, [r5, #0]
 80045a2:	e7d3      	b.n	800454c <_free_r+0x24>
 80045a4:	6820      	ldr	r0, [r4, #0]
 80045a6:	1821      	adds	r1, r4, r0
 80045a8:	428a      	cmp	r2, r1
 80045aa:	bf04      	itt	eq
 80045ac:	6811      	ldreq	r1, [r2, #0]
 80045ae:	6852      	ldreq	r2, [r2, #4]
 80045b0:	6062      	str	r2, [r4, #4]
 80045b2:	bf04      	itt	eq
 80045b4:	1809      	addeq	r1, r1, r0
 80045b6:	6021      	streq	r1, [r4, #0]
 80045b8:	605c      	str	r4, [r3, #4]
 80045ba:	e7c7      	b.n	800454c <_free_r+0x24>
 80045bc:	bd38      	pop	{r3, r4, r5, pc}
 80045be:	bf00      	nop
 80045c0:	200004b4 	.word	0x200004b4

080045c4 <_malloc_r>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	1ccd      	adds	r5, r1, #3
 80045c8:	f025 0503 	bic.w	r5, r5, #3
 80045cc:	3508      	adds	r5, #8
 80045ce:	2d0c      	cmp	r5, #12
 80045d0:	bf38      	it	cc
 80045d2:	250c      	movcc	r5, #12
 80045d4:	2d00      	cmp	r5, #0
 80045d6:	4606      	mov	r6, r0
 80045d8:	db01      	blt.n	80045de <_malloc_r+0x1a>
 80045da:	42a9      	cmp	r1, r5
 80045dc:	d903      	bls.n	80045e6 <_malloc_r+0x22>
 80045de:	230c      	movs	r3, #12
 80045e0:	6033      	str	r3, [r6, #0]
 80045e2:	2000      	movs	r0, #0
 80045e4:	bd70      	pop	{r4, r5, r6, pc}
 80045e6:	f000 f8bb 	bl	8004760 <__malloc_lock>
 80045ea:	4a21      	ldr	r2, [pc, #132]	; (8004670 <_malloc_r+0xac>)
 80045ec:	6814      	ldr	r4, [r2, #0]
 80045ee:	4621      	mov	r1, r4
 80045f0:	b991      	cbnz	r1, 8004618 <_malloc_r+0x54>
 80045f2:	4c20      	ldr	r4, [pc, #128]	; (8004674 <_malloc_r+0xb0>)
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	b91b      	cbnz	r3, 8004600 <_malloc_r+0x3c>
 80045f8:	4630      	mov	r0, r6
 80045fa:	f000 f83d 	bl	8004678 <_sbrk_r>
 80045fe:	6020      	str	r0, [r4, #0]
 8004600:	4629      	mov	r1, r5
 8004602:	4630      	mov	r0, r6
 8004604:	f000 f838 	bl	8004678 <_sbrk_r>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d124      	bne.n	8004656 <_malloc_r+0x92>
 800460c:	230c      	movs	r3, #12
 800460e:	6033      	str	r3, [r6, #0]
 8004610:	4630      	mov	r0, r6
 8004612:	f000 f8a6 	bl	8004762 <__malloc_unlock>
 8004616:	e7e4      	b.n	80045e2 <_malloc_r+0x1e>
 8004618:	680b      	ldr	r3, [r1, #0]
 800461a:	1b5b      	subs	r3, r3, r5
 800461c:	d418      	bmi.n	8004650 <_malloc_r+0x8c>
 800461e:	2b0b      	cmp	r3, #11
 8004620:	d90f      	bls.n	8004642 <_malloc_r+0x7e>
 8004622:	600b      	str	r3, [r1, #0]
 8004624:	50cd      	str	r5, [r1, r3]
 8004626:	18cc      	adds	r4, r1, r3
 8004628:	4630      	mov	r0, r6
 800462a:	f000 f89a 	bl	8004762 <__malloc_unlock>
 800462e:	f104 000b 	add.w	r0, r4, #11
 8004632:	1d23      	adds	r3, r4, #4
 8004634:	f020 0007 	bic.w	r0, r0, #7
 8004638:	1ac3      	subs	r3, r0, r3
 800463a:	d0d3      	beq.n	80045e4 <_malloc_r+0x20>
 800463c:	425a      	negs	r2, r3
 800463e:	50e2      	str	r2, [r4, r3]
 8004640:	e7d0      	b.n	80045e4 <_malloc_r+0x20>
 8004642:	428c      	cmp	r4, r1
 8004644:	684b      	ldr	r3, [r1, #4]
 8004646:	bf16      	itet	ne
 8004648:	6063      	strne	r3, [r4, #4]
 800464a:	6013      	streq	r3, [r2, #0]
 800464c:	460c      	movne	r4, r1
 800464e:	e7eb      	b.n	8004628 <_malloc_r+0x64>
 8004650:	460c      	mov	r4, r1
 8004652:	6849      	ldr	r1, [r1, #4]
 8004654:	e7cc      	b.n	80045f0 <_malloc_r+0x2c>
 8004656:	1cc4      	adds	r4, r0, #3
 8004658:	f024 0403 	bic.w	r4, r4, #3
 800465c:	42a0      	cmp	r0, r4
 800465e:	d005      	beq.n	800466c <_malloc_r+0xa8>
 8004660:	1a21      	subs	r1, r4, r0
 8004662:	4630      	mov	r0, r6
 8004664:	f000 f808 	bl	8004678 <_sbrk_r>
 8004668:	3001      	adds	r0, #1
 800466a:	d0cf      	beq.n	800460c <_malloc_r+0x48>
 800466c:	6025      	str	r5, [r4, #0]
 800466e:	e7db      	b.n	8004628 <_malloc_r+0x64>
 8004670:	200004b4 	.word	0x200004b4
 8004674:	200004b8 	.word	0x200004b8

08004678 <_sbrk_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4c06      	ldr	r4, [pc, #24]	; (8004694 <_sbrk_r+0x1c>)
 800467c:	2300      	movs	r3, #0
 800467e:	4605      	mov	r5, r0
 8004680:	4608      	mov	r0, r1
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	f7fc fafc 	bl	8000c80 <_sbrk>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_sbrk_r+0x1a>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	b103      	cbz	r3, 8004692 <_sbrk_r+0x1a>
 8004690:	602b      	str	r3, [r5, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	20000604 	.word	0x20000604

08004698 <_raise_r>:
 8004698:	291f      	cmp	r1, #31
 800469a:	b538      	push	{r3, r4, r5, lr}
 800469c:	4604      	mov	r4, r0
 800469e:	460d      	mov	r5, r1
 80046a0:	d904      	bls.n	80046ac <_raise_r+0x14>
 80046a2:	2316      	movs	r3, #22
 80046a4:	6003      	str	r3, [r0, #0]
 80046a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80046ae:	b112      	cbz	r2, 80046b6 <_raise_r+0x1e>
 80046b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80046b4:	b94b      	cbnz	r3, 80046ca <_raise_r+0x32>
 80046b6:	4620      	mov	r0, r4
 80046b8:	f000 f830 	bl	800471c <_getpid_r>
 80046bc:	462a      	mov	r2, r5
 80046be:	4601      	mov	r1, r0
 80046c0:	4620      	mov	r0, r4
 80046c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c6:	f000 b817 	b.w	80046f8 <_kill_r>
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d00a      	beq.n	80046e4 <_raise_r+0x4c>
 80046ce:	1c59      	adds	r1, r3, #1
 80046d0:	d103      	bne.n	80046da <_raise_r+0x42>
 80046d2:	2316      	movs	r3, #22
 80046d4:	6003      	str	r3, [r0, #0]
 80046d6:	2001      	movs	r0, #1
 80046d8:	e7e7      	b.n	80046aa <_raise_r+0x12>
 80046da:	2400      	movs	r4, #0
 80046dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80046e0:	4628      	mov	r0, r5
 80046e2:	4798      	blx	r3
 80046e4:	2000      	movs	r0, #0
 80046e6:	e7e0      	b.n	80046aa <_raise_r+0x12>

080046e8 <raise>:
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <raise+0xc>)
 80046ea:	4601      	mov	r1, r0
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	f7ff bfd3 	b.w	8004698 <_raise_r>
 80046f2:	bf00      	nop
 80046f4:	2000000c 	.word	0x2000000c

080046f8 <_kill_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4c07      	ldr	r4, [pc, #28]	; (8004718 <_kill_r+0x20>)
 80046fc:	2300      	movs	r3, #0
 80046fe:	4605      	mov	r5, r0
 8004700:	4608      	mov	r0, r1
 8004702:	4611      	mov	r1, r2
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	f7fc faa1 	bl	8000c4c <_kill>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	d102      	bne.n	8004714 <_kill_r+0x1c>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	b103      	cbz	r3, 8004714 <_kill_r+0x1c>
 8004712:	602b      	str	r3, [r5, #0]
 8004714:	bd38      	pop	{r3, r4, r5, pc}
 8004716:	bf00      	nop
 8004718:	20000604 	.word	0x20000604

0800471c <_getpid_r>:
 800471c:	f7fc ba8e 	b.w	8000c3c <_getpid>

08004720 <siprintf>:
 8004720:	b40e      	push	{r1, r2, r3}
 8004722:	b500      	push	{lr}
 8004724:	b09c      	sub	sp, #112	; 0x70
 8004726:	ab1d      	add	r3, sp, #116	; 0x74
 8004728:	9002      	str	r0, [sp, #8]
 800472a:	9006      	str	r0, [sp, #24]
 800472c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004730:	4809      	ldr	r0, [pc, #36]	; (8004758 <siprintf+0x38>)
 8004732:	9107      	str	r1, [sp, #28]
 8004734:	9104      	str	r1, [sp, #16]
 8004736:	4909      	ldr	r1, [pc, #36]	; (800475c <siprintf+0x3c>)
 8004738:	f853 2b04 	ldr.w	r2, [r3], #4
 800473c:	9105      	str	r1, [sp, #20]
 800473e:	6800      	ldr	r0, [r0, #0]
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	a902      	add	r1, sp, #8
 8004744:	f000 f868 	bl	8004818 <_svfiprintf_r>
 8004748:	9b02      	ldr	r3, [sp, #8]
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	b01c      	add	sp, #112	; 0x70
 8004750:	f85d eb04 	ldr.w	lr, [sp], #4
 8004754:	b003      	add	sp, #12
 8004756:	4770      	bx	lr
 8004758:	2000000c 	.word	0x2000000c
 800475c:	ffff0208 	.word	0xffff0208

08004760 <__malloc_lock>:
 8004760:	4770      	bx	lr

08004762 <__malloc_unlock>:
 8004762:	4770      	bx	lr

08004764 <__ssputs_r>:
 8004764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004768:	688e      	ldr	r6, [r1, #8]
 800476a:	429e      	cmp	r6, r3
 800476c:	4682      	mov	sl, r0
 800476e:	460c      	mov	r4, r1
 8004770:	4690      	mov	r8, r2
 8004772:	4699      	mov	r9, r3
 8004774:	d837      	bhi.n	80047e6 <__ssputs_r+0x82>
 8004776:	898a      	ldrh	r2, [r1, #12]
 8004778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800477c:	d031      	beq.n	80047e2 <__ssputs_r+0x7e>
 800477e:	6825      	ldr	r5, [r4, #0]
 8004780:	6909      	ldr	r1, [r1, #16]
 8004782:	1a6f      	subs	r7, r5, r1
 8004784:	6965      	ldr	r5, [r4, #20]
 8004786:	2302      	movs	r3, #2
 8004788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800478c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004790:	f109 0301 	add.w	r3, r9, #1
 8004794:	443b      	add	r3, r7
 8004796:	429d      	cmp	r5, r3
 8004798:	bf38      	it	cc
 800479a:	461d      	movcc	r5, r3
 800479c:	0553      	lsls	r3, r2, #21
 800479e:	d530      	bpl.n	8004802 <__ssputs_r+0x9e>
 80047a0:	4629      	mov	r1, r5
 80047a2:	f7ff ff0f 	bl	80045c4 <_malloc_r>
 80047a6:	4606      	mov	r6, r0
 80047a8:	b950      	cbnz	r0, 80047c0 <__ssputs_r+0x5c>
 80047aa:	230c      	movs	r3, #12
 80047ac:	f8ca 3000 	str.w	r3, [sl]
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b6:	81a3      	strh	r3, [r4, #12]
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c0:	463a      	mov	r2, r7
 80047c2:	6921      	ldr	r1, [r4, #16]
 80047c4:	f000 faa8 	bl	8004d18 <memcpy>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d2:	81a3      	strh	r3, [r4, #12]
 80047d4:	6126      	str	r6, [r4, #16]
 80047d6:	6165      	str	r5, [r4, #20]
 80047d8:	443e      	add	r6, r7
 80047da:	1bed      	subs	r5, r5, r7
 80047dc:	6026      	str	r6, [r4, #0]
 80047de:	60a5      	str	r5, [r4, #8]
 80047e0:	464e      	mov	r6, r9
 80047e2:	454e      	cmp	r6, r9
 80047e4:	d900      	bls.n	80047e8 <__ssputs_r+0x84>
 80047e6:	464e      	mov	r6, r9
 80047e8:	4632      	mov	r2, r6
 80047ea:	4641      	mov	r1, r8
 80047ec:	6820      	ldr	r0, [r4, #0]
 80047ee:	f000 fa9e 	bl	8004d2e <memmove>
 80047f2:	68a3      	ldr	r3, [r4, #8]
 80047f4:	1b9b      	subs	r3, r3, r6
 80047f6:	60a3      	str	r3, [r4, #8]
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	441e      	add	r6, r3
 80047fc:	6026      	str	r6, [r4, #0]
 80047fe:	2000      	movs	r0, #0
 8004800:	e7dc      	b.n	80047bc <__ssputs_r+0x58>
 8004802:	462a      	mov	r2, r5
 8004804:	f000 faac 	bl	8004d60 <_realloc_r>
 8004808:	4606      	mov	r6, r0
 800480a:	2800      	cmp	r0, #0
 800480c:	d1e2      	bne.n	80047d4 <__ssputs_r+0x70>
 800480e:	6921      	ldr	r1, [r4, #16]
 8004810:	4650      	mov	r0, sl
 8004812:	f7ff fe89 	bl	8004528 <_free_r>
 8004816:	e7c8      	b.n	80047aa <__ssputs_r+0x46>

08004818 <_svfiprintf_r>:
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	461d      	mov	r5, r3
 800481e:	898b      	ldrh	r3, [r1, #12]
 8004820:	061f      	lsls	r7, r3, #24
 8004822:	b09d      	sub	sp, #116	; 0x74
 8004824:	4680      	mov	r8, r0
 8004826:	460c      	mov	r4, r1
 8004828:	4616      	mov	r6, r2
 800482a:	d50f      	bpl.n	800484c <_svfiprintf_r+0x34>
 800482c:	690b      	ldr	r3, [r1, #16]
 800482e:	b96b      	cbnz	r3, 800484c <_svfiprintf_r+0x34>
 8004830:	2140      	movs	r1, #64	; 0x40
 8004832:	f7ff fec7 	bl	80045c4 <_malloc_r>
 8004836:	6020      	str	r0, [r4, #0]
 8004838:	6120      	str	r0, [r4, #16]
 800483a:	b928      	cbnz	r0, 8004848 <_svfiprintf_r+0x30>
 800483c:	230c      	movs	r3, #12
 800483e:	f8c8 3000 	str.w	r3, [r8]
 8004842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004846:	e0c8      	b.n	80049da <_svfiprintf_r+0x1c2>
 8004848:	2340      	movs	r3, #64	; 0x40
 800484a:	6163      	str	r3, [r4, #20]
 800484c:	2300      	movs	r3, #0
 800484e:	9309      	str	r3, [sp, #36]	; 0x24
 8004850:	2320      	movs	r3, #32
 8004852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004856:	2330      	movs	r3, #48	; 0x30
 8004858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800485c:	9503      	str	r5, [sp, #12]
 800485e:	f04f 0b01 	mov.w	fp, #1
 8004862:	4637      	mov	r7, r6
 8004864:	463d      	mov	r5, r7
 8004866:	f815 3b01 	ldrb.w	r3, [r5], #1
 800486a:	b10b      	cbz	r3, 8004870 <_svfiprintf_r+0x58>
 800486c:	2b25      	cmp	r3, #37	; 0x25
 800486e:	d13e      	bne.n	80048ee <_svfiprintf_r+0xd6>
 8004870:	ebb7 0a06 	subs.w	sl, r7, r6
 8004874:	d00b      	beq.n	800488e <_svfiprintf_r+0x76>
 8004876:	4653      	mov	r3, sl
 8004878:	4632      	mov	r2, r6
 800487a:	4621      	mov	r1, r4
 800487c:	4640      	mov	r0, r8
 800487e:	f7ff ff71 	bl	8004764 <__ssputs_r>
 8004882:	3001      	adds	r0, #1
 8004884:	f000 80a4 	beq.w	80049d0 <_svfiprintf_r+0x1b8>
 8004888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800488a:	4453      	add	r3, sl
 800488c:	9309      	str	r3, [sp, #36]	; 0x24
 800488e:	783b      	ldrb	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 809d 	beq.w	80049d0 <_svfiprintf_r+0x1b8>
 8004896:	2300      	movs	r3, #0
 8004898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800489c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048a0:	9304      	str	r3, [sp, #16]
 80048a2:	9307      	str	r3, [sp, #28]
 80048a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048a8:	931a      	str	r3, [sp, #104]	; 0x68
 80048aa:	462f      	mov	r7, r5
 80048ac:	2205      	movs	r2, #5
 80048ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80048b2:	4850      	ldr	r0, [pc, #320]	; (80049f4 <_svfiprintf_r+0x1dc>)
 80048b4:	f7fb fc9c 	bl	80001f0 <memchr>
 80048b8:	9b04      	ldr	r3, [sp, #16]
 80048ba:	b9d0      	cbnz	r0, 80048f2 <_svfiprintf_r+0xda>
 80048bc:	06d9      	lsls	r1, r3, #27
 80048be:	bf44      	itt	mi
 80048c0:	2220      	movmi	r2, #32
 80048c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048c6:	071a      	lsls	r2, r3, #28
 80048c8:	bf44      	itt	mi
 80048ca:	222b      	movmi	r2, #43	; 0x2b
 80048cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048d0:	782a      	ldrb	r2, [r5, #0]
 80048d2:	2a2a      	cmp	r2, #42	; 0x2a
 80048d4:	d015      	beq.n	8004902 <_svfiprintf_r+0xea>
 80048d6:	9a07      	ldr	r2, [sp, #28]
 80048d8:	462f      	mov	r7, r5
 80048da:	2000      	movs	r0, #0
 80048dc:	250a      	movs	r5, #10
 80048de:	4639      	mov	r1, r7
 80048e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048e4:	3b30      	subs	r3, #48	; 0x30
 80048e6:	2b09      	cmp	r3, #9
 80048e8:	d94d      	bls.n	8004986 <_svfiprintf_r+0x16e>
 80048ea:	b1b8      	cbz	r0, 800491c <_svfiprintf_r+0x104>
 80048ec:	e00f      	b.n	800490e <_svfiprintf_r+0xf6>
 80048ee:	462f      	mov	r7, r5
 80048f0:	e7b8      	b.n	8004864 <_svfiprintf_r+0x4c>
 80048f2:	4a40      	ldr	r2, [pc, #256]	; (80049f4 <_svfiprintf_r+0x1dc>)
 80048f4:	1a80      	subs	r0, r0, r2
 80048f6:	fa0b f000 	lsl.w	r0, fp, r0
 80048fa:	4318      	orrs	r0, r3
 80048fc:	9004      	str	r0, [sp, #16]
 80048fe:	463d      	mov	r5, r7
 8004900:	e7d3      	b.n	80048aa <_svfiprintf_r+0x92>
 8004902:	9a03      	ldr	r2, [sp, #12]
 8004904:	1d11      	adds	r1, r2, #4
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	9103      	str	r1, [sp, #12]
 800490a:	2a00      	cmp	r2, #0
 800490c:	db01      	blt.n	8004912 <_svfiprintf_r+0xfa>
 800490e:	9207      	str	r2, [sp, #28]
 8004910:	e004      	b.n	800491c <_svfiprintf_r+0x104>
 8004912:	4252      	negs	r2, r2
 8004914:	f043 0302 	orr.w	r3, r3, #2
 8004918:	9207      	str	r2, [sp, #28]
 800491a:	9304      	str	r3, [sp, #16]
 800491c:	783b      	ldrb	r3, [r7, #0]
 800491e:	2b2e      	cmp	r3, #46	; 0x2e
 8004920:	d10c      	bne.n	800493c <_svfiprintf_r+0x124>
 8004922:	787b      	ldrb	r3, [r7, #1]
 8004924:	2b2a      	cmp	r3, #42	; 0x2a
 8004926:	d133      	bne.n	8004990 <_svfiprintf_r+0x178>
 8004928:	9b03      	ldr	r3, [sp, #12]
 800492a:	1d1a      	adds	r2, r3, #4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	9203      	str	r2, [sp, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	bfb8      	it	lt
 8004934:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004938:	3702      	adds	r7, #2
 800493a:	9305      	str	r3, [sp, #20]
 800493c:	4d2e      	ldr	r5, [pc, #184]	; (80049f8 <_svfiprintf_r+0x1e0>)
 800493e:	7839      	ldrb	r1, [r7, #0]
 8004940:	2203      	movs	r2, #3
 8004942:	4628      	mov	r0, r5
 8004944:	f7fb fc54 	bl	80001f0 <memchr>
 8004948:	b138      	cbz	r0, 800495a <_svfiprintf_r+0x142>
 800494a:	2340      	movs	r3, #64	; 0x40
 800494c:	1b40      	subs	r0, r0, r5
 800494e:	fa03 f000 	lsl.w	r0, r3, r0
 8004952:	9b04      	ldr	r3, [sp, #16]
 8004954:	4303      	orrs	r3, r0
 8004956:	3701      	adds	r7, #1
 8004958:	9304      	str	r3, [sp, #16]
 800495a:	7839      	ldrb	r1, [r7, #0]
 800495c:	4827      	ldr	r0, [pc, #156]	; (80049fc <_svfiprintf_r+0x1e4>)
 800495e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004962:	2206      	movs	r2, #6
 8004964:	1c7e      	adds	r6, r7, #1
 8004966:	f7fb fc43 	bl	80001f0 <memchr>
 800496a:	2800      	cmp	r0, #0
 800496c:	d038      	beq.n	80049e0 <_svfiprintf_r+0x1c8>
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <_svfiprintf_r+0x1e8>)
 8004970:	bb13      	cbnz	r3, 80049b8 <_svfiprintf_r+0x1a0>
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	3307      	adds	r3, #7
 8004976:	f023 0307 	bic.w	r3, r3, #7
 800497a:	3308      	adds	r3, #8
 800497c:	9303      	str	r3, [sp, #12]
 800497e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004980:	444b      	add	r3, r9
 8004982:	9309      	str	r3, [sp, #36]	; 0x24
 8004984:	e76d      	b.n	8004862 <_svfiprintf_r+0x4a>
 8004986:	fb05 3202 	mla	r2, r5, r2, r3
 800498a:	2001      	movs	r0, #1
 800498c:	460f      	mov	r7, r1
 800498e:	e7a6      	b.n	80048de <_svfiprintf_r+0xc6>
 8004990:	2300      	movs	r3, #0
 8004992:	3701      	adds	r7, #1
 8004994:	9305      	str	r3, [sp, #20]
 8004996:	4619      	mov	r1, r3
 8004998:	250a      	movs	r5, #10
 800499a:	4638      	mov	r0, r7
 800499c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049a0:	3a30      	subs	r2, #48	; 0x30
 80049a2:	2a09      	cmp	r2, #9
 80049a4:	d903      	bls.n	80049ae <_svfiprintf_r+0x196>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0c8      	beq.n	800493c <_svfiprintf_r+0x124>
 80049aa:	9105      	str	r1, [sp, #20]
 80049ac:	e7c6      	b.n	800493c <_svfiprintf_r+0x124>
 80049ae:	fb05 2101 	mla	r1, r5, r1, r2
 80049b2:	2301      	movs	r3, #1
 80049b4:	4607      	mov	r7, r0
 80049b6:	e7f0      	b.n	800499a <_svfiprintf_r+0x182>
 80049b8:	ab03      	add	r3, sp, #12
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	4622      	mov	r2, r4
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <_svfiprintf_r+0x1ec>)
 80049c0:	a904      	add	r1, sp, #16
 80049c2:	4640      	mov	r0, r8
 80049c4:	f3af 8000 	nop.w
 80049c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80049cc:	4681      	mov	r9, r0
 80049ce:	d1d6      	bne.n	800497e <_svfiprintf_r+0x166>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	065b      	lsls	r3, r3, #25
 80049d4:	f53f af35 	bmi.w	8004842 <_svfiprintf_r+0x2a>
 80049d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049da:	b01d      	add	sp, #116	; 0x74
 80049dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e0:	ab03      	add	r3, sp, #12
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	4622      	mov	r2, r4
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <_svfiprintf_r+0x1ec>)
 80049e8:	a904      	add	r1, sp, #16
 80049ea:	4640      	mov	r0, r8
 80049ec:	f000 f882 	bl	8004af4 <_printf_i>
 80049f0:	e7ea      	b.n	80049c8 <_svfiprintf_r+0x1b0>
 80049f2:	bf00      	nop
 80049f4:	08004e83 	.word	0x08004e83
 80049f8:	08004e89 	.word	0x08004e89
 80049fc:	08004e8d 	.word	0x08004e8d
 8004a00:	00000000 	.word	0x00000000
 8004a04:	08004765 	.word	0x08004765

08004a08 <_printf_common>:
 8004a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	4691      	mov	r9, r2
 8004a0e:	461f      	mov	r7, r3
 8004a10:	688a      	ldr	r2, [r1, #8]
 8004a12:	690b      	ldr	r3, [r1, #16]
 8004a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	bfb8      	it	lt
 8004a1c:	4613      	movlt	r3, r2
 8004a1e:	f8c9 3000 	str.w	r3, [r9]
 8004a22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a26:	4606      	mov	r6, r0
 8004a28:	460c      	mov	r4, r1
 8004a2a:	b112      	cbz	r2, 8004a32 <_printf_common+0x2a>
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f8c9 3000 	str.w	r3, [r9]
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	0699      	lsls	r1, r3, #26
 8004a36:	bf42      	ittt	mi
 8004a38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a3c:	3302      	addmi	r3, #2
 8004a3e:	f8c9 3000 	strmi.w	r3, [r9]
 8004a42:	6825      	ldr	r5, [r4, #0]
 8004a44:	f015 0506 	ands.w	r5, r5, #6
 8004a48:	d107      	bne.n	8004a5a <_printf_common+0x52>
 8004a4a:	f104 0a19 	add.w	sl, r4, #25
 8004a4e:	68e3      	ldr	r3, [r4, #12]
 8004a50:	f8d9 2000 	ldr.w	r2, [r9]
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	42ab      	cmp	r3, r5
 8004a58:	dc28      	bgt.n	8004aac <_printf_common+0xa4>
 8004a5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	3300      	adds	r3, #0
 8004a62:	bf18      	it	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	0692      	lsls	r2, r2, #26
 8004a68:	d42d      	bmi.n	8004ac6 <_printf_common+0xbe>
 8004a6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a6e:	4639      	mov	r1, r7
 8004a70:	4630      	mov	r0, r6
 8004a72:	47c0      	blx	r8
 8004a74:	3001      	adds	r0, #1
 8004a76:	d020      	beq.n	8004aba <_printf_common+0xb2>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	68e5      	ldr	r5, [r4, #12]
 8004a7c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a80:	f003 0306 	and.w	r3, r3, #6
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	bf08      	it	eq
 8004a88:	1aad      	subeq	r5, r5, r2
 8004a8a:	68a3      	ldr	r3, [r4, #8]
 8004a8c:	6922      	ldr	r2, [r4, #16]
 8004a8e:	bf0c      	ite	eq
 8004a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a94:	2500      	movne	r5, #0
 8004a96:	4293      	cmp	r3, r2
 8004a98:	bfc4      	itt	gt
 8004a9a:	1a9b      	subgt	r3, r3, r2
 8004a9c:	18ed      	addgt	r5, r5, r3
 8004a9e:	f04f 0900 	mov.w	r9, #0
 8004aa2:	341a      	adds	r4, #26
 8004aa4:	454d      	cmp	r5, r9
 8004aa6:	d11a      	bne.n	8004ade <_printf_common+0xd6>
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	e008      	b.n	8004abe <_printf_common+0xb6>
 8004aac:	2301      	movs	r3, #1
 8004aae:	4652      	mov	r2, sl
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	47c0      	blx	r8
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d103      	bne.n	8004ac2 <_printf_common+0xba>
 8004aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac2:	3501      	adds	r5, #1
 8004ac4:	e7c3      	b.n	8004a4e <_printf_common+0x46>
 8004ac6:	18e1      	adds	r1, r4, r3
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	2030      	movs	r0, #48	; 0x30
 8004acc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ad0:	4422      	add	r2, r4
 8004ad2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ad6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ada:	3302      	adds	r3, #2
 8004adc:	e7c5      	b.n	8004a6a <_printf_common+0x62>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	47c0      	blx	r8
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d0e6      	beq.n	8004aba <_printf_common+0xb2>
 8004aec:	f109 0901 	add.w	r9, r9, #1
 8004af0:	e7d8      	b.n	8004aa4 <_printf_common+0x9c>
	...

08004af4 <_printf_i>:
 8004af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004af8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004afc:	460c      	mov	r4, r1
 8004afe:	7e09      	ldrb	r1, [r1, #24]
 8004b00:	b085      	sub	sp, #20
 8004b02:	296e      	cmp	r1, #110	; 0x6e
 8004b04:	4617      	mov	r7, r2
 8004b06:	4606      	mov	r6, r0
 8004b08:	4698      	mov	r8, r3
 8004b0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b0c:	f000 80b3 	beq.w	8004c76 <_printf_i+0x182>
 8004b10:	d822      	bhi.n	8004b58 <_printf_i+0x64>
 8004b12:	2963      	cmp	r1, #99	; 0x63
 8004b14:	d036      	beq.n	8004b84 <_printf_i+0x90>
 8004b16:	d80a      	bhi.n	8004b2e <_printf_i+0x3a>
 8004b18:	2900      	cmp	r1, #0
 8004b1a:	f000 80b9 	beq.w	8004c90 <_printf_i+0x19c>
 8004b1e:	2958      	cmp	r1, #88	; 0x58
 8004b20:	f000 8083 	beq.w	8004c2a <_printf_i+0x136>
 8004b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b2c:	e032      	b.n	8004b94 <_printf_i+0xa0>
 8004b2e:	2964      	cmp	r1, #100	; 0x64
 8004b30:	d001      	beq.n	8004b36 <_printf_i+0x42>
 8004b32:	2969      	cmp	r1, #105	; 0x69
 8004b34:	d1f6      	bne.n	8004b24 <_printf_i+0x30>
 8004b36:	6820      	ldr	r0, [r4, #0]
 8004b38:	6813      	ldr	r3, [r2, #0]
 8004b3a:	0605      	lsls	r5, r0, #24
 8004b3c:	f103 0104 	add.w	r1, r3, #4
 8004b40:	d52a      	bpl.n	8004b98 <_printf_i+0xa4>
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6011      	str	r1, [r2, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da03      	bge.n	8004b52 <_printf_i+0x5e>
 8004b4a:	222d      	movs	r2, #45	; 0x2d
 8004b4c:	425b      	negs	r3, r3
 8004b4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b52:	486f      	ldr	r0, [pc, #444]	; (8004d10 <_printf_i+0x21c>)
 8004b54:	220a      	movs	r2, #10
 8004b56:	e039      	b.n	8004bcc <_printf_i+0xd8>
 8004b58:	2973      	cmp	r1, #115	; 0x73
 8004b5a:	f000 809d 	beq.w	8004c98 <_printf_i+0x1a4>
 8004b5e:	d808      	bhi.n	8004b72 <_printf_i+0x7e>
 8004b60:	296f      	cmp	r1, #111	; 0x6f
 8004b62:	d020      	beq.n	8004ba6 <_printf_i+0xb2>
 8004b64:	2970      	cmp	r1, #112	; 0x70
 8004b66:	d1dd      	bne.n	8004b24 <_printf_i+0x30>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	f043 0320 	orr.w	r3, r3, #32
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	e003      	b.n	8004b7a <_printf_i+0x86>
 8004b72:	2975      	cmp	r1, #117	; 0x75
 8004b74:	d017      	beq.n	8004ba6 <_printf_i+0xb2>
 8004b76:	2978      	cmp	r1, #120	; 0x78
 8004b78:	d1d4      	bne.n	8004b24 <_printf_i+0x30>
 8004b7a:	2378      	movs	r3, #120	; 0x78
 8004b7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b80:	4864      	ldr	r0, [pc, #400]	; (8004d14 <_printf_i+0x220>)
 8004b82:	e055      	b.n	8004c30 <_printf_i+0x13c>
 8004b84:	6813      	ldr	r3, [r2, #0]
 8004b86:	1d19      	adds	r1, r3, #4
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6011      	str	r1, [r2, #0]
 8004b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b94:	2301      	movs	r3, #1
 8004b96:	e08c      	b.n	8004cb2 <_printf_i+0x1be>
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6011      	str	r1, [r2, #0]
 8004b9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ba0:	bf18      	it	ne
 8004ba2:	b21b      	sxthne	r3, r3
 8004ba4:	e7cf      	b.n	8004b46 <_printf_i+0x52>
 8004ba6:	6813      	ldr	r3, [r2, #0]
 8004ba8:	6825      	ldr	r5, [r4, #0]
 8004baa:	1d18      	adds	r0, r3, #4
 8004bac:	6010      	str	r0, [r2, #0]
 8004bae:	0628      	lsls	r0, r5, #24
 8004bb0:	d501      	bpl.n	8004bb6 <_printf_i+0xc2>
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	e002      	b.n	8004bbc <_printf_i+0xc8>
 8004bb6:	0668      	lsls	r0, r5, #25
 8004bb8:	d5fb      	bpl.n	8004bb2 <_printf_i+0xbe>
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	4854      	ldr	r0, [pc, #336]	; (8004d10 <_printf_i+0x21c>)
 8004bbe:	296f      	cmp	r1, #111	; 0x6f
 8004bc0:	bf14      	ite	ne
 8004bc2:	220a      	movne	r2, #10
 8004bc4:	2208      	moveq	r2, #8
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bcc:	6865      	ldr	r5, [r4, #4]
 8004bce:	60a5      	str	r5, [r4, #8]
 8004bd0:	2d00      	cmp	r5, #0
 8004bd2:	f2c0 8095 	blt.w	8004d00 <_printf_i+0x20c>
 8004bd6:	6821      	ldr	r1, [r4, #0]
 8004bd8:	f021 0104 	bic.w	r1, r1, #4
 8004bdc:	6021      	str	r1, [r4, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d13d      	bne.n	8004c5e <_printf_i+0x16a>
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	f040 808e 	bne.w	8004d04 <_printf_i+0x210>
 8004be8:	4665      	mov	r5, ip
 8004bea:	2a08      	cmp	r2, #8
 8004bec:	d10b      	bne.n	8004c06 <_printf_i+0x112>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	07db      	lsls	r3, r3, #31
 8004bf2:	d508      	bpl.n	8004c06 <_printf_i+0x112>
 8004bf4:	6923      	ldr	r3, [r4, #16]
 8004bf6:	6862      	ldr	r2, [r4, #4]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	bfde      	ittt	le
 8004bfc:	2330      	movle	r3, #48	; 0x30
 8004bfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c02:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c06:	ebac 0305 	sub.w	r3, ip, r5
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	f8cd 8000 	str.w	r8, [sp]
 8004c10:	463b      	mov	r3, r7
 8004c12:	aa03      	add	r2, sp, #12
 8004c14:	4621      	mov	r1, r4
 8004c16:	4630      	mov	r0, r6
 8004c18:	f7ff fef6 	bl	8004a08 <_printf_common>
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d14d      	bne.n	8004cbc <_printf_i+0x1c8>
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c24:	b005      	add	sp, #20
 8004c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c2a:	4839      	ldr	r0, [pc, #228]	; (8004d10 <_printf_i+0x21c>)
 8004c2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c30:	6813      	ldr	r3, [r2, #0]
 8004c32:	6821      	ldr	r1, [r4, #0]
 8004c34:	1d1d      	adds	r5, r3, #4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6015      	str	r5, [r2, #0]
 8004c3a:	060a      	lsls	r2, r1, #24
 8004c3c:	d50b      	bpl.n	8004c56 <_printf_i+0x162>
 8004c3e:	07ca      	lsls	r2, r1, #31
 8004c40:	bf44      	itt	mi
 8004c42:	f041 0120 	orrmi.w	r1, r1, #32
 8004c46:	6021      	strmi	r1, [r4, #0]
 8004c48:	b91b      	cbnz	r3, 8004c52 <_printf_i+0x15e>
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	f022 0220 	bic.w	r2, r2, #32
 8004c50:	6022      	str	r2, [r4, #0]
 8004c52:	2210      	movs	r2, #16
 8004c54:	e7b7      	b.n	8004bc6 <_printf_i+0xd2>
 8004c56:	064d      	lsls	r5, r1, #25
 8004c58:	bf48      	it	mi
 8004c5a:	b29b      	uxthmi	r3, r3
 8004c5c:	e7ef      	b.n	8004c3e <_printf_i+0x14a>
 8004c5e:	4665      	mov	r5, ip
 8004c60:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c64:	fb02 3311 	mls	r3, r2, r1, r3
 8004c68:	5cc3      	ldrb	r3, [r0, r3]
 8004c6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c6e:	460b      	mov	r3, r1
 8004c70:	2900      	cmp	r1, #0
 8004c72:	d1f5      	bne.n	8004c60 <_printf_i+0x16c>
 8004c74:	e7b9      	b.n	8004bea <_printf_i+0xf6>
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	6825      	ldr	r5, [r4, #0]
 8004c7a:	6961      	ldr	r1, [r4, #20]
 8004c7c:	1d18      	adds	r0, r3, #4
 8004c7e:	6010      	str	r0, [r2, #0]
 8004c80:	0628      	lsls	r0, r5, #24
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	d501      	bpl.n	8004c8a <_printf_i+0x196>
 8004c86:	6019      	str	r1, [r3, #0]
 8004c88:	e002      	b.n	8004c90 <_printf_i+0x19c>
 8004c8a:	066a      	lsls	r2, r5, #25
 8004c8c:	d5fb      	bpl.n	8004c86 <_printf_i+0x192>
 8004c8e:	8019      	strh	r1, [r3, #0]
 8004c90:	2300      	movs	r3, #0
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	4665      	mov	r5, ip
 8004c96:	e7b9      	b.n	8004c0c <_printf_i+0x118>
 8004c98:	6813      	ldr	r3, [r2, #0]
 8004c9a:	1d19      	adds	r1, r3, #4
 8004c9c:	6011      	str	r1, [r2, #0]
 8004c9e:	681d      	ldr	r5, [r3, #0]
 8004ca0:	6862      	ldr	r2, [r4, #4]
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f7fb faa3 	bl	80001f0 <memchr>
 8004caa:	b108      	cbz	r0, 8004cb0 <_printf_i+0x1bc>
 8004cac:	1b40      	subs	r0, r0, r5
 8004cae:	6060      	str	r0, [r4, #4]
 8004cb0:	6863      	ldr	r3, [r4, #4]
 8004cb2:	6123      	str	r3, [r4, #16]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cba:	e7a7      	b.n	8004c0c <_printf_i+0x118>
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	462a      	mov	r2, r5
 8004cc0:	4639      	mov	r1, r7
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	47c0      	blx	r8
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d0aa      	beq.n	8004c20 <_printf_i+0x12c>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	079b      	lsls	r3, r3, #30
 8004cce:	d413      	bmi.n	8004cf8 <_printf_i+0x204>
 8004cd0:	68e0      	ldr	r0, [r4, #12]
 8004cd2:	9b03      	ldr	r3, [sp, #12]
 8004cd4:	4298      	cmp	r0, r3
 8004cd6:	bfb8      	it	lt
 8004cd8:	4618      	movlt	r0, r3
 8004cda:	e7a3      	b.n	8004c24 <_printf_i+0x130>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	464a      	mov	r2, r9
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d09a      	beq.n	8004c20 <_printf_i+0x12c>
 8004cea:	3501      	adds	r5, #1
 8004cec:	68e3      	ldr	r3, [r4, #12]
 8004cee:	9a03      	ldr	r2, [sp, #12]
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	42ab      	cmp	r3, r5
 8004cf4:	dcf2      	bgt.n	8004cdc <_printf_i+0x1e8>
 8004cf6:	e7eb      	b.n	8004cd0 <_printf_i+0x1dc>
 8004cf8:	2500      	movs	r5, #0
 8004cfa:	f104 0919 	add.w	r9, r4, #25
 8004cfe:	e7f5      	b.n	8004cec <_printf_i+0x1f8>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1ac      	bne.n	8004c5e <_printf_i+0x16a>
 8004d04:	7803      	ldrb	r3, [r0, #0]
 8004d06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d0e:	e76c      	b.n	8004bea <_printf_i+0xf6>
 8004d10:	08004e94 	.word	0x08004e94
 8004d14:	08004ea5 	.word	0x08004ea5

08004d18 <memcpy>:
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	1e43      	subs	r3, r0, #1
 8004d1c:	440a      	add	r2, r1
 8004d1e:	4291      	cmp	r1, r2
 8004d20:	d100      	bne.n	8004d24 <memcpy+0xc>
 8004d22:	bd10      	pop	{r4, pc}
 8004d24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d2c:	e7f7      	b.n	8004d1e <memcpy+0x6>

08004d2e <memmove>:
 8004d2e:	4288      	cmp	r0, r1
 8004d30:	b510      	push	{r4, lr}
 8004d32:	eb01 0302 	add.w	r3, r1, r2
 8004d36:	d807      	bhi.n	8004d48 <memmove+0x1a>
 8004d38:	1e42      	subs	r2, r0, #1
 8004d3a:	4299      	cmp	r1, r3
 8004d3c:	d00a      	beq.n	8004d54 <memmove+0x26>
 8004d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d42:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d46:	e7f8      	b.n	8004d3a <memmove+0xc>
 8004d48:	4283      	cmp	r3, r0
 8004d4a:	d9f5      	bls.n	8004d38 <memmove+0xa>
 8004d4c:	1881      	adds	r1, r0, r2
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	42d3      	cmn	r3, r2
 8004d52:	d100      	bne.n	8004d56 <memmove+0x28>
 8004d54:	bd10      	pop	{r4, pc}
 8004d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d5a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d5e:	e7f7      	b.n	8004d50 <memmove+0x22>

08004d60 <_realloc_r>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	4607      	mov	r7, r0
 8004d64:	4614      	mov	r4, r2
 8004d66:	460e      	mov	r6, r1
 8004d68:	b921      	cbnz	r1, 8004d74 <_realloc_r+0x14>
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d70:	f7ff bc28 	b.w	80045c4 <_malloc_r>
 8004d74:	b922      	cbnz	r2, 8004d80 <_realloc_r+0x20>
 8004d76:	f7ff fbd7 	bl	8004528 <_free_r>
 8004d7a:	4625      	mov	r5, r4
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d80:	f000 f814 	bl	8004dac <_malloc_usable_size_r>
 8004d84:	42a0      	cmp	r0, r4
 8004d86:	d20f      	bcs.n	8004da8 <_realloc_r+0x48>
 8004d88:	4621      	mov	r1, r4
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	f7ff fc1a 	bl	80045c4 <_malloc_r>
 8004d90:	4605      	mov	r5, r0
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d0f2      	beq.n	8004d7c <_realloc_r+0x1c>
 8004d96:	4631      	mov	r1, r6
 8004d98:	4622      	mov	r2, r4
 8004d9a:	f7ff ffbd 	bl	8004d18 <memcpy>
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4638      	mov	r0, r7
 8004da2:	f7ff fbc1 	bl	8004528 <_free_r>
 8004da6:	e7e9      	b.n	8004d7c <_realloc_r+0x1c>
 8004da8:	4635      	mov	r5, r6
 8004daa:	e7e7      	b.n	8004d7c <_realloc_r+0x1c>

08004dac <_malloc_usable_size_r>:
 8004dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db0:	1f18      	subs	r0, r3, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bfbc      	itt	lt
 8004db6:	580b      	ldrlt	r3, [r1, r0]
 8004db8:	18c0      	addlt	r0, r0, r3
 8004dba:	4770      	bx	lr

08004dbc <_init>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr

08004dc8 <_fini>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	bf00      	nop
 8004dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dce:	bc08      	pop	{r3}
 8004dd0:	469e      	mov	lr, r3
 8004dd2:	4770      	bx	lr
